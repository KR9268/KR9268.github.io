<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Blog</title>
<link>https://kr9268.github.io/</link>
<atom:link href="https://kr9268.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.5.56</generator>
<lastBuildDate>Thu, 25 Jul 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>[한빛앤] 데이터 웨어하우스로 효율적인 분석시스템 만들기 세미나 정리</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/hanbitn-datawarehouse-20240725/</link>
  <description><![CDATA[ 





<p>한빛앤 데이터웨어하우스 세미나 내용 정리</p>
<section id="개요" class="level1">
<h1>개요</h1>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/hanbitn-datawarehouse-20240725/index_files/figure-html/225d807a-1-image-2.png" class="img-fluid figure-img"></p>
<figcaption>image-2.png</figcaption>
</figure>
</div>
<ul>
<li>한빛앤 데이터 웨어하우스 세미나 다녀와서 정리</li>
<li>데이터 웨어하우스라는 단어는 많이 들어봤지만 와닿지 않았는데, DW개념이해가 필요한 비전공자 대상이라고 하여 참가함
<ul>
<li>다만 SQLD를 공부하지 않았다면 초중반부터는 이해가 어려웠겠다라는 생각이 들었는데, 어차피 이런 세미나는 관심있는 사람만 들어서 괜찮을 듯 했음</li>
<li>단어 자체만 기억나는 경우가 많아 따라가기 급급했지만, 결론적으로 재밌는 걸 많이 알게되어 좋았음</li>
</ul></li>
<li>강연자이신 강성욱님이 시니어 DB Ops로 소개되었는데, 자주보이던 Ops라는 단어도 간략히 어떤 개념이구나 알게 되었음
<ul>
<li>Ops : Silo현상의 해결을 위해 개발과 운영의 통합</li>
</ul></li>
<li>신청해 둔 다른 스터디에서 spark와 airflow를 다룰 예정이라, 관련 내용을 좀 더 이해하게 되지 않을까 기대됨</li>
<li>차원얘기가 나왔는데, AI관련 스터디에서 차원축소 관련 언급때 나온 희소성이 다시 생각나면서 좀 더 이해가 높아지는 계기가 되었음</li>
<li>이해되는 기준으로 정리했는데, 향후 다시보기를 통해 보완 예정</li>
</ul>
</section>
<section id="강연내용-정리" class="level1">
<h1>강연내용 정리</h1>
<section id="서론" class="level2">
<h2 class="anchored" data-anchor-id="서론">서론</h2>
<ul>
<li>데이터 분석의 8할은 데이터 가공이다</li>
<li>Data-driven을 위해 빅데이터 시스템이 꼭 필요한가?
<ul>
<li>데이터의 <code>품질</code>이 중요함 (많더라도 쓸모가 없으면 의미없음)
<ul>
<li>‘데이터(비즈니스) 목적 정의’ ~ ’정의한 사항에 대한 일치여부 지속확인’까지 필요</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="dwdata-warehouse의-개념과-특징" class="level2">
<h2 class="anchored" data-anchor-id="dwdata-warehouse의-개념과-특징"><code>DW(Data Warehouse)</code>의 개념과 특징</h2>
<ul>
<li><code>DW는 사용자 관점에서 주제 별로 통합해 별도의 장소에 보관한 DB</code>
<ul>
<li>OLTP의 단점을 극복하기 위해 출현
<ul>
<li>OLTP(트랜잭션 단위로 동시에 처리) vs OLAP(다양한 관점에서 데이터를 보게 해줌)</li>
</ul></li>
<li>장점 : 정제 및 검증을 통한 양질의 데이터(의미있는 데이터만 남도록 해줌)</li>
</ul></li>
<li>데이터 구조와 스키마는 빠른 SQL쿼리에 최적화되도록 정의
<ul>
<li><code>schema-on-write</code>. DW구현 이전에 스키마 설계함</li>
<li>신뢰할 수 있는 선별된 데이터를 저장</li>
</ul></li>
</ul>
</section>
<section id="dldata-lake의-개념과-특징" class="level2">
<h2 class="anchored" data-anchor-id="dldata-lake의-개념과-특징"><code>DL(Data Lake)</code>의 개념과 특징</h2>
<ul>
<li><code>DL은 영상 등 (비정형데이터를 포함한) 모든 데이터를 일단 보관</code></li>
<li>DW와 달리 스키마구조가 정의되어있지 않음 (DW는 RDB관점이어서 정의되어있음)
<ul>
<li><code>schema-on-read</code>. 사용자가 필요할 때 스키마를 정의함</li>
<li>선별되거나 선별되지 않은 모든 데이터 저장(비용부담이 될 수 있음)
<ul>
<li>이러한 문제로 DL을 표방한 DW를 사용함</li>
</ul></li>
</ul></li>
<li>데이터를 읽을 때 잘못되면 스키마가 공백으로 나올 수 있고, 사용자는 데이터가 없는 것으로 착각할 수 있다</li>
</ul>
</section>
<section id="dw의-구축" class="level2">
<h2 class="anchored" data-anchor-id="dw의-구축">DW의 구축</h2>
<ul>
<li>사용중인 RDB솔루션 사용가능</li>
<li>디스크 용량은 큰 것이 좋음(속도가 높으면 좋지만 무조건 빠른게 필요하진 않음)</li>
<li>CPU코어가 많은 것이 유리(집계 연산이 많기 때문, 클럭보다 코어 많은게 유리)</li>
<li>메모리는 많을수록 좋음(대량의 데이터를 조회/가공하므로)</li>
</ul>
</section>
<section id="etlextracttransformload-추출변환로드" class="level2">
<h2 class="anchored" data-anchor-id="etlextracttransformload-추출변환로드">ETL(Extract/Transform/Load, 추출/변환/로드)</h2>
<ul>
<li>추출 : 전체/부분 추출</li>
<li>변환 : 필터링, 정렬, 조인, 중복제거, 유효성검사 등 (+스테이징[Staging]환경 업로드)</li>
<li>로드 : 변환된 데이터를 스테이징 영역에서 보강 후 변환</li>
<li>ETL Tool : Airflow(오픈소스), AWS, Azure, InfoSphere, Oracle 등</li>
</ul>
</section>
<section id="초기로딩과-주기적갱신" class="level2">
<h2 class="anchored" data-anchor-id="초기로딩과-주기적갱신">초기로딩과 주기적갱신</h2>
<ul>
<li>초기로딩 : 필요한 데이터의 최초 로딩</li>
<li>주기적갱신 : CDC(Change Data Capture), DML트리거 등 솔루션으로 변경사항이 있을때마다 별도 테이블에 기록하여 로딩 (Insert된 데이터 뿐 아니라 Update된 데이터도 가져와야 함)
<ul>
<li>데이터에 따른 예시
<ul>
<li>날짜컬럼이 있다면, 날짜컬럼이 Update된 경우 가져옴</li>
<li>날짜컬럼이 없다면, Outer join으로 백업데이터와 비교(이 방법은 데이터가 커지면 쉽지 않음)
<ul>
<li>CDC나 DML트리거를 활용하는 방안으로 적용</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="스타-스키마" class="level2">
<h2 class="anchored" data-anchor-id="스타-스키마">스타 스키마</h2>
<ul>
<li>다차원의 데이터를 효과적으로 저장</li>
<li><code>하나의 팩트 테이블 + 다수의 디멘젼 테이블</code>로 구성
<ul>
<li>팩트(사실) : 분석하고자 하는 대상</li>
<li>디멘젼(차원, Dim) : 팩트를 보는 관섬</li>
</ul></li>
<li>하나의 모델에는 하나의 팩트테이블이 존재</li>
</ul>
</section>
<section id="스노우플레이크-스키마" class="level2">
<h2 class="anchored" data-anchor-id="스노우플레이크-스키마">스노우플레이크 스키마</h2>
<ul>
<li><code>스타스키마의 팩트테이블 구조</code>를 동일하게 유지하며, 차원테이블은 정규화한 구조</li>
<li>팩트테이블과 조인되는 디멘젼테이블이 있으며, <code>디멘젼테이블은 또 다른 테이블의 키</code>를 가짐</li>
</ul>
</section>
<section id="dmdata-mart" class="level2">
<h2 class="anchored" data-anchor-id="dmdata-mart">DM(Data Mart)</h2>
<ul>
<li>DW가 1차적인 가공이 되어있다면, <code>DM은 목적에 맞게 재집계</code>되어있음
<ul>
<li>CEO가 원하는 월별 매출, 지점담당자의 지역매출 등</li>
</ul></li>
<li>DW가 데이터가 너무 많고 복잡(사용자에게 불친절)해 DM을 사용</li>
</ul>
</section>
<section id="데이터의-추출-및-가공dq" class="level2">
<h2 class="anchored" data-anchor-id="데이터의-추출-및-가공dq">데이터의 추출 및 가공(DQ)</h2>
<ul>
<li>데이터 포맷 정형화 (0/1, 남/여 등을 M/F로 변환)</li>
<li>메타데이터 관리
<ul>
<li>예) 주소입력시 ’서울’을 치면 ’서울특별시’로 입력되게 하는 것</li>
</ul></li>
</ul>
</section>
<section id="dm의-구축" class="level2">
<h2 class="anchored" data-anchor-id="dm의-구축">DM의 구축</h2>
<ul>
<li>하향식 접근법 : 일반적으로 많이 사용. DW로 DM 만들기
<ul>
<li>한번 쿼리한 결과를 테이블로 저장해두는 경우 등</li>
</ul></li>
<li>상향식 접근법 : 거의 없는 케이스</li>
</ul>
</section>
<section id="차원의-이해" class="level2">
<h2 class="anchored" data-anchor-id="차원의-이해">차원의 이해</h2>
<ul>
<li>차원 : 분석하고자 하는 관점, 큐브를 구성하는 축</li>
<li>차원항목 : 각 축의 좌표</li>
<li>큐브와 셀 : 각 차원을 구성하는 항목의 조합에 대한 데이터를 저장하는 공간</li>
<li>희박성(Sparsify) : 데이터가 존재하지 않는 셀은 물리적으로 존재하지 않는 것
<ul>
<li>차원 때문에 매칭을 하다보니 희박성(없는 부분)이 발생하게 됨</li>
</ul></li>
<li>하이퍼 큐브 : ‘입력된 데이터’ 상태에서, ‘계산된 데이터’ 추가되면 큐브가 팽창하여 시스템다운</li>
<li>희박성 증가와 팽창계수 : 차원이 증가하고 희박성이 커지면 DB의 팽창계수는 급속히 증가</li>
</ul>
</section>
<section id="dw-실무운영-팁" class="level2">
<h2 class="anchored" data-anchor-id="dw-실무운영-팁">DW 실무운영 팁</h2>
<ul>
<li>데이터 재처리를 위해 항상 <code>RAW데이터도 함께 보관</code></li>
<li>집계 중 오류가 발생하면 부분재처리보단 <code>전체재처리를 권장</code></li>
<li><code>자주 사용되는 패턴은 미리</code> 집계하여 저장</li>
<li>대량 데이터를 집계할 때는 부분집합으로 나누어 처리한 다음, 상위 처리과정으로 집계하여 <code>리소스를 효율적으로</code>
<ul>
<li>시스템 하드웨어가 약해도 큰 데이터 집계가 가능해짐</li>
</ul></li>
<li>집계된 결과는 백업하여 유사시 대비</li>
<li>배치 작업의 분리 및 순서에 대한 전략 고민</li>
<li>불필요하게 많은 차원은 리소스 낭비</li>
</ul>
</section>
<section id="요약" class="level2">
<h2 class="anchored" data-anchor-id="요약">요약</h2>
<ul>
<li>대부분의 데이터는 RDB에 저장되어 있음</li>
<li>빅데이터 시스템이 있어도, 결국 집계된 데이터는 RDB에서 관리</li>
<li><code>DW만 잘 만들어도 대부분의 분석이 비용효율적으로 가능하다</code></li>
<li><code>GIGO</code>를 잊지 말자(Garbage in, Garbage out. 데이터의 품질 중요)</li>
<li>중요한 것은 <code>무엇을 분석할지에 대한 목표</code>, 평가</li>
<li>관점에 따라 같은 데이터도 다양한 인사이트를 만들어 냄</li>
</ul>
</section>
</section>
<section id="qa-내용정리" class="level1">
<h1>Q&amp;A 내용정리</h1>
<ul>
<li>NOSQL은 스키마 없이 저장한다는 개념으로, DL과는 다른 개념임</li>
<li>DB모델링시 다른 회사의 보고서를 보는게 도움이 될 수 있다(리버스 엔지니어링)</li>
<li>개인정보보호법관련, 허용기간 이상 저장 등 필요한 경우는 개인정보 자체를 지운다
<ul>
<li>ID와 같은 식별자만 남겨 누군지는 모르지만 분석은 가능하도록 저장</li>
<li>개인정보는 정보를 조합해서 누군가를 식별할 수 있게 되는 것을 개인정보라고 함</li>
</ul></li>
<li>실제 운영시 Raw데이터는 Cold데이터로 저장
<ul>
<li>예를 들어 작년데이터는 자주 사용할 수 있게 해두고, 장기 데이터는 필요시에 꺼내씀</li>
</ul></li>
<li>쿼리튜닝의 중요성과 팁
<ul>
<li>컬럼을 가공하면 index를 사용할 수 없고, DB가 느려진다</li>
<li>데이터 타입 지정이 중요하다
<ul>
<li>varchar 5, varchar 8인 경우 풀스캔을 하게된다</li>
</ul></li>
<li>데이터는 없는 것보다는 당장 안쓰더라도 있는게 낫다</li>
</ul></li>
</ul>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>DataWarehouse</category>
  <category>DataLake</category>
  <category>DataMart</category>
  <guid>https://kr9268.github.io/posts/hanbitn-datawarehouse-20240725/</guid>
  <pubDate>Thu, 25 Jul 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[MStudy_과제개선3] 신용카드 이상거래 탐지 모델링 with ML</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-dl-creditcard-20240718/</link>
  <description><![CDATA[ 





<p>Kaggle CreditCard Fraud Detection (개선3 : optuna SearchCV, RandomForest)</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>딥러닝 스터디에 제출했던 과제에 대한 피드백 반영 및 개선(지속 개선예정)</li>
<li>원본데이터 : <a href="https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud">Kaggle CreditCard Fraud Detection</a></li>
<li>적용한 피드백
<ul>
<li>weighted f1 score 사용</li>
</ul></li>
<li>추가 테스트
<ul>
<li>Optuna (optuna searchCV) 사용해 봄</li>
<li>Randomforest를 배우지는 않아서, 몇가지 파라미터만 뽑아서 optuna로 돌려 봄
<ul>
<li>과적합 방지를 위한 가지치기(Pruning)이 있다고 하여 적용</li>
</ul></li>
<li>파라미터를 별도로 저장하고 다시 estimator에 넣는게 불편해보였는데, refit이라는 기능으로 바로 사용가능하다고 하여 적용해 봄</li>
</ul></li>
<li>결과 및 감상
<ul>
<li>수업때 데이터에 따라 오히려 머신러닝이 더 적합할 수 있다고 했는데, Keras Tuner딥러닝보다 점수가 잘나와서 신기</li>
<li>복잡한 머신러닝 모델은 SMOTE와 같은 샘플링이 오히려 안좋을 수 있다하여 추이를 보고 적용하려 했는데, 결과적으로 미적용</li>
<li>optuna가 int, float, categorical로 Keras Tuner대비 입력이 쉽고 전반적으로 사용성이 좋은 느낌
<ul>
<li>간단히 구글링했을 때 샘플코드는, 파라미터가 dict에 담겨 옮겨야했는데, refit 기능으로 best_estimator를 편하게 불러올 수 있었음</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="개선과제-진행" class="level1">
<h1>개선과제 진행</h1>
<section id="데이터셋-구성" class="level2">
<h2 class="anchored" data-anchor-id="데이터셋-구성">데이터셋 구성</h2>
<div id="8fbc0306" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlite3</span>
<span id="cb1-3"></span>
<span id="cb1-4">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'creditcard.db'</span>)</span>
<span id="cb1-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM creditcard"</span>, conn)</span>
<span id="cb1-6">conn.close()</span>
<span id="cb1-7">df</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Time</th>
<th data-quarto-table-cell-role="th">V1</th>
<th data-quarto-table-cell-role="th">V2</th>
<th data-quarto-table-cell-role="th">V3</th>
<th data-quarto-table-cell-role="th">V4</th>
<th data-quarto-table-cell-role="th">V5</th>
<th data-quarto-table-cell-role="th">V6</th>
<th data-quarto-table-cell-role="th">V7</th>
<th data-quarto-table-cell-role="th">V8</th>
<th data-quarto-table-cell-role="th">V9</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">V21</th>
<th data-quarto-table-cell-role="th">V22</th>
<th data-quarto-table-cell-role="th">V23</th>
<th data-quarto-table-cell-role="th">V24</th>
<th data-quarto-table-cell-role="th">V25</th>
<th data-quarto-table-cell-role="th">V26</th>
<th data-quarto-table-cell-role="th">V27</th>
<th data-quarto-table-cell-role="th">V28</th>
<th data-quarto-table-cell-role="th">Amount</th>
<th data-quarto-table-cell-role="th">Class</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0.0</td>
<td>-1.359807</td>
<td>-0.072781</td>
<td>2.536347</td>
<td>1.378155</td>
<td>-0.338321</td>
<td>0.462388</td>
<td>0.239599</td>
<td>0.098698</td>
<td>0.363787</td>
<td>...</td>
<td>-0.018307</td>
<td>0.277838</td>
<td>-0.110474</td>
<td>0.066928</td>
<td>0.128539</td>
<td>-0.189115</td>
<td>0.133558</td>
<td>-0.021053</td>
<td>149.62</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0.0</td>
<td>1.191857</td>
<td>0.266151</td>
<td>0.166480</td>
<td>0.448154</td>
<td>0.060018</td>
<td>-0.082361</td>
<td>-0.078803</td>
<td>0.085102</td>
<td>-0.255425</td>
<td>...</td>
<td>-0.225775</td>
<td>-0.638672</td>
<td>0.101288</td>
<td>-0.339846</td>
<td>0.167170</td>
<td>0.125895</td>
<td>-0.008983</td>
<td>0.014724</td>
<td>2.69</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>1.0</td>
<td>-1.358354</td>
<td>-1.340163</td>
<td>1.773209</td>
<td>0.379780</td>
<td>-0.503198</td>
<td>1.800499</td>
<td>0.791461</td>
<td>0.247676</td>
<td>-1.514654</td>
<td>...</td>
<td>0.247998</td>
<td>0.771679</td>
<td>0.909412</td>
<td>-0.689281</td>
<td>-0.327642</td>
<td>-0.139097</td>
<td>-0.055353</td>
<td>-0.059752</td>
<td>378.66</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>1.0</td>
<td>-0.966272</td>
<td>-0.185226</td>
<td>1.792993</td>
<td>-0.863291</td>
<td>-0.010309</td>
<td>1.247203</td>
<td>0.237609</td>
<td>0.377436</td>
<td>-1.387024</td>
<td>...</td>
<td>-0.108300</td>
<td>0.005274</td>
<td>-0.190321</td>
<td>-1.175575</td>
<td>0.647376</td>
<td>-0.221929</td>
<td>0.062723</td>
<td>0.061458</td>
<td>123.50</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2.0</td>
<td>-1.158233</td>
<td>0.877737</td>
<td>1.548718</td>
<td>0.403034</td>
<td>-0.407193</td>
<td>0.095921</td>
<td>0.592941</td>
<td>-0.270533</td>
<td>0.817739</td>
<td>...</td>
<td>-0.009431</td>
<td>0.798278</td>
<td>-0.137458</td>
<td>0.141267</td>
<td>-0.206010</td>
<td>0.502292</td>
<td>0.219422</td>
<td>0.215153</td>
<td>69.99</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">284802</td>
<td>172786.0</td>
<td>-11.881118</td>
<td>10.071785</td>
<td>-9.834783</td>
<td>-2.066656</td>
<td>-5.364473</td>
<td>-2.606837</td>
<td>-4.918215</td>
<td>7.305334</td>
<td>1.914428</td>
<td>...</td>
<td>0.213454</td>
<td>0.111864</td>
<td>1.014480</td>
<td>-0.509348</td>
<td>1.436807</td>
<td>0.250034</td>
<td>0.943651</td>
<td>0.823731</td>
<td>0.77</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">284803</td>
<td>172787.0</td>
<td>-0.732789</td>
<td>-0.055080</td>
<td>2.035030</td>
<td>-0.738589</td>
<td>0.868229</td>
<td>1.058415</td>
<td>0.024330</td>
<td>0.294869</td>
<td>0.584800</td>
<td>...</td>
<td>0.214205</td>
<td>0.924384</td>
<td>0.012463</td>
<td>-1.016226</td>
<td>-0.606624</td>
<td>-0.395255</td>
<td>0.068472</td>
<td>-0.053527</td>
<td>24.79</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">284804</td>
<td>172788.0</td>
<td>1.919565</td>
<td>-0.301254</td>
<td>-3.249640</td>
<td>-0.557828</td>
<td>2.630515</td>
<td>3.031260</td>
<td>-0.296827</td>
<td>0.708417</td>
<td>0.432454</td>
<td>...</td>
<td>0.232045</td>
<td>0.578229</td>
<td>-0.037501</td>
<td>0.640134</td>
<td>0.265745</td>
<td>-0.087371</td>
<td>0.004455</td>
<td>-0.026561</td>
<td>67.88</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">284805</td>
<td>172788.0</td>
<td>-0.240440</td>
<td>0.530483</td>
<td>0.702510</td>
<td>0.689799</td>
<td>-0.377961</td>
<td>0.623708</td>
<td>-0.686180</td>
<td>0.679145</td>
<td>0.392087</td>
<td>...</td>
<td>0.265245</td>
<td>0.800049</td>
<td>-0.163298</td>
<td>0.123205</td>
<td>-0.569159</td>
<td>0.546668</td>
<td>0.108821</td>
<td>0.104533</td>
<td>10.00</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">284806</td>
<td>172792.0</td>
<td>-0.533413</td>
<td>-0.189733</td>
<td>0.703337</td>
<td>-0.506271</td>
<td>-0.012546</td>
<td>-0.649617</td>
<td>1.577006</td>
<td>-0.414650</td>
<td>0.486180</td>
<td>...</td>
<td>0.261057</td>
<td>0.643078</td>
<td>0.376777</td>
<td>0.008797</td>
<td>-0.473649</td>
<td>-0.818267</td>
<td>-0.002415</td>
<td>0.013649</td>
<td>217.00</td>
<td>0</td>
</tr>
</tbody>
</table>

<p>284807 rows × 31 columns</p>
</div>
</div>
</div>
<div id="dd9a158e" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class'</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).copy()</span>
<span id="cb2-2">df_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class'</span>].copy()</span>
<span id="cb2-3"></span>
<span id="cb2-4">df_x.shape, df_y.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>((284807, 29), (284807,))</code></pre>
</div>
</div>
<section id="train-validation-test-나누기" class="level3">
<h3 class="anchored" data-anchor-id="train-validation-test-나누기">Train, Validation, Test 나누기</h3>
<ul>
<li>Train, Test로만 나누고, optuna의 CV기능을 사용할 예정으로 별도 분할하지 않음</li>
</ul>
<div id="dfd81f3a" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train, Test 나누기</span></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stratify 적용</span></span>
<span id="cb4-5">x_train, x_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(df_x, df_y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, stratify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_y)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_test<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_test<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb4-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"y_train </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value_counts()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"y_test </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_test<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value_counts()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(256326, 29), (28481, 29)
(256326,), (28481,)

y_train Class
0    255883
1       443
Name: count, dtype: int64
y_test Class
0    28432
1       49
Name: count, dtype: int64</code></pre>
</div>
</div>
</section>
</section>
<section id="모델-구성-및-학습머신러닝" class="level2">
<h2 class="anchored" data-anchor-id="모델-구성-및-학습머신러닝">모델 구성 및 학습(머신러닝)</h2>
<section id="randomforestclassifier-with-optunaoptunasearchcv" class="level3">
<h3 class="anchored" data-anchor-id="randomforestclassifier-with-optunaoptunasearchcv">RandomForestClassifier with optuna(OptunaSearchCV)</h3>
<ul>
<li>optuna OptunaSearchCV 공식문서
<ul>
<li><a href="https://optuna.readthedocs.io/en/v2.0.0/reference/generated/optuna.integration.OptunaSearchCV.html">https://optuna.readthedocs.io/en/v2.0.0/reference/generated/optuna.integration.OptunaSearchCV.html</a></li>
</ul></li>
<li>optuna OptunaSearchCV 샘플코드
<ul>
<li><a href="https://github.com/optuna/optuna-examples/blob/main/sklearn/sklearn_optuna_search_cv_simple.py">https://github.com/optuna/optuna-examples/blob/main/sklearn/sklearn_optuna_search_cv_simple.py</a></li>
</ul></li>
<li>Scikit-learn RandomForestClassifier 공식문서
<ul>
<li><a href="https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html#randomforestclassifier">https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html#randomforestclassifier</a></li>
</ul></li>
<li>Scikit-learn ccp_alpha(Pruning, [과적합방지용]가지치기)
<ul>
<li><a href="https://scikit-learn.org/stable/auto_examples/tree/plot_cost_complexity_pruning.html#sphx-glr-auto-examples-tree-plot-cost-complexity-pruning-py">https://scikit-learn.org/stable/auto_examples/tree/plot_cost_complexity_pruning.html#sphx-glr-auto-examples-tree-plot-cost-complexity-pruning-py</a></li>
</ul></li>
</ul>
<div id="3eb383c7" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> optuna</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomForestClassifier</span>
<span id="cb6-3"></span>
<span id="cb6-4">clf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomForestClassifier(n_estimators<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># n_estimators : number of trees</span></span>
<span id="cb6-5"></span>
<span id="cb6-6">param_distributions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb6-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_estimators"</span>:optuna.distributions.IntDistribution(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 트리의 수</span></span>
<span id="cb6-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_depth"</span>: optuna.distributions.IntDistribution(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, log<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb6-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"criterion"</span>: optuna.distributions.CategoricalDistribution([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gini'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'entropy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log_loss'</span>]),</span>
<span id="cb6-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class_weight"</span> : optuna.distributions.CategoricalDistribution([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'balanced'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'balanced_subsample'</span>]),</span>
<span id="cb6-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ccp_alpha"</span> : optuna.distributions.FloatDistribution(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.005</span>)</span>
<span id="cb6-12">}</span>
<span id="cb6-13"></span>
<span id="cb6-14">optuna_search <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optuna.integration.OptunaSearchCV(</span>
<span id="cb6-15">    clf, </span>
<span id="cb6-16">    param_distributions, </span>
<span id="cb6-17">    n_jobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of parallel jobs. -1 means using all processors.</span></span>
<span id="cb6-18">    cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  estimator가 classifier &amp; label이 binary or multiclass라면 sklearn.model_selection.StratifiedKFold 적용 (이외는 sklearn.model_selection.KFold)</span></span>
<span id="cb6-19">    n_trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb6-20">    timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, </span>
<span id="cb6-21">    verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb6-22">    scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f1_weighted'</span>,</span>
<span id="cb6-23">    refit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Best Parameter로 refit. refitted estimator는 best_estimator_ attribute로 바로 predict가능</span></span>
<span id="cb6-24">)</span>
<span id="cb6-25"></span>
<span id="cb6-26">X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train, y_train</span>
<span id="cb6-27">optuna_search.fit(X, y)</span>
<span id="cb6-28"></span>
<span id="cb6-29"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Best trial:"</span>)</span>
<span id="cb6-30">trial <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optuna_search.study_.best_trial</span>
<span id="cb6-31"></span>
<span id="cb6-32"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Value: "</span>, trial.value)</span>
<span id="cb6-33"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Params: "</span>)</span>
<span id="cb6-34"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> key, value <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> trial.params.items():</span>
<span id="cb6-35">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"    </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(key, value))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>C:\Users\kibok\AppData\Local\Temp\ipykernel_20892\2371441327.py:14: ExperimentalWarning: OptunaSearchCV is experimental (supported from v0.17.0). The interface can change in the future.
  optuna_search = optuna.integration.OptunaSearchCV(
[I 2024-07-30 22:37:21,982] A new study created in memory with name: no-name-b5929343-b4ec-493f-9805-5e3c4e45dd7c
[I 2024-07-30 22:37:44,249] Trial 1 finished with value: 0.9952872331714773 and parameters: {'n_estimators': 10, 'max_depth': 2, 'criterion': 'log_loss', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.025}. Best is trial 1 with value: 0.9952872331714773.
[I 2024-07-30 22:37:45,772] Trial 4 finished with value: 0.995843694897976 and parameters: {'n_estimators': 10, 'max_depth': 3, 'criterion': 'gini', 'class_weight': 'balanced', 'ccp_alpha': 0.05}. Best is trial 4 with value: 0.995843694897976.
[I 2024-07-30 22:37:59,089] Trial 6 finished with value: 0.9904473457587857 and parameters: {'n_estimators': 10, 'max_depth': 5, 'criterion': 'gini', 'class_weight': 'balanced', 'ccp_alpha': 0.015}. Best is trial 4 with value: 0.995843694897976.
[I 2024-07-30 22:38:01,804] Trial 3 finished with value: 0.9926729729394594 and parameters: {'n_estimators': 10, 'max_depth': 5, 'criterion': 'gini', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.02}. Best is trial 4 with value: 0.995843694897976.
[I 2024-07-30 22:38:18,959] Trial 5 finished with value: 0.990931377564992 and parameters: {'n_estimators': 10, 'max_depth': 6, 'criterion': 'entropy', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.045}. Best is trial 4 with value: 0.995843694897976.
[I 2024-07-30 22:38:26,532] Trial 2 finished with value: 0.9916618565971218 and parameters: {'n_estimators': 10, 'max_depth': 24, 'criterion': 'gini', 'class_weight': 'balanced', 'ccp_alpha': 0.025}. Best is trial 4 with value: 0.995843694897976.
[I 2024-07-30 22:38:27,286] Trial 7 finished with value: 0.9957148747000535 and parameters: {'n_estimators': 10, 'max_depth': 24, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.05}. Best is trial 4 with value: 0.995843694897976.
[I 2024-07-30 22:38:28,366] Trial 0 finished with value: 0.9923829210347611 and parameters: {'n_estimators': 10, 'max_depth': 22, 'criterion': 'log_loss', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.035}. Best is trial 4 with value: 0.995843694897976.
[I 2024-07-30 22:38:39,049] Trial 12 finished with value: 0.9970092145586555 and parameters: {'n_estimators': 10, 'max_depth': 2, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.02}. Best is trial 12 with value: 0.9970092145586555.
[I 2024-07-30 22:38:47,101] Trial 10 finished with value: 0.9962438881186829 and parameters: {'n_estimators': 10, 'max_depth': 5, 'criterion': 'log_loss', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.005}. Best is trial 12 with value: 0.9970092145586555.
[I 2024-07-30 22:38:49,591] Trial 8 finished with value: 0.9934021476853907 and parameters: {'n_estimators': 10, 'max_depth': 25, 'criterion': 'entropy', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.04}. Best is trial 12 with value: 0.9970092145586555.
[I 2024-07-30 22:38:54,134] Trial 9 finished with value: 0.993142523031211 and parameters: {'n_estimators': 10, 'max_depth': 32, 'criterion': 'entropy', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.035}. Best is trial 12 with value: 0.9970092145586555.
[I 2024-07-30 22:39:06,825] Trial 11 finished with value: 0.9932623645614775 and parameters: {'n_estimators': 10, 'max_depth': 30, 'criterion': 'entropy', 'class_weight': 'balanced', 'ccp_alpha': 0.05}. Best is trial 12 with value: 0.9970092145586555.
[I 2024-07-30 22:39:21,819] Trial 13 finished with value: 0.99478232737095 and parameters: {'n_estimators': 10, 'max_depth': 6, 'criterion': 'entropy', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.05}. Best is trial 12 with value: 0.9970092145586555.
[I 2024-07-30 22:39:27,448] Trial 20 finished with value: 0.9952568348608214 and parameters: {'n_estimators': 10, 'max_depth': 2, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 12 with value: 0.9970092145586555.
[I 2024-07-30 22:39:31,517] Trial 15 finished with value: 0.9907314835923732 and parameters: {'n_estimators': 10, 'max_depth': 27, 'criterion': 'gini', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.02}. Best is trial 12 with value: 0.9970092145586555.
[I 2024-07-30 22:39:33,576] Trial 14 finished with value: 0.9942530678494605 and parameters: {'n_estimators': 10, 'max_depth': 17, 'criterion': 'entropy', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.015}. Best is trial 12 with value: 0.9970092145586555.
[I 2024-07-30 22:39:46,802] Trial 16 finished with value: 0.9935641141470762 and parameters: {'n_estimators': 10, 'max_depth': 30, 'criterion': 'gini', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.035}. Best is trial 12 with value: 0.9970092145586555.
[I 2024-07-30 22:39:51,642] Trial 17 finished with value: 0.9994244713511794 and parameters: {'n_estimators': 10, 'max_depth': 11, 'criterion': 'entropy', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 17 with value: 0.9994244713511794.
[I 2024-07-30 22:39:54,732] Trial 18 finished with value: 0.9994107978877771 and parameters: {'n_estimators': 10, 'max_depth': 11, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 17 with value: 0.9994244713511794.
[I 2024-07-30 22:40:00,405] Trial 19 finished with value: 0.9994271656763747 and parameters: {'n_estimators': 10, 'max_depth': 13, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 19 with value: 0.9994271656763747.
[I 2024-07-30 22:40:25,456] Trial 21 finished with value: 0.999434017386118 and parameters: {'n_estimators': 10, 'max_depth': 12, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 21 with value: 0.999434017386118.
[I 2024-07-30 22:40:31,434] Trial 23 finished with value: 0.9962951737422998 and parameters: {'n_estimators': 10, 'max_depth': 11, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.005}. Best is trial 21 with value: 0.999434017386118.
[I 2024-07-30 22:40:31,957] Trial 22 finished with value: 0.9965979604608748 and parameters: {'n_estimators': 10, 'max_depth': 12, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.005}. Best is trial 21 with value: 0.999434017386118.
[I 2024-07-30 22:40:34,465] Trial 24 finished with value: 0.9994337632833448 and parameters: {'n_estimators': 10, 'max_depth': 9, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 21 with value: 0.999434017386118.
[I 2024-07-30 22:40:52,562] Trial 25 finished with value: 0.9994408540197803 and parameters: {'n_estimators': 10, 'max_depth': 12, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 25 with value: 0.9994408540197803.
[I 2024-07-30 22:40:54,683] Trial 26 finished with value: 0.996698106283177 and parameters: {'n_estimators': 10, 'max_depth': 10, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.005}. Best is trial 25 with value: 0.9994408540197803.
[I 2024-07-30 22:40:57,905] Trial 27 finished with value: 0.9994515611974206 and parameters: {'n_estimators': 10, 'max_depth': 11, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 27 with value: 0.9994515611974206.
[I 2024-07-30 22:41:08,439] Trial 28 finished with value: 0.9994120771228445 and parameters: {'n_estimators': 10, 'max_depth': 11, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 27 with value: 0.9994515611974206.
[I 2024-07-30 22:41:35,264] Trial 29 finished with value: 0.9966293246541232 and parameters: {'n_estimators': 10, 'max_depth': 11, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.005}. Best is trial 27 with value: 0.9994515611974206.
[I 2024-07-30 22:41:37,240] Trial 32 finished with value: 0.9943959629024558 and parameters: {'n_estimators': 10, 'max_depth': 8, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.01}. Best is trial 27 with value: 0.9994515611974206.
[I 2024-07-30 22:41:38,829] Trial 30 finished with value: 0.9970195292623012 and parameters: {'n_estimators': 10, 'max_depth': 10, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.005}. Best is trial 27 with value: 0.9994515611974206.
[I 2024-07-30 22:41:39,059] Trial 31 finished with value: 0.9934055423774755 and parameters: {'n_estimators': 10, 'max_depth': 15, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.01}. Best is trial 27 with value: 0.9994515611974206.
[I 2024-07-30 22:41:56,868] Trial 33 finished with value: 0.99282882500281 and parameters: {'n_estimators': 10, 'max_depth': 8, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.01}. Best is trial 27 with value: 0.9994515611974206.
[I 2024-07-30 22:41:57,826] Trial 34 finished with value: 0.9945005228300087 and parameters: {'n_estimators': 10, 'max_depth': 8, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.01}. Best is trial 27 with value: 0.9994515611974206.
[I 2024-07-30 22:41:59,958] Trial 35 finished with value: 0.9933363510923483 and parameters: {'n_estimators': 10, 'max_depth': 8, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.01}. Best is trial 27 with value: 0.9994515611974206.
[I 2024-07-30 22:42:17,745] Trial 36 finished with value: 0.993721820632459 and parameters: {'n_estimators': 10, 'max_depth': 18, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.01}. Best is trial 27 with value: 0.9994515611974206.
[I 2024-07-30 22:42:41,309] Trial 38 finished with value: 0.9929849780466793 and parameters: {'n_estimators': 10, 'max_depth': 16, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.01}. Best is trial 27 with value: 0.9994515611974206.
[I 2024-07-30 22:42:45,541] Trial 37 finished with value: 0.9929940457138292 and parameters: {'n_estimators': 10, 'max_depth': 19, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.01}. Best is trial 27 with value: 0.9994515611974206.
[I 2024-07-30 22:42:46,614] Trial 39 finished with value: 0.9943285703735368 and parameters: {'n_estimators': 10, 'max_depth': 18, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.01}. Best is trial 27 with value: 0.9994515611974206.
[I 2024-07-30 22:42:51,170] Trial 40 finished with value: 0.9931415390179374 and parameters: {'n_estimators': 10, 'max_depth': 19, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.01}. Best is trial 27 with value: 0.9994515611974206.
[I 2024-07-30 22:43:06,667] Trial 41 finished with value: 0.9933606814925435 and parameters: {'n_estimators': 10, 'max_depth': 19, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.01}. Best is trial 27 with value: 0.9994515611974206.
[I 2024-07-30 22:43:07,777] Trial 42 finished with value: 0.9994489609295651 and parameters: {'n_estimators': 10, 'max_depth': 18, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 27 with value: 0.9994515611974206.
[I 2024-07-30 22:43:08,669] Trial 43 finished with value: 0.999488225721899 and parameters: {'n_estimators': 10, 'max_depth': 18, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:43:27,259] Trial 44 finished with value: 0.9924828083378433 and parameters: {'n_estimators': 10, 'max_depth': 19, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.03}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:43:48,513] Trial 45 finished with value: 0.992049590337098 and parameters: {'n_estimators': 10, 'max_depth': 14, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.03}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:43:50,422] Trial 46 finished with value: 0.9932099601175659 and parameters: {'n_estimators': 10, 'max_depth': 14, 'criterion': 'gini', 'class_weight': 'balanced', 'ccp_alpha': 0.015}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:43:51,611] Trial 47 finished with value: 0.9993886440078258 and parameters: {'n_estimators': 10, 'max_depth': 14, 'criterion': 'gini', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:43:58,958] Trial 48 finished with value: 0.9994401064500785 and parameters: {'n_estimators': 10, 'max_depth': 14, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:44:07,137] Trial 50 finished with value: 0.9929105605924612 and parameters: {'n_estimators': 10, 'max_depth': 14, 'criterion': 'gini', 'class_weight': 'balanced', 'ccp_alpha': 0.03}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:44:07,476] Trial 51 finished with value: 0.9919062228404238 and parameters: {'n_estimators': 10, 'max_depth': 13, 'criterion': 'gini', 'class_weight': 'balanced', 'ccp_alpha': 0.03}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:44:13,069] Trial 49 finished with value: 0.9993790258572499 and parameters: {'n_estimators': 10, 'max_depth': 13, 'criterion': 'gini', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:44:28,940] Trial 52 finished with value: 0.9993922088126771 and parameters: {'n_estimators': 10, 'max_depth': 14, 'criterion': 'gini', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:44:46,614] Trial 53 finished with value: 0.9994186582024277 and parameters: {'n_estimators': 10, 'max_depth': 14, 'criterion': 'gini', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:44:52,610] Trial 54 finished with value: 0.9994145698407128 and parameters: {'n_estimators': 10, 'max_depth': 22, 'criterion': 'gini', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:44:53,677] Trial 55 finished with value: 0.9966165268172439 and parameters: {'n_estimators': 10, 'max_depth': 22, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.005}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:45:03,419] Trial 56 finished with value: 0.9965818304821432 and parameters: {'n_estimators': 10, 'max_depth': 22, 'criterion': 'entropy', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.005}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:45:08,608] Trial 58 finished with value: 0.9994701188866102 and parameters: {'n_estimators': 10, 'max_depth': 21, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:45:11,718] Trial 57 finished with value: 0.9972321227337474 and parameters: {'n_estimators': 10, 'max_depth': 22, 'criterion': 'entropy', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.005}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:45:16,902] Trial 59 finished with value: 0.9965227246171346 and parameters: {'n_estimators': 10, 'max_depth': 22, 'criterion': 'log_loss', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.005}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:45:35,122] Trial 60 finished with value: 0.9967497598327621 and parameters: {'n_estimators': 10, 'max_depth': 24, 'criterion': 'log_loss', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.005}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:45:48,926] Trial 61 finished with value: 0.9965924076680792 and parameters: {'n_estimators': 10, 'max_depth': 22, 'criterion': 'log_loss', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.005}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:45:49,771] Trial 63 finished with value: 0.9968081847020078 and parameters: {'n_estimators': 10, 'max_depth': 7, 'criterion': 'entropy', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.005}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:45:55,545] Trial 64 finished with value: 0.9966869244888036 and parameters: {'n_estimators': 10, 'max_depth': 6, 'criterion': 'log_loss', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.005}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:45:57,437] Trial 62 finished with value: 0.9969938454559518 and parameters: {'n_estimators': 10, 'max_depth': 21, 'criterion': 'log_loss', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.005}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:46:00,484] Trial 65 finished with value: 0.9966459887651427 and parameters: {'n_estimators': 10, 'max_depth': 6, 'criterion': 'log_loss', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.005}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:46:11,828] Trial 68 finished with value: 0.9974972425443761 and parameters: {'n_estimators': 10, 'max_depth': 4, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:46:13,138] Trial 66 finished with value: 0.9966811021312786 and parameters: {'n_estimators': 10, 'max_depth': 26, 'criterion': 'log_loss', 'class_weight': 'balanced_subsample', 'ccp_alpha': 0.005}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:46:17,972] Trial 67 finished with value: 0.9942535796236317 and parameters: {'n_estimators': 10, 'max_depth': 27, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.04}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:46:50,434] Trial 69 finished with value: 0.999467911342283 and parameters: {'n_estimators': 10, 'max_depth': 16, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:46:51,833] Trial 70 finished with value: 0.9994470603825087 and parameters: {'n_estimators': 10, 'max_depth': 16, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:46:58,637] Trial 71 finished with value: 0.9994393427930474 and parameters: {'n_estimators': 10, 'max_depth': 16, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:47:00,805] Trial 72 finished with value: 0.9994521021059237 and parameters: {'n_estimators': 10, 'max_depth': 27, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:47:01,833] Trial 73 finished with value: 0.9994418358442221 and parameters: {'n_estimators': 10, 'max_depth': 16, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:47:10,673] Trial 75 finished with value: 0.9994360984204311 and parameters: {'n_estimators': 10, 'max_depth': 16, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:47:13,758] Trial 74 finished with value: 0.999452858045289 and parameters: {'n_estimators': 10, 'max_depth': 16, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:47:20,926] Trial 76 finished with value: 0.9994684374402942 and parameters: {'n_estimators': 10, 'max_depth': 16, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:47:52,626] Trial 78 finished with value: 0.9994431588645505 and parameters: {'n_estimators': 10, 'max_depth': 17, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:47:52,704] Trial 77 finished with value: 0.9994565806201864 and parameters: {'n_estimators': 10, 'max_depth': 16, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:48:01,973] Trial 79 finished with value: 0.9994605390044315 and parameters: {'n_estimators': 10, 'max_depth': 16, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:48:02,771] Trial 80 finished with value: 0.9994633300944326 and parameters: {'n_estimators': 10, 'max_depth': 29, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:48:02,865] Trial 81 finished with value: 0.999438774915282 and parameters: {'n_estimators': 10, 'max_depth': 32, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:48:11,875] Trial 82 finished with value: 0.999426730915667 and parameters: {'n_estimators': 10, 'max_depth': 31, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:48:14,934] Trial 83 finished with value: 0.999434660837624 and parameters: {'n_estimators': 10, 'max_depth': 32, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.
[I 2024-07-30 22:48:19,116] Trial 84 finished with value: 0.9994468408750077 and parameters: {'n_estimators': 10, 'max_depth': 25, 'criterion': 'log_loss', 'class_weight': 'balanced', 'ccp_alpha': 0.0}. Best is trial 43 with value: 0.999488225721899.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Best trial:
  Value:  0.999488225721899
  Params: 
    n_estimators: 10
    max_depth: 18
    criterion: log_loss
    class_weight: balanced
    ccp_alpha: 0.0</code></pre>
</div>
</div>
<section id="attributesbest-parameter-scorer-best-estimatorfitted" class="level4">
<h4 class="anchored" data-anchor-id="attributesbest-parameter-scorer-best-estimatorfitted">Attributes(Best Parameter, Scorer, Best estimator[Fitted])</h4>
<ul>
<li>Best Parameter</li>
</ul>
<div id="d9de6e48" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">optuna_search.best_params_</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'n_estimators': 10,
 'max_depth': 18,
 'criterion': 'log_loss',
 'class_weight': 'balanced',
 'ccp_alpha': 0.0}</code></pre>
</div>
</div>
<ul>
<li>Scorer</li>
</ul>
<div id="e7c46769" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">optuna_search.scorer_</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>make_scorer(f1_score, response_method='predict', pos_label=None, average=weighted)</code></pre>
</div>
</div>
<ul>
<li>Best estimator[Fitted]</li>
</ul>
<div id="d4b1837b" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">best_model_randomforest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optuna_search.best_estimator_</span>
<span id="cb13-2">best_model_randomforest</span></code></pre></div>
<div class="cell-output cell-output-display">
<style>#sk-container-id-2 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: black;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-2 {
  color: var(--sklearn-color-text);
}

#sk-container-id-2 pre {
  padding: 0;
}

#sk-container-id-2 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-2 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-2 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-2 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-2 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-2 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-2 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-2 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-2 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-2 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-2 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-2 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-2 label.sk-toggleable__label {
  cursor: pointer;
  display: block;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
}

#sk-container-id-2 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "▸";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-2 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-2 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-2 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-2 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "▾";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-2 div.sk-label label.sk-toggleable__label,
#sk-container-id-2 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-2 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-2 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-2 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-2 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-2 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-2 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 1ex;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-2 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-2 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-2 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-2 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</a></style><div id="sk-container-id-2" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>RandomForestClassifier(class_weight='balanced', criterion='log_loss',
                       max_depth=18, n_estimators=10)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-2" type="checkbox" checked=""><label for="sk-estimator-id-2" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;RandomForestClassifier<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.RandomForestClassifier.html">?<span>Documentation for RandomForestClassifier</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>RandomForestClassifier(class_weight='balanced', criterion='log_loss',
                       max_depth=18, n_estimators=10)</pre></div> </div></div></div></div>
</div>
</div>
</section>
<section id="모델평가" class="level4">
<h4 class="anchored" data-anchor-id="모델평가">모델평가</h4>
<ul>
<li>Scikit-learn cross_val_score 공식문서
<ul>
<li><a href="https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_val_score.html#sklearn.model_selection.cross_val_score">https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_val_score.html#sklearn.model_selection.cross_val_score</a></li>
</ul></li>
<li>Scikit-learn f1_score 공식문서 (적용한 weighted f1 score에 대한 설명)
<ul>
<li><a href="https://scikit-learn.org/stable/modules/generated/sklearn.metrics.f1_score.html#sklearn.metrics.f1_score">https://scikit-learn.org/stable/modules/generated/sklearn.metrics.f1_score.html#sklearn.metrics.f1_score</a></li>
<li>‘weighted’ : Calculate metrics for each label, and find their average weighted by support (the number of true instances for each label). <code>This alters ‘macro’ to account for label imbalance</code> it can result in an F-score that is not between precision and recall.</li>
</ul></li>
</ul>
<div id="9736b993" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sklearn.model_selection</span></code></pre></div>
</div>
<div id="83234aa5" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">sklearn.model_selection.cross_val_score(best_model_randomforest, x_test, y_test, scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f1_weighted'</span>, cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, </span>
<span id="cb15-2">                                        n_jobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([0.99921023, 0.99962696, 0.99945948, 0.99866279, 0.99897608])</code></pre>
</div>
</div>
<div id="2ea7d423" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">sklearn.model_selection.cross_val_score(best_model_randomforest, x_test, y_test, scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f1_macro'</span>, cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, </span>
<span id="cb17-2">                                        n_jobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([0.87482422, 0.9374121 , 0.94991206, 0.81548173, 0.78545062])</code></pre>
</div>
</div>
<div id="bfcdbef3" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">sklearn.model_selection.cross_val_score(best_model_randomforest, x_test, y_test, scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>, cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, </span>
<span id="cb19-2">                                        n_jobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([0.99912235, 0.99982444, 0.99964888, 0.99877107, 0.99929775])</code></pre>
</div>
</div>
<div id="83251d9a" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> classification_report </span>
<span id="cb21-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(classification_report(y_test, best_model_randomforest.predict(x_test)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>              precision    recall  f1-score   support

           0       1.00      1.00      1.00     28432
           1       0.97      0.78      0.86        49

    accuracy                           1.00     28481
   macro avg       0.99      0.89      0.93     28481
weighted avg       1.00      1.00      1.00     28481
</code></pre>
</div>
</div>


</section>
</section>
</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>파이썬</category>
  <category>딥러닝</category>
  <category>202406Study_FDS</category>
  <category>FDS</category>
  <category>optuna</category>
  <category>OptunaSearchCV</category>
  <category>RandomForest</category>
  <category>Scikit-learn</category>
  <guid>https://kr9268.github.io/posts/meta-dl-creditcard-20240718/</guid>
  <pubDate>Thu, 18 Jul 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[MStudy_과제개선2] 신용카드 이상거래 탐지 모델링</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-dl-creditcard-20240716/</link>
  <description><![CDATA[ 





<p>Kaggle CreditCard Fraud Detection (개선2 : Keras tuner, Hyperband search)</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>딥러닝 스터디에 제출했던 과제에 대한 피드백 반영 및 개선(지속 개선예정)</li>
<li>원본데이터 : <a href="https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud">Kaggle CreditCard Fraud Detection</a></li>
<li>적용한 피드백
<ul>
<li>Keras tuner 사용시 처음부터 Learning rate를 Test대상에 포함</li>
<li>Early stopping이 아닌 전체 epoch 수행 후 최적포인트를 적용하는 방법도 해보려했으나, 학습자체에 시간이 오래걸려 제외</li>
</ul></li>
<li>추가 테스트
<ul>
<li>다른 Adam계열 Optimizer를 Keras tuner후보군에 추가</li>
<li>Early stopping에 대해 Keras callback의 ReduceLROnPlateau도 사용해봄</li>
<li>Random search, Grid Search 를 알아보다가 Hyperband라는 것도 있어서 사용해봄
<ul>
<li>Random search는 무작위 탐색으로 효율적이지만 최적일수도 있고 아닐수도 있음</li>
<li>Grid search는 가능한 모든 조합을 탐색하여 오래 걸림</li>
<li>효율적이지만 최적이 아닐 확률이 있다는 점과 가정용 컴퓨터에서 계산효율적이지 못한 방법론이 맞는지에 대한 고민</li>
<li>Hyperband가 정해진 시간내에 중간 결과를 기준으로 조합 후보를 버리는 등 결합된 방법론으로 보여 적용해봄</li>
</ul></li>
<li>수업에 나온 Leaky ReLU도 적용해보고 싶었지만, Tuner호환 등 여러 문제가 있어 제외함</li>
<li>학습한 모델은 저장해두고 향후 다른 것도 해보기</li>
</ul></li>
<li>결과
<ul>
<li>초보 수준에서는 Tuner가 좋은 파라미터를 정해줄 것을 기대하여 막연히 점수가 개선될 것을 기대했으나, 실험 결과로는 유의미한 개선점이 보이지는 않았음
<ul>
<li>모델평가(Stratified Fold만 적용)
<ul>
<li>[Train]7121/7121 - 4s - 573us/step - f1_score: 0.0071 - loss: 0.0024 - precision_7: 0.9479 - recall_7: 0.8782</li>
<li>[Test]891/891 - 1s - 598us/step - f1_score: 0.0072 - loss: 0.0033 - precision_7: 0.9000 - recall_7: 0.7347</li>
</ul></li>
<li>모델평가(Tuner + Learning rate scheduler + Early stopping 추가 적용)
<ul>
<li>[Train]8011/8011 - 6s - 741us/step - f1_score: 0.0035 - loss: 0.0151 - precision: 0.8372 - recall: 0.8126</li>
<li>[Test]891/891 - 1s - 772us/step - f1_score: 0.0034 - loss: 0.0216 - precision: 0.7600 - recall: 0.7755</li>
</ul></li>
</ul></li>
<li>Optimizer나 Hyperband 등 세부적인 내용의 고려 없이 적용되어 긍정적인 결과가 나오지 않은 것으로 추정</li>
</ul></li>
</ul>
</section>
<section id="개선과제-진행" class="level1">
<h1>개선과제 진행</h1>
<section id="keras-tuner-사용한-딥러닝-모델-개선" class="level3">
<h3 class="anchored" data-anchor-id="keras-tuner-사용한-딥러닝-모델-개선">Keras Tuner 사용한 딥러닝 모델 개선</h3>
<ul>
<li>Learning rate를 처음 튜닝부터 포함</li>
<li>Optimizer를 다양하게 고려 (Adam계열)</li>
<li>Leaky ReLU를 Activation 후보군에 포함하려했으나, Tuner지원하지않는 것으로 보여 제외
<ul>
<li>Choice 함수에는 int, float, str, bool만 가능하여 아래와 같이 추가했음</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> keras.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> get_custom_objects</span>
<span id="cb1-2">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> keras.layers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LeakyReLU</span>
<span id="cb1-3"></span>
<span id="cb1-4">  get_custom_objects().update({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'leaky-relu'</span>: LeakyReLU()}) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add LeakyReLU</span></span>
<span id="cb1-5">  activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hp.Choice(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'activation'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i),values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'elu'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'leaky-relu'</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Activation</span></span></code></pre></div>
<ul>
<li>그러나 아래의 오류가 계속 발생하여 제외함</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>: Could <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> interpret activation function identifier: leaky<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>relu</span></code></pre></div></li>
</ul>
<div id="32b0ee9a" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> keras_tuner <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> kt</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Precision, Recall, F1Score</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span></code></pre></div>
</div>
<div id="c045dde8" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> build_model(hp):</span>
<span id="cb4-2">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.models.Sequential()</span>
<span id="cb4-3"></span>
<span id="cb4-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input &amp; Flatten</span></span>
<span id="cb4-5">    model.add(tf.keras.layers.Input((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb4-6">    model.add(tf.keras.layers.Flatten())</span>
<span id="cb4-7"></span>
<span id="cb4-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hidden Layers</span></span>
<span id="cb4-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(hp.Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_layers'</span>,min_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,max_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)):</span>
<span id="cb4-10"></span>
<span id="cb4-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Dense</span></span>
<span id="cb4-12">        units <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hp.Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'units'</span>,min_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,max_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>,step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Neurons</span></span>
<span id="cb4-13">        activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hp.Choice(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'activation'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i),values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'elu'</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Activation</span></span>
<span id="cb4-14"></span>
<span id="cb4-15">        model.add(tf.keras.layers.Dense(units, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>activation,</span>
<span id="cb4-16">                                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 기본값은 glorot_uniform(Xavier), He는 Kaiming</span></span>
<span id="cb4-17">                                        kernel_initializer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tf.keras.initializers.HeNormal())) </span>
<span id="cb4-18">        </span>
<span id="cb4-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Batch Normalization</span></span>
<span id="cb4-20">        model.add(tf.keras.layers.BatchNormalization()) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer통과후 &amp; Activation 전</span></span>
<span id="cb4-21">        </span>
<span id="cb4-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Dropout</span></span>
<span id="cb4-23">        dropout_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hp.Choice(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dropout'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i),values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>])</span>
<span id="cb4-24">        model.add(tf.keras.layers.Dropout(dropout_rate))</span>
<span id="cb4-25"></span>
<span id="cb4-26">    model.add(tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigmoid'</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이진분류이므로 Sigmoid사용</span></span>
<span id="cb4-27">    </span>
<span id="cb4-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Model setting</span></span>
<span id="cb4-29">    hp_learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hp.Choice(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'learning_rate'</span>, values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>]) </span>
<span id="cb4-30">    dict_optimizers_with_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb4-31">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Adam'</span>: tf.keras.optimizers.Adam(learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hp_learning_rate),</span>
<span id="cb4-32">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Nadam'</span>: tf.keras.optimizers.Nadam(learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hp_learning_rate),</span>
<span id="cb4-33">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AdamW'</span>: tf.keras.optimizers.AdamW(learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hp_learning_rate),</span>
<span id="cb4-34">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Adamax'</span>: tf.keras.optimizers.Adamax(learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hp_learning_rate)</span>
<span id="cb4-35">        }</span>
<span id="cb4-36">    hp_optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hp.Choice(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'optimizer'</span>,values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Adam'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Nadam'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AdamW'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Adamax'</span>])</span>
<span id="cb4-37"></span>
<span id="cb4-38">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dict_optimizers_with_lr[hp_optimizer], </span>
<span id="cb4-39">                  loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>,</span>
<span id="cb4-40">                  metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[F1Score(average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weighted"</span>), Precision(), Recall()])</span>
<span id="cb4-41">    </span>
<span id="cb4-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model</span>
<span id="cb4-43"></span>
<span id="cb4-44"></span>
<span id="cb4-45"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> tf.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/device:GPU:0'</span>):    </span>
<span id="cb4-46">    tuner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kt.Hyperband(build_model,</span>
<span id="cb4-47">                     objective <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kt.Objective(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val_f1_score'</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), </span>
<span id="cb4-48">                     max_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb4-49">                     project_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_hyperband'</span>)</span>
<span id="cb4-50">    </span>
<span id="cb4-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> kfold_dataset.keys():</span>
<span id="cb4-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 모델 학습</span></span>
<span id="cb4-53">        tuner.search(kfold_dataset[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x_train'</span>],  kfold_dataset[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_train'</span>],</span>
<span id="cb4-54">                                            epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb4-55">                                            validation_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(kfold_dataset[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x_validation'</span>], kfold_dataset[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_validation'</span>]))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Trial 30 Complete [00h 02m 29s]
val_f1_score: 0.00343498052097857

Best val_f1_score So Far: 0.4999999403953552
Total elapsed time: 00h 45m 46s</code></pre>
</div>
</div>
<div id="43602808" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">tuner.get_best_hyperparameters()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].values</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'num_layers': 4,
 'units': 105,
 'activation0': 'elu',
 'dropout0': 0.5,
 'learning_rate': 0.05,
 'optimizer': 'Nadam',
 'activation1': 'relu',
 'dropout1': 0.6,
 'activation2': 'relu',
 'dropout2': 0.9,
 'activation3': 'elu',
 'dropout3': 0.3,
 'activation4': 'relu',
 'dropout4': 0.9,
 'activation5': 'elu',
 'dropout5': 0.4,
 'activation6': 'elu',
 'dropout6': 0.3,
 'activation7': 'elu',
 'dropout7': 0.2,
 'activation8': 'elu',
 'dropout8': 0.5,
 'activation9': 'elu',
 'dropout9': 0.6,
 'activation10': 'elu',
 'dropout10': 0.5,
 'activation11': 'relu',
 'dropout11': 0.9,
 'activation12': 'elu',
 'dropout12': 0.6,
 'activation13': 'elu',
 'dropout13': 0.3,
 'activation14': 'relu',
 'dropout14': 0.5,
 'activation15': 'elu',
 'dropout15': 0.8,
 'activation16': 'elu',
 'dropout16': 0.2,
 'activation17': 'elu',
 'dropout17': 0.1,
 'activation18': 'elu',
 'dropout18': 0.2,
 'activation19': 'elu',
 'dropout19': 0.5,
 'tuner/epochs': 10,
 'tuner/initial_epoch': 0,
 'tuner/bracket': 0,
 'tuner/round': 0}</code></pre>
</div>
</div>
<div id="5396b14e" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">model_by_tuner<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tuner.get_best_models(num_models<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb8-2">model_by_tuner.summary()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">Model: "sequential"</span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓
┃<span style="font-weight: bold"> Layer (type)                    </span>┃<span style="font-weight: bold"> Output Shape           </span>┃<span style="font-weight: bold">       Param # </span>┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩
│ flatten (<span style="color: #0087ff; text-decoration-color: #0087ff">Flatten</span>)               │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">29</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                   │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">105</span>)            │         <span style="color: #00af00; text-decoration-color: #00af00">3,150</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">105</span>)            │           <span style="color: #00af00; text-decoration-color: #00af00">420</span> │
│ (<span style="color: #0087ff; text-decoration-color: #0087ff">BatchNormalization</span>)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)               │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">105</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_1 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">105</span>)            │        <span style="color: #00af00; text-decoration-color: #00af00">11,130</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization_1           │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">105</span>)            │           <span style="color: #00af00; text-decoration-color: #00af00">420</span> │
│ (<span style="color: #0087ff; text-decoration-color: #0087ff">BatchNormalization</span>)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_1 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">105</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_2 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">105</span>)            │        <span style="color: #00af00; text-decoration-color: #00af00">11,130</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization_2           │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">105</span>)            │           <span style="color: #00af00; text-decoration-color: #00af00">420</span> │
│ (<span style="color: #0087ff; text-decoration-color: #0087ff">BatchNormalization</span>)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_2 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">105</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_3 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">105</span>)            │        <span style="color: #00af00; text-decoration-color: #00af00">11,130</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization_3           │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">105</span>)            │           <span style="color: #00af00; text-decoration-color: #00af00">420</span> │
│ (<span style="color: #0087ff; text-decoration-color: #0087ff">BatchNormalization</span>)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_3 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">105</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_4 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">1</span>)              │           <span style="color: #00af00; text-decoration-color: #00af00">106</span> │
└─────────────────────────────────┴────────────────────────┴───────────────┘
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Total params: </span><span style="color: #00af00; text-decoration-color: #00af00">38,326</span> (149.71 KB)
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Trainable params: </span><span style="color: #00af00; text-decoration-color: #00af00">37,486</span> (146.43 KB)
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Non-trainable params: </span><span style="color: #00af00; text-decoration-color: #00af00">840</span> (3.28 KB)
</pre>
</div>
</div>
</section>
<section id="딥러닝-모델에-learning-rate-scheduler와-early-stopping-적용" class="level3">
<h3 class="anchored" data-anchor-id="딥러닝-모델에-learning-rate-scheduler와-early-stopping-적용">딥러닝 모델에 Learning rate scheduler와 Early stopping 적용</h3>
<ul>
<li>Learning rate scheduler와 Early stopping 모두 weighted f1-score는 지원하지 않아, val_f1-score로 사용</li>
</ul>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">UserWarning</span>: Learning rate reduction <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> conditioned on metric `<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>F1Score name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>f1_score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>` </span>
<span id="cb9-2">    which <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> available. Available metrics are</span>
<span id="cb9-3">    : f1_score,loss,precision,recall,val_f1_score,val_loss,val_precision,val_recall,learning_rate.</span>
<span id="cb9-4">    <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">UserWarning</span>: Early stopping conditioned on metric `<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>F1Score name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>f1_score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>` </span>
<span id="cb9-5">    which <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> available. Available metrics are</span>
<span id="cb9-6">    : f1_score,loss,precision,recall,val_f1_score,val_loss,val_precision,val_recall,learning_rate</span></code></pre></div>
<div id="b013a81b" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.callbacks <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> EarlyStopping</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.callbacks <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LearningRateScheduler</span>
<span id="cb10-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.callbacks <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ReduceLROnPlateau</span>
<span id="cb10-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb10-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> keras</span>
<span id="cb10-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span></code></pre></div>
</div>
<div id="3b2fd071" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">total_epoch_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> tf.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/device:GPU:0'</span>):</span>
<span id="cb11-4">    reduce_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ReduceLROnPlateau(monitor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val_f1_score'</span>,</span>
<span id="cb11-5">                factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lr감소치. 현재 lr이 0.01이라면 0.01*0.2를 적용</span></span>
<span id="cb11-6">                patience<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 개선에 대한 허용치. 10 epoch까지 개선이 없다면 적용</span></span>
<span id="cb11-7">                mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># auto, max, min 옵션 있음</span></span>
<span id="cb11-8">                min_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb11-9">    es <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EarlyStopping(monitor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val_f1_score'</span>, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, patience<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb11-10"></span>
<span id="cb11-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 학습</span></span>
<span id="cb11-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> kfold_dataset.keys():</span>
<span id="cb11-13">        history_tuner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_by_tuner.fit(kfold_dataset[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x_train'</span>],  kfold_dataset[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_train'</span>], </span>
<span id="cb11-14">                                        epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>total_epoch_value,</span>
<span id="cb11-15">                                        callbacks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[reduce_lr, es],</span>
<span id="cb11-16">                                        validation_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(kfold_dataset[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x_validation'</span>], kfold_dataset[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_validation'</span>]))</span></code></pre></div>
</div>
<div id="ee44d8f6" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시각화</span></span>
<span id="cb12-2">fig, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>))</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, key <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(history_tuner.history.keys()):</span>
<span id="cb12-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:</span>
<span id="cb12-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb12-7">    axs[idx].plot(history_tuner.history[key], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-8">    axs[idx].plot(history_tuner.history[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"val_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"val_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb12-9">    axs[idx].legend()</span>
<span id="cb12-10"></span>
<span id="cb12-11">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240716/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="d2eb9b8e" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 평가</span></span>
<span id="cb13-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'* 모델평가'</span>)</span>
<span id="cb13-3">model_by_tuner.evaluate(x_train, y_train, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb13-4">model_by_tuner.evaluate(x_test, y_test, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* 모델평가
8011/8011 - 6s - 741us/step - f1_score: 0.0035 - loss: 0.0151 - precision: 0.8372 - recall: 0.8126
891/891 - 1s - 772us/step - f1_score: 0.0034 - loss: 0.0216 - precision: 0.7600 - recall: 0.7755</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>[0.02163444086909294,
 0.00343498052097857,
 0.7599999904632568,
 0.7755101919174194]</code></pre>
</div>
</div>
<ul>
<li>모델평가(Stratified Fold만 적용)
<ul>
<li>7121/7121 - 4s - 573us/step - f1_score: 0.0071 - loss: 0.0024 - precision_7: 0.9479 - recall_7: 0.8782</li>
<li>891/891 - 1s - 598us/step - f1_score: 0.0072 - loss: 0.0033 - precision_7: 0.9000 - recall_7: 0.7347</li>
</ul></li>
<li>모델평가(Tuner + Learning rate scheduler + Early stopping 추가 적용)
<ul>
<li>8011/8011 - 6s - 741us/step - f1_score: 0.0035 - loss: 0.0151 - precision: 0.8372 - recall: 0.8126</li>
<li>891/891 - 1s - 772us/step - f1_score: 0.0034 - loss: 0.0216 - precision: 0.7600 - recall: 0.7755</li>
</ul></li>
</ul>
</section>
<section id="학습한-모델-저장" class="level3">
<h3 class="anchored" data-anchor-id="학습한-모델-저장">학습한 모델 저장</h3>
<div id="4dcd426d" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">model_by_tuner.save(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_by_tuner_fitted.keras'</span>)</span></code></pre></div>
</div>
<div id="9dc3e398" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">loadedm_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.models.load_model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_by_tuner.keras'</span>)</span>
<span id="cb17-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'* 모델평가'</span>)</span>
<span id="cb17-3">loadedm_model.evaluate(x_train, y_train, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb17-4">loadedm_model.evaluate(x_test, y_test, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* 모델평가
8011/8011 - 8s - 1ms/step - f1_score: 0.0035 - loss: 0.0151 - precision: 0.8372 - recall: 0.8126
891/891 - 1s - 786us/step - f1_score: 0.0034 - loss: 0.0216 - precision: 0.7600 - recall: 0.7755</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>[0.02163444086909294,
 0.00343498052097857,
 0.7599999904632568,
 0.7755101919174194]</code></pre>
</div>
</div>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>파이썬</category>
  <category>딥러닝</category>
  <category>202406Study_FDS</category>
  <category>FDS</category>
  <category>Keras tuner</category>
  <guid>https://kr9268.github.io/posts/meta-dl-creditcard-20240716/</guid>
  <pubDate>Tue, 16 Jul 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[MStudy_과제개선1] 신용카드 이상거래 탐지 모델링</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-dl-creditcard-20240715/</link>
  <description><![CDATA[ 





<p>Kaggle CreditCard Fraud Detection (개선1 : Stratify 및 fold 적용에 따른 비교, weighted f1-score)</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>딥러닝 스터디에 제출했던 과제에 대한 피드백 반영 및 개선(지속 개선예정)</li>
<li>원본데이터 : <a href="https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud">Kaggle CreditCard Fraud Detection</a></li>
<li>적용한 피드백
<ul>
<li>데이터셋 비율 : Train, Validation, Test를 8:1:1로 반영</li>
<li>Scikit learn의 train_test_split에 stratify옵션으로 Label비중 조정</li>
<li>기본 f1-score가 아닌 weighted f1-score로 metric 반영</li>
</ul></li>
<li>추가 테스트
<ul>
<li>StratifiedKFold 적용 전과 후를 기초적인 Neural Network모델로 비교</li>
</ul></li>
<li>결과
<ul>
<li>분류문제에 대해 StratifiedKFold 적용으로 모델개선됨을 확인함</li>
<li>단순 f1-score일때는 30점 초반대에서 여러 파라미터 조정을 해도 변경이 없었으나, weighted f1-score 적용 후 파라미터 조정에 따라 점수가 상승되었음. (이상거래 데이터처럼 편중된 경우에는 단순 f1-score는 성능확인에 부적합할 수 있음)</li>
</ul></li>
</ul>
</section>
<section id="개선과제-진행" class="level1">
<h1>개선과제 진행</h1>
<section id="데이터-확인" class="level2">
<h2 class="anchored" data-anchor-id="데이터-확인">데이터 확인</h2>
<ul>
<li>전체 데이터 : Null값 없음을 확인
<ul>
<li>Time 컬럼 : 첫번째 거래와의 단순 시간차이이므로 삭제 예정</li>
<li>V1 ~ V28 컬럼 : 익명화된 데이터. 전부 사용</li>
<li>Amount 컬럼
<ul>
<li>특이사항 : 결제액이 0인 데이터가 있어, 월정액 등록 전 Validation용 결제가 아닐까 추정</li>
<li>이상거래(Class 1)도 데이터로 포함되어있지만, 실질적 돈 이동이 없어 의미가 있는지 의문
<ul>
<li>위 이유로 처음에는 결제액 0인 데이터를 제거할까 고민</li>
<li>몇 없는 이상거래 데이터이므로 유지하는 것으로 결정 (전체 492개 이상거래 중 27건 제거시 약 5%의 데이터 손실)</li>
</ul></li>
</ul></li>
<li>Class 컬럼
<ul>
<li>특이사항 : 98%가 정상거래(Class 0)인 데이터로 편중이 심함</li>
<li>데이터가 Imbalance한 경우, Accuracy는 성능측정에 한계가 있으므로, <code>F1-Score</code>를 사용</li>
</ul></li>
</ul></li>
</ul>
<div id="e49f1d64" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlite3</span>
<span id="cb1-3"></span>
<span id="cb1-4">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'creditcard.db'</span>)</span>
<span id="cb1-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM creditcard"</span>, conn)</span>
<span id="cb1-6">conn.close()</span>
<span id="cb1-7">df</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Time</th>
<th data-quarto-table-cell-role="th">V1</th>
<th data-quarto-table-cell-role="th">V2</th>
<th data-quarto-table-cell-role="th">V3</th>
<th data-quarto-table-cell-role="th">V4</th>
<th data-quarto-table-cell-role="th">V5</th>
<th data-quarto-table-cell-role="th">V6</th>
<th data-quarto-table-cell-role="th">V7</th>
<th data-quarto-table-cell-role="th">V8</th>
<th data-quarto-table-cell-role="th">V9</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">V21</th>
<th data-quarto-table-cell-role="th">V22</th>
<th data-quarto-table-cell-role="th">V23</th>
<th data-quarto-table-cell-role="th">V24</th>
<th data-quarto-table-cell-role="th">V25</th>
<th data-quarto-table-cell-role="th">V26</th>
<th data-quarto-table-cell-role="th">V27</th>
<th data-quarto-table-cell-role="th">V28</th>
<th data-quarto-table-cell-role="th">Amount</th>
<th data-quarto-table-cell-role="th">Class</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0.0</td>
<td>-1.359807</td>
<td>-0.072781</td>
<td>2.536347</td>
<td>1.378155</td>
<td>-0.338321</td>
<td>0.462388</td>
<td>0.239599</td>
<td>0.098698</td>
<td>0.363787</td>
<td>...</td>
<td>-0.018307</td>
<td>0.277838</td>
<td>-0.110474</td>
<td>0.066928</td>
<td>0.128539</td>
<td>-0.189115</td>
<td>0.133558</td>
<td>-0.021053</td>
<td>149.62</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0.0</td>
<td>1.191857</td>
<td>0.266151</td>
<td>0.166480</td>
<td>0.448154</td>
<td>0.060018</td>
<td>-0.082361</td>
<td>-0.078803</td>
<td>0.085102</td>
<td>-0.255425</td>
<td>...</td>
<td>-0.225775</td>
<td>-0.638672</td>
<td>0.101288</td>
<td>-0.339846</td>
<td>0.167170</td>
<td>0.125895</td>
<td>-0.008983</td>
<td>0.014724</td>
<td>2.69</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>1.0</td>
<td>-1.358354</td>
<td>-1.340163</td>
<td>1.773209</td>
<td>0.379780</td>
<td>-0.503198</td>
<td>1.800499</td>
<td>0.791461</td>
<td>0.247676</td>
<td>-1.514654</td>
<td>...</td>
<td>0.247998</td>
<td>0.771679</td>
<td>0.909412</td>
<td>-0.689281</td>
<td>-0.327642</td>
<td>-0.139097</td>
<td>-0.055353</td>
<td>-0.059752</td>
<td>378.66</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>1.0</td>
<td>-0.966272</td>
<td>-0.185226</td>
<td>1.792993</td>
<td>-0.863291</td>
<td>-0.010309</td>
<td>1.247203</td>
<td>0.237609</td>
<td>0.377436</td>
<td>-1.387024</td>
<td>...</td>
<td>-0.108300</td>
<td>0.005274</td>
<td>-0.190321</td>
<td>-1.175575</td>
<td>0.647376</td>
<td>-0.221929</td>
<td>0.062723</td>
<td>0.061458</td>
<td>123.50</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2.0</td>
<td>-1.158233</td>
<td>0.877737</td>
<td>1.548718</td>
<td>0.403034</td>
<td>-0.407193</td>
<td>0.095921</td>
<td>0.592941</td>
<td>-0.270533</td>
<td>0.817739</td>
<td>...</td>
<td>-0.009431</td>
<td>0.798278</td>
<td>-0.137458</td>
<td>0.141267</td>
<td>-0.206010</td>
<td>0.502292</td>
<td>0.219422</td>
<td>0.215153</td>
<td>69.99</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">284802</td>
<td>172786.0</td>
<td>-11.881118</td>
<td>10.071785</td>
<td>-9.834783</td>
<td>-2.066656</td>
<td>-5.364473</td>
<td>-2.606837</td>
<td>-4.918215</td>
<td>7.305334</td>
<td>1.914428</td>
<td>...</td>
<td>0.213454</td>
<td>0.111864</td>
<td>1.014480</td>
<td>-0.509348</td>
<td>1.436807</td>
<td>0.250034</td>
<td>0.943651</td>
<td>0.823731</td>
<td>0.77</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">284803</td>
<td>172787.0</td>
<td>-0.732789</td>
<td>-0.055080</td>
<td>2.035030</td>
<td>-0.738589</td>
<td>0.868229</td>
<td>1.058415</td>
<td>0.024330</td>
<td>0.294869</td>
<td>0.584800</td>
<td>...</td>
<td>0.214205</td>
<td>0.924384</td>
<td>0.012463</td>
<td>-1.016226</td>
<td>-0.606624</td>
<td>-0.395255</td>
<td>0.068472</td>
<td>-0.053527</td>
<td>24.79</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">284804</td>
<td>172788.0</td>
<td>1.919565</td>
<td>-0.301254</td>
<td>-3.249640</td>
<td>-0.557828</td>
<td>2.630515</td>
<td>3.031260</td>
<td>-0.296827</td>
<td>0.708417</td>
<td>0.432454</td>
<td>...</td>
<td>0.232045</td>
<td>0.578229</td>
<td>-0.037501</td>
<td>0.640134</td>
<td>0.265745</td>
<td>-0.087371</td>
<td>0.004455</td>
<td>-0.026561</td>
<td>67.88</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">284805</td>
<td>172788.0</td>
<td>-0.240440</td>
<td>0.530483</td>
<td>0.702510</td>
<td>0.689799</td>
<td>-0.377961</td>
<td>0.623708</td>
<td>-0.686180</td>
<td>0.679145</td>
<td>0.392087</td>
<td>...</td>
<td>0.265245</td>
<td>0.800049</td>
<td>-0.163298</td>
<td>0.123205</td>
<td>-0.569159</td>
<td>0.546668</td>
<td>0.108821</td>
<td>0.104533</td>
<td>10.00</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">284806</td>
<td>172792.0</td>
<td>-0.533413</td>
<td>-0.189733</td>
<td>0.703337</td>
<td>-0.506271</td>
<td>-0.012546</td>
<td>-0.649617</td>
<td>1.577006</td>
<td>-0.414650</td>
<td>0.486180</td>
<td>...</td>
<td>0.261057</td>
<td>0.643078</td>
<td>0.376777</td>
<td>0.008797</td>
<td>-0.473649</td>
<td>-0.818267</td>
<td>-0.002415</td>
<td>0.013649</td>
<td>217.00</td>
<td>0</td>
</tr>
</tbody>
</table>

<p>284807 rows × 31 columns</p>
</div>
</div>
</div>
<div id="de4a568f" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># df.info()를 통한 null값 및 컬럼 확인</span></span>
<span id="cb2-2">df.info()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 284807 entries, 0 to 284806
Data columns (total 31 columns):
 #   Column  Non-Null Count   Dtype  
---  ------  --------------   -----  
 0   Time    284807 non-null  float64
 1   V1      284807 non-null  float64
 2   V2      284807 non-null  float64
 3   V3      284807 non-null  float64
 4   V4      284807 non-null  float64
 5   V5      284807 non-null  float64
 6   V6      284807 non-null  float64
 7   V7      284807 non-null  float64
 8   V8      284807 non-null  float64
 9   V9      284807 non-null  float64
 10  V10     284807 non-null  float64
 11  V11     284807 non-null  float64
 12  V12     284807 non-null  float64
 13  V13     284807 non-null  float64
 14  V14     284807 non-null  float64
 15  V15     284807 non-null  float64
 16  V16     284807 non-null  float64
 17  V17     284807 non-null  float64
 18  V18     284807 non-null  float64
 19  V19     284807 non-null  float64
 20  V20     284807 non-null  float64
 21  V21     284807 non-null  float64
 22  V22     284807 non-null  float64
 23  V23     284807 non-null  float64
 24  V24     284807 non-null  float64
 25  V25     284807 non-null  float64
 26  V26     284807 non-null  float64
 27  V27     284807 non-null  float64
 28  V28     284807 non-null  float64
 29  Amount  284807 non-null  float64
 30  Class   284807 non-null  int64  
dtypes: float64(30), int64(1)
memory usage: 67.4 MB</code></pre>
</div>
</div>
<div id="66915266" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Class데이터 : 일반거래(0)와 이상거래(1) 건수</span></span>
<span id="cb4-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class'</span>].value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Class
0    284315
1       492
Name: count, dtype: int64</code></pre>
</div>
</div>
<div id="a597d416" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Class데이터 : 일반거래(0)와 이상거래(1) 비중</span></span>
<span id="cb6-2">df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Amount'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class'</span>].value_counts(normalize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Class
0    0.985205
1    0.014795
Name: proportion, dtype: float64</code></pre>
</div>
</div>
<div id="77e042e5" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Amount = 0인 데이터</span></span>
<span id="cb8-2">df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Amount'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class'</span>].value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Class
0    1798
1      27
Name: count, dtype: int64</code></pre>
</div>
</div>
<div id="edcab921" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># t-sne 구현 샘플 (분류 분포를 확인해보고자 했으나, 차원 및 데이터가 많아서인지 너무 오래걸려서 코드만 보존)</span></span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.manifold <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TSNE</span>
<span id="cb10-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb10-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assume we have a high-dimensional dataset X</span></span>
<span id="cb10-7">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V3'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V4'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V5'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V6'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V7'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V8'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V9'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V10'</span>,</span>
<span id="cb10-8">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V11'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V12'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V13'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V14'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V15'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V16'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V17'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V18'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V19'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V20'</span>,</span>
<span id="cb10-9">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V21'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V22'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V23'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V24'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V25'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V26'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V27'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V28'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Amount'</span>]]</span>
<span id="cb10-10"></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a t-SNE model with 2 components (for 2D visualization)</span></span>
<span id="cb10-12">tsne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TSNE(n_components<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb10-13"></span>
<span id="cb10-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fit and transform the data</span></span>
<span id="cb10-15">X_tsne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tsne.fit_transform(X)</span>
<span id="cb10-16"></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize the results</span></span>
<span id="cb10-18">plt.scatter(X_tsne[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], X_tsne[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb10-19">plt.show()</span></code></pre></div>
</div>
</section>
<section id="데이터셋-구성" class="level2">
<h2 class="anchored" data-anchor-id="데이터셋-구성">데이터셋 구성</h2>
<section id="불필요한-컬럼-제거-및-x-y-분할" class="level3">
<h3 class="anchored" data-anchor-id="불필요한-컬럼-제거-및-x-y-분할">불필요한 컬럼 제거 및 X, Y 분할</h3>
<div id="c7cc3a2f" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">df_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class'</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).copy()</span>
<span id="cb11-2">df_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class'</span>].copy()</span>
<span id="cb11-3"></span>
<span id="cb11-4">df_x.shape, df_y.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>((284807, 29), (284807,))</code></pre>
</div>
</div>
</section>
<section id="train-validation-test-데이터-나누기stratify옵션-비교-학습에-미사용" class="level3">
<h3 class="anchored" data-anchor-id="train-validation-test-데이터-나누기stratify옵션-비교-학습에-미사용">Train, Validation, Test 데이터 나누기(stratify옵션 비교, 학습에 미사용)</h3>
<ul>
<li>Label 비율을 맞추는 stratify옵션에 따른 Label값 수 확인</li>
<li>단순히 Train, Validation, Test를 나누는 것과, kfold로 나누고 모델링에서 비교해볼 예정
<ul>
<li>비율은 Train, Validation, Test 8:1:1 가깝게 설정</li>
</ul></li>
<li>Scikit learn의 train_test_split 사용</li>
<li><strong>Test data에서 약간의 차이가 있었다 (미적용시 40, 적용시 49)</strong></li>
</ul>
<div id="7651bed7" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stratify 미적용</span></span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb13-4"></span>
<span id="cb13-5">x_train, x_test, ty_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(df_x, df_y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_test<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_test<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb13-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"y_train </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value_counts()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"y_test </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_test<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value_counts()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(256326, 29), (28481, 29)
(256326,), (28481,)

y_train Class
0    255883
1       443
Name: count, dtype: int64
y_test Class
0    28441
1       40
Name: count, dtype: int64</code></pre>
</div>
</div>
<div id="869e8262" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stratify 적용</span></span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb15-4"></span>
<span id="cb15-5">x_train, x_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(df_x, df_y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, stratify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_y)</span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_test<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_test<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb15-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"y_train </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value_counts()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"y_test </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_test<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value_counts()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(256326, 29), (28481, 29)
(256326,), (28481,)

y_train Class
0    255883
1       443
Name: count, dtype: int64
y_test Class
0    28432
1       49
Name: count, dtype: int64</code></pre>
</div>
</div>
</section>
<section id="train-validation-test-나누기학습에-사용" class="level3">
<h3 class="anchored" data-anchor-id="train-validation-test-나누기학습에-사용">Train, Validation, Test 나누기(학습에 사용)</h3>
<ul>
<li>Test set 먼저 분리하여, 이후 평가에서 공통적으로 사용</li>
<li>Train, Validation은 각각 다른 방법으로 나누어 사용</li>
</ul>
<section id="test-set-나누기공통" class="level4">
<h4 class="anchored" data-anchor-id="test-set-나누기공통">Test set 나누기(공통)</h4>
<ul>
<li>단순히 비율로 나눈 데이터셋의 변수명
<ul>
<li>x_train_2, x_validation_2, x_test</li>
<li>y_train_2, y_validation_2, y_test</li>
</ul></li>
</ul>
<div id="ed55fa74" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train, Test 나누기</span></span>
<span id="cb17-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># stratify 적용</span></span>
<span id="cb17-5">x_train, x_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(df_x, df_y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, stratify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_y)</span>
<span id="cb17-6"></span>
<span id="cb17-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_test<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb17-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_test<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb17-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb17-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"y_train </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value_counts()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb17-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"y_test </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_test<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value_counts()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(256326, 29), (28481, 29)
(256326,), (28481,)

y_train Class
0    255883
1       443
Name: count, dtype: int64
y_test Class
0    28432
1       49
Name: count, dtype: int64</code></pre>
</div>
</div>
</section>
<section id="train-validation-나누기단순히-비율만-고려" class="level4">
<h4 class="anchored" data-anchor-id="train-validation-나누기단순히-비율만-고려">Train, Validation 나누기(단순히 비율만 고려)</h4>
<ul>
<li>단순히 비율로 나눈 데이터셋의 변수명
<ul>
<li>x_train_2, x_validation_2, x_test</li>
<li>y_train_2, y_validation_2, y_test</li>
</ul></li>
</ul>
<div id="fc52fb1a" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train, Validation 나누기</span></span>
<span id="cb19-2">x_train_2, x_validation_2, y_train_2, y_validation_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(x_train, y_train, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, stratify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_train)</span>
<span id="cb19-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_train_2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_validation_2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_train_2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_validation_2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb19-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"y_train </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_train_2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value_counts()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb19-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"validation </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_validation_2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value_counts()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(227845, 29), (28481, 29)
(227845,), (28481,)

y_train Class
0    227451
1       394
Name: count, dtype: int64
validation Class
0    28432
1       49
Name: count, dtype: int64</code></pre>
</div>
</div>
</section>
<section id="train-validation-나누기stratifiedkfold적용" class="level4">
<h4 class="anchored" data-anchor-id="train-validation-나누기stratifiedkfold적용">Train, Validation 나누기(StratifiedKFold적용)</h4>
<ul>
<li>분류문제인 경우 StratifiedKFold 적용, 회귀인 경우에는 사용하지 않음</li>
<li>StratifiedKFold 적용 데이터셋의 변수명
<ul>
<li>kfold_dataset[idx][‘x_train’], kfold_dataset[idx][‘x_validation’], x_test</li>
<li>kfold_dataset[idx][‘y_train’], kfold_dataset[idx][‘y_validation’], y_test</li>
</ul></li>
</ul>
<div id="a2064242" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StratifiedKFold</span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train, Validation 나누기</span></span>
<span id="cb21-4">kfold_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb21-5"></span>
<span id="cb21-6">s_kfold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StratifiedKFold(n_splits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb21-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, (train_index, validation_index) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(s_kfold.split(x_train, y_train)):</span>
<span id="cb21-8">    kfold_dataset[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x_train'</span>: x_train.iloc[train_index], <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scaler 적용시 .iloc삭제</span></span>
<span id="cb21-9">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_train'</span>: y_train.iloc[train_index], <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scaler 적용시 .iloc삭제</span></span>
<span id="cb21-10">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x_validation'</span> : x_train.iloc[validation_index], <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scaler 적용시 .iloc삭제</span></span>
<span id="cb21-11">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_validation'</span> : y_train.iloc[validation_index]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scaler 적용시 .iloc삭제</span></span>
<span id="cb21-12">                        }</span>
<span id="cb21-13">    </span>
<span id="cb21-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> kfold_dataset.keys():</span>
<span id="cb21-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Train set</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>idx<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>kfold_dataset[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x_train'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>kfold_dataset[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_train'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb21-16">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Validation set</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>idx<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>kfold_dataset[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x_validation'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>kfold_dataset[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_validation'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb21-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Train set0 : (227845, 29), (227845,)
Validation set0 : (28481, 29), (28481,)

Train set1 : (227845, 29), (227845,)
Validation set1 : (28481, 29), (28481,)

Train set2 : (227845, 29), (227845,)
Validation set2 : (28481, 29), (28481,)

Train set3 : (227845, 29), (227845,)
Validation set3 : (28481, 29), (28481,)

Train set4 : (227845, 29), (227845,)
Validation set4 : (28481, 29), (28481,)

Train set5 : (227845, 29), (227845,)
Validation set5 : (28481, 29), (28481,)

Train set6 : (227846, 29), (227846,)
Validation set6 : (28480, 29), (28480,)

Train set7 : (227846, 29), (227846,)
Validation set7 : (28480, 29), (28480,)

Train set8 : (227846, 29), (227846,)
Validation set8 : (28480, 29), (28480,)
</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="모델-구성" class="level2">
<h2 class="anchored" data-anchor-id="모델-구성">모델 구성</h2>
<ul>
<li>기존에 f1 score를 위해 사용하려던 tensorflow_addons는 개발종료되어 다른 패키지로 대체</li>
<li>단순 f1 score가 아닌 weighted f1 score사용</li>
</ul>
<section id="기초-딥러닝-모델비율로-단순히-나눈-데이터셋-vs-stratifiedkfold-비교" class="level3">
<h3 class="anchored" data-anchor-id="기초-딥러닝-모델비율로-단순히-나눈-데이터셋-vs-stratifiedkfold-비교">기초 딥러닝 모델(비율로 단순히 나눈 데이터셋 vs StratifiedKFold 비교)</h3>
<section id="딥러닝-모델stratifiedkfold-미적용" class="level4">
<h4 class="anchored" data-anchor-id="딥러닝-모델stratifiedkfold-미적용">딥러닝 모델(StratifiedKFold 미적용)</h4>
<div id="be515981" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb23-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Precision, Recall, F1Score</span>
<span id="cb23-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb23-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb23-5"></span>
<span id="cb23-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델링</span></span>
<span id="cb23-7">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.models.Sequential([</span>
<span id="cb23-8">    tf.keras.layers.Input((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb23-9">    tf.keras.layers.Flatten(),</span>
<span id="cb23-10">    tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>),</span>
<span id="cb23-11">    tf.keras.layers.Dropout(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>),</span>
<span id="cb23-12">    tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigmoid'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 또는 2, Softmax 사용가능</span></span>
<span id="cb23-13">])</span>
<span id="cb23-14"></span>
<span id="cb23-15">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adam'</span>,</span>
<span id="cb23-16">              loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>,</span>
<span id="cb23-17">              metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[F1Score(average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weighted"</span>), Precision(), Recall()])</span>
<span id="cb23-18"></span>
<span id="cb23-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 학습 및 평가</span></span>
<span id="cb23-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 모델 학습</span></span>
<span id="cb23-21">model_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit(x_train_2, y_train_2, </span>
<span id="cb23-22">                    epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb23-23">                    validation_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x_validation_2, y_validation_2))</span>
<span id="cb23-24"></span>
<span id="cb23-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 모델 평가</span></span>
<span id="cb23-26"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'* 모델평가'</span>)</span>
<span id="cb23-27">result_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.evaluate(x_train_2, y_train_2, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb23-28">result_validate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.evaluate(x_test, y_test, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* 모델평가
7121/7121 - 4s - 562us/step - f1_score: 0.0035 - loss: 0.0041 - precision_6: 0.9545 - recall_6: 0.7462
891/891 - 1s - 568us/step - f1_score: 0.0035 - loss: 0.0037 - precision_6: 0.9211 - recall_6: 0.7143</code></pre>
</div>
</div>
<div id="64e00a16" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시각화 (Train, Validation score)</span></span>
<span id="cb25-2">fig, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>))</span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, key <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(model_history.history.keys()):</span>
<span id="cb25-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:</span>
<span id="cb25-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb25-7">    axs[idx].plot(model_history.history[key], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb25-8">    axs[idx].plot(model_history.history[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"val_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"val_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb25-9">    axs[idx].legend()</span>
<span id="cb25-10"></span>
<span id="cb25-11">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240715/index_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="딥러닝-모델stratifiedkfold-적용" class="level4">
<h4 class="anchored" data-anchor-id="딥러닝-모델stratifiedkfold-적용">딥러닝 모델(StratifiedKFold 적용)</h4>
<div id="b770640f" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb26-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Precision, Recall, F1Score</span>
<span id="cb26-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb26-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb26-5"></span>
<span id="cb26-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델링</span></span>
<span id="cb26-7">model_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.models.Sequential([</span>
<span id="cb26-8">    tf.keras.layers.Input((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb26-9">    tf.keras.layers.Flatten(),</span>
<span id="cb26-10">    tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>),</span>
<span id="cb26-11">    tf.keras.layers.Dropout(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>),</span>
<span id="cb26-12">    tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigmoid'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 또는 2, Softmax 사용가능</span></span>
<span id="cb26-13">])</span>
<span id="cb26-14"></span>
<span id="cb26-15">model_2.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adam'</span>,</span>
<span id="cb26-16">              loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>,</span>
<span id="cb26-17">              metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[F1Score(average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weighted"</span>), Precision(), Recall()])</span>
<span id="cb26-18"></span>
<span id="cb26-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 학습 및 평가</span></span>
<span id="cb26-20">kfold_result_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb26-21">kfold_result_validate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb26-22">kfold_model_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb26-23"></span>
<span id="cb26-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> kfold_dataset.keys():</span>
<span id="cb26-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 모델 학습</span></span>
<span id="cb26-26">    kfold_model_history[idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_2.fit(kfold_dataset[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x_train'</span>],  kfold_dataset[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_train'</span>], </span>
<span id="cb26-27">                        epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb26-28">                        validation_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(kfold_dataset[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x_validation'</span>], kfold_dataset[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_validation'</span>]))</span>
<span id="cb26-29"></span>
<span id="cb26-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 모델 평가</span></span>
<span id="cb26-31">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'* 모델평가_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>idx<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb26-32">    kfold_result_train[idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_2.evaluate(kfold_dataset[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x_train'</span>],kfold_dataset[idx][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_train'</span>], verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb26-33">    kfold_result_validate[idx] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_2.evaluate(x_test, y_test, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* 모델평가_0
7121/7121 - 4s - 574us/step - f1_score: 0.0037 - loss: 0.0081 - precision_7: 0.8941 - recall_7: 0.7284
891/891 - 1s - 583us/step - f1_score: 0.0037 - loss: 0.0059 - precision_7: 0.8421 - recall_7: 0.6531
* 모델평가_1
7121/7121 - 4s - 570us/step - f1_score: 0.0039 - loss: 0.0065 - precision_7: 0.9078 - recall_7: 0.7995
891/891 - 1s - 590us/step - f1_score: 0.0038 - loss: 0.0053 - precision_7: 0.9000 - recall_7: 0.7347
* 모델평가_2
7121/7121 - 4s - 579us/step - f1_score: 0.0042 - loss: 0.0053 - precision_7: 0.9050 - recall_7: 0.8223
891/891 - 1s - 603us/step - f1_score: 0.0042 - loss: 0.0047 - precision_7: 0.9024 - recall_7: 0.7551
* 모델평가_3
7121/7121 - 4s - 574us/step - f1_score: 0.0046 - loss: 0.0048 - precision_7: 0.9440 - recall_7: 0.8122
891/891 - 1s - 595us/step - f1_score: 0.0045 - loss: 0.0054 - precision_7: 0.8974 - recall_7: 0.7143
* 모델평가_4
7121/7121 - 4s - 574us/step - f1_score: 0.0048 - loss: 0.0066 - precision_7: 0.9493 - recall_7: 0.8092
891/891 - 1s - 601us/step - f1_score: 0.0048 - loss: 0.0055 - precision_7: 0.9000 - recall_7: 0.7347
* 모델평가_5
7121/7121 - 4s - 565us/step - f1_score: 0.0042 - loss: 0.0027 - precision_7: 0.9149 - recall_7: 0.8753
891/891 - 1s - 580us/step - f1_score: 0.0042 - loss: 0.0027 - precision_7: 0.8636 - recall_7: 0.7755
* 모델평가_6
7121/7121 - 4s - 571us/step - f1_score: 0.0054 - loss: 0.0050 - precision_7: 0.9016 - recall_7: 0.8604
891/891 - 1s - 598us/step - f1_score: 0.0054 - loss: 0.0047 - precision_7: 0.8444 - recall_7: 0.7755
* 모델평가_7
7121/7121 - 4s - 567us/step - f1_score: 0.0061 - loss: 0.0047 - precision_7: 0.9387 - recall_7: 0.8553
891/891 - 1s - 599us/step - f1_score: 0.0060 - loss: 0.0047 - precision_7: 0.9231 - recall_7: 0.7347
* 모델평가_8
7121/7121 - 4s - 573us/step - f1_score: 0.0071 - loss: 0.0024 - precision_7: 0.9479 - recall_7: 0.8782
891/891 - 1s - 598us/step - f1_score: 0.0072 - loss: 0.0033 - precision_7: 0.9000 - recall_7: 0.7347</code></pre>
</div>
</div>
<div id="5f92c1c5" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시각화</span></span>
<span id="cb28-2">fig, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>))</span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, key <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(kfold_model_history[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>].history.keys()):</span>
<span id="cb28-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:</span>
<span id="cb28-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb28-7">    axs[idx].plot(kfold_model_history[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>].history[key], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-8">    axs[idx].plot(kfold_model_history[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>].history[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"val_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"val_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-9">    axs[idx].legend()</span>
<span id="cb28-10"></span>
<span id="cb28-11">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240715/index_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="stratifiedkfold-적용유무에-따른-수치-비교" class="level4">
<h4 class="anchored" data-anchor-id="stratifiedkfold-적용유무에-따른-수치-비교">StratifiedKFold 적용유무에 따른 수치 비교</h4>
<ul>
<li>적용 후 Precision을 제외한 Test지표 향상됨
<ul>
<li>모델평가(적용X)
<ul>
<li>7121/7121 - 4s - 562us/step - f1_score: 0.0035 - loss: 0.0041 - precision_6: 0.9545 - recall_6: 0.7462</li>
<li>891/891 - 1s - 568us/step - f1_score: 0.0035 - loss: 0.0037 - precision_6: 0.9211 - recall_6: 0.7143</li>
</ul></li>
<li>모델평가(적용O)
<ul>
<li>7121/7121 - 4s - 573us/step - f1_score: 0.0071 - loss: 0.0024 - precision_7: 0.9479 - recall_7: 0.8782</li>
<li>891/891 - 1s - 598us/step - f1_score: 0.0072 - loss: 0.0033 - precision_7: 0.9000 - recall_7: 0.7347</li>
</ul></li>
</ul></li>
<li>적용 후 Precision을 제외한 Train, Validation지표 향상</li>
</ul>
<div id="cdac9493" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> koreanize_matplotlib</span>
<span id="cb29-2"></span>
<span id="cb29-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시각화</span></span>
<span id="cb29-4">fig, axs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>))</span>
<span id="cb29-5"></span>
<span id="cb29-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그래프간 비교를 위해, y축 고정을 위한 최대/최소값 계산</span></span>
<span id="cb29-7">graph_min <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f1_score'</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.003</span>,</span>
<span id="cb29-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'loss'</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.002</span>,</span>
<span id="cb29-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'precision'</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,</span>
<span id="cb29-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'recall'</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>}</span>
<span id="cb29-11">graph_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f1_score'</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.009</span>,</span>
<span id="cb29-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'loss'</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.04</span>,</span>
<span id="cb29-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'precision'</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb29-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'recall'</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>}</span>
<span id="cb29-15"></span>
<span id="cb29-16"></span>
<span id="cb29-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그래프1</span></span>
<span id="cb29-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, key <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(model_history.history.keys()):</span>
<span id="cb29-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:</span>
<span id="cb29-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb29-21">    axs[idx, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(model_history.history[key], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb29-22">    axs[idx, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(model_history.history[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"val_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"val_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb29-23">    axs[idx, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"fold적용전_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb29-24">    axs[idx, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylim([graph_min[key.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_6'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>).replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_7'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)], graph_max[key.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_6'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>).replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_7'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)] ])</span>
<span id="cb29-25">    axs[idx, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].legend()</span>
<span id="cb29-26"></span>
<span id="cb29-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그래프2</span></span>
<span id="cb29-28"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, key <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(kfold_model_history[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>].history.keys()):</span>
<span id="cb29-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:</span>
<span id="cb29-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb29-31"></span>
<span id="cb29-32">    axs[idx, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(kfold_model_history[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>].history[key], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb29-33">    axs[idx, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(kfold_model_history[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>].history[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"val_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"val_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb29-34">    axs[idx, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"fold적용후_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>key<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb29-35">    axs[idx, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylim([graph_min[key.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_6'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>).replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_7'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)], graph_max[key.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_6'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>).replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_7'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)]])</span>
<span id="cb29-36">    axs[idx, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].legend()</span>
<span id="cb29-37"></span>
<span id="cb29-38">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240715/index_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>
</section>
</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>파이썬</category>
  <category>딥러닝</category>
  <category>202406Study_FDS</category>
  <category>FDS</category>
  <category>StratifiedKFold</category>
  <guid>https://kr9268.github.io/posts/meta-dl-creditcard-20240715/</guid>
  <pubDate>Mon, 15 Jul 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[M_Study_최종과제 피드백/이론] 신용카드 이상거래 탐지 모델링</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-dl-creditcard-20240714/</link>
  <description><![CDATA[ 





<p>Kaggle CreditCard Fraud Detection (과제 피드백 및 관련 이론, 개선계획)</p>
<section id="내-제출과제에-대한-피드백" class="level2">
<h2 class="anchored" data-anchor-id="내-제출과제에-대한-피드백">내 제출과제에 대한 피드백</h2>
<ul>
<li>Train, Validation, Test 데이터의 비율은 8:1:1 정도가 보통 <br><br></li>
<li>Flatten은 사진 등 이미지에 많이 사용, 필요 없을 수 있다</li>
<li>model.compile의 metric
<ul>
<li>f1-score는 여러 종류가 있음
<ul>
<li>imbalance한 상황에서 이상거래 등에 가중치를 주는 weighted f1-score</li>
<li>class별로 하는 macro f1-score</li>
<li>micro f1-score</li>
</ul></li>
<li>이런 상황에서 지원되는 metric이 vanila f1-score라면 점수가 안좋게 나온 것일수도 있다
<ul>
<li><strong>weighted f1-score와 같은 것을 사용하는 편이 적절히 평가될 수 있음</strong></li>
<li><strong>recall, precision을 모두 넣고 볼 수도 있음</strong></li>
<li>model build 대비 점수가 낮게 나와서, metric 문제일 가능성이 높아보임 <br><br></li>
</ul></li>
</ul></li>
<li>Hyper parameter Optimizer (발표과제에서는 Keras Tuner 사용)
<ul>
<li>개념
<ul>
<li>예를 들어 10개 파라미터에 100개 선택지가 있다면 <img src="https://latex.codecogs.com/png.latex?100%5E%7B10%7D">과 같이 계산량이 많음
<ul>
<li>(Brute force방식) 모든 조합을 계산하여 최적조합을 찾는 방식은 계산량 문제로 어려움</li>
</ul></li>
<li>전체 계산 중 일부만 계산하는 방식으로, 전문가만큼의 성능은 안나오지만 초보의 수준에서는 좋음</li>
</ul></li>
<li>Random search, Grid search
<ul>
<li>Grid search : 나머지 파라미터를 고정시킨 채 최적 파라미터를 도출하는 것을 반복하여, 최적 파라미터만 조합
<ul>
<li>최적이 아닌 파라미터들의 조합으로 최적 성능이 나올 수 있다는 단점</li>
</ul></li>
<li>Random Search : 파라미터들의 ’조합’이라는 부분을 Grid search보다 좀 더 보기위한 방법</li>
</ul></li>
<li>추가용도
<ul>
<li>모델을 확정한 후, 모델의 성능을 좀 더 높이기 위해서도 사용 가능
<ul>
<li>예를 들면 모델을 분석하고 보고서를 쓰는 코딩테스트도 있는데, 이럴 때 조금이라도 성능을 올리기 위해 사용가능</li>
</ul></li>
</ul></li>
<li>Hyper parameter관련 보고서를 쓴다면, 어떤 기법을 추가하여 유용하고 좋았는지 비교하는 것이 좋음 <br><br></li>
</ul></li>
<li>Early stopping 설정
<ul>
<li>epoch수 대비 3%정도로 설정하기도 함</li>
<li>실질적으로는 전체 epoch을 돌리고, 가장 성능이 좋았던 포인트를 사용하는 방법을 사용(모든 포인트의 고려) <br><br></li>
</ul></li>
<li>참고
<ul>
<li>이후 새로운 거래가 생겨 모델로 판별하려면, 학습데이터와 같이 PCA처리 후 input 해야함</li>
<li>매번 현재의 과제처럼 튜닝을 새로하기보다는, 전 모델의 튜닝을 지속하는 것이 효율적임
<ul>
<li>Layer수, Activation function 등은 변경 불가한 요소</li>
<li>Learning rate scheduler, early stopping 등의 변경 가능</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="과제-보완-계획" class="level2">
<h2 class="anchored" data-anchor-id="과제-보완-계획">과제 보완 계획</h2>
<section id="data-set-분석" class="level3">
<h3 class="anchored" data-anchor-id="data-set-분석">Data set 분석</h3>
<ul>
<li>t-sne를 통해 데이터의 분포 등을 시각화하여 파악해봄</li>
<li>내가 어느정도의 분류는 가능하겠다는 정도를 파악할 수 있음</li>
</ul>
</section>
<section id="data-set-구성" class="level3">
<h3 class="anchored" data-anchor-id="data-set-구성">Data set 구성</h3>
<ul>
<li>Train/Validation/Test를 8:1:1로 구성</li>
<li>train_test_split(stratify=실제Label)을 통한 Label 비중 맞추기 검토</li>
<li>Validation set은 StratifiedKFold 적용 검토</li>
<li>컬럼별 이상치 처리 : Box plot의 Upperbound나 Underbound값으로 대체 고려(제거X)
<ul>
<li>Robust scaler 고려</li>
</ul></li>
</ul>
</section>
<section id="parameter-등-모델구성" class="level3">
<h3 class="anchored" data-anchor-id="parameter-등-모델구성">Parameter 등 모델구성</h3>
<ul>
<li>optuna적용고려, Randomsearch, GridSearch 확인 후 선택</li>
<li>metric을 weighted f1-score나 recall&amp;precision 등을 고려
<ul>
<li>예시 : metrics = [f1_score, Precision(), Recall()]</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow_addons <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tfa</span>
<span id="cb1-2">  f1_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tfa.metrics.F1Score(num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, threshold<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb1-3">  model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>SigmoidFocalCorssEntropy(),</span>
<span id="cb1-4">                optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tf.keras.optimizers.Adam(learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span>),</span>
<span id="cb1-5">                metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[f1_score, Pricision(), Recall()])</span></code></pre></div></li>
<li>Early stopping은 코드구현은 하되 실질적으로는 무효가되는 patience인 경우도 추가로 설정
<ul>
<li>전체 epoch을 돌려 가장 성능이 좋은 포인트도 확인한 후 대조</li>
</ul></li>
<li>Learning rate scheduling은 기존의 별도 함수를 만드는 방식 외, ReduceLROnPlateau 함수 이용도 고려</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tf.keras.callbacks <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ReduceLROnPlateau</span>
<span id="cb2-2">  reduce_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ReduceLROnPlateau(monitor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val_loss'</span>,</span>
<span id="cb2-3">                factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lr감소치. 현재 lr이 0.01이라면 0.01*0.2를 적용</span></span>
<span id="cb2-4">                patience<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 개선에 대한 허용치. 10 epoch까지 개선이 없다면 적용</span></span>
<span id="cb2-5">                mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># auto, max, min 옵션 있음</span></span>
<span id="cb2-6">                min_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb2-7">  model.fit(x_train, y_train, callbacks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[reduce_lr])</span></code></pre></div>
<ul>
<li><p>Batch size는 가능한 선에서는 늘려서 빠른 학습을 도모</p></li>
<li><p>평가시 ROC Curve나 PR Curve 시각화도 고려</p></li>
<li><p>Cross validation 활용시, 여러번의 모델Score가 나오므로 Box plot을 통해 안정적인 모델인지 시각화</p></li>
</ul>
</section>
<section id="기타" class="level3">
<h3 class="anchored" data-anchor-id="기타">기타</h3>
<ul>
<li>시각화를 통해 데이터 설명 보강
<ul>
<li>ROC Curve나 PR Curve 등의 사용</li>
</ul></li>
</ul>
</section>
<section id="추가진행" class="level3">
<h3 class="anchored" data-anchor-id="추가진행">추가진행</h3>
<ul>
<li>머신러닝 기법 활용
<ul>
<li>모델 : XGB, Random forest 고려</li>
<li>데이터셋 : 샘플링(오버 또는 언더) 적용 검토
<ul>
<li>오버샘플링 한다면 SMOTE대신 ADASYN적용검토</li>
<li>샘플링 적용/미적용 성능 비교
<ul>
<li>위의 모델 또는 Logistic regression으로 비교</li>
</ul></li>
</ul></li>
<li>모델학습 : Cross validation을 통한 과적합 방지</li>
<li>Threshold adjustment 고려</li>
</ul></li>
</ul>
</section>
</section>
<section id="주차-발표과제들-보완에-필요한-추가지식" class="level2">
<h2 class="anchored" data-anchor-id="주차-발표과제들-보완에-필요한-추가지식">7주차 발표과제들 보완에 필요한 추가지식</h2>
<ul>
<li><p>불균형한 데이터를 맞춰주는 샘플링 기법 : 오버샘플링, 언더샘플링</p>
<ul>
<li>주의점 : 두 기법 모두 Test data를 먼저 분리해둔 후 나머지에 대해 적용. Test data는 건드리지 않는다</li>
<li>언더샘플링과 오버샘플링은 둘 중 하나만 사용하는게 나음(함께 사용시 둘의 단점을 모두 가질수도 있다)</li>
<li>참고사항
<ul>
<li>가급적이면 언더샘플링보다는 오버샘플링을 많이 씀 (데이터는 자산이라는 관점에서, 손실 방지)</li>
<li>추세는 발전된 알고리즘의 모델에 맡기고, 샘플링을 적용하지 않는 방향
<ul>
<li>다만 상황에 따라서는 오버샘플링이 훨씬 좋을 때가 있음
<ul>
<li>로지스틱회귀는 최신의 복잡한 알고리즘이 아닌 단순한 모델로, 편중된 데이터에 취약한데 여기에는 궁합이 좋음</li>
<li>XGBoost나 Neural Network같은 복잡한 모델에는 오히려 안좋을 수 있음</li>
</ul></li>
</ul></li>
</ul></li>
<li>오버샘플링 &amp; 언더샘플링
<ul>
<li>오버샘플링 : 부족한 데이터를 늘림
<ul>
<li>장점 : 데이터의 손실이 없음</li>
<li>단점 : 데이터를 늘리기 위해 같은 데이터를 반복하면서 노이즈 발생 : Precision이 낮아진다(Recall은 높아진다)
<ul>
<li>SMOTE가 이를 보완하기 위한 오버샘플링 기법이지만 근본적으로는 데이터가 반복되는 것은 같음</li>
<li>(별도확인) ADASYN으로 SMOTE의 단점을 보완가능(SMOTE와 달리 다른 클래스의 데이터 수도 고려하여 증강)</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.over_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SMOTE, ADASYN</span></code></pre></div></li>
</ul></li>
<li>언더샘플링 : 많은 쪽의 데이터를 부족한 데이터만큼 남기고 버림
<ul>
<li>단점 : 데이터를 버린다는 손실</li>
<li>function이 아니라 직접 구현한다면, 순서대로 가져오지 않고 Random하게 가져오도록 구현</li>
</ul></li>
<li>샘플링을 통해, 이상거래에 더 잘 반응할 수 있는 모델로 만들어 줄 수 있음
<ul>
<li>다만 고객 입장에서는 정상거래인데 이상거래로 판단되게 되는 불편함이 생길 수 있음</li>
</ul></li>
</ul></li>
</ul></li>
<li><p><code>StratifiedKFold</code> : 특정 Label이 많거나 적어서 <code>분포가 Imbalance한 경우 활용</code></p>
<ul>
<li>Validation set을 나누는 기법이므로, Test set 분리 후 적용</li>
<li><code>fold</code>: 같은 Data set에서, 각 부분을 모두 Validation으로 활용할 수 있도록 반복
<ul>
<li><code>데이터가 적을 때, 있는 데이터를 최대한 활용</code>해, Validation set을 다양하게 만들 수 있다</li>
<li>예를 들어 100개 데이터에 5 fold를 적용한다면, 아래와 같이 구성됨(굵은 부분이 validation set)
<ul>
<li><strong>1<sub>20<strong>, 21~100 / 1~20, </strong>21</sub>40</strong>, 41~100 / 1~40, <strong>41<sub>60<strong>, 61~100 / 1~60, </strong>61</sub>80</strong>, 81~100 / 1~80, <strong>81~100</strong></li>
</ul></li>
</ul></li>
<li>참고 코드</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">  skfold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StratifiedKFold(n_split<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, Shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb4-2">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> train_index, test_index <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> skfold.split(X,Y):</span>
<span id="cb4-3">    X_train, X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.iloc[train_index], X.iloc[test_index]</span>
<span id="cb4-4">    Y_train, Y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Y.iloc[train_index], Y.iloc[test_index]</span></code></pre></div></li>
<li><p>이상치 데이터에 대한 처리 : 제거 vs 대체</p>
<ul>
<li>제거는 데이터의 손실이므로 대체가 더 좋을 때도 있음
<ul>
<li>Box plot 기준으로 Upper bound이상의 값들은 Upper bound값으로 치환하는 것도 방법</li>
</ul></li>
</ul></li>
<li><p><code>차원축소(t-sne, PCA , SVD등)</code></p>
<ul>
<li>차원축소 : Feature들을 <code>상관관계가 없는 Feature로 바꾸는 것</code>을, 수학적인 방법으로 적용
<ul>
<li>예를 들어 100개의 feature 중 연봉과 월급은 중복(상관관계있음)이므로 차원축소 적용 후 10개의 feature로 mapping</li>
</ul></li>
<li>대표적으로 PCA가 있음, 현재의 데이터는 이미 PCA가 적용되어 있음</li>
<li>종류
<ul>
<li><code>PCA</code> : 상관관계를 없애며 전처리 가능</li>
<li><code>SVD</code>(간단하게 PCA를 확장한 것으로 볼 수 있음. 전처리 가능)</li>
<li><code>t-sne</code> : 저차원으로 mapping 하여 시각화 용이 (전처리는 불가)</li>
</ul></li>
<li>유의사항 : <code>PCA나 SVD는 선형적인 관계가 있을때만 적용</code>한다(<code>비선형적인 정보는 손실</code>되므로 <code>모델성능하락</code>이 있을 수 있다)</li>
</ul></li>
<li><p>Plot을 그렸을 때 fold의 수만큼 점으로 나오게 됨(5fold면 5개) <br> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240714/index_files/figure-html/ebe440c8-1-image.png" class="img-fluid" alt="image.png"><br></p></li>
<li><p>Recall, Precision은 Trade-off, 2개 모두 준수한 Sweet spot을 찾기 위해 함께 볼 수 있는 방법</p>
<ul>
<li>f1-score : 조화평균을 활용한 하나의 숫자로 판단 가능</li>
<li>ROC Curve : TP와 FP를 x, y축으로 두고 면적으로 판단 가능(넓을수록 좋음, 0~1값 가짐)</li>
<li>PR(Precision-Recall) Curve : Precision과 Recall을 x, y축으로 두고 면적으로 판단 (넓을수록 좋음)</li>
</ul></li>
<li><p>Binary 문제의 경우, Simoid 대신 2개 뉴런의 Softmax도 가능함</p></li>
<li><p>Batch size는 관례(2의 배수)를 맞추는 것이 좋음 (보고서 확인의 관점에서는 안좋은 시선으로 보게될 수 있다)</p></li>
<li><p>이상치 Robustscaler</p></li>
<li><p>train_test_split(stratify=실제Label)옵션으로 Label의 비율을 비슷하게 샘플링 가능</p></li>
<li><p>오버샘플링의 단점 : precision이 낮아진다</p>
<ul>
<li>precision은 판정한 건 중 실제의 비율이고, 오버샘플링으로 정상거래를 이상거래로 판정하는건이 많아짐</li>
<li>recall의 측면에서는 오버샘플링을 통해 판정을 늘리는게 나을 수 있음(암환자 사례)</li>
</ul></li>
<li><p>데이터 불균형에서의 가중치 설정 : Class(label)분포 기반 가중치 설정</p>
<ul>
<li><p>더 중요하게 보는 것에 패널티를 더 크게 줌</p></li>
<li><p>정상거래(0) 284315건, 이상거래(1) 492건인 경우의 예시</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">  total_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">284315</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">492</span></span>
<span id="cb5-2">  weight_for_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> ( <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">284315</span>)</span>
<span id="cb5-3">  weight_for_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> total_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">492</span>)</span>
<span id="cb5-4">  class_weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:weight_for_0, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:weight_for_1}</span>
<span id="cb5-5"></span>
<span id="cb5-6">  model.fit(x_train, y_train, class_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>class_weights)</span></code></pre></div></li>
<li><p>Neural network에서 해결할 수 있는 부분이어서 오히려 혼동을 줄 수도 있다</p>
<ul>
<li><strong>모델 알고리즘이 복잡한 경우</strong>는, Weight에서 패널티를 다르게 주는 focal loss나 오버샘플링을 잘 쓰지 않음
<ul>
<li>Neural network에 Sigmoid focal CrossEntrophy를 통해 패널티를 높게 주어 긍정적 효과를 기대했지만, 오히려 성능하락될 수 있음</li>
</ul></li>
<li><strong>모델 알고리즘이 단순한 Logistic regression 등은</strong>, 이러한 Weighted loss가 효과가 좋을 수 있음</li>
</ul></li>
</ul></li>
<li><p>Learning rate scheduler 함수로 구현 예시</p></li>
</ul>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tf.keras.callbacks <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ReduceLROnPlateau</span>
<span id="cb6-2">  reduce_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ReduceLROnPlateau(monitor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val_loss'</span>,</span>
<span id="cb6-3">                factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lr감소치. 현재 lr이 0.01이라면 0.01*0.2를 적용</span></span>
<span id="cb6-4">                patience<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 개선에 대한 허용치. 10 epoch까지 개선이 없다면 적용</span></span>
<span id="cb6-5">                mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># auto, max, min 옵션 있음</span></span>
<span id="cb6-6">                min_lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>)</span>
<span id="cb6-7">  model.fit(x_train, y_train, callbacks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[reduce_lr])</span></code></pre></div>
<ul>
<li><p>Dropout은 간단한 모델이라면 높게 설정할지 않아도 괜찮음</p></li>
<li><p>Batch size는 데이터가 적거나 장비(메모리) 상황이 좋다면 늘려서 빠르게 학습</p></li>
<li><p>과적합(Overfitting)의 원인</p>
<ul>
<li>모델 자체의 문제, 앞단계인 데이터 전처리나 샘플링, Data split 등의 문제일 수 있음</li>
<li>단순히 성능이 안나왔다해서 과적합으로 판단은 금물</li>
</ul></li>
<li><p>LDA (Linear discriminant Anaylsis) : 분류문제에서는 Logistic Regression 좋은 성능</p></li>
<li><p>KNN (K-Nearest Neighbor) : 근접(이웃)한 데이터들을 분류</p></li>
<li><p>Cart : 의사결정나무(Decision Tree)의 기본 모델</p></li>
<li><p>Random forest : 여러개의 트리 모델을 만들고, 다수결로 정함. <strong>앙상블 모델</strong></p></li>
<li><p>Boosting 계열 모델 : 학습 후, 틀린 부분에 가중치를 두면서 학습 반복</p>
<ul>
<li>처음에는 이상거래에 대해 많이 틀리다가, 점점 잘 잡아내도록 학습됨.</li>
<li>XGB를 많이 사용</li>
</ul></li>
<li><p>이외에 Catboost 등도 있음</p></li>
<li><p>현재와 같은 20만건 정도의 데이터는, 최신계열의 복잡한 머신러닝에서 더 성능이 좋을 수 있음</p></li>
<li><p>Cross validation 활용시, 여러번의 모델Score가 나오므로 Box plot을 통해 안정적인 모델인지 확인 가능</p></li>
<li><p>모델의 선택 (SOTA가 기준이 되어야 하는지에 대한 질문)</p>
<ul>
<li>문제 정의(상황이 어떤 문제인지 정의할 능력 필요)</li>
<li>어떤 계열의 모델이 적합한지 선택 (전반적인 머신러닝 등 모델 지식 필요)</li>
<li>SOTA(State of the art)는 이후의 문제</li>
</ul></li>
<li><p>논문 등을 볼 때는 문제 Setup까지 본 후, 바로 풀이보지말고 먼저 고민 후 보기</p></li>
<li><p>Random forest모델 사용시 두가지 고려사항</p>
<ul>
<li>Cross validation을 통한 과적합 방지
<ul>
<li>앙상블모델은 복잡한 머신러닝 기법에 속하고, XGB나 Random forest는 과적합 일어날 수 있음</li>
</ul></li>
<li>Hyper parameter tuning을 통한 개선</li>
</ul></li>
<li><p>Thresholding(임계값 조정)</p>
<ul>
<li>Precision과 recall은 trade-off. 원하는 것은 둘 다 높은 Spot
<ul>
<li>이러한 Sweet spot을 시각적으로는 ROC/PR Curve로 확인, 코드로는 Threshold adjustment 조절</li>
<li>Threshold 예시 일부</li>
</ul>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">  y_scores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_proba(X_test)[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb7-2">  precision, recall, thresholds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_recall_curve(y_test, y_scores)</span>
<span id="cb7-3"></span>
<span id="cb7-4">  f1_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> recall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> recall)</span>
<span id="cb7-5">  optimal_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(f1_scores)</span>
<span id="cb7-6">  optimal_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> thresholds[optimal_idx]</span></code></pre></div></li>
</ul></li>
</ul>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>파이썬</category>
  <category>딥러닝</category>
  <category>202406Study_FDS</category>
  <category>FDS</category>
  <guid>https://kr9268.github.io/posts/meta-dl-creditcard-20240714/</guid>
  <pubDate>Sun, 14 Jul 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[M_Study_최종과제] 신용카드 이상거래 탐지 모델링</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-dl-creditcard-20240711/</link>
  <description><![CDATA[ 





<p>Kaggle CreditCard Fraud Detection (개선예정)</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>참여중인 딥러닝 스터디 개인과제 정리</li>
<li>원본데이터 : <a href="https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud">Kaggle CreditCard Fraud Detection</a>
<ul>
<li>Privacy보호가 중요한 금융 데이터 익명화를 위해 PCA가 적용되어 있음</li>
<li>Class(label)은 1 이상거래, 0은 정상거래를 뜻함</li>
</ul></li>
<li>데이터 확인 및 전처리
<ul>
<li>Null값 확인</li>
<li>Amount(거래액)이 0인 경우는 잡아야 할 거래가 아니라는 관점에서 데이터 제외</li>
<li>Standard/MinMax Scaler 적용</li>
<li>데이터가 Imbalance하므로 평가지표를 <code>F1-score</code>로 설정(정상 99.8 / 이상 0.2)</li>
</ul></li>
<li>모델링
<ul>
<li>수업 때 배운 <code>딥러닝</code> 코드로 간단히 구성</li>
<li>Keras Tuner를 사용한 모델 구성 후 비교</li>
<li>수업 때 배운 요소들을 지속적으로 하나씩 추가하며 기존모델과 비교
<ul>
<li>Initialization</li>
<li>Batch Normalization</li>
<li>Learning rate scheduler</li>
<li>Early stopping with patience</li>
</ul></li>
</ul></li>
<li>결론
<ul>
<li><code>Loss는 지속적인 개선이 되고 있으나 F1score는 계속 비슷한 수치</code>를 보임
<ul>
<li><code>Learning rate Scheduling 적용시에만 약간의 개선</code>이 있음</li>
<li>과제 발표 후 관련내용 질의 및 <code>모델개선 예정</code></li>
</ul></li>
<li>과제 진행 중 생긴 궁금한 점들에 대해서도 추가 질의 예정
<ul>
<li>이런 모델은 결국 사용하고자 만드는 것인데, PCA로 만든 모델이면 새로운 거래가 생성된 경우 그대로 넣어도 모델이 판별 가능한지</li>
<li>epoch 수 대비 적절한 Early stopping patience값이 있는지</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="과제-작성-credit-card-fraud-detection" class="level1">
<h1>과제 작성 (Credit Card Fraud Detection)</h1>
<section id="데이터-확인kaggle-설명" class="level2">
<h2 class="anchored" data-anchor-id="데이터-확인kaggle-설명">데이터 확인(Kaggle 설명)</h2>
<ul>
<li>Kaggle 링크 : https://www.kaggle.com/datasets/mlg-ulb/creditcardfraud</li>
<li>컬럼별 정보
<ul>
<li>V1~V28 : may be result of a PCA Dimensionality reduction to protect user identities and sensitive features(v1-v28)</li>
<li>Amount : Transaction amount</li>
<li>Class : 1 for fraudulent transactions, 0 otherwise</li>
</ul></li>
</ul>
</section>
<section id="데이터-확인-및-전처리" class="level2">
<h2 class="anchored" data-anchor-id="데이터-확인-및-전처리">데이터 확인 및 전처리</h2>
<div id="296bbfd2" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlite3</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a connection to the SQLite database</span></span>
<span id="cb1-5">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'creditcard.db'</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the data from the database into a pandas DataFrame</span></span>
<span id="cb1-8">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM creditcard"</span>, conn)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Close the connection</span></span>
<span id="cb1-11">conn.close()</span>
<span id="cb1-12">df</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Time</th>
<th data-quarto-table-cell-role="th">V1</th>
<th data-quarto-table-cell-role="th">V2</th>
<th data-quarto-table-cell-role="th">V3</th>
<th data-quarto-table-cell-role="th">V4</th>
<th data-quarto-table-cell-role="th">V5</th>
<th data-quarto-table-cell-role="th">V6</th>
<th data-quarto-table-cell-role="th">V7</th>
<th data-quarto-table-cell-role="th">V8</th>
<th data-quarto-table-cell-role="th">V9</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">V21</th>
<th data-quarto-table-cell-role="th">V22</th>
<th data-quarto-table-cell-role="th">V23</th>
<th data-quarto-table-cell-role="th">V24</th>
<th data-quarto-table-cell-role="th">V25</th>
<th data-quarto-table-cell-role="th">V26</th>
<th data-quarto-table-cell-role="th">V27</th>
<th data-quarto-table-cell-role="th">V28</th>
<th data-quarto-table-cell-role="th">Amount</th>
<th data-quarto-table-cell-role="th">Class</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0.0</td>
<td>-1.359807</td>
<td>-0.072781</td>
<td>2.536347</td>
<td>1.378155</td>
<td>-0.338321</td>
<td>0.462388</td>
<td>0.239599</td>
<td>0.098698</td>
<td>0.363787</td>
<td>...</td>
<td>-0.018307</td>
<td>0.277838</td>
<td>-0.110474</td>
<td>0.066928</td>
<td>0.128539</td>
<td>-0.189115</td>
<td>0.133558</td>
<td>-0.021053</td>
<td>149.62</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0.0</td>
<td>1.191857</td>
<td>0.266151</td>
<td>0.166480</td>
<td>0.448154</td>
<td>0.060018</td>
<td>-0.082361</td>
<td>-0.078803</td>
<td>0.085102</td>
<td>-0.255425</td>
<td>...</td>
<td>-0.225775</td>
<td>-0.638672</td>
<td>0.101288</td>
<td>-0.339846</td>
<td>0.167170</td>
<td>0.125895</td>
<td>-0.008983</td>
<td>0.014724</td>
<td>2.69</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>1.0</td>
<td>-1.358354</td>
<td>-1.340163</td>
<td>1.773209</td>
<td>0.379780</td>
<td>-0.503198</td>
<td>1.800499</td>
<td>0.791461</td>
<td>0.247676</td>
<td>-1.514654</td>
<td>...</td>
<td>0.247998</td>
<td>0.771679</td>
<td>0.909412</td>
<td>-0.689281</td>
<td>-0.327642</td>
<td>-0.139097</td>
<td>-0.055353</td>
<td>-0.059752</td>
<td>378.66</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>1.0</td>
<td>-0.966272</td>
<td>-0.185226</td>
<td>1.792993</td>
<td>-0.863291</td>
<td>-0.010309</td>
<td>1.247203</td>
<td>0.237609</td>
<td>0.377436</td>
<td>-1.387024</td>
<td>...</td>
<td>-0.108300</td>
<td>0.005274</td>
<td>-0.190321</td>
<td>-1.175575</td>
<td>0.647376</td>
<td>-0.221929</td>
<td>0.062723</td>
<td>0.061458</td>
<td>123.50</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2.0</td>
<td>-1.158233</td>
<td>0.877737</td>
<td>1.548718</td>
<td>0.403034</td>
<td>-0.407193</td>
<td>0.095921</td>
<td>0.592941</td>
<td>-0.270533</td>
<td>0.817739</td>
<td>...</td>
<td>-0.009431</td>
<td>0.798278</td>
<td>-0.137458</td>
<td>0.141267</td>
<td>-0.206010</td>
<td>0.502292</td>
<td>0.219422</td>
<td>0.215153</td>
<td>69.99</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">284802</td>
<td>172786.0</td>
<td>-11.881118</td>
<td>10.071785</td>
<td>-9.834783</td>
<td>-2.066656</td>
<td>-5.364473</td>
<td>-2.606837</td>
<td>-4.918215</td>
<td>7.305334</td>
<td>1.914428</td>
<td>...</td>
<td>0.213454</td>
<td>0.111864</td>
<td>1.014480</td>
<td>-0.509348</td>
<td>1.436807</td>
<td>0.250034</td>
<td>0.943651</td>
<td>0.823731</td>
<td>0.77</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">284803</td>
<td>172787.0</td>
<td>-0.732789</td>
<td>-0.055080</td>
<td>2.035030</td>
<td>-0.738589</td>
<td>0.868229</td>
<td>1.058415</td>
<td>0.024330</td>
<td>0.294869</td>
<td>0.584800</td>
<td>...</td>
<td>0.214205</td>
<td>0.924384</td>
<td>0.012463</td>
<td>-1.016226</td>
<td>-0.606624</td>
<td>-0.395255</td>
<td>0.068472</td>
<td>-0.053527</td>
<td>24.79</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">284804</td>
<td>172788.0</td>
<td>1.919565</td>
<td>-0.301254</td>
<td>-3.249640</td>
<td>-0.557828</td>
<td>2.630515</td>
<td>3.031260</td>
<td>-0.296827</td>
<td>0.708417</td>
<td>0.432454</td>
<td>...</td>
<td>0.232045</td>
<td>0.578229</td>
<td>-0.037501</td>
<td>0.640134</td>
<td>0.265745</td>
<td>-0.087371</td>
<td>0.004455</td>
<td>-0.026561</td>
<td>67.88</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">284805</td>
<td>172788.0</td>
<td>-0.240440</td>
<td>0.530483</td>
<td>0.702510</td>
<td>0.689799</td>
<td>-0.377961</td>
<td>0.623708</td>
<td>-0.686180</td>
<td>0.679145</td>
<td>0.392087</td>
<td>...</td>
<td>0.265245</td>
<td>0.800049</td>
<td>-0.163298</td>
<td>0.123205</td>
<td>-0.569159</td>
<td>0.546668</td>
<td>0.108821</td>
<td>0.104533</td>
<td>10.00</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">284806</td>
<td>172792.0</td>
<td>-0.533413</td>
<td>-0.189733</td>
<td>0.703337</td>
<td>-0.506271</td>
<td>-0.012546</td>
<td>-0.649617</td>
<td>1.577006</td>
<td>-0.414650</td>
<td>0.486180</td>
<td>...</td>
<td>0.261057</td>
<td>0.643078</td>
<td>0.376777</td>
<td>0.008797</td>
<td>-0.473649</td>
<td>-0.818267</td>
<td>-0.002415</td>
<td>0.013649</td>
<td>217.00</td>
<td>0</td>
</tr>
</tbody>
</table>

<p>284807 rows × 31 columns</p>
</div>
</div>
</div>
<ul>
<li><strong>Null값 확인</strong></li>
</ul>
<div id="bf207a33" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df.info()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 284807 entries, 0 to 284806
Data columns (total 31 columns):
 #   Column  Non-Null Count   Dtype  
---  ------  --------------   -----  
 0   Time    284807 non-null  float64
 1   V1      284807 non-null  float64
 2   V2      284807 non-null  float64
 3   V3      284807 non-null  float64
 4   V4      284807 non-null  float64
 5   V5      284807 non-null  float64
 6   V6      284807 non-null  float64
 7   V7      284807 non-null  float64
 8   V8      284807 non-null  float64
 9   V9      284807 non-null  float64
 10  V10     284807 non-null  float64
 11  V11     284807 non-null  float64
 12  V12     284807 non-null  float64
 13  V13     284807 non-null  float64
 14  V14     284807 non-null  float64
 15  V15     284807 non-null  float64
 16  V16     284807 non-null  float64
 17  V17     284807 non-null  float64
 18  V18     284807 non-null  float64
 19  V19     284807 non-null  float64
 20  V20     284807 non-null  float64
 21  V21     284807 non-null  float64
 22  V22     284807 non-null  float64
 23  V23     284807 non-null  float64
 24  V24     284807 non-null  float64
 25  V25     284807 non-null  float64
 26  V26     284807 non-null  float64
 27  V27     284807 non-null  float64
 28  V28     284807 non-null  float64
 29  Amount  284807 non-null  float64
 30  Class   284807 non-null  int64  
dtypes: float64(30), int64(1)
memory usage: 67.4 MB</code></pre>
</div>
</div>
<ul>
<li><strong>Amount가 0인 값 확인</strong>
<ul>
<li>결제에 대한 Validation 등에 대한 기록으로 추정</li>
<li>이상거래(Class 1)인 데이터도 있긴 하지만, 실질적인 돈의 이동이 없는 것을 이상거래로 잡아야할지에 대한 의문</li>
<li>Amount 0인 값은 제외하는 것으로 결정</li>
</ul></li>
</ul>
<div id="7375419f" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Amount'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Time</th>
<th data-quarto-table-cell-role="th">V1</th>
<th data-quarto-table-cell-role="th">V2</th>
<th data-quarto-table-cell-role="th">V3</th>
<th data-quarto-table-cell-role="th">V4</th>
<th data-quarto-table-cell-role="th">V5</th>
<th data-quarto-table-cell-role="th">V6</th>
<th data-quarto-table-cell-role="th">V7</th>
<th data-quarto-table-cell-role="th">V8</th>
<th data-quarto-table-cell-role="th">V9</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">V21</th>
<th data-quarto-table-cell-role="th">V22</th>
<th data-quarto-table-cell-role="th">V23</th>
<th data-quarto-table-cell-role="th">V24</th>
<th data-quarto-table-cell-role="th">V25</th>
<th data-quarto-table-cell-role="th">V26</th>
<th data-quarto-table-cell-role="th">V27</th>
<th data-quarto-table-cell-role="th">V28</th>
<th data-quarto-table-cell-role="th">Amount</th>
<th data-quarto-table-cell-role="th">Class</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">383</td>
<td>282.0</td>
<td>-0.356466</td>
<td>0.725418</td>
<td>1.971749</td>
<td>0.831343</td>
<td>0.369681</td>
<td>-0.107776</td>
<td>0.751610</td>
<td>-0.120166</td>
<td>-0.420675</td>
<td>...</td>
<td>0.020804</td>
<td>0.424312</td>
<td>-0.015989</td>
<td>0.466754</td>
<td>-0.809962</td>
<td>0.657334</td>
<td>-0.043150</td>
<td>-0.046401</td>
<td>0.0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">514</td>
<td>380.0</td>
<td>-1.299837</td>
<td>0.881817</td>
<td>1.452842</td>
<td>-1.293698</td>
<td>-0.025105</td>
<td>-1.170103</td>
<td>0.861610</td>
<td>-0.193934</td>
<td>0.592001</td>
<td>...</td>
<td>-0.272563</td>
<td>-0.360853</td>
<td>0.223911</td>
<td>0.598930</td>
<td>-0.397705</td>
<td>0.637141</td>
<td>0.234872</td>
<td>0.021379</td>
<td>0.0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">534</td>
<td>403.0</td>
<td>1.237413</td>
<td>0.512365</td>
<td>0.687746</td>
<td>1.693872</td>
<td>-0.236323</td>
<td>-0.650232</td>
<td>0.118066</td>
<td>-0.230545</td>
<td>-0.808523</td>
<td>...</td>
<td>-0.077543</td>
<td>-0.178220</td>
<td>0.038722</td>
<td>0.471218</td>
<td>0.289249</td>
<td>0.871803</td>
<td>-0.066884</td>
<td>0.012986</td>
<td>0.0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">541</td>
<td>406.0</td>
<td>-2.312227</td>
<td>1.951992</td>
<td>-1.609851</td>
<td>3.997906</td>
<td>-0.522188</td>
<td>-1.426545</td>
<td>-2.537387</td>
<td>1.391657</td>
<td>-2.770089</td>
<td>...</td>
<td>0.517232</td>
<td>-0.035049</td>
<td>-0.465211</td>
<td>0.320198</td>
<td>0.044519</td>
<td>0.177840</td>
<td>0.261145</td>
<td>-0.143276</td>
<td>0.0</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">575</td>
<td>430.0</td>
<td>-1.860258</td>
<td>-0.629859</td>
<td>0.966570</td>
<td>0.844632</td>
<td>0.759983</td>
<td>-1.481173</td>
<td>-0.509681</td>
<td>0.540722</td>
<td>-0.733623</td>
<td>...</td>
<td>0.268028</td>
<td>0.125515</td>
<td>-0.225029</td>
<td>0.586664</td>
<td>-0.031598</td>
<td>0.570168</td>
<td>-0.043007</td>
<td>-0.223739</td>
<td>0.0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">283719</td>
<td>171817.0</td>
<td>-0.750414</td>
<td>0.904175</td>
<td>0.996461</td>
<td>0.427284</td>
<td>1.720336</td>
<td>0.929256</td>
<td>0.794272</td>
<td>0.176719</td>
<td>-1.836261</td>
<td>...</td>
<td>0.050750</td>
<td>0.115532</td>
<td>-0.623995</td>
<td>-0.186896</td>
<td>0.733759</td>
<td>2.558151</td>
<td>-0.188835</td>
<td>0.001654</td>
<td>0.0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">283782</td>
<td>171870.0</td>
<td>2.083677</td>
<td>-0.065811</td>
<td>-1.442870</td>
<td>0.135416</td>
<td>0.043035</td>
<td>-1.306975</td>
<td>0.335835</td>
<td>-0.371635</td>
<td>0.730560</td>
<td>...</td>
<td>-0.147536</td>
<td>-0.246599</td>
<td>0.194758</td>
<td>-0.082277</td>
<td>0.012887</td>
<td>-0.069278</td>
<td>-0.048995</td>
<td>-0.065482</td>
<td>0.0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">283949</td>
<td>172027.0</td>
<td>2.132569</td>
<td>-0.057836</td>
<td>-1.724522</td>
<td>-0.030326</td>
<td>0.412146</td>
<td>-0.903088</td>
<td>0.345843</td>
<td>-0.348132</td>
<td>0.722638</td>
<td>...</td>
<td>-0.188739</td>
<td>-0.343876</td>
<td>0.105024</td>
<td>-0.763831</td>
<td>0.117381</td>
<td>-0.027682</td>
<td>-0.047514</td>
<td>-0.071700</td>
<td>0.0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">284085</td>
<td>172140.0</td>
<td>-2.210521</td>
<td>-1.039425</td>
<td>0.189704</td>
<td>-1.291932</td>
<td>3.742120</td>
<td>-1.665061</td>
<td>3.120388</td>
<td>-2.324089</td>
<td>0.364926</td>
<td>...</td>
<td>-0.286359</td>
<td>1.326003</td>
<td>-0.361764</td>
<td>-0.268117</td>
<td>1.051309</td>
<td>0.334629</td>
<td>-1.930149</td>
<td>-0.899888</td>
<td>0.0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">284770</td>
<td>172759.0</td>
<td>-0.822731</td>
<td>1.270140</td>
<td>-0.138566</td>
<td>0.479620</td>
<td>1.242101</td>
<td>0.795218</td>
<td>0.454284</td>
<td>0.556038</td>
<td>-1.550610</td>
<td>...</td>
<td>0.138766</td>
<td>0.450908</td>
<td>-0.192146</td>
<td>-0.196218</td>
<td>-0.261664</td>
<td>2.372675</td>
<td>-0.042743</td>
<td>0.109613</td>
<td>0.0</td>
<td>0</td>
</tr>
</tbody>
</table>

<p>1825 rows × 31 columns</p>
</div>
</div>
</div>
<div id="4933dc92" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">df_filtered1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Amount'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].copy()</span>
<span id="cb5-2">df_filtered1</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Time</th>
<th data-quarto-table-cell-role="th">V1</th>
<th data-quarto-table-cell-role="th">V2</th>
<th data-quarto-table-cell-role="th">V3</th>
<th data-quarto-table-cell-role="th">V4</th>
<th data-quarto-table-cell-role="th">V5</th>
<th data-quarto-table-cell-role="th">V6</th>
<th data-quarto-table-cell-role="th">V7</th>
<th data-quarto-table-cell-role="th">V8</th>
<th data-quarto-table-cell-role="th">V9</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">V21</th>
<th data-quarto-table-cell-role="th">V22</th>
<th data-quarto-table-cell-role="th">V23</th>
<th data-quarto-table-cell-role="th">V24</th>
<th data-quarto-table-cell-role="th">V25</th>
<th data-quarto-table-cell-role="th">V26</th>
<th data-quarto-table-cell-role="th">V27</th>
<th data-quarto-table-cell-role="th">V28</th>
<th data-quarto-table-cell-role="th">Amount</th>
<th data-quarto-table-cell-role="th">Class</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0.0</td>
<td>-1.359807</td>
<td>-0.072781</td>
<td>2.536347</td>
<td>1.378155</td>
<td>-0.338321</td>
<td>0.462388</td>
<td>0.239599</td>
<td>0.098698</td>
<td>0.363787</td>
<td>...</td>
<td>-0.018307</td>
<td>0.277838</td>
<td>-0.110474</td>
<td>0.066928</td>
<td>0.128539</td>
<td>-0.189115</td>
<td>0.133558</td>
<td>-0.021053</td>
<td>149.62</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0.0</td>
<td>1.191857</td>
<td>0.266151</td>
<td>0.166480</td>
<td>0.448154</td>
<td>0.060018</td>
<td>-0.082361</td>
<td>-0.078803</td>
<td>0.085102</td>
<td>-0.255425</td>
<td>...</td>
<td>-0.225775</td>
<td>-0.638672</td>
<td>0.101288</td>
<td>-0.339846</td>
<td>0.167170</td>
<td>0.125895</td>
<td>-0.008983</td>
<td>0.014724</td>
<td>2.69</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>1.0</td>
<td>-1.358354</td>
<td>-1.340163</td>
<td>1.773209</td>
<td>0.379780</td>
<td>-0.503198</td>
<td>1.800499</td>
<td>0.791461</td>
<td>0.247676</td>
<td>-1.514654</td>
<td>...</td>
<td>0.247998</td>
<td>0.771679</td>
<td>0.909412</td>
<td>-0.689281</td>
<td>-0.327642</td>
<td>-0.139097</td>
<td>-0.055353</td>
<td>-0.059752</td>
<td>378.66</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>1.0</td>
<td>-0.966272</td>
<td>-0.185226</td>
<td>1.792993</td>
<td>-0.863291</td>
<td>-0.010309</td>
<td>1.247203</td>
<td>0.237609</td>
<td>0.377436</td>
<td>-1.387024</td>
<td>...</td>
<td>-0.108300</td>
<td>0.005274</td>
<td>-0.190321</td>
<td>-1.175575</td>
<td>0.647376</td>
<td>-0.221929</td>
<td>0.062723</td>
<td>0.061458</td>
<td>123.50</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2.0</td>
<td>-1.158233</td>
<td>0.877737</td>
<td>1.548718</td>
<td>0.403034</td>
<td>-0.407193</td>
<td>0.095921</td>
<td>0.592941</td>
<td>-0.270533</td>
<td>0.817739</td>
<td>...</td>
<td>-0.009431</td>
<td>0.798278</td>
<td>-0.137458</td>
<td>0.141267</td>
<td>-0.206010</td>
<td>0.502292</td>
<td>0.219422</td>
<td>0.215153</td>
<td>69.99</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">284802</td>
<td>172786.0</td>
<td>-11.881118</td>
<td>10.071785</td>
<td>-9.834783</td>
<td>-2.066656</td>
<td>-5.364473</td>
<td>-2.606837</td>
<td>-4.918215</td>
<td>7.305334</td>
<td>1.914428</td>
<td>...</td>
<td>0.213454</td>
<td>0.111864</td>
<td>1.014480</td>
<td>-0.509348</td>
<td>1.436807</td>
<td>0.250034</td>
<td>0.943651</td>
<td>0.823731</td>
<td>0.77</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">284803</td>
<td>172787.0</td>
<td>-0.732789</td>
<td>-0.055080</td>
<td>2.035030</td>
<td>-0.738589</td>
<td>0.868229</td>
<td>1.058415</td>
<td>0.024330</td>
<td>0.294869</td>
<td>0.584800</td>
<td>...</td>
<td>0.214205</td>
<td>0.924384</td>
<td>0.012463</td>
<td>-1.016226</td>
<td>-0.606624</td>
<td>-0.395255</td>
<td>0.068472</td>
<td>-0.053527</td>
<td>24.79</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">284804</td>
<td>172788.0</td>
<td>1.919565</td>
<td>-0.301254</td>
<td>-3.249640</td>
<td>-0.557828</td>
<td>2.630515</td>
<td>3.031260</td>
<td>-0.296827</td>
<td>0.708417</td>
<td>0.432454</td>
<td>...</td>
<td>0.232045</td>
<td>0.578229</td>
<td>-0.037501</td>
<td>0.640134</td>
<td>0.265745</td>
<td>-0.087371</td>
<td>0.004455</td>
<td>-0.026561</td>
<td>67.88</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">284805</td>
<td>172788.0</td>
<td>-0.240440</td>
<td>0.530483</td>
<td>0.702510</td>
<td>0.689799</td>
<td>-0.377961</td>
<td>0.623708</td>
<td>-0.686180</td>
<td>0.679145</td>
<td>0.392087</td>
<td>...</td>
<td>0.265245</td>
<td>0.800049</td>
<td>-0.163298</td>
<td>0.123205</td>
<td>-0.569159</td>
<td>0.546668</td>
<td>0.108821</td>
<td>0.104533</td>
<td>10.00</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">284806</td>
<td>172792.0</td>
<td>-0.533413</td>
<td>-0.189733</td>
<td>0.703337</td>
<td>-0.506271</td>
<td>-0.012546</td>
<td>-0.649617</td>
<td>1.577006</td>
<td>-0.414650</td>
<td>0.486180</td>
<td>...</td>
<td>0.261057</td>
<td>0.643078</td>
<td>0.376777</td>
<td>0.008797</td>
<td>-0.473649</td>
<td>-0.818267</td>
<td>-0.002415</td>
<td>0.013649</td>
<td>217.00</td>
<td>0</td>
</tr>
</tbody>
</table>

<p>282982 rows × 31 columns</p>
</div>
</div>
</div>
<div id="4d7d65c9" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df_filtered1[df_filtered1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Amount'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Time</th>
<th data-quarto-table-cell-role="th">V1</th>
<th data-quarto-table-cell-role="th">V2</th>
<th data-quarto-table-cell-role="th">V3</th>
<th data-quarto-table-cell-role="th">V4</th>
<th data-quarto-table-cell-role="th">V5</th>
<th data-quarto-table-cell-role="th">V6</th>
<th data-quarto-table-cell-role="th">V7</th>
<th data-quarto-table-cell-role="th">V8</th>
<th data-quarto-table-cell-role="th">V9</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">V21</th>
<th data-quarto-table-cell-role="th">V22</th>
<th data-quarto-table-cell-role="th">V23</th>
<th data-quarto-table-cell-role="th">V24</th>
<th data-quarto-table-cell-role="th">V25</th>
<th data-quarto-table-cell-role="th">V26</th>
<th data-quarto-table-cell-role="th">V27</th>
<th data-quarto-table-cell-role="th">V28</th>
<th data-quarto-table-cell-role="th">Amount</th>
<th data-quarto-table-cell-role="th">Class</th>
</tr>
</thead>
<tbody>
</tbody>
</table>

<p>0 rows × 31 columns</p>
</div>
</div>
</div>
<ul>
<li><strong>Label값(이상거래 비중) 확인</strong>
<ul>
<li>Imbalance한 경우, Accuracy는 성능측정에 한계가 있으므로, 다른 지표를 사용</li>
<li><code>F1-Score</code> 사용 예정</li>
</ul></li>
</ul>
<div id="41b7d570" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">df_filtered1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Class"</span>].value_counts(normalize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Class
0    0.998357
1    0.001643
Name: proportion, dtype: float64</code></pre>
</div>
</div>
<ul>
<li><strong>X와 Y로 나누고, Scaler 적용(StandardScaler, MinMaxScaler)</strong></li>
</ul>
<div id="54579d3e" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">df_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_filtered1.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class'</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).copy()</span>
<span id="cb9-2">df_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_filtered1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class'</span>].copy()</span></code></pre></div>
</div>
<div id="e165b397" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">df_x.shape, df_y.shape</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>((282982, 29), (282982,))</code></pre>
</div>
</div>
<div id="d001ccbc" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StandardScaler, MinMaxScaler</span>
<span id="cb12-2"></span>
<span id="cb12-3">scaler_minmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MinMaxScaler()</span>
<span id="cb12-4">df_x_scaled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler_minmax.fit_transform(df_x)</span>
<span id="cb12-5"></span>
<span id="cb12-6">scaler_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StandardScaler()</span>
<span id="cb12-7">df_x_scaled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler_std.fit_transform(df_x_scaled)</span></code></pre></div>
</div>
<div id="4c7952b4" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">df_x_scaled</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([[-0.6947547 , -0.04287463,  1.67720049, ...,  0.33079262,
        -0.06431265,  0.24200481],
       [ 0.60928   ,  0.16247803,  0.11211972, ..., -0.02292114,
         0.0439881 , -0.34378459],
       [-0.6940121 , -0.81075824,  1.17321784, ..., -0.13798659,
        -0.18145722,  1.15515532],
       ...,
       [ 0.98117703, -0.18130206, -2.14391593, ...,  0.01042466,
        -0.08098516, -0.08388116],
       [-0.12269922,  0.32263185,  0.46611873, ...,  0.26940666,
         0.31584664, -0.31464064],
       [-0.27242357, -0.11373381,  0.46666497, ..., -0.0066233 ,
         0.04073321,  0.51063947]])</code></pre>
</div>
</div>
<ul>
<li><strong>train, test데이터 나누기</strong></li>
</ul>
<div id="d9d32a04" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train + test</span></span>
<span id="cb15-4">x_train, x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(df_x_scaled, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb15-5">y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(df_y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train과 Test로 나누기'</span>)</span>
<span id="cb15-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x_train.shape, x_test.shape)</span>
<span id="cb15-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x_train.shape, y_test.shape)</span>
<span id="cb15-10"></span>
<span id="cb15-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train + validation</span></span>
<span id="cb15-12">x_train, x_validate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(x_train, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb15-13">y_train, y_validate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(y_train, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb15-14"></span>
<span id="cb15-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb15-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train과 Validation으로 나누기'</span>)</span>
<span id="cb15-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x_train.shape, x_validate.shape, x_test.shape)</span>
<span id="cb15-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(y_train.shape, y_validate.shape, y_test.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Train과 Test로 나누기
(198087, 29) (84895, 29)
(198087, 29) (84895,)

Train과 Validation으로 나누기
(138660, 29) (59427, 29) (84895, 29)
(138660,) (59427,) (84895,)</code></pre>
</div>
</div>
</section>
<section id="모델링" class="level2">
<h2 class="anchored" data-anchor-id="모델링">모델링</h2>
<section id="모델링-기초-딥러닝" class="level3">
<h3 class="anchored" data-anchor-id="모델링-기초-딥러닝">모델링 (기초 딥러닝)</h3>
<div id="d2674445" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb17-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb17-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span></code></pre></div>
</div>
<div id="abdc0b88" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델링</span></span>
<span id="cb18-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.models.Sequential([</span>
<span id="cb18-3">    tf.keras.layers.Input((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb18-4">    tf.keras.layers.Flatten(),</span>
<span id="cb18-5">    tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>),</span>
<span id="cb18-6">    tf.keras.layers.Dropout(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>),</span>
<span id="cb18-7">    tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigmoid'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이진분류이므로 Sigmoid사용</span></span>
<span id="cb18-8">])</span>
<span id="cb18-9"></span>
<span id="cb18-10">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adam'</span>,</span>
<span id="cb18-11">              loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0과 1의 이진분류이므로 binary_crossentropy 사용</span></span>
<span id="cb18-12">              metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>])</span>
<span id="cb18-13"></span>
<span id="cb18-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 학습</span></span>
<span id="cb18-15">history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit(x_train, y_train, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb18-16"></span>
<span id="cb18-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 평가</span></span>
<span id="cb18-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'* 모델평가'</span>)</span>
<span id="cb18-19">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.evaluate(x_train, y_train, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb18-20">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.evaluate(x_test, y_test, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 1/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 4s 763us/step - F1Score: 0.0037 - loss: 0.0360
Epoch 2/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 3s 776us/step - F1Score: 0.0036 - loss: 0.0140
Epoch 3/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 3s 761us/step - F1Score: 0.0035 - loss: 0.0129
Epoch 4/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 3s 730us/step - F1Score: 0.0033 - loss: 0.0123
Epoch 5/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 3s 718us/step - F1Score: 0.0036 - loss: 0.0131
Epoch 6/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 3s 728us/step - F1Score: 0.0033 - loss: 0.0119
Epoch 7/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 3s 740us/step - F1Score: 0.0036 - loss: 0.0128
Epoch 8/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 3s 730us/step - F1Score: 0.0033 - loss: 0.0118
Epoch 9/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 5s 726us/step - F1Score: 0.0033 - loss: 0.0114
Epoch 10/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 3s 729us/step - F1Score: 0.0035 - loss: 0.0122
* 모델평가
4334/4334 - 2s - 531us/step - F1Score: 0.0034 - loss: 0.0114
2653/2653 - 1s - 511us/step - F1Score: 0.0029 - loss: 0.0123</code></pre>
</div>
</div>
</section>
<section id="모델링-keras-tunerhyper-parameter세팅" class="level3">
<h3 class="anchored" data-anchor-id="모델링-keras-tunerhyper-parameter세팅">모델링 (Keras tuner[Hyper parameter세팅])</h3>
<ul>
<li><code>Hidden Layer</code>의 수</li>
<li><code>Neuron</code>의 수</li>
<li><code>Activation fuction</code> : ReLU, ELU 중 택1
<ul>
<li>Reaky ReLU도 고려대상에 넣고싶었지만, String이 아닌 별도 함수로 적용해야해서 제외</li>
</ul></li>
<li><code>Optimizer</code> : 같은 조건으로 2개의 Optimizer(Adam, Nadam)로 먼저 돌렸다가 Tuner에게 추천받은 Nadam으로 설정</li>
</ul>
<div id="febe4793" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> keras_tuner <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> kt</span></code></pre></div>
</div>
<div id="58e652bb" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> build_model(hp):</span>
<span id="cb21-2">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.models.Sequential()</span>
<span id="cb21-3"></span>
<span id="cb21-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input &amp; Flatten</span></span>
<span id="cb21-5">    model.add(tf.keras.layers.Input((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb21-6">    model.add(tf.keras.layers.Flatten())</span>
<span id="cb21-7"></span>
<span id="cb21-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hidden Layers</span></span>
<span id="cb21-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(hp.Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_layers'</span>,min_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,max_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)):</span>
<span id="cb21-10"></span>
<span id="cb21-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Dense</span></span>
<span id="cb21-12">        units <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hp.Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'units'</span>,min_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,max_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>,step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Neurons</span></span>
<span id="cb21-13">        activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hp.Choice(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'activation'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i),values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'elu'</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Activation</span></span>
<span id="cb21-14"></span>
<span id="cb21-15">        model.add(tf.keras.layers.Dense(units, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>activation))</span>
<span id="cb21-16"></span>
<span id="cb21-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Dropout</span></span>
<span id="cb21-18">        dropout_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hp.Choice(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dropout'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i),values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>])</span>
<span id="cb21-19"></span>
<span id="cb21-20">        model.add(tf.keras.layers.Dropout(dropout_rate))</span>
<span id="cb21-21"></span>
<span id="cb21-22">    model.add(tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigmoid'</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이진분류이므로 Sigmoid사용</span></span>
<span id="cb21-23">        </span>
<span id="cb21-24">    </span>
<span id="cb21-25">    optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hp.Choice(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'optimizer'</span>,values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Nadam'</span>])</span>
<span id="cb21-26">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>,metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>])</span>
<span id="cb21-27">    </span>
<span id="cb21-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model</span>
<span id="cb21-29"></span>
<span id="cb21-30"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> tf.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/device:GPU:0'</span>):</span>
<span id="cb21-31">    tuner<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kt.RandomSearch(build_model,</span>
<span id="cb21-32">                        objective<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kt.Objective(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val_F1Score'</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>),<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># accuracy 미사용</span></span>
<span id="cb21-33">                        overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb21-34">                        max_trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,</span>
<span id="cb21-35">                        project_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'randomsearch_model'</span>)</span>
<span id="cb21-36"></span>
<span id="cb21-37"></span>
<span id="cb21-38">    tuner.search(x_train,y_train,epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,validation_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x_test,y_test))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Trial 9 Complete [00h 01m 10s]
val_F1Score: 0.0028702165000140667

Best val_F1Score So Far: 0.0028861388564109802
Total elapsed time: 00h 18m 28s</code></pre>
</div>
</div>
<div id="5ebbfd41" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">tuner.get_best_hyperparameters()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].values</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'num_layers': 12,
 'units': 90,
 'activation0': 'relu',
 'dropout0': 0.9,
 'optimizer': 'Nadam',
 'activation1': 'relu',
 'dropout1': 0.1,
 'activation2': 'relu',
 'dropout2': 0.1,
 'activation3': 'relu',
 'dropout3': 0.1,
 'activation4': 'relu',
 'dropout4': 0.1,
 'activation5': 'relu',
 'dropout5': 0.1,
 'activation6': 'relu',
 'dropout6': 0.1,
 'activation7': 'relu',
 'dropout7': 0.1,
 'activation8': 'relu',
 'dropout8': 0.1,
 'activation9': 'relu',
 'dropout9': 0.1,
 'activation10': 'relu',
 'dropout10': 0.1,
 'activation11': 'relu',
 'dropout11': 0.1}</code></pre>
</div>
</div>
<div id="87df7865" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">model_2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tuner.get_best_models(num_models<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb25-2">model_2.summary()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>c:\Users\kibok\AppData\Local\Programs\Python\Python312\Lib\site-packages\keras\src\saving\saving_lib.py:576: UserWarning: Skipping variable loading for optimizer 'nadam', because it has 2 variables whereas the saved optimizer has 55 variables. 
  saveable.load_own_variables(weights_store.get(inner_path))</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">Model: "sequential"</span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓
┃<span style="font-weight: bold"> Layer (type)                    </span>┃<span style="font-weight: bold"> Output Shape           </span>┃<span style="font-weight: bold">       Param # </span>┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩
│ flatten (<span style="color: #0087ff; text-decoration-color: #0087ff">Flatten</span>)               │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">29</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                   │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">2,700</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)               │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_1 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_1 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_2 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_2 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_3 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_3 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_4 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_4 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_5 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_5 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_6 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_6 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_7 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_7 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_8 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_8 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_9 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_9 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_10 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_10 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)            │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_11 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_11 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)            │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_12 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">1</span>)              │            <span style="color: #00af00; text-decoration-color: #00af00">91</span> │
└─────────────────────────────────┴────────────────────────┴───────────────┘
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Total params: </span><span style="color: #00af00; text-decoration-color: #00af00">92,881</span> (362.82 KB)
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Trainable params: </span><span style="color: #00af00; text-decoration-color: #00af00">92,881</span> (362.82 KB)
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Non-trainable params: </span><span style="color: #00af00; text-decoration-color: #00af00">0</span> (0.00 B)
</pre>
</div>
</div>
<div id="5d7c5633" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 학습</span></span>
<span id="cb27-2">history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_2.fit(x_train, y_train, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 평가</span></span>
<span id="cb27-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'* 모델평가'</span>)</span>
<span id="cb27-6">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_2.evaluate(x_train, y_train, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb27-7">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_2.evaluate(x_test, y_test, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 1/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 15s 2ms/step - F1Score: 0.0031 - loss: 0.0463
Epoch 2/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0034 - loss: 0.0222
Epoch 3/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0031 - loss: 0.0144
Epoch 4/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0032 - loss: 0.0202
Epoch 5/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0034 - loss: 0.0200
Epoch 6/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0034 - loss: 0.0166
Epoch 7/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0036 - loss: 0.0167
Epoch 8/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 12s 3ms/step - F1Score: 0.0032 - loss: 0.0131
Epoch 9/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 11s 3ms/step - F1Score: 0.0033 - loss: 0.0229
Epoch 10/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 11s 3ms/step - F1Score: 0.0032 - loss: 0.0216
* 모델평가
4334/4334 - 4s - 1ms/step - F1Score: 0.0034 - loss: 0.0125
2653/2653 - 2s - 787us/step - F1Score: 0.0029 - loss: 0.0113</code></pre>
</div>
</div>
<section id="f1score-및-loss-개선-비교" class="level4">
<h4 class="anchored" data-anchor-id="f1score-및-loss-개선-비교">F1Score 및 Loss 개선 비교</h4>
<ul>
<li>모델평가(기본) <br>
<ul>
<li>4334/4334 - 2s - 531us/step - F1Score: 0.0034 - loss: 0.0114</li>
<li>2653/2653 - 1s - 511us/step - F1Score: 0.0029 - loss: 0.0123</li>
</ul></li>
<li>모델평가(Tuner) <br>
<ul>
<li>4334/4334 - 4s - 860us/step - F1Score: 0.0034 - loss: 0.0175</li>
<li>2653/2653 - 2s - 862us/step - F1Score: 0.0029 - loss: 0.0164</li>
</ul></li>
</ul>
</section>
</section>
<section id="모델링-keras-tuner-initialization-추가" class="level3">
<h3 class="anchored" data-anchor-id="모델링-keras-tuner-initialization-추가">모델링 (Keras tuner + Initialization 추가)</h3>
<ul>
<li><code>HeNormal (Kaiming) 적용</code>
<ul>
<li>수업시간에 배운 <code>Random</code>/<code>Xavier</code>/ <code>Kaiming/MSRA Initialization for ReLU</code>에 대해 검색해 봄
<ul>
<li>미설정시 기본값은 Xavier(GlorotNormal)로 적용된다고 함</li>
<li><strong>Pytorch와 Tensorflow에서의 Initialization 명칭이 다름</strong>
<ul>
<li>HeNormal(Tensorflow) / Kaiming (Pytorch)</li>
<li>GlorotNormal(Tensorflow) / XavierNormal (Pytorch)</li>
<li>Random Normall(Tensorflow) / Random(Pytorch)</li>
</ul></li>
<li>Innitialization은 <code>kernel_initializer(Weight)</code>뿐 아니라 <code>bias_initializer(Bias)</code>도 있음</li>
</ul></li>
</ul></li>
</ul>
<div id="0f75d716" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> build_model(hp):</span>
<span id="cb29-2">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.models.Sequential()</span>
<span id="cb29-3"></span>
<span id="cb29-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input &amp; Flatten</span></span>
<span id="cb29-5">    model.add(tf.keras.layers.Input((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb29-6">    model.add(tf.keras.layers.Flatten())</span>
<span id="cb29-7"></span>
<span id="cb29-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hidden Layers</span></span>
<span id="cb29-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(hp.Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_layers'</span>,min_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,max_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)):</span>
<span id="cb29-10"></span>
<span id="cb29-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Dense</span></span>
<span id="cb29-12">        units <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hp.Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'units'</span>,min_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,max_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>,step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Neurons</span></span>
<span id="cb29-13">        activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hp.Choice(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'activation'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i),values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'elu'</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Activation</span></span>
<span id="cb29-14"></span>
<span id="cb29-15">        model.add(tf.keras.layers.Dense(units, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>activation,</span>
<span id="cb29-16">                                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 기본값은 glorot_uniform(Xavier), He(Kaiming)적용</span></span>
<span id="cb29-17">                                        kernel_initializer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tf.keras.initializers.HeNormal())) </span>
<span id="cb29-18"></span>
<span id="cb29-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Dropout</span></span>
<span id="cb29-20">        dropout_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hp.Choice(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dropout'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i),values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>])</span>
<span id="cb29-21"></span>
<span id="cb29-22">        model.add(tf.keras.layers.Dropout(dropout_rate))</span>
<span id="cb29-23"></span>
<span id="cb29-24">    model.add(tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigmoid'</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이진분류이므로 Sigmoid사용</span></span>
<span id="cb29-25">        </span>
<span id="cb29-26">    </span>
<span id="cb29-27">    optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hp.Choice(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'optimizer'</span>,values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Nadam'</span>])</span>
<span id="cb29-28">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>,metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>])</span>
<span id="cb29-29">    </span>
<span id="cb29-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model</span>
<span id="cb29-31"></span>
<span id="cb29-32"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> tf.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/device:GPU:0'</span>):</span>
<span id="cb29-33">    tuner<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kt.RandomSearch(build_model,</span>
<span id="cb29-34">                        objective<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kt.Objective(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val_F1Score'</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>),<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># accuracy 미사용</span></span>
<span id="cb29-35">                        overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb29-36">                        max_trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,</span>
<span id="cb29-37">                        project_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'randomsearch_model_+initialize'</span>)</span>
<span id="cb29-38"></span>
<span id="cb29-39"></span>
<span id="cb29-40">    tuner.search(x_train,y_train,epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,validation_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x_test,y_test))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Trial 9 Complete [00h 01m 32s]
val_F1Score: 0.002870013704523444

Best val_F1Score So Far: 0.0
Total elapsed time: 00h 21m 15s</code></pre>
</div>
</div>
<div id="14581795" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">tuner.get_best_hyperparameters()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].values</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'num_layers': 17,
 'units': 145,
 'activation0': 'elu',
 'dropout0': 0.9,
 'optimizer': 'Nadam',
 'activation1': 'relu',
 'dropout1': 0.9,
 'activation2': 'relu',
 'dropout2': 0.8,
 'activation3': 'elu',
 'dropout3': 0.9,
 'activation4': 'elu',
 'dropout4': 0.6,
 'activation5': 'elu',
 'dropout5': 0.9,
 'activation6': 'relu',
 'dropout6': 0.4,
 'activation7': 'relu',
 'dropout7': 0.2,
 'activation8': 'elu',
 'dropout8': 0.7,
 'activation9': 'relu',
 'dropout9': 0.3,
 'activation10': 'elu',
 'dropout10': 0.4,
 'activation11': 'relu',
 'dropout11': 0.8,
 'activation12': 'elu',
 'dropout12': 0.2,
 'activation13': 'relu',
 'dropout13': 0.1,
 'activation14': 'relu',
 'dropout14': 0.1,
 'activation15': 'relu',
 'dropout15': 0.1,
 'activation16': 'relu',
 'dropout16': 0.1}</code></pre>
</div>
</div>
<div id="dccddb89" class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">model_3<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tuner.get_best_models(num_models<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb33-2">model_3.summary()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>c:\Users\kibok\AppData\Local\Programs\Python\Python312\Lib\site-packages\keras\src\saving\saving_lib.py:576: UserWarning: Skipping variable loading for optimizer 'nadam', because it has 2 variables whereas the saved optimizer has 75 variables. 
  saveable.load_own_variables(weights_store.get(inner_path))</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">Model: "sequential"</span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓
┃<span style="font-weight: bold"> Layer (type)                    </span>┃<span style="font-weight: bold"> Output Shape           </span>┃<span style="font-weight: bold">       Param # </span>┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩
│ flatten (<span style="color: #0087ff; text-decoration-color: #0087ff">Flatten</span>)               │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">29</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                   │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │         <span style="color: #00af00; text-decoration-color: #00af00">4,350</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)               │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_1 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │        <span style="color: #00af00; text-decoration-color: #00af00">21,170</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_1 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_2 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │        <span style="color: #00af00; text-decoration-color: #00af00">21,170</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_2 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_3 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │        <span style="color: #00af00; text-decoration-color: #00af00">21,170</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_3 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_4 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │        <span style="color: #00af00; text-decoration-color: #00af00">21,170</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_4 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_5 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │        <span style="color: #00af00; text-decoration-color: #00af00">21,170</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_5 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_6 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │        <span style="color: #00af00; text-decoration-color: #00af00">21,170</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_6 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_7 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │        <span style="color: #00af00; text-decoration-color: #00af00">21,170</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_7 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_8 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │        <span style="color: #00af00; text-decoration-color: #00af00">21,170</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_8 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_9 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │        <span style="color: #00af00; text-decoration-color: #00af00">21,170</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_9 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_10 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │        <span style="color: #00af00; text-decoration-color: #00af00">21,170</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_10 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)            │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_11 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │        <span style="color: #00af00; text-decoration-color: #00af00">21,170</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_11 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)            │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_12 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │        <span style="color: #00af00; text-decoration-color: #00af00">21,170</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_12 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)            │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_13 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │        <span style="color: #00af00; text-decoration-color: #00af00">21,170</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_13 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)            │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_14 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │        <span style="color: #00af00; text-decoration-color: #00af00">21,170</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_14 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)            │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_15 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │        <span style="color: #00af00; text-decoration-color: #00af00">21,170</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_15 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)            │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_16 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │        <span style="color: #00af00; text-decoration-color: #00af00">21,170</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_16 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)            │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">145</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_17 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">1</span>)              │           <span style="color: #00af00; text-decoration-color: #00af00">146</span> │
└─────────────────────────────────┴────────────────────────┴───────────────┘
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Total params: </span><span style="color: #00af00; text-decoration-color: #00af00">343,216</span> (1.31 MB)
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Trainable params: </span><span style="color: #00af00; text-decoration-color: #00af00">343,216</span> (1.31 MB)
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Non-trainable params: </span><span style="color: #00af00; text-decoration-color: #00af00">0</span> (0.00 B)
</pre>
</div>
</div>
<div id="4289fbb2" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 학습</span></span>
<span id="cb35-2">history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_3.fit(x_train, y_train, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 평가</span></span>
<span id="cb35-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'* 모델평가'</span>)</span>
<span id="cb35-6">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_3.evaluate(x_train, y_train, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb35-7">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_3.evaluate(x_test, y_test, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 1/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 26s 5ms/step - F1Score: 0.0031 - loss: 0.3784
Epoch 2/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 21s 5ms/step - F1Score: 0.0033 - loss: 0.0700
Epoch 3/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 19s 4ms/step - F1Score: 0.0031 - loss: 0.1938
Epoch 4/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 20s 5ms/step - F1Score: 0.0032 - loss: 0.2460
Epoch 5/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 18s 4ms/step - F1Score: 0.0035 - loss: 0.2332
Epoch 6/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 19s 4ms/step - F1Score: 0.0038 - loss: 0.0661
Epoch 7/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 18s 4ms/step - F1Score: 0.0033 - loss: 0.0123
Epoch 8/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 20s 5ms/step - F1Score: 0.0033 - loss: 0.0124
Epoch 9/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 20s 5ms/step - F1Score: 0.0031 - loss: 0.0583
Epoch 10/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 20s 4ms/step - F1Score: 0.0033 - loss: 0.4909
* 모델평가
4334/4334 - 6s - 1ms/step - F1Score: 0.0034 - loss: 0.0124
2653/2653 - 4s - 1ms/step - F1Score: 0.0029 - loss: 0.0109</code></pre>
</div>
</div>
<section id="f1score-및-loss-개선-비교-1" class="level4">
<h4 class="anchored" data-anchor-id="f1score-및-loss-개선-비교-1">F1Score 및 Loss 개선 비교</h4>
<ul>
<li>모델평가(기본) <br>
<ul>
<li>4334/4334 - 2s - 531us/step - F1Score: 0.0034 - loss: 0.0114</li>
<li>2653/2653 - 1s - 511us/step - F1Score: 0.0029 - loss: 0.0123</li>
</ul></li>
<li>모델평가(Tuner) <br>
<ul>
<li>4334/4334 - 4s - 860us/step - F1Score: 0.0034 - loss: 0.0175</li>
<li>2653/2653 - 2s - 862us/step - F1Score: 0.0029 - loss: 0.0164</li>
</ul></li>
<li>모델평가(Tuner + Kaiming Initialization) <br>
<ul>
<li>4334/4334 - 6s - 1ms/step - F1Score: 0.0034 - loss: 0.0124</li>
<li>2653/2653 - 4s - 1ms/step - F1Score: 0.0029 - loss: 0.0109</li>
</ul></li>
</ul>
</section>
</section>
<section id="모델링-keras-tuner-batch-normalization-추가" class="level3">
<h3 class="anchored" data-anchor-id="모델링-keras-tuner-batch-normalization-추가">모델링 (Keras tuner + Batch Normalization 추가)</h3>
<ul>
<li>Activation layer 전에 Batch normalization 적용</li>
</ul>
<div id="a561a1e4" class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> build_model(hp):</span>
<span id="cb37-2">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.models.Sequential()</span>
<span id="cb37-3"></span>
<span id="cb37-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input &amp; Flatten</span></span>
<span id="cb37-5">    model.add(tf.keras.layers.Input((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb37-6">    model.add(tf.keras.layers.Flatten())</span>
<span id="cb37-7"></span>
<span id="cb37-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hidden Layers</span></span>
<span id="cb37-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(hp.Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_layers'</span>,min_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,max_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)):</span>
<span id="cb37-10"></span>
<span id="cb37-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Dense</span></span>
<span id="cb37-12">        units <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hp.Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'units'</span>,min_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,max_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>,step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Neurons</span></span>
<span id="cb37-13">        activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hp.Choice(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'activation'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i),values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'elu'</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Activation</span></span>
<span id="cb37-14"></span>
<span id="cb37-15">        model.add(tf.keras.layers.Dense(units, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>activation,</span>
<span id="cb37-16">                                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 기본값은 glorot_uniform(Xavier), He는 Kaiming</span></span>
<span id="cb37-17">                                        kernel_initializer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tf.keras.initializers.HeNormal())) </span>
<span id="cb37-18">        </span>
<span id="cb37-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add Batch Normalization</span></span>
<span id="cb37-20">        model.add(tf.keras.layers.BatchNormalization()) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Layer통과후 &amp; Activation 전</span></span>
<span id="cb37-21">        </span>
<span id="cb37-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Dropout</span></span>
<span id="cb37-23">        dropout_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hp.Choice(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dropout'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i),values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>])</span>
<span id="cb37-24"></span>
<span id="cb37-25">        model.add(tf.keras.layers.Dropout(dropout_rate))</span>
<span id="cb37-26"></span>
<span id="cb37-27">    model.add(tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigmoid'</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이진분류이므로 Sigmoid사용</span></span>
<span id="cb37-28">        </span>
<span id="cb37-29">    </span>
<span id="cb37-30">    optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hp.Choice(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'optimizer'</span>,values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Nadam'</span>])</span>
<span id="cb37-31">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>,metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>])</span>
<span id="cb37-32">    </span>
<span id="cb37-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model</span>
<span id="cb37-34"></span>
<span id="cb37-35"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> tf.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/device:GPU:0'</span>):</span>
<span id="cb37-36">    tuner<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kt.RandomSearch(build_model,</span>
<span id="cb37-37">                        objective<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kt.Objective(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val_F1Score'</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>),<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># accuracy 미사용</span></span>
<span id="cb37-38">                        overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb37-39">                        max_trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,</span>
<span id="cb37-40">                        project_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'randomsearch_model_+initialize+batchnormalize'</span>)</span>
<span id="cb37-41"></span>
<span id="cb37-42"></span>
<span id="cb37-43">    tuner.search(x_train,y_train,epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,validation_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x_test,y_test))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Trial 9 Complete [00h 05m 00s]
val_F1Score: 0.003198833204805851

Best val_F1Score So Far: 0.003198833204805851
Total elapsed time: 00h 25m 05s</code></pre>
</div>
</div>
<div id="a27d42eb" class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">tuner.get_best_hyperparameters()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].values</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'num_layers': 3,
 'units': 5,
 'activation0': 'relu',
 'dropout0': 0.2,
 'optimizer': 'Nadam',
 'activation1': 'relu',
 'dropout1': 0.1,
 'activation2': 'relu',
 'dropout2': 0.1}</code></pre>
</div>
</div>
<div id="e8d8ea13" class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">model_4<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tuner.get_best_models(num_models<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb41-2">model_4.summary()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>c:\Users\kibok\AppData\Local\Programs\Python\Python312\Lib\site-packages\keras\src\saving\saving_lib.py:576: UserWarning: Skipping variable loading for optimizer 'nadam', because it has 2 variables whereas the saved optimizer has 31 variables. 
  saveable.load_own_variables(weights_store.get(inner_path))</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">Model: "sequential"</span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓
┃<span style="font-weight: bold"> Layer (type)                    </span>┃<span style="font-weight: bold"> Output Shape           </span>┃<span style="font-weight: bold">       Param # </span>┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩
│ flatten (<span style="color: #0087ff; text-decoration-color: #0087ff">Flatten</span>)               │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">29</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                   │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">5</span>)              │           <span style="color: #00af00; text-decoration-color: #00af00">150</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">5</span>)              │            <span style="color: #00af00; text-decoration-color: #00af00">20</span> │
│ (<span style="color: #0087ff; text-decoration-color: #0087ff">BatchNormalization</span>)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)               │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">5</span>)              │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_1 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">5</span>)              │            <span style="color: #00af00; text-decoration-color: #00af00">30</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization_1           │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">5</span>)              │            <span style="color: #00af00; text-decoration-color: #00af00">20</span> │
│ (<span style="color: #0087ff; text-decoration-color: #0087ff">BatchNormalization</span>)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_1 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">5</span>)              │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_2 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">5</span>)              │            <span style="color: #00af00; text-decoration-color: #00af00">30</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization_2           │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">5</span>)              │            <span style="color: #00af00; text-decoration-color: #00af00">20</span> │
│ (<span style="color: #0087ff; text-decoration-color: #0087ff">BatchNormalization</span>)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_2 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">5</span>)              │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_3 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">1</span>)              │             <span style="color: #00af00; text-decoration-color: #00af00">6</span> │
└─────────────────────────────────┴────────────────────────┴───────────────┘
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Total params: </span><span style="color: #00af00; text-decoration-color: #00af00">276</span> (1.08 KB)
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Trainable params: </span><span style="color: #00af00; text-decoration-color: #00af00">246</span> (984.00 B)
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Non-trainable params: </span><span style="color: #00af00; text-decoration-color: #00af00">30</span> (120.00 B)
</pre>
</div>
</div>
<div id="add5769d" class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 학습</span></span>
<span id="cb43-2">history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.fit(x_train, y_train, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb43-3"></span>
<span id="cb43-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 평가</span></span>
<span id="cb43-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'* 모델평가'</span>)</span>
<span id="cb43-6">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.evaluate(x_train, y_train, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb43-7">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.evaluate(x_test, y_test, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 1/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 13s 2ms/step - F1Score: 0.0038 - loss: 0.0143
Epoch 2/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0030 - loss: 0.0116
Epoch 3/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0033 - loss: 0.0125
Epoch 4/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 9s 2ms/step - F1Score: 0.0034 - loss: 0.0130
Epoch 5/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0034 - loss: 0.0126
Epoch 6/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0035 - loss: 0.0132
Epoch 7/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0034 - loss: 0.0130
Epoch 8/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0036 - loss: 0.0133
Epoch 9/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0029 - loss: 0.0111
Epoch 10/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0035 - loss: 0.0131
* 모델평가
4334/4334 - 3s - 788us/step - F1Score: 0.0034 - loss: 0.0125
2653/2653 - 2s - 757us/step - F1Score: 0.0029 - loss: 0.0110</code></pre>
</div>
</div>
<section id="f1score-및-loss-개선-비교-2" class="level4">
<h4 class="anchored" data-anchor-id="f1score-및-loss-개선-비교-2">F1Score 및 Loss 개선 비교</h4>
<ul>
<li>모델평가(기본) <br>
<ul>
<li>4334/4334 - 2s - 531us/step - F1Score: 0.0034 - loss: 0.0114</li>
<li>2653/2653 - 1s - 511us/step - F1Score: 0.0029 - loss: 0.0123</li>
</ul></li>
<li>모델평가(Tuner) <br>
<ul>
<li>4334/4334 - 4s - 860us/step - F1Score: 0.0034 - loss: 0.0175</li>
<li>2653/2653 - 2s - 862us/step - F1Score: 0.0029 - loss: 0.0164</li>
</ul></li>
<li>모델평가(Tuner + Kaiming Initialization) <br>
<ul>
<li>4334/4334 - 6s - 1ms/step - F1Score: 0.0034 - loss: 0.0124</li>
<li>2653/2653 - 4s - 1ms/step - F1Score: 0.0029 - loss: 0.0109</li>
</ul></li>
<li>모델평가(Tuner + Kaiming Initialization + Batch Normalization) <br>
<ul>
<li>4334/4334 - 3s - 788us/step - F1Score: 0.0034 - loss: 0.0125</li>
<li>2653/2653 - 2s - 757us/step - F1Score: 0.0029 - loss: 0.0110</li>
</ul></li>
</ul>
</section>
</section>
<section id="모델-중간-저장" class="level3">
<h3 class="anchored" data-anchor-id="모델-중간-저장">모델 중간 저장</h3>
<ul>
<li>이후 부터는 Learning rate 등의 변경만 있을 예정으로, Tuner를 사용하지 않고 모델을 저장했다가 사용</li>
</ul>
<div id="d52c4dcf" class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">model_4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tuner.get_best_models(num_models<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb45-2">model_4.save(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_4.keras'</span>)</span></code></pre></div>
</div>
</section>
<section id="모델링-현재-모델에서-learning-rate별-비교-0.1-0.01-0.05" class="level3">
<h3 class="anchored" data-anchor-id="모델링-현재-모델에서-learning-rate별-비교-0.1-0.01-0.05">모델링 (현재 모델에서 Learning rate별 비교 : 0.1, 0.01, 0.05)</h3>
<section id="learning-rate-0.1" class="level4">
<h4 class="anchored" data-anchor-id="learning-rate-0.1">Learning rate : 0.1</h4>
<ul>
<li>Loss값이 튀는 상황으로 줄여야 할 것으로 보임</li>
</ul>
<div id="3ec5517c" class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 새로운 학습률 설정</span></span>
<span id="cb46-2">new_learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb46-3"></span>
<span id="cb46-4">model_4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.models.load_model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_4.keras'</span>)</span>
<span id="cb46-5">new_optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.optimizers.Nadam(learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_learning_rate)</span>
<span id="cb46-6">model_4.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_optimizer, loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>,metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>])</span>
<span id="cb46-7"></span>
<span id="cb46-8">history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.fit(x_train, y_train, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb46-9"></span>
<span id="cb46-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 평가</span></span>
<span id="cb46-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'* 모델평가'</span>)</span>
<span id="cb46-12">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.evaluate(x_train, y_train, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb46-13">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.evaluate(x_test, y_test, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 1/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 9s 2ms/step - F1Score: 0.0038 - loss: 0.0155
Epoch 2/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0036 - loss: 0.0142
Epoch 3/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 5s 1ms/step - F1Score: 0.0035 - loss: 0.0136
Epoch 4/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 5s 1ms/step - F1Score: 0.0034 - loss: 0.0137
Epoch 5/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0035 - loss: 0.0143
Epoch 6/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 5s 1ms/step - F1Score: 0.0036 - loss: 0.0144
Epoch 7/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 5s 1ms/step - F1Score: 0.0031 - loss: 0.0120
Epoch 8/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0037 - loss: 0.0145
Epoch 9/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 5s 1ms/step - F1Score: 0.0036 - loss: 0.0141
Epoch 10/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 5s 1ms/step - F1Score: 0.0034 - loss: 0.0131
* 모델평가
4334/4334 - 3s - 639us/step - F1Score: 0.0034 - loss: 0.0130
2653/2653 - 2s - 629us/step - F1Score: 0.0032 - loss: 0.0127</code></pre>
</div>
</div>
<div id="9a3e1597" class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loss 및 F1-Score 시각화</span></span>
<span id="cb48-2">fig, (ax1, ax2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb48-3">ax1.plot(history.history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'loss'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>)</span>
<span id="cb48-4">ax2.plot(history.history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1-score'</span>)</span>
<span id="cb48-5">ax1.legend(), ax2.legend()</span>
<span id="cb48-6">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240711/index_files/figure-html/cell-30-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="learning-rate-0.01" class="level4">
<h4 class="anchored" data-anchor-id="learning-rate-0.01">Learning rate : 0.01</h4>
<ul>
<li>Loss값이 원만하게 하락</li>
</ul>
<div id="d98fc1f2" class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 새로운 학습률 설정</span></span>
<span id="cb49-2">new_learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb49-3"></span>
<span id="cb49-4">model_4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.models.load_model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_4.keras'</span>)</span>
<span id="cb49-5">new_optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.optimizers.Nadam(learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_learning_rate)</span>
<span id="cb49-6">model_4.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_optimizer, loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>,metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>])</span>
<span id="cb49-7"></span>
<span id="cb49-8">history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.fit(x_train, y_train, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb49-9"></span>
<span id="cb49-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 평가</span></span>
<span id="cb49-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'* 모델평가'</span>)</span>
<span id="cb49-12">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.evaluate(x_train, y_train, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb49-13">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.evaluate(x_test, y_test, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 1/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 1ms/step - F1Score: 0.0034 - loss: 0.0137
Epoch 2/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0031 - loss: 0.0122
Epoch 3/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0037 - loss: 0.0137
Epoch 4/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0029 - loss: 0.0114
Epoch 5/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0034 - loss: 0.0128
Epoch 6/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0034 - loss: 0.0127
Epoch 7/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0034 - loss: 0.0126
Epoch 8/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0033 - loss: 0.0123
Epoch 9/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0037 - loss: 0.0134
Epoch 10/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0033 - loss: 0.0122
* 모델평가
4334/4334 - 3s - 649us/step - F1Score: 0.0034 - loss: 0.0124
2653/2653 - 2s - 658us/step - F1Score: 0.0032 - loss: 0.0121</code></pre>
</div>
</div>
<div id="8b3c3e3f" class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loss 및 F1-Score 시각화</span></span>
<span id="cb51-2">fig, (ax1, ax2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb51-3">ax1.plot(history.history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'loss'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>)</span>
<span id="cb51-4">ax2.plot(history.history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1-score'</span>)</span>
<span id="cb51-5">ax1.legend(), ax2.legend()</span>
<span id="cb51-6">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240711/index_files/figure-html/cell-32-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="learning-rate-0.05" class="level4">
<h4 class="anchored" data-anchor-id="learning-rate-0.05">Learning rate : 0.05</h4>
<ul>
<li>Loss값이 조금 위아래로 움직임.</li>
<li>향후 현재의 10회가 아닌 1000회 epoch을 돌려볼 것이므로 학습시간을 고려새 0.01이 아닌 0.05로 적용하는 것을 고려</li>
</ul>
<div id="2e9ec9e5" class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 새로운 학습률 설정</span></span>
<span id="cb52-2">new_learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span></span>
<span id="cb52-3"></span>
<span id="cb52-4">model_4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.models.load_model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_4.keras'</span>)</span>
<span id="cb52-5">new_optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.optimizers.Nadam(learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_learning_rate)</span>
<span id="cb52-6">model_4.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_optimizer, loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>,metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>])</span>
<span id="cb52-7"></span>
<span id="cb52-8">history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.fit(x_train, y_train, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb52-9"></span>
<span id="cb52-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 평가</span></span>
<span id="cb52-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'* 모델평가'</span>)</span>
<span id="cb52-12">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.evaluate(x_train, y_train, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb52-13">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.evaluate(x_test, y_test, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 1/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 1ms/step - F1Score: 0.0032 - loss: 0.0137
Epoch 2/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0120
Epoch 3/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0119
Epoch 4/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0035 - loss: 0.0130
Epoch 5/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0035 - loss: 0.0131
Epoch 6/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0033 - loss: 0.0124
Epoch 7/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0033 - loss: 0.0126
Epoch 8/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0034 - loss: 0.0128
Epoch 9/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0038 - loss: 0.0141
Epoch 10/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0032 - loss: 0.0119
* 모델평가
4334/4334 - 3s - 666us/step - F1Score: 0.0034 - loss: 0.0124
2653/2653 - 2s - 648us/step - F1Score: 0.0032 - loss: 0.0119</code></pre>
</div>
</div>
<div id="6b7fa099" class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loss 및 F1-Score 시각화</span></span>
<span id="cb54-2">fig, (ax1, ax2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb54-3">ax1.plot(history.history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'loss'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>)</span>
<span id="cb54-4">ax2.plot(history.history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1-score'</span>)</span>
<span id="cb54-5">ax1.legend(), ax2.legend()</span>
<span id="cb54-6">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240711/index_files/figure-html/cell-34-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="추가적용-learning-rate-scheduler" class="level3">
<h3 class="anchored" data-anchor-id="추가적용-learning-rate-scheduler">추가적용 : Learning rate scheduler</h3>
<ul>
<li>Learning rate 0.05를 적용하기로 했으므로, 동일한 기준인 10 epoch중 loss가 증가했던 구간부터 rate 변경 적용 #### 기본 Learning rate scheduler</li>
<li>적용 전과 비교했을 때, Loss가 전반적으로 우하향 하는 추세를 보여줌</li>
</ul>
<div id="a64913e1" class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.callbacks <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LearningRateScheduler</span>
<span id="cb55-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> keras</span>
<span id="cb55-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span></code></pre></div>
</div>
<div id="bca3666d" class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> scheduler(epoch, lr):</span>
<span id="cb56-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:</span>
<span id="cb56-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(lr)</span>
<span id="cb56-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb56-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tf.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>))</span>
<span id="cb56-6"></span>
<span id="cb56-7">lr_scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LearningRateScheduler(scheduler, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb56-8"></span>
<span id="cb56-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 새로운 학습률 설정</span></span>
<span id="cb56-10">new_learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span></span>
<span id="cb56-11"></span>
<span id="cb56-12">model_4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.models.load_model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_4.keras'</span>)</span>
<span id="cb56-13">new_optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.optimizers.Nadam(learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_learning_rate)</span>
<span id="cb56-14">model_4.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_optimizer, loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>,metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>])</span>
<span id="cb56-15"></span>
<span id="cb56-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 학습</span></span>
<span id="cb56-17">history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.fit(x_train, y_train, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, </span>
<span id="cb56-18">                      callbacks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lr_scheduler])</span>
<span id="cb56-19"></span>
<span id="cb56-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 평가</span></span>
<span id="cb56-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'* 모델평가'</span>)</span>
<span id="cb56-22">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.evaluate(x_train, y_train, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb56-23">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.evaluate(x_test, y_test, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Epoch 1: LearningRateScheduler setting learning rate to 0.05000000074505806.
Epoch 1/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 1ms/step - F1Score: 0.0032 - loss: 0.0134 - learning_rate: 0.0500

Epoch 2: LearningRateScheduler setting learning rate to 0.05000000074505806.
Epoch 2/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0035 - loss: 0.0134 - learning_rate: 0.0500

Epoch 3: LearningRateScheduler setting learning rate to 0.05000000074505806.
Epoch 3/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0031 - loss: 0.0120 - learning_rate: 0.0500

Epoch 4: LearningRateScheduler setting learning rate to 0.05000000074505806.
Epoch 4/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 5s 1ms/step - F1Score: 0.0033 - loss: 0.0125 - learning_rate: 0.0500

Epoch 5: LearningRateScheduler setting learning rate to 0.05000000074505806.
Epoch 5/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0031 - loss: 0.0120 - learning_rate: 0.0500

Epoch 6: LearningRateScheduler setting learning rate to 0.04524187371134758.
Epoch 6/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0034 - loss: 0.0129 - learning_rate: 0.0452

Epoch 7: LearningRateScheduler setting learning rate to 0.04093654081225395.
Epoch 7/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0031 - loss: 0.0119 - learning_rate: 0.0409

Epoch 8: LearningRateScheduler setting learning rate to 0.037040915340185165.
Epoch 8/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0037 - loss: 0.0137 - learning_rate: 0.0370

Epoch 9: LearningRateScheduler setting learning rate to 0.03351600840687752.
Epoch 9/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0034 - loss: 0.0127 - learning_rate: 0.0335

Epoch 10: LearningRateScheduler setting learning rate to 0.030326539650559425.
Epoch 10/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0034 - loss: 0.0127 - learning_rate: 0.0303
* 모델평가
4334/4334 - 3s - 643us/step - F1Score: 0.0034 - loss: 0.0124
2653/2653 - 2s - 611us/step - F1Score: 0.0032 - loss: 0.0120</code></pre>
</div>
</div>
<ul>
<li>적용 전과 비교했을 때, Loss가 전반적으로 우하향 하는 추세를 보여줌</li>
</ul>
<div id="592a8655" class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loss 및 F1-Score 시각화</span></span>
<span id="cb58-2">fig, (ax1, ax2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb58-3">ax1.plot(history.history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'loss'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>)</span>
<span id="cb58-4">ax2.plot(history.history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1-score'</span>)</span>
<span id="cb58-5">ax1.legend(), ax2.legend()</span>
<span id="cb58-6">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240711/index_files/figure-html/cell-37-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="cosine-learning-rate-scheduler" class="level4">
<h4 class="anchored" data-anchor-id="cosine-learning-rate-scheduler"><code>Cosine</code> Learning rate scheduler</h4>
<ul>
<li>ChatGPT의 도움을 받아 기존의 scheduler코드를 수업 때 배웠던 Cosine decay로 변경</li>
<li>Cosine decay 적용 전보다 더 부드럽게 우하향하는 추세를 보여줌</li>
</ul>
<div id="ddcc56b7" class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb59-2"></span>
<span id="cb59-3">total_epoch_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb59-4"></span>
<span id="cb59-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> scheduler(epoch, lr):</span>
<span id="cb59-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the cosine decay factor</span></span>
<span id="cb59-7">    cosine_decay <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.cos(np.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_epoch_value))</span>
<span id="cb59-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update learning rate</span></span>
<span id="cb59-9">    new_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cosine_decay</span>
<span id="cb59-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(new_lr)</span>
<span id="cb59-11"></span>
<span id="cb59-12">lr_scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LearningRateScheduler(scheduler, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb59-13"></span>
<span id="cb59-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 새로운 학습률 설정</span></span>
<span id="cb59-15">new_learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span></span>
<span id="cb59-16"></span>
<span id="cb59-17">model_4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.models.load_model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_4.keras'</span>)</span>
<span id="cb59-18">new_optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.optimizers.Nadam(learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_learning_rate)</span>
<span id="cb59-19">model_4.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_optimizer, loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>,metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>])</span>
<span id="cb59-20"></span>
<span id="cb59-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 학습</span></span>
<span id="cb59-22">history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.fit(x_train, y_train, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>total_epoch_value, </span>
<span id="cb59-23">                      callbacks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lr_scheduler])</span>
<span id="cb59-24"></span>
<span id="cb59-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 평가</span></span>
<span id="cb59-26"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'* 모델평가'</span>)</span>
<span id="cb59-27">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.evaluate(x_train, y_train, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb59-28">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.evaluate(x_test, y_test, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Epoch 1: LearningRateScheduler setting learning rate to 0.05000000074505806.
Epoch 1/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 9s 1ms/step - F1Score: 0.0036 - loss: 0.0149 - learning_rate: 0.0500

Epoch 2: LearningRateScheduler setting learning rate to 0.048776413634204034.
Epoch 2/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0034 - loss: 0.0130 - learning_rate: 0.0488

Epoch 3: LearningRateScheduler setting learning rate to 0.04411868114727063.
Epoch 3/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0033 - loss: 0.0123 - learning_rate: 0.0441

Epoch 4: LearningRateScheduler setting learning rate to 0.03502549477486741.
Epoch 4/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0035 - loss: 0.0132 - learning_rate: 0.0350

Epoch 5: LearningRateScheduler setting learning rate to 0.022924484773646628.
Epoch 5/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0035 - loss: 0.0129 - learning_rate: 0.0229

Epoch 6: LearningRateScheduler setting learning rate to 0.011462242342531681.
Epoch 6/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0030 - loss: 0.0114 - learning_rate: 0.0115

Epoch 7: LearningRateScheduler setting learning rate to 0.003960107332522642.
Epoch 7/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 1ms/step - F1Score: 0.0032 - loss: 0.0119 - learning_rate: 0.0040

Epoch 8: LearningRateScheduler setting learning rate to 0.0008162073473510564.
Epoch 8/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0032 - loss: 0.0119 - learning_rate: 8.1621e-04

Epoch 9: LearningRateScheduler setting learning rate to 7.794086367885386e-05.
Epoch 9/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0032 - loss: 0.0120 - learning_rate: 7.7941e-05

Epoch 10: LearningRateScheduler setting learning rate to 1.9073487425812585e-06.
Epoch 10/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 6s 1ms/step - F1Score: 0.0034 - loss: 0.0126 - learning_rate: 1.9073e-06
* 모델평가
4334/4334 - 3s - 640us/step - F1Score: 0.0034 - loss: 0.0124
2653/2653 - 2s - 670us/step - F1Score: 0.0032 - loss: 0.0119</code></pre>
</div>
</div>
<ul>
<li>Cosine decay 적용 전보다 더 부드럽게 우하향하는 추세를 보여줌</li>
</ul>
<div id="e2a9a150" class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loss 및 F1-Score 시각화</span></span>
<span id="cb61-2">fig, (ax1, ax2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb61-3">ax1.plot(history.history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'loss'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>)</span>
<span id="cb61-4">ax2.plot(history.history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1-score'</span>)</span>
<span id="cb61-5">ax1.legend(), ax2.legend()</span>
<span id="cb61-6">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240711/index_files/figure-html/cell-39-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="f1score-및-loss-개선-비교-3" class="level4">
<h4 class="anchored" data-anchor-id="f1score-및-loss-개선-비교-3">F1Score 및 Loss 개선 비교</h4>
<ul>
<li>모델평가(기본) <br>
<ul>
<li>4334/4334 - 2s - 531us/step - F1Score: 0.0034 - loss: 0.0114</li>
<li>2653/2653 - 1s - 511us/step - F1Score: 0.0029 - loss: 0.0123</li>
</ul></li>
<li>모델평가(Tuner) <br>
<ul>
<li>4334/4334 - 4s - 860us/step - F1Score: 0.0034 - loss: 0.0175</li>
<li>2653/2653 - 2s - 862us/step - F1Score: 0.0029 - loss: 0.0164</li>
</ul></li>
<li>모델평가(Tuner + Kaiming Initialization) <br>
<ul>
<li>4334/4334 - 6s - 1ms/step - F1Score: 0.0034 - loss: 0.0124</li>
<li>2653/2653 - 4s - 1ms/step - F1Score: 0.0029 - loss: 0.0109</li>
</ul></li>
<li>모델평가(Tuner + Kaiming Initialization + Batch Normalization) <br>
<ul>
<li>4334/4334 - 3s - 788us/step - F1Score: 0.0034 - loss: 0.0125</li>
<li>2653/2653 - 2s - 757us/step - F1Score: 0.0029 - loss: 0.0110</li>
</ul></li>
<li>모델평가(Tuner + Kaiming Initialization + Batch Normalization + Learning rate Scheduling) <br>
<ul>
<li>4334/4334 - 3s - 640us/step - F1Score: 0.0034 - loss: 0.0124</li>
<li>2653/2653 - 2s - 670us/step - F1Score: 0.0032 - loss: 0.0119</li>
</ul></li>
</ul>
</section>
</section>
<section id="추가적용-earlystopping-with-patience" class="level3">
<h3 class="anchored" data-anchor-id="추가적용-earlystopping-with-patience">추가적용 : EarlyStopping with patience</h3>
<ul>
<li>epoch 1000회로 세팅</li>
<li>patience 200으로 세팅</li>
</ul>
<div id="365b454a" class="cell">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.callbacks <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> EarlyStopping</span>
<span id="cb62-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb62-3"></span>
<span id="cb62-4">total_epoch_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb62-5"></span>
<span id="cb62-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> scheduler(epoch, lr):</span>
<span id="cb62-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the cosine decay factor</span></span>
<span id="cb62-8">    cosine_decay <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.cos(np.pi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_epoch_value))</span>
<span id="cb62-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update learning rate</span></span>
<span id="cb62-10">    new_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cosine_decay</span>
<span id="cb62-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(new_lr)</span>
<span id="cb62-12"></span>
<span id="cb62-13"></span>
<span id="cb62-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> tf.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/device:GPU:0'</span>):</span>
<span id="cb62-15">    lr_scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LearningRateScheduler(scheduler, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb62-16">    es <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EarlyStopping(monitor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, patience<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>)</span>
<span id="cb62-17"></span>
<span id="cb62-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 새로운 학습률 설정</span></span>
<span id="cb62-19">    new_learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span></span>
<span id="cb62-20"></span>
<span id="cb62-21">    model_4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> keras.models.load_model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model_4.keras'</span>)</span>
<span id="cb62-22">    new_optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.optimizers.Nadam(learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_learning_rate)</span>
<span id="cb62-23">    model_4.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>new_optimizer, loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>,metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>])</span>
<span id="cb62-24"></span>
<span id="cb62-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 학습</span></span>
<span id="cb62-26">    history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.fit(x_train, y_train, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>total_epoch_value, </span>
<span id="cb62-27">                        callbacks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lr_scheduler, es],</span>
<span id="cb62-28">                        validation_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x_test,y_test))</span>
<span id="cb62-29"></span>
<span id="cb62-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 평가</span></span>
<span id="cb62-31"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'* 모델평가'</span>)</span>
<span id="cb62-32">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.evaluate(x_train, y_train, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb62-33">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_4.evaluate(x_test, y_test, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Epoch 1: LearningRateScheduler setting learning rate to 0.05000000074505806.
Epoch 1/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0031 - loss: 0.0129 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0500

Epoch 2: LearningRateScheduler setting learning rate to 0.049999877375102676.
Epoch 2/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0122 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0500

Epoch 3: LearningRateScheduler setting learning rate to 0.04999938433308759.
Epoch 3/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0126 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0500

Epoch 4: LearningRateScheduler setting learning rate to 0.04999827576351572.
Epoch 4/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0038 - loss: 0.0142 - val_F1Score: 0.0032 - val_loss: 0.0126 - learning_rate: 0.0500

Epoch 5: LearningRateScheduler setting learning rate to 0.04999630210880771.
Epoch 5/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0037 - loss: 0.0138 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0500

Epoch 6: LearningRateScheduler setting learning rate to 0.049993217571968625.
Epoch 6/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0030 - loss: 0.0116 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0500

Epoch 7: LearningRateScheduler setting learning rate to 0.04998877640343745.
Epoch 7/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0119 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0500

Epoch 8: LearningRateScheduler setting learning rate to 0.04998273291321625.
Epoch 8/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0120 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0500

Epoch 9: LearningRateScheduler setting learning rate to 0.04997484148299723.
Epoch 9/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0125 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0500

Epoch 10: LearningRateScheduler setting learning rate to 0.04996485285374156.
Epoch 10/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0029 - loss: 0.0111 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0500

Epoch 11: LearningRateScheduler setting learning rate to 0.049952525311787795.
Epoch 11/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0036 - loss: 0.0134 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0500

Epoch 12: LearningRateScheduler setting learning rate to 0.04993761352668951.
Epoch 12/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0126 - val_F1Score: 0.0032 - val_loss: 0.0122 - learning_rate: 0.0499

Epoch 13: LearningRateScheduler setting learning rate to 0.04991987228817006.
Epoch 13/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0036 - loss: 0.0134 - val_F1Score: 0.0032 - val_loss: 0.0122 - learning_rate: 0.0499

Epoch 14: LearningRateScheduler setting learning rate to 0.04989906024197024.
Epoch 14/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0121 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0499

Epoch 15: LearningRateScheduler setting learning rate to 0.04987493245373588.
Epoch 15/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0030 - loss: 0.0117 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0499

Epoch 16: LearningRateScheduler setting learning rate to 0.04984724786871271.
Epoch 16/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0030 - loss: 0.0114 - val_F1Score: 0.0032 - val_loss: 0.0123 - learning_rate: 0.0498

Epoch 17: LearningRateScheduler setting learning rate to 0.04981576932241795.
Epoch 17/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0132 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0498

Epoch 18: LearningRateScheduler setting learning rate to 0.049780256105761714.
Epoch 18/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0037 - loss: 0.0137 - val_F1Score: 0.0032 - val_loss: 0.0123 - learning_rate: 0.0498

Epoch 19: LearningRateScheduler setting learning rate to 0.049740471422997326.
Epoch 19/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0128 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0497

Epoch 20: LearningRateScheduler setting learning rate to 0.049696178679942346.
Epoch 20/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0032 - loss: 0.0123 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0497

Epoch 21: LearningRateScheduler setting learning rate to 0.049647145217296636.
Epoch 21/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0122 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0496

Epoch 22: LearningRateScheduler setting learning rate to 0.04959314232045517.
Epoch 22/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0133 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0496

Epoch 23: LearningRateScheduler setting learning rate to 0.04953394150819476.
Epoch 23/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0119 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0495

Epoch 24: LearningRateScheduler setting learning rate to 0.049469314543987404.
Epoch 24/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0034 - loss: 0.0129 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0495

Epoch 25: LearningRateScheduler setting learning rate to 0.04939904088730174.
Epoch 25/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0123 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0494

Epoch 26: LearningRateScheduler setting learning rate to 0.049322900261303024.
Epoch 26/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0128 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0493

Epoch 27: LearningRateScheduler setting learning rate to 0.0492406763828536.
Epoch 27/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0039 - loss: 0.0144 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0492

Epoch 28: LearningRateScheduler setting learning rate to 0.04915215697099108.
Epoch 28/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0128 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0492

Epoch 29: LearningRateScheduler setting learning rate to 0.04905713747321047.
Epoch 29/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0036 - loss: 0.0135 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0491

Epoch 30: LearningRateScheduler setting learning rate to 0.048955409918060896.
Epoch 30/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0130 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0490

Epoch 31: LearningRateScheduler setting learning rate to 0.04884677779609719.
Epoch 31/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0037 - loss: 0.0137 - val_F1Score: 0.0032 - val_loss: 0.0122 - learning_rate: 0.0488

Epoch 32: LearningRateScheduler setting learning rate to 0.04873104491241159.
Epoch 32/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0036 - loss: 0.0138 - val_F1Score: 0.0032 - val_loss: 0.0126 - learning_rate: 0.0487

Epoch 33: LearningRateScheduler setting learning rate to 0.04860802282816687.
Epoch 33/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0037 - loss: 0.0137 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0486

Epoch 34: LearningRateScheduler setting learning rate to 0.048477530864382556.
Epoch 34/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0038 - loss: 0.0141 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0485

Epoch 35: LearningRateScheduler setting learning rate to 0.04833938867581208.
Epoch 35/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0131 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0483

Epoch 36: LearningRateScheduler setting learning rate to 0.048193427402064476.
Epoch 36/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0126 - val_F1Score: 0.0032 - val_loss: 0.0125 - learning_rate: 0.0482

Epoch 37: LearningRateScheduler setting learning rate to 0.04803948224003987.
Epoch 37/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0118 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0480

Epoch 38: LearningRateScheduler setting learning rate to 0.04787739244900734.
Epoch 38/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0131 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0479

Epoch 39: LearningRateScheduler setting learning rate to 0.04770701249149665.
Epoch 39/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0029 - loss: 0.0111 - val_F1Score: 0.0032 - val_loss: 0.0133 - learning_rate: 0.0477

Epoch 40: LearningRateScheduler setting learning rate to 0.04752819718190602.
Epoch 40/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0125 - val_F1Score: 0.0032 - val_loss: 0.0124 - learning_rate: 0.0475

Epoch 41: LearningRateScheduler setting learning rate to 0.04734080911500294.
Epoch 41/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0128 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0473

Epoch 42: LearningRateScheduler setting learning rate to 0.047144726085502936.
Epoch 42/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0126 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0471

Epoch 43: LearningRateScheduler setting learning rate to 0.04693982624336337.
Epoch 43/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0126 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0469

Epoch 44: LearningRateScheduler setting learning rate to 0.046726002933231724.
Epoch 44/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0128 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0467

Epoch 45: LearningRateScheduler setting learning rate to 0.04650315356208633.
Epoch 45/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0119 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0465

Epoch 46: LearningRateScheduler setting learning rate to 0.04627118701398982.
Epoch 46/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0117 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0463

Epoch 47: LearningRateScheduler setting learning rate to 0.04603002364280635.
Epoch 47/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0119 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0460

Epoch 48: LearningRateScheduler setting learning rate to 0.045779591559066454.
Epoch 48/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0118 - val_F1Score: 0.0032 - val_loss: 0.0129 - learning_rate: 0.0458

Epoch 49: LearningRateScheduler setting learning rate to 0.04551983403368002.
Epoch 49/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0030 - loss: 0.0116 - val_F1Score: 0.0032 - val_loss: 0.0141 - learning_rate: 0.0455

Epoch 50: LearningRateScheduler setting learning rate to 0.04525069467084936.
Epoch 50/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0123 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0453

Epoch 51: LearningRateScheduler setting learning rate to 0.04497213962521406.
Epoch 51/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0123 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0450

Epoch 52: LearningRateScheduler setting learning rate to 0.044684139069935486.
Epoch 52/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0036 - loss: 0.0134 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0447

Epoch 53: LearningRateScheduler setting learning rate to 0.04438667459485334.
Epoch 53/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0030 - loss: 0.0113 - val_F1Score: 0.0032 - val_loss: 0.0122 - learning_rate: 0.0444

Epoch 54: LearningRateScheduler setting learning rate to 0.044079742893301965.
Epoch 54/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0131 - val_F1Score: 0.0032 - val_loss: 0.0144 - learning_rate: 0.0441

Epoch 55: LearningRateScheduler setting learning rate to 0.04376335204512589.
Epoch 55/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0030 - loss: 0.0114 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0438

Epoch 56: LearningRateScheduler setting learning rate to 0.04343751780458211.
Epoch 56/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0124 - val_F1Score: 0.0032 - val_loss: 0.0122 - learning_rate: 0.0434

Epoch 57: LearningRateScheduler setting learning rate to 0.04310227467966714.
Epoch 57/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0122 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0431

Epoch 58: LearningRateScheduler setting learning rate to 0.04275766481926046.
Epoch 58/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0029 - loss: 0.0108 - val_F1Score: 0.0032 - val_loss: 0.0137 - learning_rate: 0.0428

Epoch 59: LearningRateScheduler setting learning rate to 0.04240374169564687.
Epoch 59/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0120 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0424

Epoch 60: LearningRateScheduler setting learning rate to 0.042040577473459635.
Epoch 60/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0036 - loss: 0.0135 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0420

Epoch 61: LearningRateScheduler setting learning rate to 0.04166825190326737.
Epoch 61/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0029 - loss: 0.0112 - val_F1Score: 0.0032 - val_loss: 0.0122 - learning_rate: 0.0417

Epoch 62: LearningRateScheduler setting learning rate to 0.041286855998470276.
Epoch 62/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0128 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0413

Epoch 63: LearningRateScheduler setting learning rate to 0.040896499394979254.
Epoch 63/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0118 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0409

Epoch 64: LearningRateScheduler setting learning rate to 0.04049729925174605.
Epoch 64/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0122 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0405

Epoch 65: LearningRateScheduler setting learning rate to 0.04008939129741767.
Epoch 65/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0132 - val_F1Score: 0.0032 - val_loss: 0.0122 - learning_rate: 0.0401

Epoch 66: LearningRateScheduler setting learning rate to 0.03967291873571355.
Epoch 66/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0119 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0397

Epoch 67: LearningRateScheduler setting learning rate to 0.03924803959794496.
Epoch 67/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0039 - loss: 0.0142 - val_F1Score: 0.0032 - val_loss: 0.0223 - learning_rate: 0.0392

Epoch 68: LearningRateScheduler setting learning rate to 0.03881492302789103.
Epoch 68/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0037 - loss: 0.0139 - val_F1Score: 0.0032 - val_loss: 0.0125 - learning_rate: 0.0388

Epoch 69: LearningRateScheduler setting learning rate to 0.038373756621834496.
Epoch 69/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0126 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0384

Epoch 70: LearningRateScheduler setting learning rate to 0.03792473166260165.
Epoch 70/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0122 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0379

Epoch 71: LearningRateScheduler setting learning rate to 0.03746805782613492.
Epoch 71/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0037 - loss: 0.0135 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0375

Epoch 72: LearningRateScheduler setting learning rate to 0.03700395210292682.
Epoch 72/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0126 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0370

Epoch 73: LearningRateScheduler setting learning rate to 0.036532649808634195.
Epoch 73/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0130 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0365

Epoch 74: LearningRateScheduler setting learning rate to 0.036054393511249797.
Epoch 74/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0116 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0361

Epoch 75: LearningRateScheduler setting learning rate to 0.035569436681775514.
Epoch 75/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0036 - loss: 0.0133 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0356

Epoch 76: LearningRateScheduler setting learning rate to 0.03507804366240132.
Epoch 76/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0031 - loss: 0.0117 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0351

Epoch 77: LearningRateScheduler setting learning rate to 0.034580493306341685.
Epoch 77/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0036 - loss: 0.0134 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0346

Epoch 78: LearningRateScheduler setting learning rate to 0.03407706792429393.
Epoch 78/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0122 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0341

Epoch 79: LearningRateScheduler setting learning rate to 0.03356806794275915.
Epoch 79/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0028 - loss: 0.0108 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0336

Epoch 80: LearningRateScheduler setting learning rate to 0.03305380085029894.
Epoch 80/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0030 - loss: 0.0114 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0331

Epoch 81: LearningRateScheduler setting learning rate to 0.0325345775020496.
Epoch 81/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0035 - loss: 0.0130 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0325

Epoch 82: LearningRateScheduler setting learning rate to 0.03201072309373603.
Epoch 82/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0128 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0320

Epoch 83: LearningRateScheduler setting learning rate to 0.03148256978963389.
Epoch 83/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0120 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0315

Epoch 84: LearningRateScheduler setting learning rate to 0.030950456692133768.
Epoch 84/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0037 - loss: 0.0137 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0310

Epoch 85: LearningRateScheduler setting learning rate to 0.030414729810794083.
Epoch 85/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0036 - loss: 0.0133 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0304

Epoch 86: LearningRateScheduler setting learning rate to 0.029875742030884136.
Epoch 86/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0120 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0299

Epoch 87: LearningRateScheduler setting learning rate to 0.029333851252558933.
Epoch 87/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0115 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0293

Epoch 88: LearningRateScheduler setting learning rate to 0.028789420362314282.
Epoch 88/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0127 - val_F1Score: 0.0032 - val_loss: 0.0122 - learning_rate: 0.0288

Epoch 89: LearningRateScheduler setting learning rate to 0.028242819031350504.
Epoch 89/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0118 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0282

Epoch 90: LearningRateScheduler setting learning rate to 0.027694420029314302.
Epoch 90/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0130 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0277

Epoch 91: LearningRateScheduler setting learning rate to 0.027144599198612736.
Epoch 91/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0116 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0271

Epoch 92: LearningRateScheduler setting learning rate to 0.026593733603646846.
Epoch 92/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0035 - loss: 0.0129 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0266

Epoch 93: LearningRateScheduler setting learning rate to 0.026042203332819286.
Epoch 93/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0037 - loss: 0.0134 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0260

Epoch 94: LearningRateScheduler setting learning rate to 0.025490389649056783.
Epoch 94/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0117 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0255

Epoch 95: LearningRateScheduler setting learning rate to 0.02493867678984359.
Epoch 95/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0125 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0249

Epoch 96: LearningRateScheduler setting learning rate to 0.0243874446546497.
Epoch 96/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0028 - loss: 0.0105 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0244

Epoch 97: LearningRateScheduler setting learning rate to 0.02383707607775812.
Epoch 97/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0124 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0238

Epoch 98: LearningRateScheduler setting learning rate to 0.0232879495225387.
Epoch 98/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0118 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0233

Epoch 99: LearningRateScheduler setting learning rate to 0.022740442709790577.
Epoch 99/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0033 - loss: 0.0122 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0227

Epoch 100: LearningRateScheduler setting learning rate to 0.022194928963840378.
Epoch 100/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0121 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0222

Epoch 101: LearningRateScheduler setting learning rate to 0.021651780837725836.
Epoch 101/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0125 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0217

Epoch 102: LearningRateScheduler setting learning rate to 0.021111362830849738.
Epoch 102/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0120 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0211

Epoch 103: LearningRateScheduler setting learning rate to 0.020574038650582698.
Epoch 103/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0124 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0206

Epoch 104: LearningRateScheduler setting learning rate to 0.020040162123402632.
Epoch 104/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0115 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0200

Epoch 105: LearningRateScheduler setting learning rate to 0.019510082641125054.
Epoch 105/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0036 - loss: 0.0132 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0195

Epoch 106: LearningRateScheduler setting learning rate to 0.01898414334111084.
Epoch 106/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0037 - loss: 0.0135 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0190

Epoch 107: LearningRateScheduler setting learning rate to 0.018462677481004153.
Epoch 107/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0129 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0185

Epoch 108: LearningRateScheduler setting learning rate to 0.017946012067510217.
Epoch 108/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0035 - loss: 0.0128 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0179

Epoch 109: LearningRateScheduler setting learning rate to 0.01743446604557586.
Epoch 109/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0124 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0174

Epoch 110: LearningRateScheduler setting learning rate to 0.0169283466852938.
Epoch 110/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0125 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0169

Epoch 111: LearningRateScheduler setting learning rate to 0.016427951403963508.
Epoch 111/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0126 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0164

Epoch 112: LearningRateScheduler setting learning rate to 0.015933567776404835.
Epoch 112/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0126 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0159

Epoch 113: LearningRateScheduler setting learning rate to 0.015445473545956377.
Epoch 113/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0118 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0154

Epoch 114: LearningRateScheduler setting learning rate to 0.014963933929296461.
Epoch 114/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0123 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0150

Epoch 115: LearningRateScheduler setting learning rate to 0.014489202538243347.
Epoch 115/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0129 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0145

Epoch 116: LearningRateScheduler setting learning rate to 0.014021520496817624.
Epoch 116/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0126 - val_F1Score: 0.0032 - val_loss: 0.0122 - learning_rate: 0.0140

Epoch 117: LearningRateScheduler setting learning rate to 0.013561116462970584.
Epoch 117/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0124 - val_F1Score: 0.0032 - val_loss: 0.0127 - learning_rate: 0.0136

Epoch 118: LearningRateScheduler setting learning rate to 0.013108206651183544.
Epoch 118/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0129 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0131

Epoch 119: LearningRateScheduler setting learning rate to 0.012662993956245575.
Epoch 119/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0036 - loss: 0.0130 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0127

Epoch 120: LearningRateScheduler setting learning rate to 0.012225667081091017.
Epoch 120/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0120 - val_F1Score: 0.0032 - val_loss: 0.0123 - learning_rate: 0.0122

Epoch 121: LearningRateScheduler setting learning rate to 0.01179640236465126.
Epoch 121/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0117 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0118

Epoch 122: LearningRateScheduler setting learning rate to 0.011375362011883477.
Epoch 122/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0122 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0114

Epoch 123: LearningRateScheduler setting learning rate to 0.010962693228735833.
Epoch 123/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0036 - loss: 0.0130 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0110

Epoch 124: LearningRateScheduler setting learning rate to 0.01055853005235644.
Epoch 124/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0035 - loss: 0.0126 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0106

Epoch 125: LearningRateScheduler setting learning rate to 0.010162992486406664.
Epoch 125/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0030 - loss: 0.0112 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0102

Epoch 126: LearningRateScheduler setting learning rate to 0.009776186536514266.
Epoch 126/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0124 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0098

Epoch 127: LearningRateScheduler setting learning rate to 0.00939820335139082.
Epoch 127/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0119 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0094

Epoch 128: LearningRateScheduler setting learning rate to 0.009029121052566404.
Epoch 128/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0116 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0090

Epoch 129: LearningRateScheduler setting learning rate to 0.008669002981605245.
Epoch 129/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0035 - loss: 0.0129 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0087

Epoch 130: LearningRateScheduler setting learning rate to 0.00831789863593302.
Epoch 130/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0121 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0083

Epoch 131: LearningRateScheduler setting learning rate to 0.007975844602221773.
Epoch 131/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0125 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0080

Epoch 132: LearningRateScheduler setting learning rate to 0.00764286280991781.
Epoch 132/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0125 - val_F1Score: 0.0032 - val_loss: 0.0122 - learning_rate: 0.0076

Epoch 133: LearningRateScheduler setting learning rate to 0.007318962806057378.
Epoch 133/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0119 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0073

Epoch 134: LearningRateScheduler setting learning rate to 0.007004140902813916.
Epoch 134/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0116 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0070

Epoch 135: LearningRateScheduler setting learning rate to 0.006698380665480482.
Epoch 135/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0037 - loss: 0.0134 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0067

Epoch 136: LearningRateScheduler setting learning rate to 0.006401653399573791.
Epoch 136/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0115 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0064

Epoch 137: LearningRateScheduler setting learning rate to 0.006113918192281751.
Epoch 137/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0124 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0061

Epoch 138: LearningRateScheduler setting learning rate to 0.00583512239919073.
Epoch 138/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0125 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0058

Epoch 139: LearningRateScheduler setting learning rate to 0.005565202574146112.
Epoch 139/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0125 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0056

Epoch 140: LearningRateScheduler setting learning rate to 0.005304084064791188.
Epoch 140/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0035 - loss: 0.0128 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0053

Epoch 141: LearningRateScheduler setting learning rate to 0.005051681497723035.
Epoch 141/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0125 - val_F1Score: 0.0032 - val_loss: 0.0122 - learning_rate: 0.0051

Epoch 142: LearningRateScheduler setting learning rate to 0.004807899705742073.
Epoch 142/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0035 - loss: 0.0127 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0048

Epoch 143: LearningRateScheduler setting learning rate to 0.004572634652071941.
Epoch 143/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0036 - loss: 0.0130 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0046

Epoch 144: LearningRateScheduler setting learning rate to 0.004345772581226123.
Epoch 144/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0037 - loss: 0.0131 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0043

Epoch 145: LearningRateScheduler setting learning rate to 0.0041271918277528885.
Epoch 145/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0036 - loss: 0.0129 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0041

Epoch 146: LearningRateScheduler setting learning rate to 0.003916761966443078.
Epoch 146/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0116 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0039

Epoch 147: LearningRateScheduler setting learning rate to 0.0037143456165374526.
Epoch 147/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0128 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0037

Epoch 148: LearningRateScheduler setting learning rate to 0.003519798694295597.
Epoch 148/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0124 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0035

Epoch 149: LearningRateScheduler setting learning rate to 0.0033329702241221442.
Epoch 149/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0116 - val_F1Score: 0.0032 - val_loss: 0.0119 - learning_rate: 0.0033

Epoch 150: LearningRateScheduler setting learning rate to 0.003153703693298654.
Epoch 150/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0125 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0032

Epoch 151: LearningRateScheduler setting learning rate to 0.002981837080382247.
Epoch 151/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0033 - loss: 0.0121 - val_F1Score: 0.0032 - val_loss: 0.0122 - learning_rate: 0.0030

Epoch 152: LearningRateScheduler setting learning rate to 0.002817203763890849.
Epoch 152/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0126 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0028

Epoch 153: LearningRateScheduler setting learning rate to 0.002659632548117222.
Epoch 153/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0037 - loss: 0.0132 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0027

Epoch 154: LearningRateScheduler setting learning rate to 0.002508948787459685.
Epoch 154/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0121 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0025

Epoch 155: LearningRateScheduler setting learning rate to 0.0023649744086335148.
Epoch 155/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0123 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0024

Epoch 156: LearningRateScheduler setting learning rate to 0.002227528810319298.
Epoch 156/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0032 - loss: 0.0117 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0022

Epoch 157: LearningRateScheduler setting learning rate to 0.002096428882420658.
Epoch 157/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0123 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0021

Epoch 158: LearningRateScheduler setting learning rate to 0.0019714901202732477.
Epoch 158/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0121 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0020

Epoch 159: LearningRateScheduler setting learning rate to 0.0018525268586946407.
Epoch 159/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0038 - loss: 0.0134 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0019

Epoch 160: LearningRateScheduler setting learning rate to 0.001739352177175322.
Epoch 160/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0032 - loss: 0.0117 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0017

Epoch 161: LearningRateScheduler setting learning rate to 0.0016317790070494893.
Epoch 161/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0126 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0016

Epoch 162: LearningRateScheduler setting learning rate to 0.0015296205786924965.
Epoch 162/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0121 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0015

Epoch 163: LearningRateScheduler setting learning rate to 0.0014326904304467975.
Epoch 163/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0033 - loss: 0.0120 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0014

Epoch 164: LearningRateScheduler setting learning rate to 0.0013408029622755352.
Epoch 164/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0032 - loss: 0.0118 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0013

Epoch 165: LearningRateScheduler setting learning rate to 0.0012537739867035033.
Epoch 165/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0113 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0013

Epoch 166: LearningRateScheduler setting learning rate to 0.0011714208419180048.
Epoch 166/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0032 - loss: 0.0120 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0012

Epoch 167: LearningRateScheduler setting learning rate to 0.0010935627215877873.
Epoch 167/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0129 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 0.0011

Epoch 168: LearningRateScheduler setting learning rate to 0.0010200213286971748.
Epoch 168/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0036 - loss: 0.0130 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 0.0010

Epoch 169: LearningRateScheduler setting learning rate to 0.0009506207664891017.
Epoch 169/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0037 - loss: 0.0133 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 9.5062e-04

Epoch 170: LearningRateScheduler setting learning rate to 0.0008851880802090808.
Epoch 170/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0036 - loss: 0.0129 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 8.8519e-04

Epoch 171: LearningRateScheduler setting learning rate to 0.0008235533085124968.
Epoch 171/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0036 - loss: 0.0129 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 8.2355e-04

Epoch 172: LearningRateScheduler setting learning rate to 0.0007655498590444079.
Epoch 172/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0032 - loss: 0.0116 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 7.6555e-04

Epoch 173: LearningRateScheduler setting learning rate to 0.000711014611544236.
Epoch 173/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0123 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 7.1101e-04

Epoch 174: LearningRateScheduler setting learning rate to 0.0006597882362160549.
Epoch 174/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0029 - loss: 0.0109 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 6.5979e-04

Epoch 175: LearningRateScheduler setting learning rate to 0.0006117152403282328.
Epoch 175/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0124 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 6.1172e-04

Epoch 176: LearningRateScheduler setting learning rate to 0.0005666441221124275.
Epoch 176/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 9s 2ms/step - F1Score: 0.0036 - loss: 0.0130 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 5.6664e-04

Epoch 177: LearningRateScheduler setting learning rate to 0.0005244275774159951.
Epoch 177/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0032 - loss: 0.0118 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 5.2443e-04

Epoch 178: LearningRateScheduler setting learning rate to 0.0004849225434646702.
Epoch 178/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0036 - loss: 0.0132 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 4.8492e-04

Epoch 179: LearningRateScheduler setting learning rate to 0.0004479903496044815.
Epoch 179/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0033 - loss: 0.0119 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 4.4799e-04

Epoch 180: LearningRateScheduler setting learning rate to 0.00041349667884561114.
Epoch 180/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0030 - loss: 0.0111 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 4.1350e-04

Epoch 181: LearningRateScheduler setting learning rate to 0.00038131174396874263.
Epoch 181/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0032 - loss: 0.0118 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 3.8131e-04

Epoch 182: LearningRateScheduler setting learning rate to 0.00035131022098520786.
Epoch 182/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0125 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 3.5131e-04

Epoch 183: LearningRateScheduler setting learning rate to 0.000323371316538639.
Epoch 183/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0121 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 3.2337e-04

Epoch 184: LearningRateScheduler setting learning rate to 0.0002973788077995383.
Epoch 184/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0125 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 2.9738e-04

Epoch 185: LearningRateScheduler setting learning rate to 0.00027322094806250124.
Epoch 185/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0125 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 2.7322e-04

Epoch 186: LearningRateScheduler setting learning rate to 0.0002507905060636847.
Epoch 186/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0117 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 2.5079e-04

Epoch 187: LearningRateScheduler setting learning rate to 0.00022998472463185788.
Epoch 187/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0038 - loss: 0.0136 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 2.2998e-04

Epoch 188: LearningRateScheduler setting learning rate to 0.00021070525252817312.
Epoch 188/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0127 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 2.1071e-04

Epoch 189: LearningRateScheduler setting learning rate to 0.00019285808961416642.
Epoch 189/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0037 - loss: 0.0133 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 1.9286e-04

Epoch 190: LearningRateScheduler setting learning rate to 0.00017635351865172405.
Epoch 190/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0122 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 1.7635e-04

Epoch 191: LearningRateScheduler setting learning rate to 0.00016110605041721006.
Epoch 191/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0030 - loss: 0.0111 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 1.6111e-04

Epoch 192: LearningRateScheduler setting learning rate to 0.00014703428907961074.
Epoch 192/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0127 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 1.4703e-04

Epoch 193: LearningRateScheduler setting learning rate to 0.00013406090414221943.
Epoch 193/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0119 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 1.3406e-04

Epoch 194: LearningRateScheduler setting learning rate to 0.00012211248289829325.
Epoch 194/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0117 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 1.2211e-04

Epoch 195: LearningRateScheduler setting learning rate to 0.00011111943637018841.
Epoch 195/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0033 - loss: 0.0120 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 1.1112e-04

Epoch 196: LearningRateScheduler setting learning rate to 0.00010101588562002027.
Epoch 196/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0034 - loss: 0.0123 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 1.0102e-04

Epoch 197: LearningRateScheduler setting learning rate to 9.173956161771835e-05.
Epoch 197/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0036 - loss: 0.0130 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 9.1740e-05

Epoch 198: LearningRateScheduler setting learning rate to 8.323166577470412e-05.
Epoch 198/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0117 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 8.3232e-05

Epoch 199: LearningRateScheduler setting learning rate to 7.543677716041947e-05.
Epoch 199/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0032 - loss: 0.0117 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 7.5437e-05

Epoch 200: LearningRateScheduler setting learning rate to 6.830270726935913e-05.
Epoch 200/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0126 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 6.8303e-05

Epoch 201: LearningRateScheduler setting learning rate to 6.178038169635723e-05.
Epoch 201/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0128 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 6.1780e-05

Epoch 202: LearningRateScheduler setting learning rate to 5.5823715672683846e-05.
Epoch 202/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0031 - loss: 0.0115 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 5.5824e-05

Epoch 203: LearningRateScheduler setting learning rate to 5.038949665635076e-05.
Epoch 203/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0033 - loss: 0.0121 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 5.0389e-05

Epoch 204: LearningRateScheduler setting learning rate to 4.543725097729416e-05.
Epoch 204/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0031 - loss: 0.0114 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 4.5437e-05

Epoch 205: LearningRateScheduler setting learning rate to 4.0929124160673104e-05.
Epoch 205/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0035 - loss: 0.0126 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 4.0929e-05

Epoch 206: LearningRateScheduler setting learning rate to 3.682975847646033e-05.
Epoch 206/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0036 - loss: 0.0131 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 3.6830e-05

Epoch 207: LearningRateScheduler setting learning rate to 3.31061677502092e-05.
Epoch 207/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0126 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 3.3106e-05

Epoch 208: LearningRateScheduler setting learning rate to 2.9727622537092672e-05.
Epoch 208/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0032 - loss: 0.0117 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 2.9728e-05

Epoch 209: LearningRateScheduler setting learning rate to 2.6665534176340642e-05.
Epoch 209/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0124 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 2.6666e-05

Epoch 210: LearningRateScheduler setting learning rate to 2.3893339378491008e-05.
Epoch 210/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0115 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 2.3893e-05

Epoch 211: LearningRateScheduler setting learning rate to 2.138639024030536e-05.
Epoch 211/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0122 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 2.1386e-05

Epoch 212: LearningRateScheduler setting learning rate to 1.9121844781739403e-05.
Epoch 212/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0032 - loss: 0.0119 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 1.9122e-05

Epoch 213: LearningRateScheduler setting learning rate to 1.70785645133303e-05.
Epoch 213/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0036 - loss: 0.0130 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 1.7079e-05

Epoch 214: LearningRateScheduler setting learning rate to 1.5237012502896017e-05.
Epoch 214/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0031 - loss: 0.0116 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 1.5237e-05

Epoch 215: LearningRateScheduler setting learning rate to 1.357915519287874e-05.
Epoch 215/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0035 - loss: 0.0128 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 1.3579e-05

Epoch 216: LearningRateScheduler setting learning rate to 1.2088370381438874e-05.
Epoch 216/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0035 - loss: 0.0127 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 1.2088e-05

Epoch 217: LearningRateScheduler setting learning rate to 1.0749355670971902e-05.
Epoch 217/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0034 - loss: 0.0124 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 1.0749e-05

Epoch 218: LearningRateScheduler setting learning rate to 9.548043047235348e-06.
Epoch 218/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0126 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 9.5480e-06

Epoch 219: LearningRateScheduler setting learning rate to 8.4715155183082e-06.
Epoch 219/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0033 - loss: 0.0120 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 8.4715e-06

Epoch 220: LearningRateScheduler setting learning rate to 7.507931450634886e-06.
Epoch 220/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0035 - loss: 0.0125 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 7.5079e-06

Epoch 221: LearningRateScheduler setting learning rate to 6.646446085543275e-06.
Epoch 221/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0032 - loss: 0.0116 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 6.6464e-06

Epoch 222: LearningRateScheduler setting learning rate to 5.877143136087781e-06.
Epoch 222/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0037 - loss: 0.0134 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 5.8771e-06

Epoch 223: LearningRateScheduler setting learning rate to 5.190965951257081e-06.
Epoch 223/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0031 - loss: 0.0113 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 5.1910e-06

Epoch 224: LearningRateScheduler setting learning rate to 4.579655882737102e-06.
Epoch 224/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0036 - loss: 0.0129 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 4.5797e-06

Epoch 225: LearningRateScheduler setting learning rate to 4.035690191498989e-06.
Epoch 225/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0033 - loss: 0.0121 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 4.0357e-06

Epoch 226: LearningRateScheduler setting learning rate to 3.5522267110029194e-06.
Epoch 226/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0123 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 3.5522e-06

Epoch 227: LearningRateScheduler setting learning rate to 3.123050022982594e-06.
Epoch 227/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0122 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 3.1230e-06

Epoch 228: LearningRateScheduler setting learning rate to 2.7425225352732546e-06.
Epoch 228/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0037 - loss: 0.0132 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 2.7425e-06

Epoch 229: LearningRateScheduler setting learning rate to 2.4055370383374177e-06.
Epoch 229/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0036 - loss: 0.0129 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 2.4055e-06

Epoch 230: LearningRateScheduler setting learning rate to 2.1074729261271663e-06.
Epoch 230/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0039 - loss: 0.0139 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 2.1075e-06

Epoch 231: LearningRateScheduler setting learning rate to 1.8441558584291099e-06.
Epoch 231/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0123 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 1.8442e-06

Epoch 232: LearningRateScheduler setting learning rate to 1.611819649663071e-06.
Epoch 232/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0036 - loss: 0.0130 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 1.6118e-06

Epoch 233: LearningRateScheduler setting learning rate to 1.4070711650071392e-06.
Epoch 233/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0033 - loss: 0.0121 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 1.4071e-06

Epoch 234: LearningRateScheduler setting learning rate to 1.2268571134422569e-06.
Epoch 234/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0033 - loss: 0.0120 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 1.2269e-06

Epoch 235: LearningRateScheduler setting learning rate to 1.0684341126453187e-06.
Epoch 235/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0124 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 1.0684e-06

Epoch 236: LearningRateScheduler setting learning rate to 9.293406181791023e-07.
Epoch 236/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0034 - loss: 0.0125 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 9.2934e-07

Epoch 237: LearningRateScheduler setting learning rate to 8.073707546410956e-07.
Epoch 237/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0028 - loss: 0.0103 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 8.0737e-07

Epoch 238: LearningRateScheduler setting learning rate to 7.005507269301096e-07.
Epoch 238/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 8s 2ms/step - F1Score: 0.0040 - loss: 0.0143 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 7.0055e-07

Epoch 239: LearningRateScheduler setting learning rate to 6.071166600852295e-07.
Epoch 239/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0035 - loss: 0.0128 - val_F1Score: 0.0032 - val_loss: 0.0120 - learning_rate: 6.0712e-07

Epoch 240: LearningRateScheduler setting learning rate to 5.254945474903442e-07.
Epoch 240/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0118 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 5.2549e-07

Epoch 241: LearningRateScheduler setting learning rate to 4.542818008736369e-07.
Epoch 241/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0033 - loss: 0.0122 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 4.5428e-07

Epoch 242: LearningRateScheduler setting learning rate to 3.9223019466086514e-07.
Epoch 242/1000
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 7s 2ms/step - F1Score: 0.0032 - loss: 0.0118 - val_F1Score: 0.0032 - val_loss: 0.0121 - learning_rate: 3.9223e-07
Epoch 242: early stopping
* 모델평가
4334/4334 - 3s - 594us/step - F1Score: 0.0034 - loss: 0.0121
2653/2653 - 2s - 584us/step - F1Score: 0.0032 - loss: 0.0121</code></pre>
</div>
</div>
<div id="0d7cb9b8" class="cell">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loss 및 F1-Score 시각화</span></span>
<span id="cb64-2">fig, (ax1, ax2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb64-3">ax1.plot(history.history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'loss'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>)</span>
<span id="cb64-4">ax2.plot(history.history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1-score'</span>)</span>
<span id="cb64-5">ax1.legend(), ax2.legend()</span>
<span id="cb64-6">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240711/index_files/figure-html/cell-41-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="f1score-및-loss-개선-비교-4" class="level4">
<h4 class="anchored" data-anchor-id="f1score-및-loss-개선-비교-4">F1Score 및 Loss 개선 비교</h4>
<ul>
<li>모델평가(기본) <br>
<ul>
<li>4334/4334 - 2s - 531us/step - F1Score: 0.0034 - loss: 0.0114</li>
<li>2653/2653 - 1s - 511us/step - F1Score: 0.0029 - loss: 0.0123</li>
</ul></li>
<li>모델평가(Tuner) <br>
<ul>
<li>4334/4334 - 4s - 860us/step - F1Score: 0.0034 - loss: 0.0175</li>
<li>2653/2653 - 2s - 862us/step - F1Score: 0.0029 - loss: 0.0164</li>
</ul></li>
<li>모델평가(Tuner + Kaiming Initialization) <br>
<ul>
<li>4334/4334 - 6s - 1ms/step - F1Score: 0.0034 - loss: 0.0124</li>
<li>2653/2653 - 4s - 1ms/step - F1Score: 0.0029 - loss: 0.0109</li>
</ul></li>
<li>모델평가(Tuner + Kaiming Initialization + Batch Normalization) <br>
<ul>
<li>4334/4334 - 3s - 788us/step - F1Score: 0.0034 - loss: 0.0125</li>
<li>2653/2653 - 2s - 757us/step - F1Score: 0.0029 - loss: 0.0110</li>
</ul></li>
<li>모델평가(Tuner + Kaiming Initialization + Batch Normalization + Learning rate Scheduling) <br>
<ul>
<li>4334/4334 - 3s - 640us/step - F1Score: 0.0034 - loss: 0.0124</li>
<li>2653/2653 - 2s - 670us/step - F1Score: 0.0032 - loss: 0.0119</li>
</ul></li>
<li>모델평가(Tuner + Kaiming Initialization + Batch Normalization + Learning rate Scheduling + Early Stopping) <br>
<ul>
<li>4334/4334 - 3s - 594us/step - F1Score: 0.0034 - loss: 0.0121</li>
<li>2653/2653 - 2s - 584us/step - F1Score: 0.0032 - loss: 0.0121</li>
</ul></li>
</ul>
</section>
</section>
<section id="결론" class="level3">
<h3 class="anchored" data-anchor-id="결론">결론</h3>
<ul>
<li><p>Loss는 지속적인 개선이 되고 있으나 F1score는 계속 비슷한 수치를 보임</p>
<ul>
<li>Learning rate Scheduling 적용시에만 약간의 개선이 있음</li>
</ul></li>
<li><p>과제 발표 후 관련 내용 질의 및 개선 예정</p></li>
<li><p>과제 진행 중 생긴 궁금한 점들에 대해서도 추가 질의 예정</p>
<ul>
<li>이런 모델은 결국 사용하고자 만드는 것인데, PCA로 만든 모델이면 새로운 거래가 생성된 경우 그대로 넣어도 모델이 판별 가능한지</li>
<li>epoch 수 대비 적절한 Early stopping patience값이 있는지</li>
</ul></li>
</ul>


</section>
</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>파이썬</category>
  <category>딥러닝</category>
  <category>202406Study_FDS</category>
  <category>FDS</category>
  <guid>https://kr9268.github.io/posts/meta-dl-creditcard-20240711/</guid>
  <pubDate>Thu, 11 Jul 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[M_Study_별도 공부] Keras Tuner</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-dl-creditcard-20240710/</link>
  <description><![CDATA[ 





<p>Kaggle(Credit Card Fraud detection) Keras Tuner실습</p>
<section id="개요" class="level1">
<h1>개요</h1>
<p>Credit Card Fraud detection 과제 중 Kaggle에서 Tuner 관련 글을 보고 실습해봅니다<br> * 링크 : <a href="https://www.kaggle.com/code/suvroo/advance-hyperparameter-optimization-in-ml-and-dl#Keras-Tuner-">https://www.kaggle.com/code/suvroo/advance-hyperparameter-optimization-in-ml-and-dl#Keras-Tuner-</a></p>
</section>
<section id="실습" class="level1">
<h1>실습</h1>
<section id="데이터-전처리" class="level2">
<h2 class="anchored" data-anchor-id="데이터-전처리">데이터 전처리</h2>
<div id="5caa069b" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlite3</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StandardScaler, MinMaxScaler</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a connection to the SQLite database</span></span>
<span id="cb1-7">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'creditcard.db'</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the data from the database into a pandas DataFrame</span></span>
<span id="cb1-10">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM creditcard"</span>, conn)</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Close the connection</span></span>
<span id="cb1-13">conn.close()</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 거래액 0인 값 제거</span></span>
<span id="cb1-16">df_filtered1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Amount'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].copy()</span>
<span id="cb1-17">df_filtered1</span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dataset 나누고 Scaler 적용</span></span>
<span id="cb1-20">df_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_filtered1.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class'</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).copy()</span>
<span id="cb1-21">df_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_filtered1[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class'</span>].copy()</span>
<span id="cb1-22"></span>
<span id="cb1-23">scaler_minmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MinMaxScaler()</span>
<span id="cb1-24">df_x_scaled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler_minmax.fit_transform(df_x)</span>
<span id="cb1-25"></span>
<span id="cb1-26">scaler_std <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StandardScaler()</span>
<span id="cb1-27">df_x_scaled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler_std.fit_transform(df_x_scaled)</span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train + test</span></span>
<span id="cb1-30">x_train, x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(df_x_scaled, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb1-31">y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(df_y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb1-32"></span>
<span id="cb1-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train + validation</span></span>
<span id="cb1-34">x_train, x_validate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(x_train, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb1-35">y_train, y_validate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(y_train, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span></code></pre></div>
</div>
</section>
<section id="keras-tuner---optimizer-설정-예제" class="level2">
<h2 class="anchored" data-anchor-id="keras-tuner---optimizer-설정-예제">Keras Tuner - Optimizer 설정 예제</h2>
<div id="6946db95" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> keras_tuner <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> kt</span></code></pre></div>
</div>
<div id="6803fb7a" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> build_model(hp):</span>
<span id="cb3-2">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.models.Sequential([</span>
<span id="cb3-3">        tf.keras.layers.Input((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb3-4">        tf.keras.layers.Flatten(),</span>
<span id="cb3-5">        tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>),</span>
<span id="cb3-6">        tf.keras.layers.Dropout(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>),</span>
<span id="cb3-7">        tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigmoid'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이진분류이므로 Sigmoid사용</span></span>
<span id="cb3-8">    ])</span>
<span id="cb3-9"></span>
<span id="cb3-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For optimizer</span></span>
<span id="cb3-11">    optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hp.Choice(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'optimizer'</span>,values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Nadam'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adam'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sgd'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rmsprop'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ftrl'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Adamax'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adadelta'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Adagrad'</span>])</span>
<span id="cb3-12">     </span>
<span id="cb3-13">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>,metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>])</span>
<span id="cb3-14">    </span>
<span id="cb3-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model</span>
<span id="cb3-16"></span>
<span id="cb3-17">tuner<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kt.RandomSearch(build_model,</span>
<span id="cb3-18">                     objective<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kt.Objective(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val_loss'</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>),</span>
<span id="cb3-19">                     overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb3-20">                     max_trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span>
<span id="cb3-21"></span>
<span id="cb3-22">tuner.search(x_train,y_train,epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,validation_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x_test,y_test))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Trial 2 Complete [00h 00m 56s]
val_F1Score: 0.002878308529034257

Best val_F1Score So Far: 0.002878308529034257
Total elapsed time: 00h 01m 57s</code></pre>
</div>
</div>
<ul>
<li>Best Optimizer 출력</li>
</ul>
<div id="e77713a1" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">tuner.get_best_hyperparameters()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].values</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'optimizer': 'Nadam'}</code></pre>
</div>
</div>
</section>
<section id="keras-tuner---neuron-수-설정-예제" class="level2">
<h2 class="anchored" data-anchor-id="keras-tuner---neuron-수-설정-예제">Keras Tuner - Neuron 수 설정 예제</h2>
<div id="4ab39c28" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> build_model(hp):</span>
<span id="cb7-2">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.models.Sequential()</span>
<span id="cb7-3"></span>
<span id="cb7-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Neurons</span></span>
<span id="cb7-5">    units<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hp.Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'units'</span>,min_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,max_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>,step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb7-6"></span>
<span id="cb7-7">    model.add(tf.keras.layers.Input((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb7-8">    model.add(tf.keras.layers.Flatten())</span>
<span id="cb7-9">    model.add(tf.keras.layers.Dense(units, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>))</span>
<span id="cb7-10">    model.add(tf.keras.layers.Dropout(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>))</span>
<span id="cb7-11">    model.add(tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigmoid'</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이진분류이므로 Sigmoid사용</span></span>
<span id="cb7-12"></span>
<span id="cb7-13">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Nadam'</span>, loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>,metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>])</span>
<span id="cb7-14">    </span>
<span id="cb7-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model</span>
<span id="cb7-16"></span>
<span id="cb7-17">tuner<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kt.RandomSearch(build_model,</span>
<span id="cb7-18">                     objective<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kt.Objective(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val_loss'</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>),<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># accuracy 미사용</span></span>
<span id="cb7-19">                     overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb7-20">                     max_trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,</span>
<span id="cb7-21">                     project_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'randomsearch_neuron'</span>)</span>
<span id="cb7-22"></span>
<span id="cb7-23">tuner.search(x_train,y_train,epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,validation_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x_test,y_test))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Trial 9 Complete [00h 00m 44s]
val_loss: 0.012561993673443794

Best val_loss So Far: 0.012475043535232544
Total elapsed time: 00h 06m 42s</code></pre>
</div>
</div>
<ul>
<li>Best Neuron의 수 출력</li>
</ul>
<div id="d699e339" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">tuner.get_best_hyperparameters()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].values</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'units': 130}</code></pre>
</div>
</div>
</section>
<section id="keras-tuner---hidden-layer수-설정-예제" class="level2">
<h2 class="anchored" data-anchor-id="keras-tuner---hidden-layer수-설정-예제">Keras Tuner - Hidden layer수 설정 예제</h2>
<div id="87f57c34" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> build_model(hp):</span>
<span id="cb11-2">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.models.Sequential()</span>
<span id="cb11-3"></span>
<span id="cb11-4">    model.add(tf.keras.layers.Input((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb11-5">    model.add(tf.keras.layers.Flatten())</span>
<span id="cb11-6">    model.add(tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>))</span>
<span id="cb11-7"></span>
<span id="cb11-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Hidden Layers</span></span>
<span id="cb11-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(hp.Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'number_of_layers'</span>,min_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,max_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)):</span>
<span id="cb11-10">        model.add(tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>,activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>))</span>
<span id="cb11-11"></span>
<span id="cb11-12">    model.add(tf.keras.layers.Dropout(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>))</span>
<span id="cb11-13">    model.add(tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigmoid'</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이진분류이므로 Sigmoid사용</span></span>
<span id="cb11-14"></span>
<span id="cb11-15">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Adamax'</span>, loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>,metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>])</span>
<span id="cb11-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model</span>
<span id="cb11-17"></span>
<span id="cb11-18">tuner<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kt.RandomSearch(build_model,</span>
<span id="cb11-19">                     objective<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kt.Objective(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val_loss'</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>),<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># accuracy 미사용</span></span>
<span id="cb11-20">                     overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-21">                     max_trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,</span>
<span id="cb11-22">                     project_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'randomsearch_hidden_layer'</span>)</span>
<span id="cb11-23"></span>
<span id="cb11-24">tuner.search(x_train,y_train,epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,validation_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x_test,y_test))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Trial 9 Complete [00h 01m 35s]
val_loss: 0.012566009536385536

Best val_loss So Far: 0.012515497393906116
Total elapsed time: 00h 10m 45s</code></pre>
</div>
</div>
<ul>
<li>Best Hidden Layer의 수 출력</li>
</ul>
<div id="9f4f0992" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">tuner.get_best_hyperparameters()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].values</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'number_of_layers': 8}</code></pre>
</div>
</div>
</section>
<section id="keras-tuner---optimizer-neuron-hidden-layer-등-동시설정-예제" class="level2">
<h2 class="anchored" data-anchor-id="keras-tuner---optimizer-neuron-hidden-layer-등-동시설정-예제">Keras Tuner - Optimizer, Neuron, Hidden layer 등 동시설정 예제</h2>
<div id="d8fd409b" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> build_model(hp):</span>
<span id="cb15-2">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.models.Sequential()</span>
<span id="cb15-3"></span>
<span id="cb15-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input &amp; Flatten</span></span>
<span id="cb15-5">    model.add(tf.keras.layers.Input((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb15-6">    model.add(tf.keras.layers.Flatten())</span>
<span id="cb15-7"></span>
<span id="cb15-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Hidden Layers</span></span>
<span id="cb15-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(hp.Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_layers'</span>,min_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,max_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)):</span>
<span id="cb15-10"></span>
<span id="cb15-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Dense</span></span>
<span id="cb15-12">        units <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hp.Int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'units'</span>,min_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,max_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>,step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Neurons</span></span>
<span id="cb15-13">        activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hp.Choice(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'activation'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i),values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'elu'</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Activation</span></span>
<span id="cb15-14"></span>
<span id="cb15-15">        model.add(tf.keras.layers.Dense(units, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>activation))</span>
<span id="cb15-16"></span>
<span id="cb15-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For Dropout</span></span>
<span id="cb15-18">        dropout_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hp.Choice(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dropout'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i),values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>])</span>
<span id="cb15-19"></span>
<span id="cb15-20">        model.add(tf.keras.layers.Dropout(dropout_rate))</span>
<span id="cb15-21"></span>
<span id="cb15-22">    model.add(tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigmoid'</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이진분류이므로 Sigmoid사용</span></span>
<span id="cb15-23">        </span>
<span id="cb15-24">    </span>
<span id="cb15-25">    optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hp.Choice(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'optimizer'</span>,values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Nadam'</span>])</span>
<span id="cb15-26">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>,metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'F1Score'</span>])</span>
<span id="cb15-27">    </span>
<span id="cb15-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model</span>
<span id="cb15-29"></span>
<span id="cb15-30"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> tf.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/device:GPU:0'</span>):</span>
<span id="cb15-31">    tuner<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kt.RandomSearch(build_model,</span>
<span id="cb15-32">                        objective<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kt.Objective(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val_F1Score'</span>, direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>),<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># accuracy 미사용</span></span>
<span id="cb15-33">                        overwrite<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb15-34">                        max_trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>,</span>
<span id="cb15-35">                        project_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'randomsearch_model'</span>)</span>
<span id="cb15-36"></span>
<span id="cb15-37"></span>
<span id="cb15-38">    tuner.search(x_train,y_train,epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,validation_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(x_test,y_test))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Trial 9 Complete [00h 01m 10s]
val_F1Score: 0.0028702165000140667

Best val_F1Score So Far: 0.0028861388564109802
Total elapsed time: 00h 18m 28s</code></pre>
</div>
</div>
<div id="2b19fb1d" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">tuner.get_best_hyperparameters()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].values</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'num_layers': 12,
 'units': 90,
 'activation0': 'relu',
 'dropout0': 0.9,
 'optimizer': 'Nadam',
 'activation1': 'relu',
 'dropout1': 0.1,
 'activation2': 'relu',
 'dropout2': 0.1,
 'activation3': 'relu',
 'dropout3': 0.1,
 'activation4': 'relu',
 'dropout4': 0.1,
 'activation5': 'relu',
 'dropout5': 0.1,
 'activation6': 'relu',
 'dropout6': 0.1,
 'activation7': 'relu',
 'dropout7': 0.1,
 'activation8': 'relu',
 'dropout8': 0.1,
 'activation9': 'relu',
 'dropout9': 0.1,
 'activation10': 'relu',
 'dropout10': 0.1,
 'activation11': 'relu',
 'dropout11': 0.1}</code></pre>
</div>
</div>
</section>
<section id="keras-tuner---모델-저장" class="level2">
<h2 class="anchored" data-anchor-id="keras-tuner---모델-저장">Keras Tuner - 모델 저장</h2>
<div id="27c07095" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">model_2<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tuner.get_best_models(num_models<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb19-2">model_2.summary()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>c:\Users\kibok\AppData\Local\Programs\Python\Python312\Lib\site-packages\keras\src\saving\saving_lib.py:576: UserWarning: Skipping variable loading for optimizer 'nadam', because it has 2 variables whereas the saved optimizer has 55 variables. 
  saveable.load_own_variables(weights_store.get(inner_path))</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">Model: "sequential"</span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓
┃<span style="font-weight: bold"> Layer (type)                    </span>┃<span style="font-weight: bold"> Output Shape           </span>┃<span style="font-weight: bold">       Param # </span>┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩
│ flatten (<span style="color: #0087ff; text-decoration-color: #0087ff">Flatten</span>)               │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">29</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                   │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">2,700</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)               │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_1 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_1 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_2 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_2 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_3 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_3 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_4 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_4 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_5 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_5 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_6 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_6 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_7 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_7 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_8 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_8 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_9 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_9 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)             │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_10 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_10 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)            │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_11 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">8,190</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_11 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)            │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">90</span>)             │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_12 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">1</span>)              │            <span style="color: #00af00; text-decoration-color: #00af00">91</span> │
└─────────────────────────────────┴────────────────────────┴───────────────┘
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Total params: </span><span style="color: #00af00; text-decoration-color: #00af00">92,881</span> (362.82 KB)
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Trainable params: </span><span style="color: #00af00; text-decoration-color: #00af00">92,881</span> (362.82 KB)
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Non-trainable params: </span><span style="color: #00af00; text-decoration-color: #00af00">0</span> (0.00 B)
</pre>
</div>
</div>
<div id="d932a304" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 학습</span></span>
<span id="cb21-2">history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_2.fit(x_train, y_train, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 평가</span></span>
<span id="cb21-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'* 모델평가'</span>)</span>
<span id="cb21-6">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_2.evaluate(x_train, y_train, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb21-7">loss, f1score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_2.evaluate(x_test, y_test, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 1/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 15s 2ms/step - F1Score: 0.0031 - loss: 0.0463
Epoch 2/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0034 - loss: 0.0222
Epoch 3/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0031 - loss: 0.0144
Epoch 4/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0032 - loss: 0.0202
Epoch 5/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0034 - loss: 0.0200
Epoch 6/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0034 - loss: 0.0166
Epoch 7/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 10s 2ms/step - F1Score: 0.0036 - loss: 0.0167
Epoch 8/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 12s 3ms/step - F1Score: 0.0032 - loss: 0.0131
Epoch 9/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 11s 3ms/step - F1Score: 0.0033 - loss: 0.0229
Epoch 10/10
4334/4334 ━━━━━━━━━━━━━━━━━━━━ 11s 3ms/step - F1Score: 0.0032 - loss: 0.0216
* 모델평가
4334/4334 - 4s - 1ms/step - F1Score: 0.0034 - loss: 0.0125
2653/2653 - 2s - 787us/step - F1Score: 0.0029 - loss: 0.0113</code></pre>
</div>
</div>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>파이썬</category>
  <category>머신러닝</category>
  <category>딥러닝</category>
  <category>202406Study_FDS</category>
  <category>FDS</category>
  <guid>https://kr9268.github.io/posts/meta-dl-creditcard-20240710/</guid>
  <pubDate>Wed, 10 Jul 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[M_Study_6주차] 자연어처리 및 RNN관련 기초내용</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-dl-creditcard-20240630/</link>
  <description><![CDATA[ 





<section id="개요" class="level1">
<h1>개요</h1>
<p>참여중인 딥러닝 스터디 6주차 기록입니다.</p>
</section>
<section id="주차-과제-설명" class="level1">
<h1>5주차 과제 설명</h1>
<ul>
<li><p>Optimizer 비교 : SGD vs adam</p>
<ul>
<li><p>adam이 1 epoch만에 SGD의 accuracy보다 높게 나옴</p>
<pre><code>  # SGD
  Epoch 1/5
  1875/1875 [==========] - 6s 3ms/step - loss: 0.6548 - accuracy: 0.8358
  ...
  Epoch 5/5
  1875/1875 [==========] - 5s 2ms/step - loss: 0.2346 - accuracy: 0.9352

  # adam
  Epoch 1/5
  1875/1875 [==========] - 11s 6ms/step - loss: 0.2605 - accuracy: 0.9256
  ...
  Epoch 5/5
  1875/1875 [==========] - 7s 4ms/step - loss: 0.0456 - accuracy: 0.9863</code></pre></li>
</ul></li>
<li><p>Overfitting 케이스</p>
<ul>
<li>Test accuracy가 97.75%로 Train accuracy 98.63%보다 낮게 나옴</li>
<li>간단한 데이터이므로 overfitting으로 판단했지만, 실제로 1%의 차이는 거의 일어나지 않은 것 (실제로 일어나면 5%가까이 떨어지는 경우도 많음)</li>
</ul></li>
<li><p>Overfitting 케이스 방지 : Dropout 추가</p>
<ul>
<li><p>Dropout을 통해 여러 특징을 학습시킬 수 있도록 함 (뉴런을 적게쓰므로 1 epoch에서는 좀 더 낮음)</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">  model2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.models.Sequential([</span>
<span id="cb2-2">      tf.keras.layers.Flatten(input_shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)),</span>
<span id="cb2-3">      tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>),</span>
<span id="cb2-4">      tf.keras.layers.Dropout(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dropout : 20%정도 Layer를 끈다</span></span>
<span id="cb2-5">      tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'softmax'</span>)</span>
<span id="cb2-6">  ])</span>
<span id="cb2-7"></span>
<span id="cb2-8">  ...</span>
<span id="cb2-9"></span>
<span id="cb2-10">  Epoch <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb2-11">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1875</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1875</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==========</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">s</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">ms</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> loss: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2939</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> accuracy: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9154</span></span>
<span id="cb2-12">  ...</span>
<span id="cb2-13">  Epoch <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb2-14">  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1875</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1875</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==========</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">s</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">ms</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> loss: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0725</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> accuracy: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9772</span></span></code></pre></div></li>
<li><p>Test accuracy가 97.85%, Train accuracy 97.72% 로 Overfitting 줄어듦</p></li>
</ul></li>
<li><p>Overfitting 케이스 방지 : Regularization</p>
<ul>
<li>파라미터에 패널티를 부여해 Overfitting을 방지. 딥러닝에서는 잘 쓰이지 않음
<ul>
<li><code>tf.keras.regularizers.l2(0.01)</code> : <img src="https://latex.codecogs.com/png.latex?%5Clambda">값으로 0.01부여, 커질수록 강한 패널티</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">  model2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.models.Sequential([</span>
<span id="cb3-2">      tf.keras.layers.Flatten(input_shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)),</span>
<span id="cb3-3">      tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>),</span>
<span id="cb3-4">      tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, kernel_regularizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.regularizers.l2(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>), activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>),</span>
<span id="cb3-5">      tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'softmax'</span>)</span>
<span id="cb3-6">  ])</span></code></pre></div>
<ul>
<li>Test accuracy가 96.70%, Train accuracy 97.81% 로 오히려 Underfitting 발생</li>
</ul></li>
</ul></li>
<li><p>Overfitting 케이스 방지 : Early stopping</p>
<ul>
<li><p><code>Early stopping 미적용</code></p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.Sequential([</span>
<span id="cb4-2">      tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, input_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>),</span>
<span id="cb4-3">      tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigmoid'</span>)</span>
<span id="cb4-4">  ])</span>
<span id="cb4-5"></span>
<span id="cb4-6">  model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>,</span>
<span id="cb4-7">                optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adam'</span>,</span>
<span id="cb4-8">                metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>])</span>
<span id="cb4-9"></span>
<span id="cb4-10">  history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit(trainX, trainy, validation_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (trainX_2, trainy_2), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test데이터를 validation에 넣지 않는다</span></span>
<span id="cb4-11">                  epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-12"></span>
<span id="cb4-13">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> Train acc: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, Test acc: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9142857193946838</span></span></code></pre></div></li>
<li><p><code>Early stopping without patience</code></p>
<ul>
<li><strong>EarlyStopping(monitor=‘val_loss’, mode=‘min’, verbose=1)</strong>
<ul>
<li>Validation loss를 모니터링(accuracy가 떨어지면 멈추도록도 설정가능, 단 mode=max로), 가장 작은 min을 찾는다</li>
<li><code>fit</code> 할 때, <code>callbacks=[es]</code>를 추가로 설정</li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.callbacks <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> EarlyStopping</span>
<span id="cb5-2"></span>
<span id="cb5-3">model1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.Sequential([</span>
<span id="cb5-4">    tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, input_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>),</span>
<span id="cb5-5">    tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigmoid'</span>)</span>
<span id="cb5-6">])</span>
<span id="cb5-7"></span>
<span id="cb5-8">model1.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>,</span>
<span id="cb5-9">              optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adam'</span>,</span>
<span id="cb5-10">              metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>])</span>
<span id="cb5-11"></span>
<span id="cb5-12">es <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EarlyStopping(monitor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'val_loss'</span>, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-13"></span>
<span id="cb5-14">history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model1.fit(trainX, trainy, validation_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (trainX_2, trainy_2),</span>
<span id="cb5-15">              epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4000</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, callbacks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[es])</span>
<span id="cb5-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> Epoch <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">227</span>: early stopping</span>
<span id="cb5-17">Train acc: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9666666388511658</span>, Test acc: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8142856955528259</span></span></code></pre></div></li>
<li>Test accuracy가 81%로 낮아진 이유 : without patience옵션으로 underfitting이 발생
<ul>
<li>하단 그래프에서 x축 250정도 잠시 loss증가한 지점에서 멈춰버림<br> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240630/index_files/figure-html/89205607-1-image.png" class="img-fluid" alt="image.png"></li>
</ul></li>
</ul></li>
<li><p><code>Early stopping with patience</code></p>
<ul>
<li><strong>EarlyStopping(monitor=‘val_loss’, mode=‘min’, verbose=1, patience=200)</strong>
<ul>
<li>patience=200 옵션을 추가하여 200 epoch 동안 <code>연속으로 loss증가</code>하면 학습을 멈춤</li>
<li>나머지 코드 동일</li>
</ul>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> Epoch <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">922</span>: early stopping</span>
<span id="cb6-2">    Train acc: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, Test acc: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9428571462631226</span></span></code></pre></div></li>
<li>기존의 227 epoch보다 늦은 922 epoch에서 멈춰, 훨씬 높은 94%의 Test accuracy</li>
</ul></li>
</ul></li>
<li><p>train_test_split : 데이터를 나눌 때 무작위로 섞어서 나눌 수 있게 함</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb7-2"></span>
<span id="cb7-3">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train, test 나누기</span></span>
<span id="cb7-4">  x_train, x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb7-5">  y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb7-6"></span>
<span id="cb7-7">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x_train.shape, x_test.shape)</span>
<span id="cb7-8">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x_train.shape, y_test.shape)</span>
<span id="cb7-9">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-10">      (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">70</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,)</span>
<span id="cb7-11"></span>
<span id="cb7-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train, validation 나누기</span></span>
<span id="cb7-13">  x_train, x_validate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(x_train, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb7-14">  y_train, y_validate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(y_train, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb7-15"></span>
<span id="cb7-16">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x_train.shape, x_validate.shape, x_test.shape)</span>
<span id="cb7-17">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(y_train.shape, y_validate.shape, y_test.shape)</span>
<span id="cb7-18">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-19">      (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">49</span>,) (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>,) (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>,)</span></code></pre></div></li>
<li><p>Data Preprocessing(전처리)</p>
<ul>
<li><strong>StandardScaler, MinMaxScaler의 약점 : outlier에 약하다</strong>
<ul>
<li>극단적인 데이터가 많지 않다면 적용해도 좋으며, 많다면 <strong>robustscaler</strong>도 고려</li>
</ul>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StandardScaler, MinMaxScaler</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MinMaxScaler 적용 전 x</span></span>
<span id="cb8-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x)</span>
<span id="cb8-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> [[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">236.37372138</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">67.4728654</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">889.1062823</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">561.1353035</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">191.38532351</span>]</span>
<span id="cb8-6">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">746.36250159</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">92.35363502</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">128.54322612</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">108.49157384</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">353.10048148</span>]</span>
<span id="cb8-7">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">673.3844796</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">734.7410641</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">760.98411268</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">983.26464345</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">202.82746593</span>]</span>
<span id="cb8-8">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">803.57916563</span>  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">79.26219033</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">691.56641875</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">860.20938727</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">637.68924843</span>]</span>
<span id="cb8-9">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">961.59849032</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">646.66721861</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">610.07133782</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">190.98379101</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">392.23091957</span>]]</span>
<span id="cb8-10"></span>
<span id="cb8-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MinMaxScaler 적용 후 x : (x - min) / (max - min)</span></span>
<span id="cb8-12">scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MinMaxScaler()</span>
<span id="cb8-13">x_scaled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler.fit_transform(x)</span>
<span id="cb8-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x_scaled)</span>
<span id="cb8-15"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> [[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>         <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>         <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>         <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.51744132</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>        ]</span>
<span id="cb8-16">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.70321479</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03728751</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>         <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>         <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.36234312</span>]</span>
<span id="cb8-17">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.60258664</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>         <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.831543</span>   <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>         <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02563756</span>]</span>
<span id="cb8-18">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.78210986</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01766805</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.74027155</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.85932894</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>        ]</span>
<span id="cb8-19">    [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>         <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.86800833</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.63312056</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.09430128</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45001978</span>]]</span>
<span id="cb8-20"></span>
<span id="cb8-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># StandardScaler : (x - mean) / std</span></span></code></pre></div></li>
</ul></li>
</ul>
</section>
<section id="주차-수업정리" class="level1">
<h1>6주차 수업정리</h1>
<section id="자연어처리-관련-기초적인-내용" class="level2">
<h2 class="anchored" data-anchor-id="자연어처리-관련-기초적인-내용">자연어처리 관련 기초적인 내용</h2>
<section id="시계열데이터sequential-data" class="level3">
<h3 class="anchored" data-anchor-id="시계열데이터sequential-data">시계열데이터(Sequential Data)</h3>
<ul>
<li><p>시계열데이터(Sequential Data) : 문장(순서를 가진 단어들), 영상, 주가, 태풍의 이동경로 등 <br> (자연어처리도 시계열데이터의 하위분야 중 하나)</p></li>
<li><p>기본적으로 <code>Input - Output - 그 사이의 function</code> 을 파악하면 좋으며, 아래는 예시임</p>
<ul>
<li>태풍으로 인한 날짜별 피해액을 알고자 할 때 : Input도 Output도 시계열</li>
<li>태풍의 소멸시기 예측 : Input은 시계열이지만 Output은 single output</li>
<li>단어가 문법적으로 맞는지 : 시계열 문제</li>
<li>문장의 주제가 어떤 것인지(과학? 문학?) : single output</li>
<li>그림을 묘사하는 문장 생성 : 시계열이 아닌 Input과 시계열인 Output</li>
</ul></li>
</ul>
</section>
<section id="problem-types-예시" class="level3">
<h3 class="anchored" data-anchor-id="problem-types-예시">Problem types 예시</h3>
<ul>
<li>One-to-one : (Image classification) 숫자 이미지를 input으로 받아 정답 숫자를 output</li>
<li>Many-to-one : (Frame → Class) 태풍의 이동경로, 속도를 input으로 하여 언제사라질지 output</li>
<li>Many-to-many : (Frames → Classes) 태풍의 이동경로, 속도를 input으로 하여 날짜별 피해액 output</li>
<li>One-to-many : (Image → Words. Image captioning) 고양이 사진을 input으로, 이에 대한 묘사 문장을 output</li>
<li>Many-to-many : (Video → words. Video captioning) 5개 단어의 영어문장을 input으로, 3개 단어의 한글문장으로 output</li>
</ul>
</section>
<section id="word-embedding" class="level3">
<h3 class="anchored" data-anchor-id="word-embedding">Word Embedding</h3>
<ul>
<li>단어를 모델에 인식시키려면 숫자로 매핑하는 과정이 필요 (알파벳은 유니코드 등으로 표현이 되지만, 단어는 그렇지 못함)</li>
<li>숫자로 매핑하며 단어의 다양한 관계를 나타낼 수 있도록 벡터로 표현. 이를 <code>Word Embedding</code>이라고 함
<ul>
<li>임의의 정수로 매핑할 때, 비슷한 단어일수록 숫자의 차이가 적게 만듦 (baby 12, boy 13, child 14와 같이)</li>
<li>다만 girl이라는 단어가 나온다면 문제가 생길 수 있음 (boy 옆에 이미 baby가 있음)</li>
<li>해결방법 : 벡터로 만든다. 자릿수를 늘려 표현할 수 있는 관계가 많아짐 (boy[13,14], girl[14,13]과 같이 정의하면 벡터간 거리가 같다)</li>
<li>다양한 관계로 나타낼 수 있도록 벡터로 표현하게 됨 (<code>Word Embedding</code>) (참고로 GPT는 512차원이나 768차원정도 됨)</li>
</ul></li>
<li>처음엔 랜덤한 벡터였지만, 학습할수록 벡터가 변경되어 단어간의 관계를 표현</li>
</ul>
</section>
<section id="word2vec" class="level3">
<h3 class="anchored" data-anchor-id="word2vec">Word2vec</h3>
<ul>
<li>가지고 있는 단어(토큰)를, 문장에 빈 칸을 두어 맞추게 함
<ul>
<li>예를 들어 5만 개의 단어 중 정답인 into가 들어오지 않으면 감점 후 다시 학습(5만가지의 Classification)</li>
</ul></li>
<li>Word2vec이 아닌, 단어(토큰)를 주고 주변의 단어를 맞추게 하는 방법도 있지만 요즘은 많이 쓰지 않는 추세</li>
<li>언어모델의 학습은, 예를 들면 위키피디아의 문장을 가져와, 문장에 빈칸을 만들고 빈칸의 단어를 정답으로 만든 뒤, cross entropy 측정 등 진행</li>
<li>Word2vec학습을 마치면 단어의 관계를 묘사하게 됨<br> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240630/index_files/figure-html/38d392d2-1-image.png" class="img-fluid" alt="image.png"></li>
</ul>
</section>
</section>
<section id="rnn" class="level2">
<h2 class="anchored" data-anchor-id="rnn">RNN</h2>
<section id="rnn을-활용한-감정분석-사례many-to-one" class="level3">
<h3 class="anchored" data-anchor-id="rnn을-활용한-감정분석-사례many-to-one">RNN을 활용한 감정분석 사례(Many-to-one)</h3>
<ul>
<li><code>RNN(Recurrent Neural Networks)</code>이라는 딥러닝으로 시계열을 처리하는 기초적인 architecture 적용 (이미지와 달리 문장은 길이가 항상 바뀐다)</li>
<li>랜덤한 <img src="https://latex.codecogs.com/png.latex?h_0">을 시작으로, 현재의 단어 <img src="https://latex.codecogs.com/png.latex?x_1">부터 더해가면 최종적으로 <img src="https://latex.codecogs.com/png.latex?h_t">에 모든 문장의 정보가 들어있음 <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240630/index_files/figure-html/001a5741-5-image.png" class="img-fluid" alt="image.png"></li>
<li>현재의 단어 <img src="https://latex.codecogs.com/png.latex?x_t">와, 이전까지의 단어들 <img src="https://latex.codecogs.com/png.latex?h_%7Bt-1%7D"> 중 어떤 것을 더 많이 반영할지를 정하는 파라미터 <img src="https://latex.codecogs.com/png.latex?W_hh">, <img src="https://latex.codecogs.com/png.latex?W_xh"> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240630/index_files/figure-html/001a5741-1-image-2.png" class="img-fluid" alt="image-2.png"></li>
<li>각 부분의 <img src="https://latex.codecogs.com/png.latex?W_hh">, <img src="https://latex.codecogs.com/png.latex?W_xh">는 동일한 값 (<code>Shared parameter</code>) 예를 들어 <img src="https://latex.codecogs.com/png.latex?W_hh">값이 다르다면 단어의 수만큼 <img src="https://latex.codecogs.com/png.latex?W_hh">가 필요하며, 문장길이가 바뀔 때마다 학습을 다르게 해야함 <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240630/index_files/figure-html/001a5741-2-image-3.png" class="img-fluid" alt="image-3.png"></li>
<li>Sigmoid함수를 통과하여 0.5를 기준으로 긍정/부정 등을 평가하여 감정분석하는 방식 적용</li>
<li>Backpropagation(Chain rule)을 사용해 학습</li>
</ul>
</section>
<section id="rnn을-활용한-many-to-many-적용케이스-태풍의-날짜별-피해액-등" class="level3">
<h3 class="anchored" data-anchor-id="rnn을-활용한-many-to-many-적용케이스-태풍의-날짜별-피해액-등">RNN을 활용한 Many-to-many 적용케이스 (태풍의 날짜별 피해액 등)</h3>
<ul>
<li>hidden state(<img src="https://latex.codecogs.com/png.latex?h_1">)마다 예측(<img src="https://latex.codecogs.com/png.latex?%5Chat%7By%7D">)을 하고, 예측에 대해 실제값과 cross entropy비교 및 Backpropagation <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240630/index_files/figure-html/001a5741-3-image-4.png" class="img-fluid" alt="image-4.png"><br></li>
<li>Multi-layer RNN<br> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240630/index_files/figure-html/001a5741-4-image-5.png" class="img-fluid" alt="image-5.png"><br></li>
<li>RNN의 장단점
<ul>
<li>장점
<ul>
<li>Input(문장의 길이 등)이 다른 문제에 대해 대처가 가능</li>
<li>Parameter share로 모델의 크기가 커지지 않게 됨</li>
<li>(이론적으로) 마지막 step에는 모든 정보가 들어있게 됨</li>
</ul></li>
<li>단점
<ul>
<li>느리다</li>
<li><code>Vanishing gradient</code>(학습이 안됨) : 미분값이 0에 수렴하여 학습이 일어나지 않음 (↔︎ Exploding gradient)</li>
<li><code>long-range dependency</code>(장기기억 소실, 학습은 되지만 초반부는 잊음) : 문장 초반부의 단어는 0에 수렴하며 잊게되고, 후반부의 내용만 잘 전달됨</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="lstmlong-short-term-memory" class="level3">
<h3 class="anchored" data-anchor-id="lstmlong-short-term-memory">LSTM(Long Short Term Memory)</h3>
<ul>
<li>장기기억을 잊는 문제를 해결하기 위해, 보존할 수 있는 (장기기억만을 담당하는)cell gate 추가 (RNN의 핵심적 아이디어를 조금 발전시킨 것)</li>
<li>문제
<ul>
<li>여전히 <code>Vanishing gradient</code>는 존재함</li>
<li><code>long-range dependency</code>도 문장이 너무 길어지면 다시 발생</li>
</ul></li>
<li><code>Transformer가 등장하며 잘 안쓰이게 되었음</code></li>
</ul>
</section>
<section id="grugated-recurrent-units" class="level3">
<h3 class="anchored" data-anchor-id="grugated-recurrent-units">GRU(Gated Recurrent Units)</h3>
<ul>
<li>LSTM보다 간소화되었음</li>
<li><code>Transformer가 등장하며 잘 안쓰이게 되었음</code></li>
<li>다만 LSTM이나 GRU 모두 선박이나 태풍의 이동경로 등의 작은 규모는 적용할만 함 (Transformer는 상당히 큰 모델임)
<ul>
<li>자연어는 Transformer 사용(위의 사례도 Transformer사용시 더 좋아짐)</li>
</ul></li>
</ul>


</section>
</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>파이썬</category>
  <category>머신러닝</category>
  <category>딥러닝</category>
  <category>202406Study_FDS</category>
  <guid>https://kr9268.github.io/posts/meta-dl-creditcard-20240630/</guid>
  <pubDate>Sun, 30 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[공모전] 공공데이터 공모전-7(광물 전체 제안배경 작성)</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/dtcontest-ore-20240624/</link>
  <description><![CDATA[ 





<p>2024년 12회 산업통상자원부 공공데이터 활용 아이디어 공모전 참가 기록.(광물 전체 제안배경 작성)</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>2024년 12회 산업통상자원부 공공데이터 활용 아이디어 공모전 참가해보기로 함
<ul>
<li>https://datacontest.kr/apply/applyAdd/3</li>
</ul></li>
<li>니켈 뿐 아니라 타 광석에 대해 분석하여 제안배경에 대해 작성하기로 함</li>
</ul>
</section>
<section id="내용정리" class="level1">
<h1>내용정리</h1>
<section id="지난-회의정리" class="level2">
<h2 class="anchored" data-anchor-id="지난-회의정리">지난 회의정리</h2>
<ul>
<li>내가 진행할 과업
<ul>
<li>UN Comtreade API개발한 것을 기반으로 광물별 데이터 저장 및 바로 사용할수 있도록 db화
<ul>
<li>기존에 만들어둔 공공데이터포털 데이터 공유용 git을 활용하여 모든 데이터 관리 예정
<ul>
<li>링크 : https://github.com/KR9268/db_datagokr</li>
</ul></li>
</ul></li>
<li>분석을 구상하고 제안한 배경에 대해 작성
<ul>
<li>기존의 니켈뿐 아니라 분석 대상 광석 전체에 대해 분석 진행</li>
<li>해당 내용 기반으로 분석의 당위성 부여 예정</li>
</ul></li>
<li>활용데이터에 대한 정리
<ul>
<li>활용한 외부데이터와 내용, 활용이유 정리</li>
</ul></li>
</ul></li>
<li>타 팀원들 진행할 과업
<ul>
<li>LSTM 등 예측 모델에 대한 설명</li>
<li>Prophet 등 이상탐지 모델에 대한 설명</li>
<li>만들어둔 db활용하여 데이터 추가가공 및 전처리</li>
<li>모델링 및 모델학습</li>
</ul></li>
<li>다같이 진행할 과업
<ul>
<li>분석으로 인한 기대(파급)효과</li>
</ul></li>
</ul>
</section>
</section>
<section id="보고서제안배경-초안" class="level1">
<h1>보고서(제안배경) 초안</h1>
<section id="제안배경" class="level2">
<h2 class="anchored" data-anchor-id="제안배경">제안배경</h2>
<section id="현황-및-제안목적" class="level3">
<h3 class="anchored" data-anchor-id="현황-및-제안목적">현황 및 제안목적</h3>
<section id="탄소중립-등-환경에-대한-관심과-전기차-배터리-등-미래-유망산업의-핵심광물-수요-증가" class="level4">
<h4 class="anchored" data-anchor-id="탄소중립-등-환경에-대한-관심과-전기차-배터리-등-미래-유망산업의-핵심광물-수요-증가">탄소중립 등 환경에 대한 관심과, 전기차 배터리 등 미래 유망산업의 핵심광물 수요 증가</h4>
<ul>
<li>리튬, 니켈, 코발트, 망간은 전기차 이차전지의 원료로, 배터리 양극재 등에 필요한 핵심금속</li>
<li>세계은행 예상에 따르면 배터리 시장은 2050년까지 크게 성장할 전망<br> (2050년에는 2018년 기준 450%이상 수요증가할 것으로 예상)<br> <img src="https://kr9268.github.io/posts/dtcontest-ore-20240624/index_files/figure-html/5dcda823-5-image.png" class="img-fluid" alt="image.png"><br> <strong>출처</strong> : Minerals for Climate Action: The Mineral Intensity of the Clean Energy Transition(2020), The World Bank</li>
</ul>
</section>
<section id="핵심광물-매장이-특정-국가에-심하게-편중되어-있어-상당한-공급망-리스크-존재" class="level4">
<h4 class="anchored" data-anchor-id="핵심광물-매장이-특정-국가에-심하게-편중되어-있어-상당한-공급망-리스크-존재">핵심광물 매장이 특정 국가에 심하게 편중되어 있어 상당한 공급망 리스크 존재</h4>
<ul>
<li>광물/국가별 매장량 추이
<ul>
<li>니켈 : 인도네시아(42%), 호주(18.3%), 브라질(12.2%) 등<br> <img src="https://kr9268.github.io/posts/dtcontest-ore-20240624/index_files/figure-html/5dcda823-1-image-2.png" class="img-fluid" alt="image-2.png"></li>
<li>코발트 : 콩고(57%), 호주(16.1%) 등<br> <img src="https://kr9268.github.io/posts/dtcontest-ore-20240624/index_files/figure-html/5dcda823-2-image-3.png" class="img-fluid" alt="image-3.png"></li>
<li>리튬 : 칠레(33.6%), 호주(22.4%), 아르헨티나(13%) 등<br> <img src="https://kr9268.github.io/posts/dtcontest-ore-20240624/index_files/figure-html/5dcda823-3-image-4.png" class="img-fluid" alt="image-4.png"></li>
<li>망간 : 남아프리카(31.4%), 호주(26.2%), 중국(14.7%) 등<br> <img src="https://kr9268.github.io/posts/dtcontest-ore-20240624/index_files/figure-html/5dcda823-4-image-5.png" class="img-fluid" alt="image-5.png"><br> <strong>출처</strong> : USGS Mineral Commodity Summaries 2024 데이터로 가공<br> https://www.sciencebase.gov/catalog/item/65a6e45fd34e5af967a46749</li>
</ul></li>
</ul>
</section>
<section id="핵심광물-조달에-대한-수입경쟁-심화" class="level4">
<h4 class="anchored" data-anchor-id="핵심광물-조달에-대한-수입경쟁-심화">핵심광물 조달에 대한 수입경쟁 심화</h4>
<ul>
<li>각 광물에 대한 국가별 수입량은 2014년 대비 상승세를 보이고 있음
<ul>
<li>다만, 리튬은 전기차 캐즘이나 배터리시장 경쟁심화 등 여러 요소로 감소된 것으로 추정
<ul>
<li>배터리시장의 한국업체 점유율 전년비 5.3%하락</li>
<li>전기차 캐즘 : Chasm, 대중화 전 수요가 감소하는 것</li>
</ul></li>
</ul></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/dtcontest-ore-20240624/index_files/figure-html/874c8c3a-1-image.png" class="img-fluid figure-img"></p>
<figcaption>image.png</figcaption>
</figure>
</div>
<p><strong>출처</strong> : USGS Mineral Commodity Summaries 2024 데이터로 가공<br> https://www.sciencebase.gov/catalog/item/65a6e45fd34e5af967a46749</p>
<ul>
<li>각 광물에 대한 국가별 수입량은 2014년 대비 상승세를 보이고 있음
<ul>
<li>한국 : 희소금속 산업 발전대책 2.0 추진 (확보-비축-순환 수급에 대한 3중 안정망 등)</li>
<li>미국 : 중요 광물 공급을 위한 연방정부 전략 추진 (수입의존 저감 및 공급망 확보 등)</li>
<li>일본 : 신 국제자원 전략 추진 (비축제도 재검토, 광종별 확보책 구축, 확보를 위한 국제협력 도출 등)</li>
<li>EU : EIP Raw materials 추진 (자원의 채광,재활용 등에 대한 시험적 대응, 희소자원에 대한 대체 이용처 도출 등)</li>
</ul></li>
</ul>
<p><strong>출처</strong> : 한눈에 보는 6대 핵심광물 이슈분석, 한국지질자원연구원</p>
<ul>
<li><p>광물별 상위 수입국 현황(하단 참조)</p>
<ul>
<li>광물별 상위 수입국 현황 - 니켈 (단위 : kt[킬로톤])
<ul>
<li>Index 0~4 : 1~5순위 / Index 5 : 합계</li>
</ul></li>
</ul></li>
</ul>
<div id="c54b480c" class="cell">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">target_ore <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'니켈'</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].copy()</span>
<span id="cb1-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_year <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].columns:</span>
<span id="cb1-5">    ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>][each_year] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>][each_year].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;br&gt;'</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># HWP파일 작성용 CSV저장, 자동 줄바꿈 적용시 아래 표기처럼 복사/붙여넣기 가능</span></span>
<span id="cb1-8">ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].to_excel(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Top5Country_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_ore<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.xlsx"</span>)</span>
<span id="cb1-9">display(HTML(ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>].to_html(escape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<colgroup>
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
</colgroup>
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">2014</th>
<th data-quarto-table-cell-role="th">2015</th>
<th data-quarto-table-cell-role="th">2016</th>
<th data-quarto-table-cell-role="th">2017</th>
<th data-quarto-table-cell-role="th">2018</th>
<th data-quarto-table-cell-role="th">2019</th>
<th data-quarto-table-cell-role="th">2020</th>
<th data-quarto-table-cell-role="th">2021</th>
<th data-quarto-table-cell-role="th">2022</th>
<th data-quarto-table-cell-role="th">2023</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Brazil<br>
29,012</td>
<td>Brazil<br>
34,127</td>
<td>Brazil<br>
19,720</td>
<td>Japan<br>
112,033</td>
<td>Japan<br>
135,167</td>
<td>Japan<br>
191,793</td>
<td>Japan<br>
200,127</td>
<td>Japan<br>
206,021</td>
<td>Japan<br>
173,627</td>
<td>China<br>
256,142</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Germany<br>
11,705</td>
<td>Rep. of Korea<br>
27,394</td>
<td>China<br>
15,197</td>
<td>Rep. of Korea<br>
53,085</td>
<td>Rep. of Korea<br>
52,446</td>
<td>Belgium<br>
34,111</td>
<td>Belgium<br>
31,329</td>
<td>China<br>
98,853</td>
<td>China<br>
119,071</td>
<td>Japan<br>
124,779</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Turkiye<br>
2,203</td>
<td>Canada<br>
16,517</td>
<td>Germany<br>
14,054</td>
<td>China<br>
21,639</td>
<td>Australia<br>
21,776</td>
<td>Rep. of Korea<br>
31,817</td>
<td>Canada<br>
21,353</td>
<td>Belgium<br>
41,121</td>
<td>Belgium<br>
43,286</td>
<td>Belgium<br>
41,815</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Switzerland<br>
1,344</td>
<td>Germany<br>
12,654</td>
<td>Canada<br>
13,500</td>
<td>Germany<br>
13,939</td>
<td>Belgium<br>
20,963</td>
<td>Canada<br>
25,360</td>
<td>China<br>
16,340</td>
<td>Canada<br>
21,410</td>
<td>Canada<br>
18,103</td>
<td>Malaysia<br>
26,280</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Spain<br>
1,292</td>
<td>Thailand<br>
4,923</td>
<td>Rep. of Korea<br>
8,951</td>
<td>India<br>
11,978</td>
<td>China<br>
20,569</td>
<td>Australia<br>
19,640</td>
<td>Australia<br>
13,834</td>
<td>Malaysia<br>
10,150</td>
<td>Rep. of Korea<br>
14,469</td>
<td>Canada<br>
13,364</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>45,555</td>
<td>95,615</td>
<td>71,421</td>
<td>212,674</td>
<td>250,921</td>
<td>302,721</td>
<td>282,983</td>
<td>377,554</td>
<td>368,556</td>
<td>462,380</td>
</tr>
</tbody>
</table>
</div>
</div>
<ul>
<li>광물별 상위 수입국 현황 - 코발트 (단위 : kt[킬로톤])</li>
</ul>
<div id="f97f66c5" class="cell">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">target_ore <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'코발트'</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].copy()</span>
<span id="cb2-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_year <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].columns:</span>
<span id="cb2-5">    ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>][each_year] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>][each_year].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;br&gt;'</span>)</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># HWP파일 작성용 CSV저장, 자동 줄바꿈 적용시 아래 표기처럼 복사/붙여넣기 가능</span></span>
<span id="cb2-8">ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].to_excel(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Top5Country_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_ore<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.xlsx"</span>)</span>
<span id="cb2-9">display(HTML(ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>].to_html(escape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<colgroup>
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
</colgroup>
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">2014</th>
<th data-quarto-table-cell-role="th">2015</th>
<th data-quarto-table-cell-role="th">2016</th>
<th data-quarto-table-cell-role="th">2017</th>
<th data-quarto-table-cell-role="th">2018</th>
<th data-quarto-table-cell-role="th">2019</th>
<th data-quarto-table-cell-role="th">2020</th>
<th data-quarto-table-cell-role="th">2021</th>
<th data-quarto-table-cell-role="th">2022</th>
<th data-quarto-table-cell-role="th">2023</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Germany<br>
360,060</td>
<td>Germany<br>
366,375</td>
<td>USA<br>
444,837</td>
<td>USA<br>
496,572</td>
<td>USA<br>
471,603</td>
<td>United Kingdom<br>
546,036</td>
<td>Germany<br>
571,008</td>
<td>Germany<br>
660,773</td>
<td>Germany<br>
488,970</td>
<td>Germany<br>
529,288</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Sweden<br>
213,809</td>
<td>Sweden<br>
220,380</td>
<td>Germany<br>
347,106</td>
<td>United Kingdom<br>
345,329</td>
<td>Germany<br>
329,296</td>
<td>Germany<br>
380,888</td>
<td>USA<br>
472,193</td>
<td>USA<br>
295,225</td>
<td>Italy<br>
250,075</td>
<td>United Kingdom<br>
395,371</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Brazil<br>
154,625</td>
<td>Brazil<br>
124,744</td>
<td>Sweden<br>
201,729</td>
<td>Germany<br>
299,495</td>
<td>Finland<br>
277,965</td>
<td>USA<br>
348,198</td>
<td>United Kingdom<br>
371,668</td>
<td>Italy<br>
232,667</td>
<td>Brazil<br>
191,783</td>
<td>USA<br>
219,089</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Netherlands<br>
124,798</td>
<td>Canada<br>
93,406</td>
<td>Brazil<br>
137,948</td>
<td>Italy<br>
195,547</td>
<td>United Kingdom<br>
264,720</td>
<td>Italy<br>
217,586</td>
<td>Italy<br>
217,804</td>
<td>United Kingdom<br>
198,261</td>
<td>Austria<br>
186,431</td>
<td>Japan<br>
189,547</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Belgium<br>
90,674</td>
<td>Rep. of Korea<br>
76,266</td>
<td>Netherlands<br>
101,162</td>
<td>Sweden<br>
182,634</td>
<td>Italy<br>
228,860</td>
<td>France<br>
176,344</td>
<td>Sweden<br>
159,068</td>
<td>Sweden<br>
187,343</td>
<td>Sweden<br>
164,849</td>
<td>Sweden<br>
180,823</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>943,966</td>
<td>881,171</td>
<td>1,232,782</td>
<td>1,519,578</td>
<td>1,572,444</td>
<td>1,669,052</td>
<td>1,791,741</td>
<td>1,574,269</td>
<td>1,282,108</td>
<td>1,514,119</td>
</tr>
</tbody>
</table>
</div>
</div>
<ul>
<li>광물별 상위 수입국 현황 - 리튬 (단위 : kt[킬로톤])</li>
</ul>
<div id="11fc602a" class="cell">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">target_ore <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'리튬'</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].copy()</span>
<span id="cb3-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_year <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].columns:</span>
<span id="cb3-5">    ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>][each_year] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>][each_year].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;br&gt;'</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># HWP파일 작성용 CSV저장, 자동 줄바꿈 적용시 아래 표기처럼 복사/붙여넣기 가능</span></span>
<span id="cb3-8">ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].to_excel(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Top5Country_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_ore<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.xlsx"</span>)</span>
<span id="cb3-9">display(HTML(ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>].to_html(escape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<colgroup>
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
</colgroup>
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">2014</th>
<th data-quarto-table-cell-role="th">2015</th>
<th data-quarto-table-cell-role="th">2016</th>
<th data-quarto-table-cell-role="th">2017</th>
<th data-quarto-table-cell-role="th">2018</th>
<th data-quarto-table-cell-role="th">2019</th>
<th data-quarto-table-cell-role="th">2020</th>
<th data-quarto-table-cell-role="th">2021</th>
<th data-quarto-table-cell-role="th">2022</th>
<th data-quarto-table-cell-role="th">2023</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Belgium<br>
11,844</td>
<td>Rep. of Korea<br>
35,014</td>
<td>China<br>
47,227</td>
<td>Japan<br>
69,609</td>
<td>Rep. of Korea<br>
91,029</td>
<td>Rep. of Korea<br>
124,094</td>
<td>Rep. of Korea<br>
130,051</td>
<td>Rep. of Korea<br>
189,821</td>
<td>China<br>
278,358</td>
<td>China<br>
324,683</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Spain<br>
6,852</td>
<td>Belgium<br>
18,782</td>
<td>USA<br>
33,806</td>
<td>China<br>
61,411</td>
<td>Japan<br>
86,273</td>
<td>Japan<br>
118,216</td>
<td>China<br>
101,259</td>
<td>China<br>
169,226</td>
<td>Rep. of Korea<br>
238,878</td>
<td>Japan<br>
109,344</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Germany<br>
3,900</td>
<td>Canada<br>
7,502</td>
<td>Belgium<br>
24,300</td>
<td>Rep. of Korea<br>
55,620</td>
<td>China<br>
46,158</td>
<td>China<br>
59,437</td>
<td>Japan<br>
97,427</td>
<td>Japan<br>
108,999</td>
<td>Japan<br>
120,350</td>
<td>USA<br>
34,261</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Turkiye<br>
3,313</td>
<td>Germany<br>
6,237</td>
<td>Russian Federation<br>
11,620</td>
<td>USA<br>
34,820</td>
<td>USA<br>
36,507</td>
<td>USA<br>
26,740</td>
<td>USA<br>
26,229</td>
<td>USA<br>
27,766</td>
<td>Netherlands<br>
17,332</td>
<td>Netherlands<br>
12,724</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Netherlands<br>
1,376</td>
<td>Spain<br>
5,638</td>
<td>Canada<br>
10,842</td>
<td>Belgium<br>
17,840</td>
<td>Belgium<br>
21,817</td>
<td>France<br>
16,984</td>
<td>Belgium<br>
16,554</td>
<td>Russian Federation<br>
19,591</td>
<td>USA<br>
15,192</td>
<td>United Kingdom<br>
6,761</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>27,285</td>
<td>73,173</td>
<td>127,794</td>
<td>239,299</td>
<td>281,784</td>
<td>345,471</td>
<td>371,519</td>
<td>515,402</td>
<td>670,112</td>
<td>487,772</td>
</tr>
</tbody>
</table>
</div>
</div>
<ul>
<li>광물별 상위 수입국 현황 - 망간 (단위 : kt[킬로톤])</li>
</ul>
<div id="4ec1cbd7" class="cell">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">target_ore <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'망간'</span></span>
<span id="cb4-2"></span>
<span id="cb4-3">ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].copy()</span>
<span id="cb4-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_year <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].columns:</span>
<span id="cb4-5">    ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>][each_year] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>][each_year].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;br&gt;'</span>)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># HWP파일 작성용 CSV저장, 자동 줄바꿈 적용시 아래 표기처럼 복사/붙여넣기 가능</span></span>
<span id="cb4-8">ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].to_excel(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Top5Country_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_ore<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.xlsx"</span>)</span>
<span id="cb4-9">display(HTML(ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>].to_html(escape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<colgroup>
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
</colgroup>
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">2014</th>
<th data-quarto-table-cell-role="th">2015</th>
<th data-quarto-table-cell-role="th">2016</th>
<th data-quarto-table-cell-role="th">2017</th>
<th data-quarto-table-cell-role="th">2018</th>
<th data-quarto-table-cell-role="th">2019</th>
<th data-quarto-table-cell-role="th">2020</th>
<th data-quarto-table-cell-role="th">2021</th>
<th data-quarto-table-cell-role="th">2022</th>
<th data-quarto-table-cell-role="th">2023</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Germany<br>
1,762,753</td>
<td>China, Hong Kong SAR<br>
6,596,207</td>
<td>China, Hong Kong SAR<br>
6,430,363</td>
<td>China, Hong Kong SAR<br>
4,445,408</td>
<td>USA<br>
5,646,705</td>
<td>USA<br>
5,337,518</td>
<td>USA<br>
5,522,054</td>
<td>USA<br>
6,726,526</td>
<td>Germany<br>
4,296,848</td>
<td>USA<br>
7,890,263</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Brazil<br>
1,139,607</td>
<td>Germany<br>
2,047,818</td>
<td>USA<br>
3,899,931</td>
<td>USA<br>
4,356,834</td>
<td>China, Hong Kong SAR<br>
5,317,808</td>
<td>China, Hong Kong SAR<br>
5,014,159</td>
<td>China, Hong Kong SAR<br>
4,943,913</td>
<td>Germany<br>
4,675,819</td>
<td>Japan<br>
2,842,379</td>
<td>Germany<br>
3,032,223</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Belgium<br>
847,525</td>
<td>Belgium<br>
1,255,255</td>
<td>Germany<br>
3,361,475</td>
<td>Germany<br>
2,858,660</td>
<td>Germany<br>
2,722,953</td>
<td>Germany<br>
3,163,188</td>
<td>Germany<br>
4,058,559</td>
<td>China, Hong Kong SAR<br>
4,648,238</td>
<td>China, Hong Kong SAR<br>
2,556,882</td>
<td>Japan<br>
2,457,672</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Spain<br>
498,741</td>
<td>Brazil<br>
1,015,417</td>
<td>Russian Federation<br>
1,509,007</td>
<td>Japan<br>
2,302,316</td>
<td>China<br>
2,504,820</td>
<td>China<br>
2,789,753</td>
<td>China<br>
2,812,012</td>
<td>Tunisia<br>
2,484,856</td>
<td>Poland<br>
1,565,781</td>
<td>China, Hong Kong SAR<br>
2,360,582</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Turkiye<br>
457,040</td>
<td>Rep. of Korea<br>
443,342</td>
<td>China<br>
1,213,518</td>
<td>Russian Federation<br>
1,732,776</td>
<td>Japan<br>
2,433,654</td>
<td>Japan<br>
2,398,831</td>
<td>Japan<br>
2,636,763</td>
<td>Japan<br>
2,484,354</td>
<td>China<br>
1,529,201</td>
<td>Poland<br>
1,547,787</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>4,705,666</td>
<td>11,358,039</td>
<td>16,414,293</td>
<td>15,695,994</td>
<td>18,625,940</td>
<td>18,703,449</td>
<td>19,973,301</td>
<td>21,019,792</td>
<td>12,791,091</td>
<td>17,288,526</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><strong>출처</strong> : UN COMTRADE DB의 자료를 가공 <br> <strong>참고</strong> : https://www.sedaily.com/NewsView/2D7TKJ4UE9</p>
<ul>
<li>핵심광물을 확보하기 위해 경쟁국들은 다양한 전략을 추진중
<ul>
<li>한국 : 희소금속 산업 발전대책 2.0 추진 (확보-비축-순환 수급에 대한 3중 안정망 등)</li>
<li>미국 : 중요 광물 공급을 위한 연방정부 전략 추진 (수입의존 저감 및 공급망 확보 등)</li>
<li>일본 : 신 국제자원 전략 추진 (비축제도 재검토, 광종별 확보책 구축, 확보를 위한 국제협력 도출 등)</li>
<li>EU : EIP Raw materials 추진 (자원의 채광,재활용 등에 대한 시험적 대응, 희소자원에 대한 대체 이용처 도출 등)</li>
</ul></li>
</ul>
<p><strong>출처</strong> : 한눈에 보는 6대 핵심광물 이슈분석, 한국지질자원연구원</p>
</section>
<section id="현황요약-및-제안목적" class="level4">
<h4 class="anchored" data-anchor-id="현황요약-및-제안목적">현황요약 및 제안목적</h4>
<ul>
<li>아래와 같은 상황에서 한국도 핵심광물 비축이나 국산화 노력 등이 이루어지고 있음
<ul>
<li>핵심광물의 수요증가(전기차 등 환경에 대한 관심과 배터리 시장의 성장)</li>
<li>공급망 위기(생산지 편중)</li>
<li>수급경쟁 심화(경쟁국의 확보전략 추진, 수입량 증대)</li>
</ul></li>
<li>그럼에도 생산지 편중, 경쟁국은 통제 불가능 요소로, 여전히 공급망 리스크가 상당함</li>
<li>이러한 상황에서 미래 핵심산업의 경쟁력 확보를 이끌어낼 핵심 원재료(광물)의 확보를 위해, 각 상황에 대한 예측과 위기요소를 탐지할, 위기요소 탐지모델을 도입하고자 함</li>
</ul>
</section>
</section>
<section id="도입-방법" class="level3">
<h3 class="anchored" data-anchor-id="도입-방법">도입 방법</h3>
<section id="분석대상-정립" class="level4">
<h4 class="anchored" data-anchor-id="분석대상-정립">분석대상 정립</h4>
<ul>
<li>핵심광물로 니켈, 코발트, 리튬, 망간을 지정하고, 국제기준인 6자리 HSCODE를 기준으로 함
<ul>
<li>산화코발트(282200), 황산코발트(283329), 산화/수산화리튬(282520), 탄산리튬(283691)</li>
<li>산화/수산화니켈(282540), 황산니켈(283324), 이산화망간(850610)</li>
</ul></li>
</ul>
</section>
<section id="고려요소feature-선정" class="level4">
<h4 class="anchored" data-anchor-id="고려요소feature-선정">고려요소(Feature) 선정</h4>
<ul>
<li>국가별 자원수입량을 통해 경쟁자의 활동(광물이동의 편중 등)을 관찰
<ul>
<li>위의 HSCODE로 전세계 수출입현황을 알 수 있는 UN Comtrade DB API로 데이터 확보</li>
</ul></li>
<li>중량당 가격(Price per Weight)을 가격변수로 고려
<ul>
<li>수출입데이터의 Value(Price)와 Netweight로 연월 데이터 산출</li>
</ul></li>
<li>핵심광물 생산지가 해외에 편중되어 국제운송이 필수이므로, 물류에 대해 BDI지수로 관찰
<ul>
<li>BDI : Baltic Dry Index. 원자재 운송에 사용되는 건화물선에 대한 운임비용 지수</li>
<li>원자재 이동이라는 점에서 경기선행지표로도 인식되고 있음(향후 시장상황에 대한 지표)</li>
</ul></li>
</ul>
</section>
<section id="예측-및-이상탐지" class="level4">
<h4 class="anchored" data-anchor-id="예측-및-이상탐지">예측 및 이상탐지</h4>
<ul>
<li>고려요소에 대해 ARIMA, 홀트윈터스 지수평활법을 시작으로 LSTM 등 AI모델로 예측 진행</li>
<li>예측 데이터 기반으로 AnomalyDetection(R, 파이썬의 Prophet) 등을 활용한 이상탐지 진행</li>
</ul>
</section>
</section>
</section>
</section>
<section id="작성에-사용된-분석-코드" class="level1">
<h1>작성에 사용된 분석 코드</h1>
<section id="usgs-자료분석-광물별-매장량-산출" class="level2">
<h2 class="anchored" data-anchor-id="usgs-자료분석-광물별-매장량-산출">USGS 자료분석 (광물별 매장량 산출)</h2>
<div id="359b65ae" class="cell">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.ticker <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ticker</span>
<span id="cb5-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> display, HTML</span>
<span id="cb5-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plotly.express <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> px</span></code></pre></div>
</details>
</div>
<div id="30bd1f6f" class="cell">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">ores <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'니켈'</span>:</span>
<span id="cb6-2">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_name'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mcs2024-nicke_world.csv'</span>,</span>
<span id="cb6-3">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>},</span>
<span id="cb6-4">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'코발트'</span>:</span>
<span id="cb6-5">         {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_name'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mcs2024-cobal_world.csv'</span>,</span>
<span id="cb6-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>},</span>
<span id="cb6-7">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'리튬'</span>:</span>
<span id="cb6-8">         {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_name'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mcs2024-lithi_world.csv'</span>,</span>
<span id="cb6-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>},</span>
<span id="cb6-10">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'망간'</span>:</span>
<span id="cb6-11">         {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_name'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mcs2024-manga_world.csv'</span>,</span>
<span id="cb6-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>}}</span></code></pre></div>
</details>
</div>
<div id="29b12f1d" class="cell">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CSV리딩</span></span>
<span id="cb7-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ore <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ores.keys():</span>
<span id="cb7-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CSV리딩</span></span>
<span id="cb7-4">    ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_name'</span>])</span>
<span id="cb7-5"></span>
<span id="cb7-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터 전처리</span></span>
<span id="cb7-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Null처리</span></span>
<span id="cb7-8">    ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(regex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'^(?!Unnamed)'</span>).dropna(subset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>])</span>
<span id="cb7-9"></span>
<span id="cb7-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 킬로톤인 경우 톤으로 변환(컬럼 추가)</span></span>
<span id="cb7-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_kt'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>].columns:</span>
<span id="cb7-12">        ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_t'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_kt'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb7-13"></span>
<span id="cb7-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 숫자에 섞인 기호 처리 후 변환</span></span>
<span id="cb7-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_t'</span>].dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O'</span>:</span>
<span id="cb7-16">        ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_t'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_t'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&gt;'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb7-17">        ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_t'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_t'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span>
<span id="cb7-18">        ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_t'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_t'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.strip().astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span>
<span id="cb7-19">    </span>
<span id="cb7-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 국가명 변환(튀르키예 등)</span></span>
<span id="cb7-21">    ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T체rkiye'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Turkiye'</span>)</span>
<span id="cb7-22"></span>
<span id="cb7-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 매장량 (실제값)</span></span>
<span id="cb7-24">    ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reserve_df_actual'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>].copy()</span>
<span id="cb7-25">    ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reserve_df_actual'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>].groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_t'</span>])</span>
<span id="cb7-26">    ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reserve_df_actual'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_t'</span>].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span>
<span id="cb7-27">    ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reserve_df_actual'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reserve_df_actual'</span>].drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'World total (rounded)'</span>)</span>
<span id="cb7-28"></span>
<span id="cb7-29">    ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reserve_df_actual'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reserve_df_actual'</span>].copy()</span>
<span id="cb7-30">    ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reserve_df_actual'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_t_total'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reserve_df_actual'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item())</span>
<span id="cb7-31">    ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reserve_df_actual'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_portion'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reserve_df_actual'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_t'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reserve_df_actual'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_t_total'</span>]</span>
<span id="cb7-32">    ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reserve_df_actual'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reserve_df_actual'</span>].sort_values(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_portion'</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</details>
</div>
<div id="a20f702a" class="cell">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시각화용 DataFrame</span></span>
<span id="cb8-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ore <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ores.keys():</span>
<span id="cb8-3">    ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plotly_df'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reserve_df_actual'</span>].copy()</span>
<span id="cb8-4">    ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plotly_df'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plotly_df'</span>].reset_index()</span>
<span id="cb8-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plotly_df'</span>].index):</span>
<span id="cb8-6">        value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plotly_df'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>][i]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;br&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plotly_df'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_t'</span>][i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> kt &lt;br&gt;</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plotly_df'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_portion'</span>][i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span></span>
<span id="cb8-7">        ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plotly_df'</span>].loc.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__setitem__</span>((i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>), value)  </span></code></pre></div>
</details>
</div>
<div id="e7a295de" class="cell">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ore <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ores.keys():</span>
<span id="cb9-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data</span></span>
<span id="cb9-3">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plotly_df'</span>]</span>
<span id="cb9-4"></span>
<span id="cb9-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create treemap</span></span>
<span id="cb9-6">    fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> px.treemap(data, path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Country'</span>], values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_portion'</span>, title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ore,</span>
<span id="cb9-7">                        labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ores[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plotly_df'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reserves_t'</span>], width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">700</span>, height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">380</span>)</span>
<span id="cb9-8">    fig.update_traces(textposition<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'middle center'</span>)</span>
<span id="cb9-9">    fig.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<pre><code>Unable to display output for mime type(s): application/vnd.plotly.v1+json</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>Unable to display output for mime type(s): application/vnd.plotly.v1+json</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>Unable to display output for mime type(s): application/vnd.plotly.v1+json</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>Unable to display output for mime type(s): application/vnd.plotly.v1+json</code></pre>
</div>
</div>
</section>
<section id="un-comtrade-자료분석광물별-top5수입국" class="level2">
<h2 class="anchored" data-anchor-id="un-comtrade-자료분석광물별-top5수입국">UN Comtrade 자료분석(광물별 Top5수입국)</h2>
<div id="63433b05" class="cell">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">ores_uncomtrade_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'니켈'</span>:</span>
<span id="cb14-2">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_url'</span>:[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/KR9268/db_datagokr/main/282540,283324_merged(since2011).csv'</span>,</span>
<span id="cb14-3">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/KR9268/db_datagokr/main/282540,283324_merged(since2021).csv'</span>],</span>
<span id="cb14-4">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>},</span>
<span id="cb14-5">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'코발트'</span>:</span>
<span id="cb14-6">         {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_url'</span>:[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/KR9268/db_datagokr/main/282200,283329_merged(since2011).csv'</span>,</span>
<span id="cb14-7">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/KR9268/db_datagokr/main/282200,283329_merged(since2021).csv'</span>],</span>
<span id="cb14-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>},</span>
<span id="cb14-9">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'리튬'</span>:</span>
<span id="cb14-10">         {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_url'</span>:[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/KR9268/db_datagokr/main/282520,283691_merged(since2011).csv'</span>,</span>
<span id="cb14-11">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/KR9268/db_datagokr/main/282520,283691_merged(since2021).csv'</span>],</span>
<span id="cb14-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>},</span>
<span id="cb14-13">         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'망간'</span>:</span>
<span id="cb14-14">         {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_url'</span>:[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/KR9268/db_datagokr/main/850610_merged(since2011).csv'</span>,</span>
<span id="cb14-15">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/KR9268/db_datagokr/main/850610_merged(since2021).csv'</span>],</span>
<span id="cb14-16">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>}}</span></code></pre></div>
</details>
</div>
<div id="085d3e63" class="cell">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CSV리딩</span></span>
<span id="cb15-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ore <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ores_uncomtrade_url.keys():</span>
<span id="cb15-3">    temp_list_for_df_concat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_url <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ores_uncomtrade_url[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_url'</span>]:</span>
<span id="cb15-5">        temp_list_for_df_concat.append(pd.read_csv(each_url, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cp949'</span>, low_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>))</span>
<span id="cb15-6">    ores_uncomtrade_url[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(temp_list_for_df_concat)</span></code></pre></div>
</details>
</div>
<div id="9364d2e2" class="cell">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 기간데이터 전처리 &amp; 데이터 가공 및 순위산출</span></span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> preprocess_df(df_copy):</span>
<span id="cb16-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 날짜변환</span></span>
<span id="cb16-5">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'period'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'period'</span>].astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int'</span>).astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'str'</span>)</span>
<span id="cb16-6">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'period_year'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'period'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb16-7">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'period_month'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'period'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]</span>
<span id="cb16-8">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'period_dateformat'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'refPeriodId'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y%m</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb16-9"></span>
<span id="cb16-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 단위당 가격</span></span>
<span id="cb16-11">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value_per_qty'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'primaryValue'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'qty'</span>]</span>
<span id="cb16-12">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value_per_qty'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'value_per_qty'</span>].replace([np.inf, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.inf], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb16-13"></span>
<span id="cb16-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 국가명 변환(튀르키예 등)</span></span>
<span id="cb16-15">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reporterDesc'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reporterDesc'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T체rkiye'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Turkiye'</span>)</span>
<span id="cb16-16">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'partnerDesc'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'partnerDesc'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T체rkiye'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Turkiye'</span>)</span>
<span id="cb16-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> df_copy</span>
<span id="cb16-18"></span>
<span id="cb16-19"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ore <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ores_uncomtrade_url.keys():</span>
<span id="cb16-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 기간데이터 전처리</span></span>
<span id="cb16-21">    ores_uncomtrade_url[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preprocess_df(ores_uncomtrade_url[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>])</span>
<span id="cb16-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 데이터 가공 및 순위산출(groupby)</span></span>
<span id="cb16-23">    ores_uncomtrade_url[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_groupby_value'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ores_uncomtrade_url[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>][ores_uncomtrade_url[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'flowCode'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>].groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'refYear'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reporterDesc'</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(numeric_only<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'primaryValue'</span>]</span>
<span id="cb16-24">    ores_uncomtrade_url[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_groupby_value'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ores_uncomtrade_url[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>][ores_uncomtrade_url[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_df'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'flowCode'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>].groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'refYear'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reporterDesc'</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(numeric_only<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'qty'</span>]</span>
<span id="cb16-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#ores_uncomtrade_url[ore]['df_groupby_value'] =ores_uncomtrade_url[ore]['csv_df'][ores_uncomtrade_url[ore]['csv_df']['flowCode']=='M'].groupby(['refYear','reporterDesc']).sum(numeric_only=True)['value_per_qty']</span></span></code></pre></div>
</details>
</div>
<div id="cfd81b4a" class="cell">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 상위 5개국 산출</span></span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> return_top5(df_groupby, list_removing_year):</span>
<span id="cb17-4">    dict_top_all_year <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb17-5">    dict_top_all_year_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb17-6">    dict_top_all_year_total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb17-7">    dict_top_all_year_value_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb17-8"></span>
<span id="cb17-9">    year_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(df_groupby.index.get_level_values(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)))</span>
<span id="cb17-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> list_removing_year:</span>
<span id="cb17-11">        year_index.remove(_)</span>
<span id="cb17-12">    year_index.sort()</span>
<span id="cb17-13"></span>
<span id="cb17-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_year <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> year_index:</span>
<span id="cb17-15">        top5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_groupby[each_year].sort_values(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb17-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'World'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> top5.index:</span>
<span id="cb17-17">            top5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> top5.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'World'</span>)</span>
<span id="cb17-18">        top5_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> top5.index.tolist()[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span>
<span id="cb17-19"></span>
<span id="cb17-20">        top5_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb17-21">        top5_index_and_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb17-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> index_country <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> top5_index:</span>
<span id="cb17-23">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># top5_value.append(top5[index_country])</span></span>
<span id="cb17-24">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># top5_index_and_value.append(f"{index_country}\n{top5[index_country]:,.0f}")</span></span>
<span id="cb17-25"></span>
<span id="cb17-26">            top5_value.append(top5[index_country]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb17-27">            top5_index_and_value.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>index_country<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>top5[index_country]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb17-28">        </span>
<span id="cb17-29">        dict_top_all_year[each_year] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> top5_index</span>
<span id="cb17-30">        dict_top_all_year_value[each_year] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> top5_value</span>
<span id="cb17-31"></span>
<span id="cb17-32">        dict_top_all_year_total[each_year] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> top5_index_and_value</span>
<span id="cb17-33">        dict_top_all_year_value_sum[each_year] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(top5_value)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:,.0f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb17-34"></span>
<span id="cb17-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pd.concat([pd.DataFrame(dict_top_all_year_total), </span>
<span id="cb17-36">                      pd.DataFrame(dict_top_all_year_value_sum, </span>
<span id="cb17-37">                                   index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])]) </span>
<span id="cb17-38"></span>
<span id="cb17-39"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ore <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ores_uncomtrade_url.keys():</span>
<span id="cb17-40">    ores_uncomtrade_url[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> return_top5(ores_uncomtrade_url[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_groupby_value'</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2011</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2012</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2013</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2024</span>])</span></code></pre></div>
</details>
</div>
<div id="90afd409" class="cell">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">target_ore <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'코발트'</span></span>
<span id="cb18-2"></span>
<span id="cb18-3">ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].copy()</span>
<span id="cb18-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_year <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].columns:</span>
<span id="cb18-5">    ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>][each_year] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>][each_year].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;br&gt;'</span>)</span>
<span id="cb18-6"></span>
<span id="cb18-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># HWP파일 작성용 CSV저장, 자동 줄바꿈 적용시 아래 표기처럼 복사/붙여넣기 가능</span></span>
<span id="cb18-8">ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].to_excel(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Top5Country_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_ore<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.xlsx"</span>)</span>
<span id="cb18-9">display(HTML(ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>].to_html(escape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<colgroup>
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
</colgroup>
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">2014</th>
<th data-quarto-table-cell-role="th">2015</th>
<th data-quarto-table-cell-role="th">2016</th>
<th data-quarto-table-cell-role="th">2017</th>
<th data-quarto-table-cell-role="th">2018</th>
<th data-quarto-table-cell-role="th">2019</th>
<th data-quarto-table-cell-role="th">2020</th>
<th data-quarto-table-cell-role="th">2021</th>
<th data-quarto-table-cell-role="th">2022</th>
<th data-quarto-table-cell-role="th">2023</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Germany<br>
360,060</td>
<td>Germany<br>
366,375</td>
<td>USA<br>
444,837</td>
<td>USA<br>
496,572</td>
<td>USA<br>
471,603</td>
<td>United Kingdom<br>
546,036</td>
<td>Germany<br>
571,008</td>
<td>Germany<br>
660,773</td>
<td>Germany<br>
488,970</td>
<td>Germany<br>
529,288</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Sweden<br>
213,809</td>
<td>Sweden<br>
220,380</td>
<td>Germany<br>
347,106</td>
<td>United Kingdom<br>
345,329</td>
<td>Germany<br>
329,296</td>
<td>Germany<br>
380,888</td>
<td>USA<br>
472,193</td>
<td>USA<br>
295,225</td>
<td>Italy<br>
250,075</td>
<td>United Kingdom<br>
395,371</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Brazil<br>
154,625</td>
<td>Brazil<br>
124,744</td>
<td>Sweden<br>
201,729</td>
<td>Germany<br>
299,495</td>
<td>Finland<br>
277,965</td>
<td>USA<br>
348,198</td>
<td>United Kingdom<br>
371,668</td>
<td>Italy<br>
232,667</td>
<td>Brazil<br>
191,783</td>
<td>USA<br>
219,089</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Netherlands<br>
124,798</td>
<td>Canada<br>
93,406</td>
<td>Brazil<br>
137,948</td>
<td>Italy<br>
195,547</td>
<td>United Kingdom<br>
264,720</td>
<td>Italy<br>
217,586</td>
<td>Italy<br>
217,804</td>
<td>United Kingdom<br>
198,261</td>
<td>Austria<br>
186,431</td>
<td>Japan<br>
189,547</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Belgium<br>
90,674</td>
<td>Rep. of Korea<br>
76,266</td>
<td>Netherlands<br>
101,162</td>
<td>Sweden<br>
182,634</td>
<td>Italy<br>
228,860</td>
<td>France<br>
176,344</td>
<td>Sweden<br>
159,068</td>
<td>Sweden<br>
187,343</td>
<td>Sweden<br>
164,849</td>
<td>Sweden<br>
180,823</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>943,966</td>
<td>881,171</td>
<td>1,232,782</td>
<td>1,519,578</td>
<td>1,572,444</td>
<td>1,669,052</td>
<td>1,791,741</td>
<td>1,574,269</td>
<td>1,282,108</td>
<td>1,514,119</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="cc99e30b" class="cell">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">target_ore <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'리튬'</span></span>
<span id="cb19-2"></span>
<span id="cb19-3">ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].copy()</span>
<span id="cb19-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_year <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].columns:</span>
<span id="cb19-5">    ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>][each_year] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>][each_year].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;br&gt;'</span>)</span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># HWP파일 작성용 CSV저장, 자동 줄바꿈 적용시 아래 표기처럼 복사/붙여넣기 가능</span></span>
<span id="cb19-8">ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].to_excel(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Top5Country_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_ore<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.xlsx"</span>)</span>
<span id="cb19-9">display(HTML(ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>].to_html(escape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<colgroup>
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
</colgroup>
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">2014</th>
<th data-quarto-table-cell-role="th">2015</th>
<th data-quarto-table-cell-role="th">2016</th>
<th data-quarto-table-cell-role="th">2017</th>
<th data-quarto-table-cell-role="th">2018</th>
<th data-quarto-table-cell-role="th">2019</th>
<th data-quarto-table-cell-role="th">2020</th>
<th data-quarto-table-cell-role="th">2021</th>
<th data-quarto-table-cell-role="th">2022</th>
<th data-quarto-table-cell-role="th">2023</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Belgium<br>
11,844</td>
<td>Rep. of Korea<br>
35,014</td>
<td>China<br>
47,227</td>
<td>Japan<br>
69,609</td>
<td>Rep. of Korea<br>
91,029</td>
<td>Rep. of Korea<br>
124,094</td>
<td>Rep. of Korea<br>
130,051</td>
<td>Rep. of Korea<br>
189,821</td>
<td>China<br>
278,358</td>
<td>China<br>
324,683</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Spain<br>
6,852</td>
<td>Belgium<br>
18,782</td>
<td>USA<br>
33,806</td>
<td>China<br>
61,411</td>
<td>Japan<br>
86,273</td>
<td>Japan<br>
118,216</td>
<td>China<br>
101,259</td>
<td>China<br>
169,226</td>
<td>Rep. of Korea<br>
238,878</td>
<td>Japan<br>
109,344</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Germany<br>
3,900</td>
<td>Canada<br>
7,502</td>
<td>Belgium<br>
24,300</td>
<td>Rep. of Korea<br>
55,620</td>
<td>China<br>
46,158</td>
<td>China<br>
59,437</td>
<td>Japan<br>
97,427</td>
<td>Japan<br>
108,999</td>
<td>Japan<br>
120,350</td>
<td>USA<br>
34,261</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Turkiye<br>
3,313</td>
<td>Germany<br>
6,237</td>
<td>Russian Federation<br>
11,620</td>
<td>USA<br>
34,820</td>
<td>USA<br>
36,507</td>
<td>USA<br>
26,740</td>
<td>USA<br>
26,229</td>
<td>USA<br>
27,766</td>
<td>Netherlands<br>
17,332</td>
<td>Netherlands<br>
12,724</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Netherlands<br>
1,376</td>
<td>Spain<br>
5,638</td>
<td>Canada<br>
10,842</td>
<td>Belgium<br>
17,840</td>
<td>Belgium<br>
21,817</td>
<td>France<br>
16,984</td>
<td>Belgium<br>
16,554</td>
<td>Russian Federation<br>
19,591</td>
<td>USA<br>
15,192</td>
<td>United Kingdom<br>
6,761</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>27,285</td>
<td>73,173</td>
<td>127,794</td>
<td>239,299</td>
<td>281,784</td>
<td>345,471</td>
<td>371,519</td>
<td>515,402</td>
<td>670,112</td>
<td>487,772</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="7223e54b" class="cell">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">target_ore <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'망간'</span></span>
<span id="cb20-2"></span>
<span id="cb20-3">ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].copy()</span>
<span id="cb20-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_year <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].columns:</span>
<span id="cb20-5">    ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>][each_year] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>][each_year].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;br&gt;'</span>)</span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># HWP파일 작성용 CSV저장, 자동 줄바꿈 적용시 아래 표기처럼 복사/붙여넣기 가능</span></span>
<span id="cb20-8">ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].to_excel(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Top5Country_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_ore<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.xlsx"</span>)</span>
<span id="cb20-9">display(HTML(ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>].to_html(escape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<colgroup>
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
</colgroup>
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">2014</th>
<th data-quarto-table-cell-role="th">2015</th>
<th data-quarto-table-cell-role="th">2016</th>
<th data-quarto-table-cell-role="th">2017</th>
<th data-quarto-table-cell-role="th">2018</th>
<th data-quarto-table-cell-role="th">2019</th>
<th data-quarto-table-cell-role="th">2020</th>
<th data-quarto-table-cell-role="th">2021</th>
<th data-quarto-table-cell-role="th">2022</th>
<th data-quarto-table-cell-role="th">2023</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Germany<br>
1,762,753</td>
<td>China, Hong Kong SAR<br>
6,596,207</td>
<td>China, Hong Kong SAR<br>
6,430,363</td>
<td>China, Hong Kong SAR<br>
4,445,408</td>
<td>USA<br>
5,646,705</td>
<td>USA<br>
5,337,518</td>
<td>USA<br>
5,522,054</td>
<td>USA<br>
6,726,526</td>
<td>Germany<br>
4,296,848</td>
<td>USA<br>
7,890,263</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Brazil<br>
1,139,607</td>
<td>Germany<br>
2,047,818</td>
<td>USA<br>
3,899,931</td>
<td>USA<br>
4,356,834</td>
<td>China, Hong Kong SAR<br>
5,317,808</td>
<td>China, Hong Kong SAR<br>
5,014,159</td>
<td>China, Hong Kong SAR<br>
4,943,913</td>
<td>Germany<br>
4,675,819</td>
<td>Japan<br>
2,842,379</td>
<td>Germany<br>
3,032,223</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Belgium<br>
847,525</td>
<td>Belgium<br>
1,255,255</td>
<td>Germany<br>
3,361,475</td>
<td>Germany<br>
2,858,660</td>
<td>Germany<br>
2,722,953</td>
<td>Germany<br>
3,163,188</td>
<td>Germany<br>
4,058,559</td>
<td>China, Hong Kong SAR<br>
4,648,238</td>
<td>China, Hong Kong SAR<br>
2,556,882</td>
<td>Japan<br>
2,457,672</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Spain<br>
498,741</td>
<td>Brazil<br>
1,015,417</td>
<td>Russian Federation<br>
1,509,007</td>
<td>Japan<br>
2,302,316</td>
<td>China<br>
2,504,820</td>
<td>China<br>
2,789,753</td>
<td>China<br>
2,812,012</td>
<td>Tunisia<br>
2,484,856</td>
<td>Poland<br>
1,565,781</td>
<td>China, Hong Kong SAR<br>
2,360,582</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Turkiye<br>
457,040</td>
<td>Rep. of Korea<br>
443,342</td>
<td>China<br>
1,213,518</td>
<td>Russian Federation<br>
1,732,776</td>
<td>Japan<br>
2,433,654</td>
<td>Japan<br>
2,398,831</td>
<td>Japan<br>
2,636,763</td>
<td>Japan<br>
2,484,354</td>
<td>China<br>
1,529,201</td>
<td>Poland<br>
1,547,787</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>4,705,666</td>
<td>11,358,039</td>
<td>16,414,293</td>
<td>15,695,994</td>
<td>18,625,940</td>
<td>18,703,449</td>
<td>19,973,301</td>
<td>21,019,792</td>
<td>12,791,091</td>
<td>17,288,526</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="f7780a15" class="cell">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">target_ore <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'니켈'</span></span>
<span id="cb21-2"></span>
<span id="cb21-3">ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].copy()</span>
<span id="cb21-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_year <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].columns:</span>
<span id="cb21-5">    ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>][each_year] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>][each_year].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;br&gt;'</span>)</span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># HWP파일 작성용 CSV저장, 자동 줄바꿈 적용시 아래 표기처럼 복사/붙여넣기 가능</span></span>
<span id="cb21-8">ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].to_excel(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Top5Country_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_ore<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.xlsx"</span>)</span>
<span id="cb21-9">display(HTML(ores_uncomtrade_url[target_ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5_html'</span>].to_html(escape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<colgroup>
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
<col style="width: 9%">
</colgroup>
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">2014</th>
<th data-quarto-table-cell-role="th">2015</th>
<th data-quarto-table-cell-role="th">2016</th>
<th data-quarto-table-cell-role="th">2017</th>
<th data-quarto-table-cell-role="th">2018</th>
<th data-quarto-table-cell-role="th">2019</th>
<th data-quarto-table-cell-role="th">2020</th>
<th data-quarto-table-cell-role="th">2021</th>
<th data-quarto-table-cell-role="th">2022</th>
<th data-quarto-table-cell-role="th">2023</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Brazil<br>
29,012</td>
<td>Brazil<br>
34,127</td>
<td>Brazil<br>
19,720</td>
<td>Japan<br>
112,033</td>
<td>Japan<br>
135,167</td>
<td>Japan<br>
191,793</td>
<td>Japan<br>
200,127</td>
<td>Japan<br>
206,021</td>
<td>Japan<br>
173,627</td>
<td>China<br>
256,142</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Germany<br>
11,705</td>
<td>Rep. of Korea<br>
27,394</td>
<td>China<br>
15,197</td>
<td>Rep. of Korea<br>
53,085</td>
<td>Rep. of Korea<br>
52,446</td>
<td>Belgium<br>
34,111</td>
<td>Belgium<br>
31,329</td>
<td>China<br>
98,853</td>
<td>China<br>
119,071</td>
<td>Japan<br>
124,779</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Turkiye<br>
2,203</td>
<td>Canada<br>
16,517</td>
<td>Germany<br>
14,054</td>
<td>China<br>
21,639</td>
<td>Australia<br>
21,776</td>
<td>Rep. of Korea<br>
31,817</td>
<td>Canada<br>
21,353</td>
<td>Belgium<br>
41,121</td>
<td>Belgium<br>
43,286</td>
<td>Belgium<br>
41,815</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Switzerland<br>
1,344</td>
<td>Germany<br>
12,654</td>
<td>Canada<br>
13,500</td>
<td>Germany<br>
13,939</td>
<td>Belgium<br>
20,963</td>
<td>Canada<br>
25,360</td>
<td>China<br>
16,340</td>
<td>Canada<br>
21,410</td>
<td>Canada<br>
18,103</td>
<td>Malaysia<br>
26,280</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Spain<br>
1,292</td>
<td>Thailand<br>
4,923</td>
<td>Rep. of Korea<br>
8,951</td>
<td>India<br>
11,978</td>
<td>China<br>
20,569</td>
<td>Australia<br>
19,640</td>
<td>Australia<br>
13,834</td>
<td>Malaysia<br>
10,150</td>
<td>Rep. of Korea<br>
14,469</td>
<td>Canada<br>
13,364</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>45,555</td>
<td>95,615</td>
<td>71,421</td>
<td>212,674</td>
<td>250,921</td>
<td>302,721</td>
<td>282,983</td>
<td>377,554</td>
<td>368,556</td>
<td>462,380</td>
</tr>
</tbody>
</table>
</div>
</div>
</section>
<section id="un-comtrade-자료분석연도별-광물수입량-산출" class="level2">
<h2 class="anchored" data-anchor-id="un-comtrade-자료분석연도별-광물수입량-산출">UN Comtrade 자료분석(연도별 광물수입량 산출)</h2>
<div id="12c7898e" class="cell">
<details open="" class="code-fold">
<summary>Show the code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'font.family'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Nanum Gothic'</span></span>
<span id="cb22-2"></span>
<span id="cb22-3">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb22-4"></span>
<span id="cb22-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ore <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ores_uncomtrade_url.keys():</span>
<span id="cb22-6">    sns_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores_uncomtrade_url[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].columns.tolist()</span>
<span id="cb22-7">    sns_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ores_uncomtrade_url[ore][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'df_top5'</span>].values[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>].tolist()</span>
<span id="cb22-8">    sns_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(sns_value, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sns_index, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[ore])</span>
<span id="cb22-9">    sns_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns_df[ore].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span>
<span id="cb22-10"></span>
<span id="cb22-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> ore <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'망간'</span>]:</span>
<span id="cb22-12">        target_ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb22-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> ore <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'니켈'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'리튬'</span>]:</span>
<span id="cb22-14">        target_ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb22-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> ore <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'니켈'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'코발트'</span>]:</span>
<span id="cb22-16">        target_ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ax[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb22-17"></span>
<span id="cb22-18">    sns_df.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>target_ax)</span>
<span id="cb22-19"></span>
<span id="cb22-20">    target_ax.yaxis.set_major_formatter(ticker.FuncFormatter(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x, pos: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:,}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(x))))</span>
<span id="cb22-21"></span>
<span id="cb22-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_ax <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ax:</span>
<span id="cb22-23">    each_ax.legend()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/dtcontest-ore-20240624/index_files/figure-html/cell-19-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>공모전</category>
  <category>공공데이터</category>
  <category>분석</category>
  <guid>https://kr9268.github.io/posts/dtcontest-ore-20240624/</guid>
  <pubDate>Mon, 24 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[M_Study_5주차] Overfitting Control &amp; Hyper-Parameter</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-dl-creditcard-20240623/</link>
  <description><![CDATA[ 





<section id="개요" class="level1">
<h1>개요</h1>
<p>참여중인 딥러닝 스터디 5주차 기록입니다.</p>
</section>
<section id="주차-과제정리" class="level1">
<h1>4주차 과제정리</h1>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MNIST Data Load</span></span>
<span id="cb1-2">(x_train, y_train), (x_test, y_test) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.mnist.load_data()</span>
<span id="cb1-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x_train.shape, y_train.shape, y_train[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb1-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>) (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60000</span>,) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.reshape((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60000</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<ul>
<li>위 코드와 같이 reshape 하는 이유
<ul>
<li>이미지 처리의 코드는 기본적으로 3차원이 들어오게 되어있음
<ul>
<li>관례적으로 앞의 샘플(60000)은 제외(표기생략)하고 뒤에 있는 부분(28,28)을 사용하는데, 2차원임</li>
<li>reshape로 (28,28,1)과 같이 통상의 이미지를 처리하는 형식으로 만들어줌 <br><br></li>
</ul></li>
</ul></li>
<li>CNN은 2개의 단계로 진행 (Feature Learning + Classification)
<ul>
<li><p><strong>Feature Learning</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 1. Feature Learning</span></span>
<span id="cb2-2">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sequential()</span>
<span id="cb2-3"></span>
<span id="cb2-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output size formula: { (N - F + 2P) / stride } +1</span></span>
<span id="cb2-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parameter formual: K(F^2 * C + 1)</span></span>
<span id="cb2-6"></span>
<span id="cb2-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># filter number: 32, filter_size = 3x3, (default) stride = 1, padding = 'valid' (= no padding)</span></span>
<span id="cb2-8">  model.add(Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relu"</span>, input_shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb2-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output shape = {(28-3)/1} +1 = 26 =&gt; feature map = 26 x 26 x 32</span></span>
<span id="cb2-10"></span>
<span id="cb2-11">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pool_size = 2x2, stride = None, padding = "valid" (= no padding)</span></span>
<span id="cb2-12">  model.add(MaxPooling2D((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)))</span>
<span id="cb2-13">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output shape = 26/2 = 13 =&gt; feature map = 13 x 13 x 32</span></span>
<span id="cb2-14"></span>
<span id="cb2-15">  model.add(Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relu"</span>))</span>
<span id="cb2-16">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output shape = {(13-3)/1} +1 = 11 =&gt; feature map = 11 x 11 x 64</span></span>
<span id="cb2-17"></span>
<span id="cb2-18">  model.add(MaxPooling2D((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)))</span>
<span id="cb2-19">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output shape = 11/2 = 5,5 =&gt; 5 =&gt; feature map = 5 x 5 x 64</span></span>
<span id="cb2-20"></span>
<span id="cb2-21">  model.add(Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relu"</span>))</span>
<span id="cb2-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output shape = {(5-3)/1} +1 = 3 x 3 x 64</span></span></code></pre></div></li>
<li><p><strong>Classification</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Step 2. Fully Conneted Layer</span></span>
<span id="cb3-2">  model.add(Flatten())</span>
<span id="cb3-3">  model.add(Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relu"</span>))</span>
<span id="cb3-4">  model.add(Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"softmax"</span>))</span></code></pre></div>
<ul>
<li>Multiclass문제에는 Output Activation function을 Softmax로 한다 <br><br></li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model compile: cost function, optimizer, metric 설정</span></span>
<span id="cb4-2">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"adam"</span>,</span>
<span id="cb4-3">          loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sparse_categorical_crossentropy'</span>,</span>
<span id="cb4-4">          metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>])</span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training</span></span>
<span id="cb4-6">history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit(x_train, y_train, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb4-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span>Epoch <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb4-8"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1875</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1875</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==============================</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">s</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">ms</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> loss: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1554</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> accuracy: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9520</span></span>
<span id="cb4-9">Epoch <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb4-10"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1875</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1875</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==============================</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">s</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">ms</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> loss: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0497</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> accuracy: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9843</span></span>
<span id="cb4-11">Epoch <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb4-12"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1875</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1875</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==============================</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">s</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">ms</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> loss: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0344</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> accuracy: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9891</span></span>
<span id="cb4-13">Epoch <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb4-14"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1875</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1875</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==============================</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">s</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">ms</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> loss: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0266</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> accuracy: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9917</span></span>
<span id="cb4-15">Epoch <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb4-16"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1875</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1875</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==============================</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">s</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">ms</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> loss: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0229</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> accuracy: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9926</span></span></code></pre></div></li>
</ul></li>
<li>지난번 ANN 등 보다 좋은 정확도나온 이유(기존ML 등 대비)
<ul>
<li>파라미터의 수가 늘어나, 비선형적 관계를 많이 표현가능해짐
<ul>
<li>(CNN을 쓰며)지난번보다 Layer를 깊게(많이) 만듦</li>
<li>뉴런의 수 증가</li>
</ul></li>
<li>하이퍼 파라미터 조정(Relu사용 등)</li>
<li>Adam Optimizer의 사용</li>
</ul></li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prediction example</span></span>
<span id="cb5-2">  predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(x_test)</span>
<span id="cb5-3"></span>
<span id="cb5-4">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(predictions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb5-5">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(np.argmax(predictions[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span>
<span id="cb5-6">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(y_test[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb5-7"></span>
<span id="cb5-8">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3171346e-07</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.3666507e-08</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0742160e-06</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.5065667e-06</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.7597770e-08</span></span>
<span id="cb5-9"> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.1097163e-07</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6.6373372e-11</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9.9998188e-01</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0004998e-06</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.8241509e-06</span>]</span></code></pre></div>
<ul>
<li>위 코드의 predictions[0]의 10개값
<ul>
<li>Softmax로 도출된, 0~9 중 어떤 값에 속할 지에 대한 확률</li>
</ul></li>
<li>GPU로 모델을 돌리는 방법
<ul>
<li>실습 중인 경우는 GPU가 필요할 정돈 아니지만, 보통의 프로젝트는 GPU사용이 필수적
<ul>
<li><code>with tf.device('/device:GPU:0')</code></li>
</ul>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> tf.device(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/device:GPU:0'</span>):</span>
<span id="cb6-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feature Learning</span></span>
<span id="cb6-3">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sequential()</span>
<span id="cb6-4">  model.add(Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), input_shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb6-5">  model.add(MaxPooling2D((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)))</span>
<span id="cb6-6">  model.add(Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)))</span>
<span id="cb6-7">  model.add(MaxPooling2D((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)))</span>
<span id="cb6-8">  model.add(Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)))</span>
<span id="cb6-9">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fully Conneted Layer</span></span>
<span id="cb6-10">  model.add(Flatten())</span>
<span id="cb6-11">  model.add(Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relu"</span>))</span>
<span id="cb6-12">  model.add(Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"softmax"</span>))</span>
<span id="cb6-13">  model.summary()</span>
<span id="cb6-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model compile: cost function, optimizer, metric 설정</span></span>
<span id="cb6-15">  model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"adam"</span>,</span>
<span id="cb6-16">                loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sparse_categorical_crossentropy'</span>,</span>
<span id="cb6-17">                metrics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>])</span>
<span id="cb6-18">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training</span></span>
<span id="cb6-19">  history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit(x_train, y_train, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div></li>
</ul></li>
</ul>
</section>
<section id="주차-수업정리" class="level1">
<h1>5주차 수업정리</h1>
<section id="hyper-parameter하이퍼-파라미터" class="level2">
<h2 class="anchored" data-anchor-id="hyper-parameter하이퍼-파라미터"><code>Hyper parameter(하이퍼 파라미터)</code></h2>
<ul>
<li>위 과제에서의 성능향상은, CNN의 적용(계산량의 감소)보다는, 하이퍼 파라미터조정에서 기인함</li>
<li>하이퍼 파라미터 : 사람이 정해주는 레이어 갯수, 뉴런의 갯수 등 <br><br></li>
</ul>
<section id="activation-functions-sigmoid-tanh-relu-등" class="level3">
<h3 class="anchored" data-anchor-id="activation-functions-sigmoid-tanh-relu-등">(1) <code>Activation functions</code> : Sigmoid, tanh, ReLU 등</h3>
<ul>
<li>비선형성을 부여하기 위해 사용. 어떤 것을 쓰냐에 따라 Neural Network성능에 큰 영향</li>
<li>Activation functions의 종류
<ul>
<li><code>Sigmoid</code> : 0~1 출력. Logistic regression 등 오래부터 쓰였던 함수.
<ul>
<li>0~1 사이이기 때문에 확률적 해석이 가능</li>
<li>문제
<ul>
<li><code>Killing Gradient</code> : 가장 치명적 문제. <strong>미분값이 0이 되는 구간은 학습이 일어나지 않음</strong></li>
<li><code>Output not Zero-centered</code> : 치명적 문제. <strong>학습은 되지만, 레이어를 통과할 때마다 왜곡 심화(같은 방향으로만 학습)</strong>
<ul>
<li>SGD에서는 Batch-size 반복마다 일종의 자정작용이 있어 약간 완화되기는 함</li>
</ul></li>
<li>Computationally expensive : 학습이 안될 정도의 큰 문제는 아님. Exponential계산 등 계산량이 많음</li>
</ul></li>
</ul></li>
<li><code>tanh</code> : -1~1 출력.
<ul>
<li>Zero-centered이므로 왜곡이 일어나지는 않음</li>
<li>문제 : 여전히 <code>Killing Gradient</code>문제가 존재하여 Neural Network에서 쓰기는 부적절</li>
</ul></li>
<li><code>ReLU</code>(Rectified Linear Unit) : 음수면 0, 양수면 그대로
<ul>
<li>Computationaliy very efficient(음수면 0반환)</li>
<li><code>Killing Gradient</code>문제는 없음. 기울기가 0인 지점이 없으므로(단 0인 부분은 미분이 되지 않음)</li>
<li>문제
<ul>
<li><code>Output not Zero-centered</code>(Batch-size 적용시 큰 문제가 되진 않음)</li>
<li>0인 부분은 미분이 되지 않음(0인 경우는 미분값 지정하는 방법으로 해결 가능)</li>
<li><code>Dead ReLU</code> : 한번 0이되면, Layer가 계속 되어도 기울기가 업데이트 되지 않고 0</li>
</ul></li>
</ul></li>
<li><code>Leaky ReLU</code>(Rectified Linear Unit) <br> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240623/index_files/figure-html/9b3ad2c2-4-image.png" class="img-fluid" alt="image.png">
<ul>
<li>음수인 경우 0이 아닌 0.01<img src="https://latex.codecogs.com/png.latex?x">를 적용하여Dead ReLU문제 해결 가능</li>
<li>효율적인 계산이나 Sigmoid/Tanh대비 빠른 장점 등 ReLU의 장점 존재</li>
<li>문제 : additional paremeter(0.01<img src="https://latex.codecogs.com/png.latex?x">)를 계산해야해서 계산량이 늘어나기는 함</li>
</ul></li>
<li><code>ELU</code>(Exponential Linear Unit) :
<ul>
<li>기존처럼 인위적인 지정(구간별 미분값 등)없이, 모든 지점에서 자연스럽게 미분이 가능하도록 Exponential 적용</li>
<li>문제 : 계산량이 늘어남
<ul>
<li>Exponential연산은 nvidia환경에서 지원이 되는 편이긴 함</li>
</ul></li>
</ul></li>
</ul></li>
<li><code>Activation function의 적용</code>
<ul>
<li><strong>기본적으로는 ReLU를 사용</strong>. Dead ReLU문제가 있긴하지만 일반적인 프로젝트 수준에서는 무방</li>
<li>단 Computation자원이 충분하다면 Leaky ReLU나 ELU 사용 가능</li>
<li><strong>Sigmoid나 Tanh는 Hidden layer의 Activation function으로 사용X</strong>(Killing Gradient문제로 학습되지 않음)</li>
<li>참고 : GPT계열 등 대규모 모델은 ReLU계열이나 GELU(ELU를 Gausssian으로 바꾼)</li>
</ul></li>
</ul>
</section>
<section id="weight-initialization" class="level3">
<h3 class="anchored" data-anchor-id="weight-initialization">(2) <code>Weight Initialization</code></h3>
<ul>
<li><p>Gradient Descent에서 임의의 점에서 시작했었던 것과 달리, 좋은 시작지점에서 시작하고자 하는 것</p></li>
<li><p>임의의 크거나 작은 Weight로 시작하는 경우와 문제</p>
<ul>
<li><code>Small Gaussian Random</code> : 작은 Weight로 시작한 경우
<ul>
<li>Layer를 통과할때마다 한 곳으로 수렴(0으로 수렴)되어 학습이 되지 않음 <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240623/index_files/figure-html/9b3ad2c2-1-image-2.png" class="img-fluid" alt="image-2.png"></li>
</ul></li>
<li><code>Large  Gaussian Random</code> : 큰 Weight로 시작한 경우
<ul>
<li>Layer를 통과할때마다 양쪽으로 발산(1,-1로 수렴)되어 학습이 되지 않음 <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240623/index_files/figure-html/9b3ad2c2-2-image-3.png" class="img-fluid" alt="image-3.png"></li>
</ul></li>
<li>ReLU를 적용하더라도 위와 비슷한 문제는 발생</li>
</ul></li>
<li><p><code>Xavier Initialization</code> : Input dimension에 루트를 씌운 것으로 나눠 준 Weight 사용 (64차원이라면 8로 나눔)</p>
<ul>
<li>Input variance와 Output variance 맞춰 좋은 시작점(Weight)에서 시작</li>
<li>Layer를 여러번 통과해도 Robust한 정규분포 모양으로 나오게 됨 <br> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240623/index_files/figure-html/9b3ad2c2-3-image-4.png" class="img-fluid" alt="image-4.png"></li>
</ul></li>
<li><p><code>Kaiming/MSRA Initialization for ReLU</code> : 2/Input dimension 을 루트 씌운 것으로 나눈 Weight 사용</p></li>
</ul>
</section>
</section>
<section id="learning-rate-scheduling" class="level2">
<h2 class="anchored" data-anchor-id="learning-rate-scheduling"><code>Learning rate Scheduling</code></h2>
<ul>
<li>어떤 Learning rate가 가장 좋은가? <br> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240623/index_files/figure-html/87b6b97f-2-image.png" class="img-fluid" alt="image.png">
<ul>
<li>Very high : 이동이 너무 커서 Loss가 급격히 상승</li>
<li>Low : 이동이 너무 작아서 오래걸림</li>
<li>High : 처음엔 적절한 rate보다도 학습이 빠르지만, 일정 수준부터 Loss감소가 없음</li>
<li><strong>적절한 rate를 통해, 적절한 속도로 optimum point로 도달하도록 해야함</strong></li>
</ul></li>
<li><code>Learning rate Scheduling(Decay)</code>의 구상
<ul>
<li>High(빠름) → Good(적절) → Low 의 rate를 적용하면 되지 않는지에 대한 의문으로 시작</li>
<li>Epoch에 따라 learning rate를 조절하여 효율적인 학습속도 구현 <strong>(↔︎ constant learning rate)</strong> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240623/index_files/figure-html/87b6b97f-1-image-2.png" class="img-fluid" alt="image-2.png"></li>
<li>모든 프로젝트에 직관을 적용한 Scheduling은 어려우며, 모든 프로젝트에 적용가능한 Scheduling은 없음.
<ul>
<li>정해진 Scheduling은방식(Cosine, Linear, Inverse Sqrt 등)이 존재</li>
</ul></li>
</ul></li>
</ul>
<section id="learning-rate-scheduling의-종류" class="level3">
<h3 class="anchored" data-anchor-id="learning-rate-scheduling의-종류">(1) <code>Learning rate Scheduling의 종류</code></h3>
<ul>
<li>크게 3가지 종류가 있음
<ul>
<li><code>Linear Learning rate</code> : [세심하게 학습] 가장 기본적. Epoch을 거듭할수록 rate 감소</li>
<li><code>Cosine Learning rate</code> : [빠른 학습] High rate를 좀 더 오래 유지</li>
<li><code>Inverse Sqrt rate</code> : [무난하게 학습] rate를 빠르게 감소시킴. Optimal Point를 세밀하게 찾고 싶을 때 사용</li>
</ul></li>
<li>분야마다 많이 사용되는 방법은 다름
<ul>
<li>자연어처리는 큰 모델을 다루고 학습데이터가 많은 편이므로 <code>Cosine Learning rate Scheduler</code> 사용</li>
<li>작은 문제나 모델이라면 <code>Linear/Inverse Sqrt earning rate Scheduler</code> 고려 가능</li>
</ul></li>
<li><code>Learning rate Warm-up</code>?
<ul>
<li>눈으로 Loss 등을 보며 감을 잡는 구간
<ul>
<li>Loss가 엄청 높게 튀는 경우 Learning rate가 높으므로 낮춤</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="기타-참고사항" class="level3">
<h3 class="anchored" data-anchor-id="기타-참고사항">(2) 기타 참고사항</h3>
<ul>
<li>Hyper parameter가 적용되는 부분
<ul>
<li>Activation function은 레이어마다 적용</li>
<li>Learning rate epoch마다 적용</li>
<li>Weight Initialization은 처음에만 적용</li>
</ul></li>
<li>대략적인 가이드라인
<ul>
<li>레이어나 뉴런의 수는 가이드라인이 없는 편 (실험해보며 조정)
<ul>
<li>레이어의 수가 많을수록 복잡한/비선형적인 관계를 표현 가능</li>
<li>레이어의 수가 30개가 좋은지 50개가 좋은진 알 수 없음</li>
</ul></li>
<li>Learning rate는 특정 값이 높거나 낮다고 볼 수 없음 (실험해보며 조정)
<ul>
<li>Loss값이 너무 튀면 learning rate를 먼저 조정 (대부분 말도안되게 튀는 것은 learning rate문제)</li>
</ul></li>
</ul></li>
<li>우선순위 : (loss가 튐)Learning rate 조정 → Optimizer</li>
</ul>
</section>
</section>
<section id="regularization-for-overfitting" class="level2">
<h2 class="anchored" data-anchor-id="regularization-for-overfitting"><code>Regularization for Overfitting</code></h2>
<section id="overfitting" class="level3">
<h3 class="anchored" data-anchor-id="overfitting">(1) Overfitting</h3>
<ul>
<li>새로운 데이터에 대해서는 잘 동작하지 않음 (↔︎Underfitting. 학습한 데이터도 처리하지 못함. 과거의 전통적 머신러닝[모델의 한계 등])</li>
<li>파라미터의 갯수가 늘어나고 복잡해지는 경우 많음</li>
</ul>
</section>
<section id="regularization" class="level3">
<h3 class="anchored" data-anchor-id="regularization">(2) Regularization</h3>
<ul>
<li>파라미터가 커질수록 오차도 커짐 → 파라미터가 커져 Overfitting이 일어나는 것을 방지</li>
<li>람다(<img src="https://latex.codecogs.com/png.latex?%5Clambda">)의 크기로 패널티의 크기를 설정. 커질수록 하단 Boundary(L2는 원형, L1은 마름모)는 작아짐</li>
<li>기존의 최적화 지점(Parameter제약 없을 때)에서 그래프의 화살표 방향(Boundary안)으로 이동</li>
</ul>
<section id="ridge-regressionl2-norm" class="level4">
<h4 class="anchored" data-anchor-id="ridge-regressionl2-norm"><code>Ridge Regression(L2 Norm)</code></h4>
<ul>
<li>기존의 오차정의(MSE 등)에, Penalty term으로 <code>파라미터를 제곱해서 더함</code><br> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240623/index_files/figure-html/d24f026a-4-image.png" class="img-fluid" alt="image.png"> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240623/index_files/figure-html/d24f026a-1-image-2.png" class="img-fluid" alt="image-2.png"></li>
</ul>
</section>
<section id="lasso-regressionl1-norm" class="level4">
<h4 class="anchored" data-anchor-id="lasso-regressionl1-norm"><code>Lasso Regression(L1 Norm)</code></h4>
<ul>
<li>기존의 오차정의(MSE 등)에, Penalty term으로 <code>파라미터를 절대값으로 더함</code><br> (<code>Ridge와의 차이점 : 필요없는 파라미터를 삭제해줌</code>)<br> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240623/index_files/figure-html/d24f026a-2-image-3.png" class="img-fluid" alt="image-3.png"> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240623/index_files/figure-html/d24f026a-3-image-4.png" class="img-fluid" alt="image-4.png"></li>
</ul>
</section>
</section>
<section id="regularization-for-deep-nueral-networks" class="level3">
<h3 class="anchored" data-anchor-id="regularization-for-deep-nueral-networks">(3) Regularization for Deep Nueral Networks</h3>
<section id="weight-decay" class="level4">
<h4 class="anchored" data-anchor-id="weight-decay"><code>Weight decay</code></h4>
<ul>
<li>Ridge(L1, 제곱, 원형마름모Boundary), Lasso(L2, 절대값, 마름모Boundary)의 적용</li>
<li>Multiple regression 등 과거엔 많이 쓰였지만 <code>딥러닝에선 잘 안쓰임</code></li>
</ul>
</section>
<section id="early-stopping" class="level4">
<h4 class="anchored" data-anchor-id="early-stopping"><code>Early stopping</code></h4>
<ul>
<li>Train set에서 <code>Validation set을 분리</code>해두고, <code>Validation점수가 높아질때까지(Loss저하) 학습</code>
<ul>
<li>Test loss가 Overfitting지점부터 발생하는 점을 참고</li>
</ul></li>
<li>Acuraccy와 같은 Metric으로 적용하는 것이 트렌드</li>
<li>Loss는 미분가능 &amp; 작을수록 좋은 지표 등을 이유로 채택했지만 실제 알고싶은 것은 Loss가 아닌 Accuracy임</li>
<li>F1-score 등은 미분 불가로 적용 불가했지만, 측정 목적이라면 Accuracy를 채택</li>
<li>단점 : 측정을 위한 Validation set을 만들기 위해 데이터가 많이 필요(데이터가 적은 바이오분야 등은 적용 어려움)
<ul>
<li>다만 딥러닝은 보통 데이터가 많은 경우에 사용하므로 Early stopping 적용이 가능함</li>
</ul></li>
<li>주의점 : Train/Validation/Test로 나눌 때, <code>Test Set은 정한 뒤엔 건드리지 않는다</code> (Train set에서 나눈 Train set와 Validation set의 비율 조절은 가능하다)</li>
<li>Final metric으로 사용된다</li>
</ul>
</section>
<section id="drop-out" class="level4">
<h4 class="anchored" data-anchor-id="drop-out"><code>Drop out</code></h4>
<ul>
<li><code>Random한 뉴런을 끈다</code></li>
<li>다소 무식하지만 효과가 좋아 잘 사용됨(GPT 등에서도 활용)
<ul>
<li>예시) 고양이의 눈/귀/코를 특징으로 잡을 때, 호랑이의 눈이 들어온다면 오류가 발생할 수 있는데,<br> 눈에 대한 특징(뉴런)이 꺼져있다면 오류를 방지할 수도 있다</li>
</ul></li>
<li>Cut out(Drop out의 응용) : 사진에서 특정 부분을 Random하게 삭제하여 입력하여 판단시키는 방법으로 Overfitting극복</li>
<li>Large fully-connected layers에 사용</li>
</ul>
</section>
</section>
</section>
<section id="optimization" class="level2">
<h2 class="anchored" data-anchor-id="optimization"><code>Optimization</code></h2>
<ul>
<li>SGD : 전체 데이터를 다 넣기 어려워 Batch를 적용해 극복</li>
</ul>
<section id="sgd의-문제" class="level3">
<h3 class="anchored" data-anchor-id="sgd의-문제">(1) SGD의 문제</h3>
<ul>
<li><code>Jittering문제</code> : 원하는 것은 전체 파라미터의 최적화지만, 특정 파라미터만 학습이 진행됨
<ul>
<li>예를 들어 자산&amp;월급이 있을 때, 값이 큰 자산 위주로 최적화가 진행됨</li>
<li>Singular value가 큰 쪽으로 학습이 이루어짐</li>
</ul></li>
<li><code>Local optimum문제</code> : 전체의 최적이 아닌, 부분의 최적인 Local Optimum에 빠지는 문제
<ul>
<li>다만, 딥러닝에서는 거의 일어나지 않는 문제임. 모든 파라미터 대부분이 양수거나 음수인 특수한 상황에서 발생</li>
</ul></li>
<li><code>Saddle points문제</code> : 말의 안장같이 생겨, 극소인 동시에 극대인 지점이 발생. <code>학습이 이루어지지 않는 문제</code>
<ul>
<li>오히려 Saddle point문제가 딥러닝에서는 더 많이 발생 (미분값이 여러개의 양수/음수가 섞임)</li>
</ul></li>
<li><code>Inaccurate Gradient Estimation문제</code>
<ul>
<li>어느정도까지는(~50% 정도) Batch size가 클수록 성능향상이 있음
<ul>
<li>장비(메모리)가 유효하게 많을때만 가능한 방법으로, 잘 갖춰진 환경에서만 적용 가능함(Google의 연구논문이었음)
<ul>
<li>즉 현실적으로는 Batch size 확대는 적용이 어려운 점이 있음</li>
</ul></li>
<li>82.76~83% 구간의 변화로, Practical하게 유의미한 결과로 보긴 어려움(Academic한 측면에서 유의미)</li>
</ul></li>
<li><code>적용Insignt</code> : 나에게 1만개의 데이터가 있을 때, 5천 건 정도의 Size(2의 배수인 4096으로) 적용</li>
</ul></li>
</ul>
</section>
<section id="sgd의-문제들에-대한-해결방법" class="level3">
<h3 class="anchored" data-anchor-id="sgd의-문제들에-대한-해결방법">(2) SGD의 문제들에 대한 해결방법</h3>
<ul>
<li><code>SGD + Momentum (Saddle Points문제 해결)</code>
<ul>
<li>현실과 달리 GD의 적용시에는 관성이 없으므로 Saddle point에서 멈추게 되므로, 관성을 주어 해결
<ul>
<li>Local minimum에서는 적용 불가. saddle point형태이기에 가능한 방법<br> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240623/index_files/figure-html/a1a340f3-1-image.png" class="img-fluid" alt="image.png"></li>
</ul></li>
</ul></li>
<li><code>AdaGrad[AdaptiveGrad] (Jittering문제 해결)</code>
<ul>
<li>Scale이 달라 발생하는 문제이므로, Scaling을 해주어 맞춰줌</li>
</ul></li>
<li><code>RMSProp [Leaky AdaGrad] (AdaGrad문제 해결)</code>
<ul>
<li>AdaGrad가 나누기를 반복하다보니 분모가 커져 0에 수렴하는 문제를 해결</li>
<li>현재의 비율과 과거의 비율을 조절해 분모가 너무 커지는 것을 방지</li>
<li>AdaGrad의 Scaling개념을 이해하며 사용하는 것이 중요</li>
</ul></li>
<li><strong><code>Adam</code></strong>
<ul>
<li>RMSProp + SGD with Momentum</li>
</ul></li>
<li>First vs Second order Optimization : 실전적으로 잘 쓰이지 않음
<ul>
<li>역행렬이 있다는 점에서 계산량이 많아 쓰기 어렵다는 직관적 이해 정도 갖기</li>
</ul></li>
</ul>
</section>
</section>
<section id="batch-normalization" class="level2">
<h2 class="anchored" data-anchor-id="batch-normalization"><code>Batch Normalization</code></h2>
<section id="data-preprocessing-nomalization" class="level3">
<h3 class="anchored" data-anchor-id="data-preprocessing-nomalization">Data Preprocessing (Nomalization)</h3>
<ul>
<li>통상적으로 Zero-centering, Scaling 두가지를 해 줌</li>
<li>Layer를 통과할 때마다 왜곡이 커지는 문제를 방지 <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240623/index_files/figure-html/e1ac67a4-1-image.png" class="img-fluid" alt="image.png">
<ul>
<li>Zero-centering : 중심에서 점점 멀어지는 문제 해결 (평균을 뺀다)</li>
<li>Scaling : 분포가 점점 길어지는 문제 해결 (표준편차 등 특정 숫자로 나눠 준다)</li>
</ul></li>
<li>일반적인 ML은 처음에 전처리를 하면 되지만, DL은 레이어를 통과하며 다시 왜곡이 심해질 수 있음
<ul>
<li>왜곡을 막기 위해 레이어 통과마다 반복하는 <code>Batch Normalization</code>을 진행</li>
</ul></li>
</ul>
</section>
<section id="batch-normalization-1" class="level3">
<h3 class="anchored" data-anchor-id="batch-normalization-1">Batch Normalization</h3>
<ul>
<li>레이어를 통과할 대마다 Zero-centering, Scaling을 해줌</li>
<li>Drop-out과 함께 많이 사용됨</li>
<li>적용은
<ul>
<li>Activation function 적용하기 전에</li>
<li>Fully-connected layer 통과한 다음에</li>
</ul></li>
</ul>
</section>
<section id="batch-normalization의-종류" class="level3">
<h3 class="anchored" data-anchor-id="batch-normalization의-종류">Batch Normalization의 종류</h3>
<ul>
<li>Batch / Layer / Instance / Group Normalization</li>
<li>기본적으로는 대부분은 Batch Normalization을 많이 사용(특히 이미지)</li>
<li>자연어 처리는 Layer Normalization을 사용</li>
</ul>


</section>
</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>파이썬</category>
  <category>머신러닝</category>
  <category>딥러닝</category>
  <category>202406Study_FDS</category>
  <guid>https://kr9268.github.io/posts/meta-dl-creditcard-20240623/</guid>
  <pubDate>Sun, 23 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[M_Study_4주차과제] CNN으로 MNIST다루기</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-dl-creditcard-20240622/</link>
  <description><![CDATA[ 





<p>스터디 진행하며 진행한 과제 기록(MNIST, CNN)</p>
<section id="개요" class="level2">
<h2 class="anchored" data-anchor-id="개요">개요</h2>
<p>참여중인 딥러닝 스터디 3주차 기록입니다.</p>
<ul>
<li>CNN로 MNIST다루기</li>
<li>강사님이 주신 샘플코드 참고해서, 나에게 맞추거나 추가공부 진행</li>
</ul>
</section>
<section id="과제-작성-mnist-cnn" class="level2">
<h2 class="anchored" data-anchor-id="과제-작성-mnist-cnn">과제 작성 (MNIST CNN)</h2>
<div id="c0497936" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datasets</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sequential</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.layers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dense, Flatten, Conv2D, MaxPooling2D, Input</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> koreanize_matplotlib</span></code></pre></div>
</div>
<section id="데이터-로드-및-shape-확인" class="level3">
<h3 class="anchored" data-anchor-id="데이터-로드-및-shape-확인">데이터 로드 및 Shape 확인</h3>
<div id="45c2566c" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">(X_train, Y_train), (X_test, Y_test) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.mnist.load_data()</span>
<span id="cb2-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X_train.shape, Y_train.shape, Y_train[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X_test.shape, Y_test.shape, Y_test[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(60000, 28, 28) (60000,) 5
(10000, 28, 28) (10000,) 7</code></pre>
</div>
</div>
<div id="c3c1801b" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Min : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X_train[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Max : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X_train[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb4-3">plt.imshow(X_train[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Min : 0, Max : 255</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-4-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="d-tensor로-변경-및-float32변환-normalize" class="level3">
<h3 class="anchored" data-anchor-id="d-tensor로-변경-및-float32변환-normalize">3D tensor로 변경 및 float32변환, Normalize</h3>
<div id="2aa51402" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3D Tensor</span></span>
<span id="cb6-2">X_train.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60000</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-3">X_test.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Float32변환</span></span>
<span id="cb6-6">X_train, X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(X_train, np.float32), np.array(X_test, np.float32)</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalize (0~255값을 0~1로)</span></span>
<span id="cb6-9">X_train, X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.</span>, X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.</span></span></code></pre></div>
</div>
</section>
<section id="feature-learning-fully-connected-layer" class="level3">
<h3 class="anchored" data-anchor-id="feature-learning-fully-connected-layer">Feature Learning + Fully-connected layer</h3>
<div id="7e852cb2" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### 특성 추출 (Feature Learning)</span></span>
<span id="cb7-2"></span>
<span id="cb7-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sequential()</span>
<span id="cb7-4">model.add(Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output계산식(Convolution layer) : (Input - Filter + 2 * Padding) / stride + 1</span></span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3*3인 Filter(Kernel) 32개, 2번째줄 옵션은 미입력시 기본값 </span></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  (Valid Padding은 Padding 미적용을 의미)</span></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># → Output(activation map=(26,26,32)) : [(28-3+2*0)/1 + 1] * 32(Filter 수)</span></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># → Weights : (3*3)size*32filter / biases : 32filter</span></span>
<span id="cb7-12">model.add(Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>, </span>
<span id="cb7-13">                 strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>, kernel_initializer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'glorot_uniform'</span>))</span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2*2인 최대값만 남기는 Pool, 2번째줄 옵션은 미입력시 기본값</span></span>
<span id="cb7-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># → Output(activation map=(13,13,32)) : [26/2]</span></span>
<span id="cb7-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># → Weights and biases : Pooling은 학습이 일어나지 않는다</span></span>
<span id="cb7-18">model.add(MaxPooling2D(pool_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb7-19">                       strides<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'valid'</span>))</span>
<span id="cb7-20"></span>
<span id="cb7-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3*3인 Filter(Kernel) 64개</span></span>
<span id="cb7-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># → Output(activation map=(11,11,64)) : [(13-3+2*0)/1 + 1] * 64(Filter 수)</span></span>
<span id="cb7-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># → Weights : (3*3)size*64filter*32activation map / biases : 64filter</span></span>
<span id="cb7-24">model.add(Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>))</span>
<span id="cb7-25"></span>
<span id="cb7-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2*2인 최대값만 남기는 Pool</span></span>
<span id="cb7-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># → Output(activation map=(5,5,64)) : [11/2]</span></span>
<span id="cb7-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># → Weights and biases : Pooling은 학습이 일어나지 않는다</span></span>
<span id="cb7-29">model.add(MaxPooling2D(pool_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)))</span>
<span id="cb7-30"></span>
<span id="cb7-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3*3인 Filter(Kernel) 64개</span></span>
<span id="cb7-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># → Output(activation map=(3,3,64)) : [(5-3+2*0)/1 + 1] * 64(Filter 수)</span></span>
<span id="cb7-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># → Weights : (3*3)size*64filter*64activation map / biases : 64filter</span></span>
<span id="cb7-34">model.add(Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>))</span>
<span id="cb7-35"></span>
<span id="cb7-36"></span>
<span id="cb7-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### Fully connected Layer</span></span>
<span id="cb7-38"></span>
<span id="cb7-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># flatten shape(576) : [3*3*64]</span></span>
<span id="cb7-40">model.add(Flatten())</span>
<span id="cb7-41"></span>
<span id="cb7-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이전 Layer와 결합. Node=64</span></span>
<span id="cb7-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parameters(36928) : [576*64(weights)+64(biases)]</span></span>
<span id="cb7-44">model.add(Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>))</span>
<span id="cb7-45"></span>
<span id="cb7-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이전 Layer와 결합. Output = 10</span></span>
<span id="cb7-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># parameters(650) : [64*10(weights)+10(biases)]</span></span>
<span id="cb7-48">model.add(Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'softmax'</span>))</span>
<span id="cb7-49">model.summary()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">Model: "sequential"</span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓
┃<span style="font-weight: bold"> Layer (type)                    </span>┃<span style="font-weight: bold"> Output Shape           </span>┃<span style="font-weight: bold">       Param # </span>┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩
│ conv2d (<span style="color: #0087ff; text-decoration-color: #0087ff">Conv2D</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">26</span>, <span style="color: #00af00; text-decoration-color: #00af00">26</span>, <span style="color: #00af00; text-decoration-color: #00af00">32</span>)     │           <span style="color: #00af00; text-decoration-color: #00af00">320</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ max_pooling2d (<span style="color: #0087ff; text-decoration-color: #0087ff">MaxPooling2D</span>)    │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">13</span>, <span style="color: #00af00; text-decoration-color: #00af00">13</span>, <span style="color: #00af00; text-decoration-color: #00af00">32</span>)     │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ conv2d_1 (<span style="color: #0087ff; text-decoration-color: #0087ff">Conv2D</span>)               │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">11</span>, <span style="color: #00af00; text-decoration-color: #00af00">11</span>, <span style="color: #00af00; text-decoration-color: #00af00">64</span>)     │        <span style="color: #00af00; text-decoration-color: #00af00">18,496</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ max_pooling2d_1 (<span style="color: #0087ff; text-decoration-color: #0087ff">MaxPooling2D</span>)  │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">5</span>, <span style="color: #00af00; text-decoration-color: #00af00">5</span>, <span style="color: #00af00; text-decoration-color: #00af00">64</span>)       │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ conv2d_2 (<span style="color: #0087ff; text-decoration-color: #0087ff">Conv2D</span>)               │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">3</span>, <span style="color: #00af00; text-decoration-color: #00af00">3</span>, <span style="color: #00af00; text-decoration-color: #00af00">64</span>)       │        <span style="color: #00af00; text-decoration-color: #00af00">36,928</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ flatten (<span style="color: #0087ff; text-decoration-color: #0087ff">Flatten</span>)               │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">576</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                   │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">64</span>)             │        <span style="color: #00af00; text-decoration-color: #00af00">36,928</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_1 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                 │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">10</span>)             │           <span style="color: #00af00; text-decoration-color: #00af00">650</span> │
└─────────────────────────────────┴────────────────────────┴───────────────┘
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Total params: </span><span style="color: #00af00; text-decoration-color: #00af00">93,322</span> (364.54 KB)
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Trainable params: </span><span style="color: #00af00; text-decoration-color: #00af00">93,322</span> (364.54 KB)
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Non-trainable params: </span><span style="color: #00af00; text-decoration-color: #00af00">0</span> (0.00 B)
</pre>
</div>
</div>
</section>
<section id="모델-컴파일loss-function-optimizer-metrics-설정" class="level3">
<h3 class="anchored" data-anchor-id="모델-컴파일loss-function-optimizer-metrics-설정">모델 컴파일(Loss function, optimizer, metrics 설정)</h3>
<div id="fb6a35d3" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loss function은</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  Label = number 인 경우 → sparse_categorical_crossentropy (one-hot이 아니므로 메모리소요가 적다)</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  Label = one-hot 인 경우 → categorical_crossentropy</span></span>
<span id="cb8-4">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adam'</span>,</span>
<span id="cb8-5">              loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sparse_categorical_crossentropy'</span>,</span>
<span id="cb8-6">              metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>])</span></code></pre></div>
</div>
</section>
<section id="모델-학습" class="level3">
<h3 class="anchored" data-anchor-id="모델-학습">모델 학습</h3>
<div id="2b455e63" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit(X_train, Y_train, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 1/5
1875/1875 ━━━━━━━━━━━━━━━━━━━━ 9s 4ms/step - accuracy: 0.9056 - loss: 0.3245
Epoch 2/5
1875/1875 ━━━━━━━━━━━━━━━━━━━━ 8s 4ms/step - accuracy: 0.9861 - loss: 0.0442
Epoch 3/5
1875/1875 ━━━━━━━━━━━━━━━━━━━━ 10s 5ms/step - accuracy: 0.9901 - loss: 0.0313
Epoch 4/5
1875/1875 ━━━━━━━━━━━━━━━━━━━━ 8s 4ms/step - accuracy: 0.9926 - loss: 0.0245
Epoch 5/5
1875/1875 ━━━━━━━━━━━━━━━━━━━━ 7s 4ms/step - accuracy: 0.9953 - loss: 0.0163</code></pre>
</div>
</div>
</section>
<section id="학습횟수에-따른-losscost시각화" class="level3">
<h3 class="anchored" data-anchor-id="학습횟수에-따른-losscost시각화">학습횟수에 따른 Loss(Cost)시각화</h3>
<div id="b6e9c9d6" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 저장된 값 확인</span></span>
<span id="cb11-2">history.history</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>{'accuracy': [0.9584500193595886,
  0.9862833619117737,
  0.9898499846458435,
  0.9920166730880737,
  0.9940166473388672],
 'loss': [0.13941822946071625,
  0.04484217241406441,
  0.032598868012428284,
  0.025325138121843338,
  0.01914270594716072]}</code></pre>
</div>
</div>
<div id="e8fce00d" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot 시각화</span></span>
<span id="cb13-2">plt.plot(history.history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'loss'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train'</span>)</span>
<span id="cb13-3">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The number of Learning'</span>)</span>
<span id="cb13-4">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>)</span>
<span id="cb13-5">plt.legend()</span>
<span id="cb13-6">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="모델평가" class="level3">
<h3 class="anchored" data-anchor-id="모델평가">모델평가</h3>
<div id="aaa73651" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">test_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.evaluate(X_test, Y_test, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb14-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb14-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(test_result)</span>
<span id="cb14-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test Loss = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_result[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> / Test Accuracy = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_result[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>313/313 - 1s - 3ms/step - accuracy: 0.9909 - loss: 0.0343

[0.03433739021420479, 0.9908999800682068]
Test Loss = 0.03433739021420479 / Test Accuracy = 0.9908999800682068</code></pre>
</div>
</div>
</section>
<section id="예측" class="level3">
<h3 class="anchored" data-anchor-id="예측">예측</h3>
<div id="0aa0b163" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(X_test)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>313/313 ━━━━━━━━━━━━━━━━━━━━ 1s 2ms/step</code></pre>
</div>
</div>
<div id="c4703e2f" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpl</span>
<span id="cb18-2">mpl.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'figure.max_open_warning'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(predictions)):</span>
<span id="cb18-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> np.argmax(predictions[i]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> Y_test[i]:</span>
<span id="cb18-6">        plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb18-7">        plt.imshow(X_test[i])</span>
<span id="cb18-8">        plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"예측</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>argmax(predictions[i])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> / 정답</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Y_test[i]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-5.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-6.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-7.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-8.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-9.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-10.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-11.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-12.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-13.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-14.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-15.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-16.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-17.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-18.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-19.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-20.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-21.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-22.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-23.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-24.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-25.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-26.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-27.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-28.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-29.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-30.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-31.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-32.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-33.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-34.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-35.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-36.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-37.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-38.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-39.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-40.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-41.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-42.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-43.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-44.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-45.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-46.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-47.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-48.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-49.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-50.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-51.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-52.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-53.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-54.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-55.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-56.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-57.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-58.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-59.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-60.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-61.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-62.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-63.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-64.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-65.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-66.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-67.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-68.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-69.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-70.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-71.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-72.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-73.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-74.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-75.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-76.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-77.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-78.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-79.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-80.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-81.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-82.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-83.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-84.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-85.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-86.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-87.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-88.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-89.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-90.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240622/index_files/figure-html/cell-13-output-91.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>파이썬</category>
  <category>머신러닝</category>
  <category>딥러닝</category>
  <category>202406Study_FDS</category>
  <category>MNIST</category>
  <category>Tensorflow</category>
  <guid>https://kr9268.github.io/posts/meta-dl-creditcard-20240622/</guid>
  <pubDate>Sat, 22 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[공모전] 공공데이터 공모전-6(니켈기준 Plot짜보기)</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/dtcontest-ore-20240621/</link>
  <description><![CDATA[ 





<p>2024년 12회 산업통상자원부 공공데이터 활용 아이디어 공모전 참가 기록.(니켈기준 Plot짜보기)</p>
<section id="개요" class="level2">
<h2 class="anchored" data-anchor-id="개요">개요</h2>
<ul>
<li>2024년 12회 산업통상자원부 공공데이터 활용 아이디어 공모전 참가해보기로 함
<ul>
<li>https://datacontest.kr/apply/applyAdd/3</li>
</ul></li>
<li>각자 광물 하나씩 담당해서 러프하게 보고서 Plot짜보기</li>
</ul>
</section>
<section id="내용정리" class="level2">
<h2 class="anchored" data-anchor-id="내용정리">내용정리</h2>
<section id="지난-회의정리" class="level3">
<h3 class="anchored" data-anchor-id="지난-회의정리">지난 회의정리</h3>
<ul>
<li>국제거래 관련 데이터는 <code>UN Comtrade database</code> 활용하기</li>
<li>아래 4개 광물에 대해 분석 진행하고, HSCODE기준 적용
<ul>
<li><code>리튬</code> : 산화/수산화리튬(282520), 탄산리튬(283691)</li>
<li><code>코발트</code> : 산화/수산화코발트(282200), 황산코발트(283329)</li>
<li><code>망간</code> : 이산화망간(850610)</li>
<li><code>니켈</code> : 산화/수산화니켈(282540), 황산니켈(283324)</li>
</ul></li>
<li>각자 광물을 1~2개 담당해서 <code>공모전 보고서 양식</code>에 맞게 고민해보기
<ul>
<li>분석 배경</li>
<li>어떤 Feature와 모델 사용</li>
<li>기대효과</li>
</ul></li>
</ul>
</section>
<section id="회의내용에-대한-self고찰-및-아이디어-develope" class="level3">
<h3 class="anchored" data-anchor-id="회의내용에-대한-self고찰-및-아이디어-develope">회의내용에 대한 Self고찰 및 아이디어 Develope</h3>
<ul>
<li><p>기존에 니켈에 대해 분석한게 있어서 해당 내용으로 정리해보기</p>
<ul>
<li><p><code>제안배경</code></p>
<ul>
<li>니켈의 용도</li>
<li>니켈의 국가별 소비량 급증(공공데이터포털의 데이터 기준)
<ul>
<li>2011년 대비 2배이상 전체 소비량 증가</li>
<li>중국, 인도네시아를 중심으로 소비량이 대폭 증가함</li>
</ul></li>
<li>니켈의 국가별 생산량 편중(공공데이터포털의 데이터 기준)
<ul>
<li>데이터에 Mine, Refined로 2종류가 있었음</li>
<li>니켈은 해외에서 가공된 형태를 수입하여 사용, 국산화 진행중
<ul>
<li>Refined만 추려서 산출하기로 함</li>
</ul></li>
<li>중국 34.3%, 인도네시아 20.3%로 2개 국가가 과반수</li>
</ul></li>
</ul></li>
<li><p><code>제안배경 요약</code> : 니켈의 소비량 증가와 생산량 편중으로, 공급 리스크가 큰 상황에서 위기요소 탐지의 필요성 대두</p></li>
<li><p><code>고려요소(사용하고자 한 Feature)</code></p>
<ul>
<li><code>생산국 수출량</code> : 광물의 특정 생산국 비중이 높은 점을 고려하여, 해당 국가의 광물 수출량의 이상탐지</li>
<li><code>수입국 수입량</code> : 광물을 수입하는 타 국가의 수입량 증감을 확인하여 이상탐지</li>
<li><code>생산국 판매액</code> : 주요 생산국의 대외 판매액을 기준으로 광물의 가격변동을 탐지
<ul>
<li>기준 : FOB가격(물류나 보험료를 제외한 순수 물품가격)을 판매량으로 나누어 kg당 가격 산출
<ul>
<li>다만 데이터를 보니 Null인 경우가 있어 primaryvalue라는 가격컬럼을 사용키로 함</li>
</ul></li>
</ul></li>
<li><code>BDI(Baltic Dry Index)</code> : 광물이 수입을 통해 조달된다는 점과, 광물운송은 벌크선을 통해 진행됨을 착안하여 물류문제에 대한 이상탐지 요소로 포함
<ul>
<li>벌크선의 수요/가격에 대한 측면뿐 아니라 경기선행지표로도 사용되고 있음(원자재의 이동을 통해 생산증가 등의 예측)</li>
</ul></li>
</ul></li>
<li><p><code>각 Feature의 전처리 방안</code></p>
<ul>
<li><code>Period를 기준으로</code> 국가별 합산(groupby)</li>
<li>사용하고자 하는 컬럼(가격, 수출입량)이 null인 경우에만 drop</li>
<li><code>Exponential smoothing 모델</code>에 넣어 예측값 산출예정으로 yyyymmdd포맷으로 날짜 처리</li>
<li>실제값+예측값을 합친 후 Anomality패키지(<code>R의 AnomalyDetection 이상탐지 패키지</code>)로 이상탐지</li>
<li>각 Period별로 이상치가 발생한 <code>Feature의 수를 합산하여 구간척도로 위기구간을 제안</code> (정상/경계/주의/위기 등)</li>
</ul></li>
<li><p><code>기대효과</code>는 시간부족으로 향후 고민</p>
<ul>
<li>모델에서 예측한 미래구간에서 위기가 탐지되는 경우, 사전 구매 등 광물의 비축 등을 미리 진행</li>
<li>위의 사항을 통한 공급망리스크 회피 및 자국 핵심산업 경쟁력 확보</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="보고내용-jupyter작성-초안" class="level3">
<h3 class="anchored" data-anchor-id="보고내용-jupyter작성-초안">보고내용 Jupyter작성 초안</h3>
<section id="제안배경" class="level4">
<h4 class="anchored" data-anchor-id="제안배경">제안배경</h4>
<ul>
<li>작성시 참고사항 : 관련 현황 및 문제점 등 빅데이터 분석을 구상하고 제안한 배경에 대해서 작성 (활용 분야, 활용빈도, 중요성 등)</li>
</ul>
<ol type="1">
<li><p>니켈은 배터리 및 연료전지 소재, 다양한 촉매, 태양광 지지대의 도금, 내부식성이 필요한 해양구조물 등에 사용 (재생에너지, 친황경자동차 분야에 필수적)</p></li>
<li><p>니켈의 국가별 소비량은 급증하고 있음 (보고서는 하단의 시각화 그래프만 사용)</p></li>
</ol>
<ul>
<li>4차 핵심사업에 소요되는 광물로 2011년 대비 소비량 약 2배 증가</li>
</ul>
<div id="0ad9e571" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 한국광해광업공단_광종별 소비현황에 대한 주소를 하단 `데이터 현황`에서 url부분에 붙여넣기</span></span>
<span id="cb1-6">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/KR9268/db_datagokr/main/komir_consume.csv'</span></span>
<span id="cb1-7">df_consume <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(url, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cp949'</span>, low_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb1-8">df_consume_nickel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_consume[df_consume[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'광종'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'니켈'</span>]</span>
<span id="cb1-9">df_consume_nickel.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">2011 소비량</th>
<th data-quarto-table-cell-role="th">2012 소비량</th>
<th data-quarto-table-cell-role="th">2013 소비량</th>
<th data-quarto-table-cell-role="th">2014 소비량</th>
<th data-quarto-table-cell-role="th">2015 소비량</th>
<th data-quarto-table-cell-role="th">2016 소비량</th>
<th data-quarto-table-cell-role="th">2017 소비량</th>
<th data-quarto-table-cell-role="th">2018 소비량</th>
<th data-quarto-table-cell-role="th">2019 소비량</th>
<th data-quarto-table-cell-role="th">2020 소비량</th>
<th data-quarto-table-cell-role="th">2021 소비량</th>
<th data-quarto-table-cell-role="th">2022 소비량</th>
<th data-quarto-table-cell-role="th">2023 소비량</th>
<th data-quarto-table-cell-role="th">광종</th>
<th data-quarto-table-cell-role="th">국가</th>
<th data-quarto-table-cell-role="th">단위</th>
<th data-quarto-table-cell-role="th">대륙</th>
<th data-quarto-table-cell-role="th">품목</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">224</td>
<td>9.334</td>
<td>8.391</td>
<td>7.965</td>
<td>7.571</td>
<td>6.667</td>
<td>7.021</td>
<td>8.423</td>
<td>7.978</td>
<td>9.052</td>
<td>10.016</td>
<td>6.101</td>
<td>7.152</td>
<td>8.386</td>
<td>니켈</td>
<td>Austria</td>
<td>천톤</td>
<td>EUROPE</td>
<td>refined</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">225</td>
<td>29.794</td>
<td>18.827</td>
<td>26.000</td>
<td>29.129</td>
<td>35.022</td>
<td>31.415</td>
<td>29.080</td>
<td>34.137</td>
<td>35.190</td>
<td>33.392</td>
<td>34.046</td>
<td>25.826</td>
<td>34.825</td>
<td>니켈</td>
<td>Belgium</td>
<td>천톤</td>
<td>EUROPE</td>
<td>refined</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">226</td>
<td>0.157</td>
<td>0.125</td>
<td>0.141</td>
<td>0.137</td>
<td>0.167</td>
<td>0.120</td>
<td>0.114</td>
<td>0.134</td>
<td>0.149</td>
<td>0.179</td>
<td>0.211</td>
<td>0.185</td>
<td>0.149</td>
<td>니켈</td>
<td>Bulgaria</td>
<td>천톤</td>
<td>EUROPE</td>
<td>refined</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">227</td>
<td>3.595</td>
<td>1.891</td>
<td>0.410</td>
<td>3.011</td>
<td>2.882</td>
<td>2.997</td>
<td>2.870</td>
<td>2.163</td>
<td>2.223</td>
<td>2.000</td>
<td>2.297</td>
<td>1.513</td>
<td>1.827</td>
<td>니켈</td>
<td>Czech Republic</td>
<td>천톤</td>
<td>EUROPE</td>
<td>refined</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">228</td>
<td>0.046</td>
<td>0.189</td>
<td>0.063</td>
<td>0.056</td>
<td>0.242</td>
<td>0.372</td>
<td>0.346</td>
<td>0.589</td>
<td>0.544</td>
<td>0.397</td>
<td>0.269</td>
<td>0.560</td>
<td>0.517</td>
<td>니켈</td>
<td>Denmark</td>
<td>천톤</td>
<td>EUROPE</td>
<td>refined</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="d69095dd" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 단위가 여럿인 경우 등 확인 후 통일</span></span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_column <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df_consume_nickel.columns:</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'소비량'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> each_column:</span>
<span id="cb2-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each_column<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df_consume_nickel[each_column]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>광종 : ['니켈']
국가 : ['Austria' 'Belgium' 'Bulgaria' 'Czech Republic' 'Denmark' 'Finland'
 'France' 'Germany' 'Greece' 'Hungary' 'Italy' 'Macedonia' 'Norway'
 'Poland' 'Portugal' 'Romania' 'Russia' 'Serbia' 'Slovenia' 'Spain'
 'Sweden' 'Switzerland' 'Ukraine' 'United Kingdom' 'South Africa' 'China'
 'Hong Kong' 'India' 'Indonesia' 'Japan' 'Kazakhstan' 'Malaysia'
 'North Korea' 'Philippines' 'Saudi Arabia' 'Singapore' 'South Korea'
 'Taiwan' 'Thailand' 'Turkey' 'United Arab Emirates' 'Vietnam' 'Argentina'
 'Brazil' 'Canada' 'Chile' 'Cuba' 'Mexico' 'U.S.A.' 'Australia'
 'New Zealand']
단위 : ['천톤']
대륙 : ['EUROPE' 'AFRICA' 'ASIA' 'AMERICA' 'OCEANIA']
품목 : ['refined']</code></pre>
</div>
</div>
<div id="b9cade0e" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 단일 항목인 광종, 단위, 품목 제거 (메모리확보 7.6+ KB → 6.4+ KB)</span></span>
<span id="cb4-2">df_consume_nickel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_consume_nickel[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2011 소비량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2012 소비량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2013 소비량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2014 소비량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2015 소비량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2016 소비량'</span>,</span>
<span id="cb4-3">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017 소비량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2018 소비량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2019 소비량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2020 소비량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2021 소비량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022 소비량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023 소비량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'국가'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'대륙'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'품목'</span>]]</span>
<span id="cb4-4">df_consume_nickel.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">2011 소비량</th>
<th data-quarto-table-cell-role="th">2012 소비량</th>
<th data-quarto-table-cell-role="th">2013 소비량</th>
<th data-quarto-table-cell-role="th">2014 소비량</th>
<th data-quarto-table-cell-role="th">2015 소비량</th>
<th data-quarto-table-cell-role="th">2016 소비량</th>
<th data-quarto-table-cell-role="th">2017 소비량</th>
<th data-quarto-table-cell-role="th">2018 소비량</th>
<th data-quarto-table-cell-role="th">2019 소비량</th>
<th data-quarto-table-cell-role="th">2020 소비량</th>
<th data-quarto-table-cell-role="th">2021 소비량</th>
<th data-quarto-table-cell-role="th">2022 소비량</th>
<th data-quarto-table-cell-role="th">2023 소비량</th>
<th data-quarto-table-cell-role="th">국가</th>
<th data-quarto-table-cell-role="th">대륙</th>
<th data-quarto-table-cell-role="th">품목</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">224</td>
<td>9.334</td>
<td>8.391</td>
<td>7.965</td>
<td>7.571</td>
<td>6.667</td>
<td>7.021</td>
<td>8.423</td>
<td>7.978</td>
<td>9.052</td>
<td>10.016</td>
<td>6.101</td>
<td>7.152</td>
<td>8.386</td>
<td>Austria</td>
<td>EUROPE</td>
<td>refined</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">225</td>
<td>29.794</td>
<td>18.827</td>
<td>26.000</td>
<td>29.129</td>
<td>35.022</td>
<td>31.415</td>
<td>29.080</td>
<td>34.137</td>
<td>35.190</td>
<td>33.392</td>
<td>34.046</td>
<td>25.826</td>
<td>34.825</td>
<td>Belgium</td>
<td>EUROPE</td>
<td>refined</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">226</td>
<td>0.157</td>
<td>0.125</td>
<td>0.141</td>
<td>0.137</td>
<td>0.167</td>
<td>0.120</td>
<td>0.114</td>
<td>0.134</td>
<td>0.149</td>
<td>0.179</td>
<td>0.211</td>
<td>0.185</td>
<td>0.149</td>
<td>Bulgaria</td>
<td>EUROPE</td>
<td>refined</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">227</td>
<td>3.595</td>
<td>1.891</td>
<td>0.410</td>
<td>3.011</td>
<td>2.882</td>
<td>2.997</td>
<td>2.870</td>
<td>2.163</td>
<td>2.223</td>
<td>2.000</td>
<td>2.297</td>
<td>1.513</td>
<td>1.827</td>
<td>Czech Republic</td>
<td>EUROPE</td>
<td>refined</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">228</td>
<td>0.046</td>
<td>0.189</td>
<td>0.063</td>
<td>0.056</td>
<td>0.242</td>
<td>0.372</td>
<td>0.346</td>
<td>0.589</td>
<td>0.544</td>
<td>0.397</td>
<td>0.269</td>
<td>0.560</td>
<td>0.517</td>
<td>Denmark</td>
<td>EUROPE</td>
<td>refined</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<ul>
<li>전체 소비량 증가</li>
</ul>
<div id="07ee4287" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> koreanize_matplotlib</span>
<span id="cb5-4"></span>
<span id="cb5-5">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb5-6">sns.lineplot(df_consume_nickel.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(numeric_only<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>))</span>
<span id="cb5-7">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'니켈 소비량 추이'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>Text(0.5, 1.0, '니켈 소비량 추이')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/dtcontest-ore-20240621/index_files/figure-html/cell-5-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>국가별 소비량 증가
<ul>
<li>중국, 인도네시아를 중심으로 2011년 대비 소비량 대폭 증가</li>
</ul></li>
</ul>
<div id="918334d3" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">nickel_by_country <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_consume_nickel.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'국가'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(numeric_only<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-2">nickel_by_country.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">2011 소비량</th>
<th data-quarto-table-cell-role="th">2012 소비량</th>
<th data-quarto-table-cell-role="th">2013 소비량</th>
<th data-quarto-table-cell-role="th">2014 소비량</th>
<th data-quarto-table-cell-role="th">2015 소비량</th>
<th data-quarto-table-cell-role="th">2016 소비량</th>
<th data-quarto-table-cell-role="th">2017 소비량</th>
<th data-quarto-table-cell-role="th">2018 소비량</th>
<th data-quarto-table-cell-role="th">2019 소비량</th>
<th data-quarto-table-cell-role="th">2020 소비량</th>
<th data-quarto-table-cell-role="th">2021 소비량</th>
<th data-quarto-table-cell-role="th">2022 소비량</th>
<th data-quarto-table-cell-role="th">2023 소비량</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">국가</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Argentina</td>
<td>0.974</td>
<td>0.806</td>
<td>0.892</td>
<td>0.501</td>
<td>0.528</td>
<td>0.475</td>
<td>0.535</td>
<td>0.523</td>
<td>0.526</td>
<td>0.274</td>
<td>0.544</td>
<td>0.443</td>
<td>0.452</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Australia</td>
<td>1.600</td>
<td>1.600</td>
<td>1.600</td>
<td>1.600</td>
<td>1.608</td>
<td>1.600</td>
<td>1.600</td>
<td>1.600</td>
<td>1.600</td>
<td>1.600</td>
<td>1.600</td>
<td>1.600</td>
<td>1.600</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Austria</td>
<td>9.334</td>
<td>8.391</td>
<td>7.965</td>
<td>7.571</td>
<td>6.667</td>
<td>7.021</td>
<td>8.423</td>
<td>7.978</td>
<td>9.052</td>
<td>10.016</td>
<td>6.101</td>
<td>7.152</td>
<td>8.386</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Belgium</td>
<td>29.794</td>
<td>18.827</td>
<td>26.000</td>
<td>29.129</td>
<td>35.022</td>
<td>31.415</td>
<td>29.080</td>
<td>34.137</td>
<td>35.190</td>
<td>33.392</td>
<td>34.046</td>
<td>25.826</td>
<td>34.825</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Brazil</td>
<td>26.910</td>
<td>22.455</td>
<td>21.180</td>
<td>26.616</td>
<td>18.062</td>
<td>25.506</td>
<td>22.269</td>
<td>22.376</td>
<td>16.480</td>
<td>12.062</td>
<td>17.697</td>
<td>17.782</td>
<td>11.645</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="114a7124" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 표준편차가 상위 10개 국가 추출</span></span>
<span id="cb8-2">described_nickel_by_country <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nickel_by_country.transpose().describe()</span>
<span id="cb8-3">std_described_nickel_by_country <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> described_nickel_by_country.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'std'</span>].sort_values(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb8-4">std_described_nickel_by_country</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>국가
China           440.092028
Indonesia       154.306424
India            18.577287
U.S.A.           16.972706
Taiwan           16.607094
South Africa     12.951598
Germany          12.118787
Japan             9.753820
South Korea       9.739035
Italy             9.129311
Name: std, dtype: float64</code></pre>
</div>
</div>
<div id="1c08c664" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 표준편차 상위 10개국 그래프</span></span>
<span id="cb10-2">index_country <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> std_described_nickel_by_country.index.tolist()</span>
<span id="cb10-3"></span>
<span id="cb10-4">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb10-5">sns.lineplot(nickel_by_country.transpose()[index_country])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/dtcontest-ore-20240621/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="1aac79af" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 표준편차 상위 10개국 중 중국제외한 그래프</span></span>
<span id="cb11-2">index_country.remove(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'China'</span>)</span>
<span id="cb11-3"></span>
<span id="cb11-4">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb11-5">sns.lineplot(nickel_by_country.transpose()[index_country])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/dtcontest-ore-20240621/index_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="052117df" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 표준편차 상위 10개국 중 인도네시아 제외한 그래프</span></span>
<span id="cb12-2">index_country.remove(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Indonesia'</span>)</span>
<span id="cb12-3"></span>
<span id="cb12-4">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb12-5">sns.lineplot(nickel_by_country.transpose()[index_country])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/dtcontest-ore-20240621/index_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<ol start="3" type="1">
<li>니켈의 생산량</li>
</ol>
<ul>
<li>주요 2개국 생산량이 58.3%로 편중(인도네시아, 중국, Refined니켈 기준)</li>
</ul>
<div id="6f88a14b" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 한국광해광업공단_광종별 소비현황에 대한 주소를 하단 `데이터 현황`에서 url부분에 붙여넣기</span></span>
<span id="cb13-2">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/KR9268/db_datagokr/main/komir_product_country.csv'</span></span>
<span id="cb13-3">df_product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(url, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cp949'</span>, low_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb13-4">df_product.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">2011 생산량</th>
<th data-quarto-table-cell-role="th">2012 생산량</th>
<th data-quarto-table-cell-role="th">2013 생산량</th>
<th data-quarto-table-cell-role="th">2014 생산량</th>
<th data-quarto-table-cell-role="th">2015 생산량</th>
<th data-quarto-table-cell-role="th">2016 생산량</th>
<th data-quarto-table-cell-role="th">2017 생산량</th>
<th data-quarto-table-cell-role="th">2018 생산량</th>
<th data-quarto-table-cell-role="th">2019 생산량</th>
<th data-quarto-table-cell-role="th">2020 생산량</th>
<th data-quarto-table-cell-role="th">2021 생산량</th>
<th data-quarto-table-cell-role="th">2022 생산량</th>
<th data-quarto-table-cell-role="th">2023 생산량</th>
<th data-quarto-table-cell-role="th">광종</th>
<th data-quarto-table-cell-role="th">국가</th>
<th data-quarto-table-cell-role="th">단위</th>
<th data-quarto-table-cell-role="th">대륙</th>
<th data-quarto-table-cell-role="th">품목</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>561.354</td>
<td>800.316</td>
<td>657.1</td>
<td>605.215</td>
<td>787.404</td>
<td>738.612</td>
<td>740.380</td>
<td>760.244</td>
<td>1043.343</td>
<td>619.748</td>
<td>675.269</td>
<td>669.926</td>
<td>542.114</td>
<td>알루미늄</td>
<td>Bosnia</td>
<td>천톤</td>
<td>EUROPE</td>
<td>bauxite</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0.000</td>
<td>0.000</td>
<td>0.0</td>
<td>0.000</td>
<td>11.900</td>
<td>9.800</td>
<td>12.200</td>
<td>11.800</td>
<td>14.300</td>
<td>14.100</td>
<td>14.500</td>
<td>13.800</td>
<td>13.800</td>
<td>알루미늄</td>
<td>Croatia</td>
<td>천톤</td>
<td>EUROPE</td>
<td>bauxite</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>80.800</td>
<td>90.129</td>
<td>100.0</td>
<td>71.100</td>
<td>70.000</td>
<td>110.000</td>
<td>110.000</td>
<td>110.000</td>
<td>120.760</td>
<td>123.496</td>
<td>142.764</td>
<td>120.000</td>
<td>120.000</td>
<td>알루미늄</td>
<td>France</td>
<td>천톤</td>
<td>EUROPE</td>
<td>bauxite</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2324.000</td>
<td>1815.328</td>
<td>1844.0</td>
<td>1876.000</td>
<td>1831.270</td>
<td>1880.000</td>
<td>1927.145</td>
<td>1559.360</td>
<td>1379.123</td>
<td>1428.639</td>
<td>1227.000</td>
<td>1173.000</td>
<td>869.100</td>
<td>알루미늄</td>
<td>Greece</td>
<td>천톤</td>
<td>EUROPE</td>
<td>bauxite</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>277.800</td>
<td>255.100</td>
<td>93.7</td>
<td>14.400</td>
<td>8.300</td>
<td>16.700</td>
<td>4.000</td>
<td>5.000</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>알루미늄</td>
<td>Hungary</td>
<td>천톤</td>
<td>EUROPE</td>
<td>bauxite</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="2d4b90eb" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">df_nickel_product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_product[df_product[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'광종'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'니켈'</span>]</span>
<span id="cb14-2">df_nickel_product.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">2011 생산량</th>
<th data-quarto-table-cell-role="th">2012 생산량</th>
<th data-quarto-table-cell-role="th">2013 생산량</th>
<th data-quarto-table-cell-role="th">2014 생산량</th>
<th data-quarto-table-cell-role="th">2015 생산량</th>
<th data-quarto-table-cell-role="th">2016 생산량</th>
<th data-quarto-table-cell-role="th">2017 생산량</th>
<th data-quarto-table-cell-role="th">2018 생산량</th>
<th data-quarto-table-cell-role="th">2019 생산량</th>
<th data-quarto-table-cell-role="th">2020 생산량</th>
<th data-quarto-table-cell-role="th">2021 생산량</th>
<th data-quarto-table-cell-role="th">2022 생산량</th>
<th data-quarto-table-cell-role="th">2023 생산량</th>
<th data-quarto-table-cell-role="th">광종</th>
<th data-quarto-table-cell-role="th">국가</th>
<th data-quarto-table-cell-role="th">단위</th>
<th data-quarto-table-cell-role="th">대륙</th>
<th data-quarto-table-cell-role="th">품목</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">442</td>
<td>3.528</td>
<td>0.728</td>
<td>2.086</td>
<td>4.889</td>
<td>6.309</td>
<td>3.952</td>
<td>5.301</td>
<td>4.204</td>
<td>2.830</td>
<td>3.764</td>
<td>3.615</td>
<td>1.423</td>
<td>0.548</td>
<td>니켈</td>
<td>Albania</td>
<td>천톤</td>
<td>EUROPE</td>
<td>mine</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">443</td>
<td>19.081</td>
<td>19.955</td>
<td>19.579</td>
<td>19.830</td>
<td>10.643</td>
<td>22.034</td>
<td>36.201</td>
<td>43.572</td>
<td>38.530</td>
<td>41.429</td>
<td>42.098</td>
<td>60.360</td>
<td>69.568</td>
<td>니켈</td>
<td>Finland</td>
<td>천톤</td>
<td>EUROPE</td>
<td>mine</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">444</td>
<td>21.100</td>
<td>21.550</td>
<td>19.350</td>
<td>21.410</td>
<td>19.750</td>
<td>19.394</td>
<td>19.080</td>
<td>17.890</td>
<td>13.715</td>
<td>7.060</td>
<td>4.755</td>
<td>1.680</td>
<td>0.000</td>
<td>니켈</td>
<td>Greece</td>
<td>천톤</td>
<td>EUROPE</td>
<td>mine</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">445</td>
<td>7.632</td>
<td>4.436</td>
<td>7.607</td>
<td>6.724</td>
<td>6.650</td>
<td>4.306</td>
<td>7.120</td>
<td>4.791</td>
<td>3.314</td>
<td>3.958</td>
<td>4.735</td>
<td>0.339</td>
<td>0.360</td>
<td>니켈</td>
<td>Kosovo</td>
<td>천톤</td>
<td>EUROPE</td>
<td>mine</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">446</td>
<td>3.600</td>
<td>1.704</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>니켈</td>
<td>Macedonia</td>
<td>천톤</td>
<td>EUROPE</td>
<td>mine</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="4362d7d9" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 단위가 여럿인 경우 등 확인 후 통일</span></span>
<span id="cb15-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_column <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df_nickel_product.columns:</span>
<span id="cb15-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'생산량'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> each_column:</span>
<span id="cb15-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each_column<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df_nickel_product[each_column]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>unique()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>광종 : ['니켈']
국가 : ['Albania' 'Finland' 'Greece' 'Kosovo' 'Macedonia' 'Norway' 'Poland'
 'Russia' 'Spain' 'Botswana' 'Ivory Coast' 'Madagascar' 'Morocco'
 'South Africa' 'Zambia' 'Zimbabwe' 'China' 'Indonesia' 'Kazakhstan'
 'Myanmar' 'Philippines' 'Turkey' 'Vietnam' 'Brazil' 'Canada' 'Colombia'
 'Cuba' 'Dominican Republic' 'Guatemala' 'U.S.A.' 'Venezuela' 'Australia'
 'New Caledonia' 'Papua New Guinea' 'Austria' 'France' 'Ukraine'
 'United Kingdom' 'India' 'Japan' 'South Korea']
단위 : ['천톤']
대륙 : ['EUROPE' 'AFRICA' 'ASIA' 'AMERICA' 'OCEANIA']
품목 : ['mine' 'refined']</code></pre>
</div>
</div>
<div id="05b44f43" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 단일 항목인 광종, 단위, 품목 제거 (메모리확보 9.4+ KB → 8.4+ KB)</span></span>
<span id="cb17-2">df_nickel_product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_nickel_product[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2011 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2012 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2013 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2014 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2015 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2016 생산량'</span>,</span>
<span id="cb17-3">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2018 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2019 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2020 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2021 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'국가'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'대륙'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'품목'</span>]]</span>
<span id="cb17-4">df_nickel_product.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">2011 생산량</th>
<th data-quarto-table-cell-role="th">2012 생산량</th>
<th data-quarto-table-cell-role="th">2013 생산량</th>
<th data-quarto-table-cell-role="th">2014 생산량</th>
<th data-quarto-table-cell-role="th">2015 생산량</th>
<th data-quarto-table-cell-role="th">2016 생산량</th>
<th data-quarto-table-cell-role="th">2017 생산량</th>
<th data-quarto-table-cell-role="th">2018 생산량</th>
<th data-quarto-table-cell-role="th">2019 생산량</th>
<th data-quarto-table-cell-role="th">2020 생산량</th>
<th data-quarto-table-cell-role="th">2021 생산량</th>
<th data-quarto-table-cell-role="th">2022 생산량</th>
<th data-quarto-table-cell-role="th">2023 생산량</th>
<th data-quarto-table-cell-role="th">국가</th>
<th data-quarto-table-cell-role="th">대륙</th>
<th data-quarto-table-cell-role="th">품목</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">442</td>
<td>3.528</td>
<td>0.728</td>
<td>2.086</td>
<td>4.889</td>
<td>6.309</td>
<td>3.952</td>
<td>5.301</td>
<td>4.204</td>
<td>2.830</td>
<td>3.764</td>
<td>3.615</td>
<td>1.423</td>
<td>0.548</td>
<td>Albania</td>
<td>EUROPE</td>
<td>mine</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">443</td>
<td>19.081</td>
<td>19.955</td>
<td>19.579</td>
<td>19.830</td>
<td>10.643</td>
<td>22.034</td>
<td>36.201</td>
<td>43.572</td>
<td>38.530</td>
<td>41.429</td>
<td>42.098</td>
<td>60.360</td>
<td>69.568</td>
<td>Finland</td>
<td>EUROPE</td>
<td>mine</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">444</td>
<td>21.100</td>
<td>21.550</td>
<td>19.350</td>
<td>21.410</td>
<td>19.750</td>
<td>19.394</td>
<td>19.080</td>
<td>17.890</td>
<td>13.715</td>
<td>7.060</td>
<td>4.755</td>
<td>1.680</td>
<td>0.000</td>
<td>Greece</td>
<td>EUROPE</td>
<td>mine</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">445</td>
<td>7.632</td>
<td>4.436</td>
<td>7.607</td>
<td>6.724</td>
<td>6.650</td>
<td>4.306</td>
<td>7.120</td>
<td>4.791</td>
<td>3.314</td>
<td>3.958</td>
<td>4.735</td>
<td>0.339</td>
<td>0.360</td>
<td>Kosovo</td>
<td>EUROPE</td>
<td>mine</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">446</td>
<td>3.600</td>
<td>1.704</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>0.000</td>
<td>Macedonia</td>
<td>EUROPE</td>
<td>mine</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="5149be8b" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 니켈에 대한 국가별 생산량</span></span>
<span id="cb18-2">df2_produce_country_mine <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_nickel_product[df_nickel_product[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'품목'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mine'</span>].groupby(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'국가'</span>])[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2011 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2012 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2013 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2014 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2015 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2016 생산량'</span>,</span>
<span id="cb18-3">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2018 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2019 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2020 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2021 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023 생산량'</span>]].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb18-4">df2_produce_country_refined <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_nickel_product[df_nickel_product[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'품목'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'refined'</span>].groupby(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'국가'</span>])[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2011 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2012 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2013 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2014 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2015 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2016 생산량'</span>,</span>
<span id="cb18-5">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2018 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2019 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2020 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2021 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023 생산량'</span>]].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
</div>
<div id="7954effe" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 니켈에 대한 국가별 생산량의 총 합계(Mine)</span></span>
<span id="cb19-2">df2_produce_country_total_mine <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df2_produce_country_mine[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2011 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2012 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2013 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2014 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2015 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2016 생산량'</span>,</span>
<span id="cb19-3">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2018 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2019 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2020 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2021 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023 생산량'</span>]].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).sort_values(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb19-4">df2_produce_country_total_mine[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>국가
Indonesia        9543.539
Philippines      4762.154
Russia           3057.635
Australia        2612.548
New Caledonia    2453.547
Canada           2448.002
China            1274.216
Brazil            988.699
Cuba              680.208
South Africa      561.815
dtype: float64</code></pre>
</div>
</div>
<div id="c1d29fbf" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 니켈에 대한 국가별 생산량의 총 합계(Refined)</span></span>
<span id="cb21-2">df2_produce_country_total_refined <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df2_produce_country_refined[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2011 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2012 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2013 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2014 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2015 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2016 생산량'</span>,</span>
<span id="cb21-3">       <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2018 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2019 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2020 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2021 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022 생산량'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023 생산량'</span>]].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).sort_values(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb21-4">df2_produce_country_total_refined[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>국가
China            8813.411
Indonesia        5204.761
Russia           2458.088
Japan            2295.233
Canada           1742.140
Australia        1521.416
Norway           1178.114
New Caledonia     936.948
Brazil            809.897
Finland           712.412
dtype: float64</code></pre>
</div>
</div>
<div id="2a9f86e8" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 니켈 총생산량 내림차순 기준 상위 10개국 Pie chart (Refined한정)</span></span>
<span id="cb23-2">target_country <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df2_produce_country_total_refined[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>].index.tolist()</span>
<span id="cb23-3">df2_produce_country_total_refined.loc[target_country].plot(kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pie'</span>,startangle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">145</span>, autopct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.1f%%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, pctdistance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>)</span>
<span id="cb23-4">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'국가별 니켈 총생산량 비중(2011~2023,  Refined)'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>Text(0.5, 1.0, '국가별 니켈 총생산량 비중(2011~2023,  Refined)')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/dtcontest-ore-20240621/index_files/figure-html/cell-18-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="분석-내용-및-분석-결과" class="level4">
<h4 class="anchored" data-anchor-id="분석-내용-및-분석-결과">분석 내용 및 분석 결과</h4>
<ul>
<li>작성시 참고사항 : 구체적인 내용을 자유롭게 기술하되, 세부적이고 구체적으로 작성</li>
</ul>
<section id="고려사항사용하고자-한-feature" class="level5">
<h5 class="anchored" data-anchor-id="고려사항사용하고자-한-feature">고려사항(사용하고자 한 Feature)</h5>
<ul>
<li>아래의 상황을 모델에 포함하여 고려하고자 하였습니다
<ul>
<li>생산국 수출량 : 광물의 특정 생산국 비중이 높은 점을 고려하여, 해당 국가의 광물 수출량의 이상탐지</li>
<li>수입국 수입량 : 광물을 수입하는 타 국가의 수입량 증감을 확인하여 이상탐지</li>
<li>생산국 판매액 : 주요 생산국의 대외 판매액을 기준으로 광물의 가격변동을 탐지
<ul>
<li>기준 : FOB가격(물류나 보험료를 제외한 순수 물품가격)을 판매량으로 나누어 kg당 가격 산출</li>
</ul></li>
<li>BDI(Baltic Dry Index) : 광물이 수입을 통해 조달된다는 점과, 광물운송은 벌크선을 통해 진행됨을 착안하여 물류문제에 대한 이상탐지 요소로 포함</li>
</ul></li>
</ul>
<div id="23243eb4" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb25-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> xlwings <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> xw</span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> filter_df(df:pd.DataFrame, from_country:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, export:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>, returnvalue:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, to_country:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb25-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb25-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        dataframe에서 특정 옵션 데이터를 필터링 하기 위한 함수</span></span>
<span id="cb25-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '''</span></span>
<span id="cb25-8">    flowCode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> export <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span></span>
<span id="cb25-9">    filter_to_country <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'partnerDesc'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>to_country) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> to_country <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb25-10"></span>
<span id="cb25-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DataFrame복사</span></span>
<span id="cb25-12">    df_copy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reporterDesc'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>from_country) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> filter_to_country <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'flowCode'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>flowCode)].copy()</span>
<span id="cb25-13"></span>
<span id="cb25-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DataFrame전처리 : 날짜값 변환(str로변환, 연/월 분리)</span></span>
<span id="cb25-15">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'period'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'period'</span>].astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int'</span>).astype(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'str'</span>)</span>
<span id="cb25-16">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'period_year'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'period'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb25-17">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'period_month'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'period'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:]</span>
<span id="cb25-18">    df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'period_dateformat'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df_copy[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'refPeriodId'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y%m</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb25-19"></span>
<span id="cb25-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 반환 컬럼</span></span>
<span id="cb25-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> returnvalue <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb25-22">        df_copy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_copy[returnvalue]</span>
<span id="cb25-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb25-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb25-25"></span>
<span id="cb25-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> df_copy</span>
<span id="cb25-27"></span>
<span id="cb25-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> preprocessing_kpi_uscomtrade(df:pd.DataFrame, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb25-29">    df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'netWgt'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'primaryValue'</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'netWgt'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'primaryValue'</span>]].dropna()</span>
<span id="cb25-30"></span>
<span id="cb25-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 출발국가에 따라 기준값 세팅</span></span>
<span id="cb25-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reporterDesc'</span>].unique() <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'China'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Indonesia'</span>]:</span>
<span id="cb25-33">        criteria_wt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'netWgt'</span></span>
<span id="cb25-34">        criteria_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'primaryValue'</span></span>
<span id="cb25-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb25-36">        criteria_wt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'netWgt'</span></span>
<span id="cb25-37">        criteria_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'primaryValue'</span></span>
<span id="cb25-38"></span>
<span id="cb25-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 기간(period출력)</span></span>
<span id="cb25-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#period = 'period'</span></span>
<span id="cb25-41">    period <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'period_dateformat'</span></span>
<span id="cb25-42"></span>
<span id="cb25-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 산출</span></span>
<span id="cb25-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Price'</span>:</span>
<span id="cb25-45">        df_return <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby(period).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(numeric_only<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[criteria_value] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df.groupby(period).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(numeric_only<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[criteria_wt]</span>
<span id="cb25-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ExportQty'</span>:</span>
<span id="cb25-47">        df_return <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby(period).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(numeric_only<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[criteria_wt]</span>
<span id="cb25-48">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ImportQty'</span>:</span>
<span id="cb25-49">        temp_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb25-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_country <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'partnerDesc'</span>].unique():</span>
<span id="cb25-51">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> each_country <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'World'</span>:</span>
<span id="cb25-52">                temp_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'partnerDesc'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>each_country]</span>
<span id="cb25-53">                temp_dict[each_country] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temp_df.groupby(period).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(numeric_only<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'netWgt'</span>]</span>
<span id="cb25-54">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> temp_dict</span>
<span id="cb25-55">    </span>
<span id="cb25-56">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> df_return</span></code></pre></div>
</div>
</section>
<section id="지표별-데이터-전처리null제거-및-기준별-groupby-및-계산처리" class="level5">
<h5 class="anchored" data-anchor-id="지표별-데이터-전처리null제거-및-기준별-groupby-및-계산처리">지표별 데이터 전처리(Null제거 및 기준별 Groupby 및 계산처리)</h5>
<ul>
<li>중국과 인도네시아의 수출가격(니켈)</li>
<li>중국과 인도네시아의 수출량(니켈)</li>
<li>국가별 수입량(니켈)</li>
</ul>
<div id="eed2c811" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">wb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xw.Book(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Z:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">GoogleDrive</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">공공데이터 활용 아이디어 공모전</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">282540,283324_merged.csv'</span>)</span>
<span id="cb26-2">sht <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wb.sheets[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb26-3">range_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sht.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A2:BL'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(sht.used_range.last_cell.row))</span>
<span id="cb26-4">df_un_nickel_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sht.used_range.options(pd.DataFrame,index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).value</span>
<span id="cb26-5">wb.close()</span>
<span id="cb26-6"></span>
<span id="cb26-7">df_un_nickel_all</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">typeCode</th>
<th data-quarto-table-cell-role="th">freqCode</th>
<th data-quarto-table-cell-role="th">refPeriodId</th>
<th data-quarto-table-cell-role="th">refYear</th>
<th data-quarto-table-cell-role="th">refMonth</th>
<th data-quarto-table-cell-role="th">period</th>
<th data-quarto-table-cell-role="th">reporterCode</th>
<th data-quarto-table-cell-role="th">reporterISO</th>
<th data-quarto-table-cell-role="th">reporterDesc</th>
<th data-quarto-table-cell-role="th">flowCode</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">netWgt</th>
<th data-quarto-table-cell-role="th">isNetWgtEstimated</th>
<th data-quarto-table-cell-role="th">grossWgt</th>
<th data-quarto-table-cell-role="th">isGrossWgtEstimated</th>
<th data-quarto-table-cell-role="th">cifvalue</th>
<th data-quarto-table-cell-role="th">fobvalue</th>
<th data-quarto-table-cell-role="th">primaryValue</th>
<th data-quarto-table-cell-role="th">legacyEstimationFlag</th>
<th data-quarto-table-cell-role="th">isReported</th>
<th data-quarto-table-cell-role="th">isAggregate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>C</td>
<td>M</td>
<td>20110101.0</td>
<td>2011.0</td>
<td>1.0</td>
<td>201101.0</td>
<td>32.0</td>
<td>ARG</td>
<td>Argentina</td>
<td>M</td>
<td>...</td>
<td>1500.000</td>
<td>False</td>
<td>0.0</td>
<td>False</td>
<td>4.060111e+04</td>
<td>0.000</td>
<td>4.060111e+04</td>
<td>0.0</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>C</td>
<td>M</td>
<td>20110101.0</td>
<td>2011.0</td>
<td>1.0</td>
<td>201101.0</td>
<td>36.0</td>
<td>AUS</td>
<td>Australia</td>
<td>M</td>
<td>...</td>
<td>120.000</td>
<td>False</td>
<td>0.0</td>
<td>False</td>
<td>1.844344e+04</td>
<td>0.000</td>
<td>1.844344e+04</td>
<td>0.0</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>C</td>
<td>M</td>
<td>20110101.0</td>
<td>2011.0</td>
<td>1.0</td>
<td>201101.0</td>
<td>36.0</td>
<td>AUS</td>
<td>Australia</td>
<td>X</td>
<td>...</td>
<td>12000.000</td>
<td>False</td>
<td>0.0</td>
<td>False</td>
<td>0.000000e+00</td>
<td>11942.675</td>
<td>1.194267e+04</td>
<td>0.0</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>C</td>
<td>M</td>
<td>20110101.0</td>
<td>2011.0</td>
<td>1.0</td>
<td>201101.0</td>
<td>40.0</td>
<td>AUT</td>
<td>Austria</td>
<td>M</td>
<td>...</td>
<td>0.000</td>
<td>False</td>
<td>0.0</td>
<td>False</td>
<td>5.477600e+02</td>
<td>0.000</td>
<td>5.477600e+02</td>
<td>0.0</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>C</td>
<td>M</td>
<td>20110101.0</td>
<td>2011.0</td>
<td>1.0</td>
<td>201101.0</td>
<td>56.0</td>
<td>BEL</td>
<td>Belgium</td>
<td>M</td>
<td>...</td>
<td>6609.260</td>
<td>False</td>
<td>0.0</td>
<td>False</td>
<td>1.813610e+05</td>
<td>0.000</td>
<td>1.813610e+05</td>
<td>0.0</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">105246</td>
<td>C</td>
<td>M</td>
<td>20240401.0</td>
<td>2024.0</td>
<td>4.0</td>
<td>202404.0</td>
<td>392.0</td>
<td>JPN</td>
<td>Japan</td>
<td>X</td>
<td>...</td>
<td>90547.000</td>
<td>False</td>
<td>0.0</td>
<td>False</td>
<td>NaN</td>
<td>294094.768</td>
<td>2.940948e+05</td>
<td>0.0</td>
<td>True</td>
<td>False</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">105247</td>
<td>C</td>
<td>M</td>
<td>20240401.0</td>
<td>2024.0</td>
<td>4.0</td>
<td>202404.0</td>
<td>376.0</td>
<td>ISR</td>
<td>Israel</td>
<td>M</td>
<td>...</td>
<td>3178.379</td>
<td>True</td>
<td>0.0</td>
<td>False</td>
<td>1.800000e+04</td>
<td>NaN</td>
<td>1.800000e+04</td>
<td>6.0</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">105248</td>
<td>C</td>
<td>M</td>
<td>20240401.0</td>
<td>2024.0</td>
<td>4.0</td>
<td>202404.0</td>
<td>376.0</td>
<td>ISR</td>
<td>Israel</td>
<td>M</td>
<td>...</td>
<td>529.730</td>
<td>True</td>
<td>0.0</td>
<td>False</td>
<td>3.000000e+03</td>
<td>NaN</td>
<td>3.000000e+03</td>
<td>6.0</td>
<td>True</td>
<td>False</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">105249</td>
<td>C</td>
<td>M</td>
<td>20240401.0</td>
<td>2024.0</td>
<td>4.0</td>
<td>202404.0</td>
<td>376.0</td>
<td>ISR</td>
<td>Israel</td>
<td>M</td>
<td>...</td>
<td>2648.649</td>
<td>True</td>
<td>0.0</td>
<td>False</td>
<td>1.500000e+04</td>
<td>NaN</td>
<td>1.500000e+04</td>
<td>6.0</td>
<td>True</td>
<td>False</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">105250</td>
<td>C</td>
<td>M</td>
<td>20240401.0</td>
<td>2024.0</td>
<td>4.0</td>
<td>202404.0</td>
<td>392.0</td>
<td>JPN</td>
<td>Japan</td>
<td>M</td>
<td>...</td>
<td>2502000.000</td>
<td>False</td>
<td>0.0</td>
<td>False</td>
<td>1.017666e+07</td>
<td>NaN</td>
<td>1.017666e+07</td>
<td>0.0</td>
<td>False</td>
<td>True</td>
</tr>
</tbody>
</table>

<p>105251 rows × 47 columns</p>
</div>
</div>
</div>
<div id="7ac8e90c" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 인도네시아의 수출가격, 수출량, 수입량</span></span>
<span id="cb27-2">price_indonesia_raw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> filter_df(df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_un_nickel_all, from_country<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Indonesia'</span>, to_country<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, export<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, returnvalue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb27-3"></span>
<span id="cb27-4">price_indonesia <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preprocessing_kpi_uscomtrade(price_indonesia_raw, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Price'</span>)</span>
<span id="cb27-5">export_qty_indonesia <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preprocessing_kpi_uscomtrade(price_indonesia_raw, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ExportQty'</span>)</span>
<span id="cb27-6">import_qty_from_indonesia <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preprocessing_kpi_uscomtrade(price_indonesia_raw, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ImportQty'</span>)</span></code></pre></div>
</div>
<div id="48e91fe9" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 중국의 수출가격, 수출량, 수입량</span></span>
<span id="cb28-2">price_china_raw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> filter_df(df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_un_nickel_all, from_country<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'China'</span>, to_country<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, export<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, returnvalue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb28-3"></span>
<span id="cb28-4">price_china <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preprocessing_kpi_uscomtrade(price_china_raw, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Price'</span>)</span>
<span id="cb28-5">export_qty_china <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  preprocessing_kpi_uscomtrade(price_china_raw, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ExportQty'</span>)</span>
<span id="cb28-6">import_qty_from_china <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preprocessing_kpi_uscomtrade(price_china_raw, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ImportQty'</span>)</span></code></pre></div>
</div>
</section>
<section id="각-지표에-대해-예측수행" class="level5">
<h5 class="anchored" data-anchor-id="각-지표에-대해-예측수행">각 지표에 대해 예측수행</h5>
<ul>
<li><p>Exponential smoothing으로 예측</p>
<ul>
<li>타 팀원의 LSTM활용한 모델 등을 활용할 것으로 예상</li>
</ul></li>
<li><p>데이터를 시각화하여 계절성 등을 먼저 확인하고자 함</p></li>
<li><p>데이터 확인용 시각화</p></li>
</ul>
<div id="0b6332e6" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb29-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb29-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> koreanize_matplotlib</span></code></pre></div>
</div>
<div id="05c39b4d" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb30-2">datasource <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(price_china)</span>
<span id="cb30-3"></span>
<span id="cb30-4">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb30-5">plt.xticks(rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb30-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plt.gca().set_xticks(datasource.index)</span></span>
<span id="cb30-7">sns.lineplot(datasource)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/dtcontest-ore-20240621/index_files/figure-html/cell-24-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>Exponential Smoothing모델로 예측</li>
</ul>
<div id="0e3e4ec4" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ExponentialSmoothing 모델 활용</span></span>
<span id="cb31-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> statsmodels.tsa.holtwinters <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ExponentialSmoothing</span>
<span id="cb31-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb31-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dateutil.relativedelta <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> relativedelta</span>
<span id="cb31-5"></span>
<span id="cb31-6">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> price_china</span>
<span id="cb31-7"></span>
<span id="cb31-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> predict_exponential(df:pd.DataFrame, month_to_expect:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb31-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 학습</span></span>
<span id="cb31-10">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ExponentialSmoothing(df.values, trend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add'</span>, seasonal<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add'</span>, seasonal_periods<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb31-11">    fit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit()</span>
<span id="cb31-12"></span>
<span id="cb31-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 예측 수행 (12개월)</span></span>
<span id="cb31-14">    forecast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fit.forecast(steps<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>month_to_expect)</span>
<span id="cb31-15"></span>
<span id="cb31-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 날짜배열 생성</span></span>
<span id="cb31-17">    months<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb31-18">    start_month <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(df.index)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> relativedelta(months<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb31-19">    end_month <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(df.index) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> relativedelta(months<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>month_to_expect)</span>
<span id="cb31-20">    current_month <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start_month</span>
<span id="cb31-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> current_month <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> end_month:</span>
<span id="cb31-22">        months.append(current_month)</span>
<span id="cb31-23">        current_month <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> relativedelta(months<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb31-24"></span>
<span id="cb31-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 날짜+예측값 Series 생성</span></span>
<span id="cb31-26">    forecast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>forecast, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>months)</span>
<span id="cb31-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> forecast</span>
<span id="cb31-28"></span>
<span id="cb31-29">forecast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predict_exponential(df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>price_china, month_to_expect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb31-30">forecast</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>2024-01-01    14.324603
2024-02-01    15.397100
2024-03-01    14.578083
2024-04-01    14.589412
2024-05-01    15.382925
2024-06-01    15.244014
2024-07-01    15.578931
2024-08-01    15.535253
2024-09-01    15.241216
2024-10-01    15.326029
2024-11-01    15.416176
2024-12-01    15.462405
dtype: float64</code></pre>
</div>
</div>
<div id="0466d76d" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 예측 결과 시각화</span></span>
<span id="cb33-2">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb33-3">plt.plot(df.index, df.values, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'실제 데이터'</span>)</span>
<span id="cb33-4">plt.plot(forecast.index, forecast, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'예측 데이터'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb33-5">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'날짜'</span>)</span>
<span id="cb33-6">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'수급안정화지수'</span>)</span>
<span id="cb33-7">plt.legend()</span>
<span id="cb33-8">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/dtcontest-ore-20240621/index_files/figure-html/cell-26-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="예측값을-데이터에-추가" class="level5">
<h5 class="anchored" data-anchor-id="예측값을-데이터에-추가">예측값을 데이터에 추가</h5>
<div id="ac6b17a5" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">price_china_plus_forecast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([price_china, forecast])</span>
<span id="cb34-2">price_indonesia_plus_forecast <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([price_indonesia, forecast])</span></code></pre></div>
</div>
</section>
<section id="각-지표에-대해-이상탐지-r-abnomality-패키지-활용" class="level5">
<h5 class="anchored" data-anchor-id="각-지표에-대해-이상탐지-r-abnomality-패키지-활용">각 지표에 대해 이상탐지 (R Abnomality 패키지 활용)</h5>
<ul>
<li><p>중국과 인도네시아의 수출가격(니켈) : 기간별 가격(예측치 포함)에 대한 이상탐지</p></li>
<li><p>중국과 인도네시아의 수출량(니켈) : 기간별 수출량(예측치 포함)에 대한 이상탐지</p></li>
<li><p>국가별 수입량(니켈) : 국가별 수입량(예측치 포함)에 대한 이상탐지</p></li>
<li><p>수급안정화지수 : 예측치에 대한 이상탐지</p></li>
<li><p>BDI : 예측치에 대한 이상탐지</p></li>
<li><p>RStudio 등 설치했으나 구동문제가 있어, 팀원 상의 후에도 이 모델을 사용하는 경우 조치 예정</p></li>
</ul>
</section>
<section id="이상탐지-결과-취합-및-위기요소-판단" class="level5">
<h5 class="anchored" data-anchor-id="이상탐지-결과-취합-및-위기요소-판단">이상탐지 결과 취합 및 위기요소 판단</h5>
<ul>
<li>각 지표에 대해 아래와 같은 평가점수를 부여
<ul>
<li>이상없음 0 / 이상탐지 1</li>
</ul></li>
<li>이상 탐지된 지표 수에 따라 구간별 위기상황 부여 (0정상 1경계 2주의 3위기 등)</li>
</ul>
</section>
</section>
<section id="활용데이터" class="level4">
<h4 class="anchored" data-anchor-id="활용데이터">활용데이터</h4>
<ul>
<li>분석 대상이 되는 데이터와 이에 대한 항목을 모두 작성
<ul>
<li>공공데이터포털 수급안정화 지수</li>
</ul></li>
<li>외부 데이터를 활용하였다면 그에 대한 세부적인 내용 기재 및 활용 이유 제시
<ul>
<li>Investing.com BDI지수</li>
<li>UN Comtrade 수출입현황</li>
</ul></li>
</ul>


</section>
</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>공모전</category>
  <category>공공데이터</category>
  <category>분석</category>
  <guid>https://kr9268.github.io/posts/dtcontest-ore-20240621/</guid>
  <pubDate>Fri, 21 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[공모전] 공공데이터 공모전-5(UN Comtrade API)</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/dtcontest-ore-20240616/</link>
  <description><![CDATA[ 





<p>2024년 12회 산업통상자원부 공공데이터 활용 아이디어 공모전 참가 기록.(UNComtradeAPI)</p>
<section id="개요" class="level2">
<h2 class="anchored" data-anchor-id="개요">개요</h2>
<ul>
<li>2024년 12회 산업통상자원부 공공데이터 활용 아이디어 공모전 참가해보기로 함
<ul>
<li>https://datacontest.kr/apply/applyAdd/3</li>
</ul></li>
<li>UN Comtrade 사이트로 데이터 받기가 너무 번거로워서 API쪽 확인 후 Jupyter제작</li>
</ul>
</section>
<section id="내용정리" class="level2">
<h2 class="anchored" data-anchor-id="내용정리">내용정리</h2>
<section id="도입목적" class="level3">
<h3 class="anchored" data-anchor-id="도입목적">도입목적</h3>
<ul>
<li>US Comtrade Database 사이트에서 직접 데이터를 받는 경우, 오류가 여러번 발생
<ul>
<li>정확한 사유없이 다시 시도하라는 메시지여서 해결방법 찾기가 어려움</li>
</ul></li>
<li>API를 제공하는 것을 확인
<ul>
<li>비용없이 사용가능한 API도 있는 것으로 확인하여 활용</li>
</ul></li>
</ul>
</section>
<section id="필수사항" class="level3">
<h3 class="anchored" data-anchor-id="필수사항">필수사항</h3>
<ul>
<li>comtradeapicall 파이썬 패키지 설치</li>
<li>API Subscription Key 발급 : UN Comtrade Developer에서 발급 (https://comtradedeveloper.un.org/)
<ul>
<li>가입 후 사용하고자 하는 API를 Subscription</li>
<li>Profile 메뉴에서 Subscription내역이 보이고, Show로 Key를 확인할 수 있음</li>
</ul></li>
</ul>
</section>
<section id="사용방법" class="level3">
<h3 class="anchored" data-anchor-id="사용방법">사용방법</h3>
<ul>
<li>첫번째 칸에서 필수정보 입력 후 실행</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">    subscription_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'your api key'</span></span>
<span id="cb1-2">    directory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'your download directory'</span></span></code></pre></div>
<ul>
<li>두번째 칸에서 조회정보 입력 후 실행</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">    hscode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'288512,281325'</span></span>
<span id="cb2-2">    flow_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M,X'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># M : Import / X : Export</span></span></code></pre></div>
<ul>
<li>원하는 기능으로 이동하여 진행
<ul>
<li>저장없이 데이터 일부 확인 → <code>Subscription key 필요없는 일부 데이터 확인용 코드</code>로 이동
<ul>
<li>조회조건(월)입력 후 바로 아래 칸 실행</li>
</ul></li>
<li><strong>특정 연도</strong> 데이터 저장 필요 → <code>Subscription key 필요한 다운로드 코드</code>로 이동
<ul>
<li><code>조회조건 입력 (연단위)</code>에서 <code>4자리 연도</code> 입력하거나, <code>조회조건 입력 (월단위)</code>에서 <code>6자리 연월</code> 입력</li>
<li>입력 후 <code>CSV파일 저장(1개월씩 저장)</code> 부분 실행</li>
</ul></li>
<li><strong>특정 월</strong> 데이터 저장 필요 → <code>Subscription key 필요한 다운로드 코드</code> (반복문없이 1건 실행)`로 이동
<ul>
<li><code># 조회조건 입력 (월단위)</code>에서 <code>6자리 연월</code> 입력</li>
<li>입력 후 <code>CSV파일 저장(1개월씩 저장)</code> 부분 실행</li>
</ul></li>
</ul></li>
<li>받아진 데이터의 Row 확인 (한번에 너무 많은 행 받으면 Block당하므로 점검용)
<ul>
<li>실행하면 저장된 파일들에 대해 정보 제공</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">  The <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">282540</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">283324_202404.</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">csv</span> has <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">136</span> rows.</span>
<span id="cb3-2">  The total : <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">970.</span></span></code></pre></div></li>
<li>데이터 프레임 합치기
<ul>
<li>실행하면 저장되어있는 파일을 하나로 합친다</li>
</ul></li>
</ul>
</section>
<section id="github-reposiroty주소" class="level3">
<h3 class="anchored" data-anchor-id="github-reposiroty주소">github reposiroty주소</h3>
<p><a href="https://github.com/KR9268/UnComtradeAPI">https://github.com/KR9268/UnComtradeAPI</a></p>
</section>
<section id="샘플코드패키지-및-함수" class="level3">
<h3 class="anchored" data-anchor-id="샘플코드패키지-및-함수">샘플코드(패키지 및 함수)</h3>
</section>
</section>
<section id="기본실행코드-api-key-및-조회조건-등-입력" class="level2">
<h2 class="anchored" data-anchor-id="기본실행코드-api-key-및-조회조건-등-입력">기본실행코드 (API Key 및 조회조건 등 입력)</h2>
<div id="1760335c" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> comtradeapicall</span>
<span id="cb4-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb4-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb4-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> clear_output</span>
<span id="cb4-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb4-8"></span>
<span id="cb4-9">subscription_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'your api key'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># comtrade api subscription key (from comtradedeveloper.un.org)</span></span>
<span id="cb4-10"></span>
<span id="cb4-11">directory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'your download directory'</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output directory for downloaded files </span></span>
<span id="cb4-12">proxy_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'&lt;PROXY URL&gt;'</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optional if you need proxy url</span></span></code></pre></div>
</div>
<section id="조회조건-입력" class="level3">
<h3 class="anchored" data-anchor-id="조회조건-입력">조회조건 입력</h3>
<div id="4e292ab4" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">hscode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'282540,283324'</span></span>
<span id="cb5-2">flow_code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M,X'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># M : Import / X : Export</span></span></code></pre></div>
</div>
</section>
<section id="subscription-key-필요없는-일부-데이터-확인용-코드" class="level3">
<h3 class="anchored" data-anchor-id="subscription-key-필요없는-일부-데이터-확인용-코드">Subscription key 필요없는 일부 데이터 확인용 코드</h3>
<div id="4cec9a99" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 조회조건 입력</span></span>
<span id="cb6-2">total_period <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'202401,202402,202403,202404'</span></span></code></pre></div>
</div>
<div id="256a19d8" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">mydf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> comtradeapicall.previewFinalData(typeCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>, freqCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>, clCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HS'</span>, period<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>total_period,</span>
<span id="cb7-2">                                        reporterCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, cmdCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hscode, flowCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>flow_code, partnerCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb7-3">                                        partner2Code<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb7-4">                                        customsCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, motCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, maxRecords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>, format_output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'JSON'</span>,</span>
<span id="cb7-5">                                        aggregateBy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, breakdownMode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classic'</span>, countOnly<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, includeDesc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-6">mydf</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">typeCode</th>
<th data-quarto-table-cell-role="th">freqCode</th>
<th data-quarto-table-cell-role="th">refPeriodId</th>
<th data-quarto-table-cell-role="th">refYear</th>
<th data-quarto-table-cell-role="th">refMonth</th>
<th data-quarto-table-cell-role="th">period</th>
<th data-quarto-table-cell-role="th">reporterCode</th>
<th data-quarto-table-cell-role="th">reporterISO</th>
<th data-quarto-table-cell-role="th">reporterDesc</th>
<th data-quarto-table-cell-role="th">flowCode</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">netWgt</th>
<th data-quarto-table-cell-role="th">isNetWgtEstimated</th>
<th data-quarto-table-cell-role="th">grossWgt</th>
<th data-quarto-table-cell-role="th">isGrossWgtEstimated</th>
<th data-quarto-table-cell-role="th">cifvalue</th>
<th data-quarto-table-cell-role="th">fobvalue</th>
<th data-quarto-table-cell-role="th">primaryValue</th>
<th data-quarto-table-cell-role="th">legacyEstimationFlag</th>
<th data-quarto-table-cell-role="th">isReported</th>
<th data-quarto-table-cell-role="th">isAggregate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>C</td>
<td>M</td>
<td>20240101</td>
<td>2024</td>
<td>1</td>
<td>202401</td>
<td>36</td>
<td>AUS</td>
<td>Australia</td>
<td>M</td>
<td>...</td>
<td>20000.00</td>
<td>False</td>
<td>20600.0</td>
<td>False</td>
<td>291960.098</td>
<td>290906.941</td>
<td>291960.098</td>
<td>0</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>C</td>
<td>M</td>
<td>20240101</td>
<td>2024</td>
<td>1</td>
<td>202401</td>
<td>36</td>
<td>AUS</td>
<td>Australia</td>
<td>M</td>
<td>...</td>
<td>20000.00</td>
<td>False</td>
<td>20600.0</td>
<td>False</td>
<td>291960.098</td>
<td>290906.941</td>
<td>291960.098</td>
<td>0</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>C</td>
<td>M</td>
<td>20240101</td>
<td>2024</td>
<td>1</td>
<td>202401</td>
<td>76</td>
<td>BRA</td>
<td>Brazil</td>
<td>M</td>
<td>...</td>
<td>1576.83</td>
<td>True</td>
<td>0.0</td>
<td>False</td>
<td>47901.000</td>
<td>47267.000</td>
<td>47901.000</td>
<td>6</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>C</td>
<td>M</td>
<td>20240101</td>
<td>2024</td>
<td>1</td>
<td>202401</td>
<td>76</td>
<td>BRA</td>
<td>Brazil</td>
<td>M</td>
<td>...</td>
<td>1520.00</td>
<td>False</td>
<td>0.0</td>
<td>False</td>
<td>45083.000</td>
<td>44570.000</td>
<td>45083.000</td>
<td>0</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>C</td>
<td>M</td>
<td>20240101</td>
<td>2024</td>
<td>1</td>
<td>202401</td>
<td>76</td>
<td>BRA</td>
<td>Brazil</td>
<td>M</td>
<td>...</td>
<td>55.83</td>
<td>True</td>
<td>0.0</td>
<td>False</td>
<td>1696.000</td>
<td>1580.000</td>
<td>1696.000</td>
<td>6</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">495</td>
<td>C</td>
<td>M</td>
<td>20240101</td>
<td>2024</td>
<td>1</td>
<td>202401</td>
<td>842</td>
<td>USA</td>
<td>USA</td>
<td>M</td>
<td>...</td>
<td>23000.00</td>
<td>False</td>
<td>0.0</td>
<td>False</td>
<td>384800.000</td>
<td>381720.000</td>
<td>384800.000</td>
<td>0</td>
<td>True</td>
<td>False</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">496</td>
<td>C</td>
<td>M</td>
<td>20240101</td>
<td>2024</td>
<td>1</td>
<td>202401</td>
<td>792</td>
<td>TUR</td>
<td>Türkiye</td>
<td>M</td>
<td>...</td>
<td>133887.00</td>
<td>False</td>
<td>0.0</td>
<td>False</td>
<td>599898.000</td>
<td>448243.000</td>
<td>599898.000</td>
<td>0</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">497</td>
<td>C</td>
<td>M</td>
<td>20240101</td>
<td>2024</td>
<td>1</td>
<td>202401</td>
<td>792</td>
<td>TUR</td>
<td>Türkiye</td>
<td>M</td>
<td>...</td>
<td>19887.00</td>
<td>False</td>
<td>0.0</td>
<td>False</td>
<td>89176.000</td>
<td>65031.000</td>
<td>89176.000</td>
<td>0</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">498</td>
<td>C</td>
<td>M</td>
<td>20240101</td>
<td>2024</td>
<td>1</td>
<td>202401</td>
<td>792</td>
<td>TUR</td>
<td>Türkiye</td>
<td>M</td>
<td>...</td>
<td>30000.00</td>
<td>False</td>
<td>0.0</td>
<td>False</td>
<td>140402.000</td>
<td>101488.000</td>
<td>140402.000</td>
<td>0</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">499</td>
<td>C</td>
<td>M</td>
<td>20240101</td>
<td>2024</td>
<td>1</td>
<td>202401</td>
<td>792</td>
<td>TUR</td>
<td>Türkiye</td>
<td>M</td>
<td>...</td>
<td>48000.00</td>
<td>False</td>
<td>0.0</td>
<td>False</td>
<td>217920.000</td>
<td>157511.000</td>
<td>217920.000</td>
<td>0</td>
<td>False</td>
<td>True</td>
</tr>
</tbody>
</table>

<p>500 rows × 47 columns</p>
</div>
</div>
</div>
</section>
<section id="subscription-key-필요한-다운로드-코드" class="level3">
<h3 class="anchored" data-anchor-id="subscription-key-필요한-다운로드-코드">Subscription key 필요한 다운로드 코드</h3>
<ul>
<li><strong>너무 자주, 많이 호출하면 밴당할 수 있음</strong></li>
<li>조회조건 입력은 연단위, 월단위 중 하나만 실행</li>
</ul>
<div id="afb9ae30" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 조회조건 입력 (연단위) - Year Total Period생성기</span></span>
<span id="cb8-2">year_txt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2017'</span></span>
<span id="cb8-3">total_period <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb8-5">    total_period.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>year_txt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(i)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>zfill(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>['201712',
 '201711',
 '201710',
 '201709',
 '201708',
 '201707',
 '201706',
 '201705',
 '201704',
 '201703',
 '201702',
 '201701']</code></pre>
</div>
</div>
<div id="d60987bf" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 조회조건 입력 (월단위)</span></span>
<span id="cb10-2">total_period <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'201706'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'201705'</span>]</span></code></pre></div>
</div>
<div id="ce586ea7" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CSV파일 저장(1개월씩 저장)</span></span>
<span id="cb11-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_period <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> total_period:</span>
<span id="cb11-3">    mydf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> comtradeapicall.getFinalData(subscription_key, typeCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>, freqCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>, clCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HS'</span>, period<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>each_period,</span>
<span id="cb11-4">                                        reporterCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, cmdCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hscode, flowCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>flow_code, partnerCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb11-5">                                        partner2Code<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb11-6">                                        customsCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, motCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, maxRecords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'250000'</span>, format_output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'JSON'</span>,</span>
<span id="cb11-7">                                        aggregateBy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, breakdownMode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classic'</span>, countOnly<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, includeDesc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-8">    mydf.to_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hscode<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each_period<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb11-9">    clear_output()</span>
<span id="cb11-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hscode<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each_period<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.csv'</span>)</span>
<span id="cb11-11">    time.sleep(random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>282540,283324_201705.csv</code></pre>
</div>
</div>
</section>
<section id="subscription-key-필요한-다운로드-코드-반복문없이-1건-실행" class="level3">
<h3 class="anchored" data-anchor-id="subscription-key-필요한-다운로드-코드-반복문없이-1건-실행">Subscription key 필요한 다운로드 코드 (반복문없이 1건 실행)</h3>
<div id="ccae520a" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 조회조건 입력 (월단위)</span></span>
<span id="cb13-2">period_manual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'202404'</span></span></code></pre></div>
</div>
<div id="65cbdaf5" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CSV파일 저장(1개월씩 저장)</span></span>
<span id="cb14-2">mydf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> comtradeapicall.getFinalData(subscription_key, typeCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C'</span>, freqCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span>, clCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HS'</span>, period<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>period_manual,</span>
<span id="cb14-3">                                        reporterCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, cmdCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hscode, flowCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>flow_code, partnerCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb14-4">                                        partner2Code<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb14-5">                                        customsCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, motCode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, maxRecords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'250000'</span>, format_output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'JSON'</span>,</span>
<span id="cb14-6">                                        aggregateBy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, breakdownMode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classic'</span>, countOnly<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, includeDesc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb14-7">mydf.to_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hscode<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>period_manual<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb14-8">mydf</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">typeCode</th>
<th data-quarto-table-cell-role="th">freqCode</th>
<th data-quarto-table-cell-role="th">refPeriodId</th>
<th data-quarto-table-cell-role="th">refYear</th>
<th data-quarto-table-cell-role="th">refMonth</th>
<th data-quarto-table-cell-role="th">period</th>
<th data-quarto-table-cell-role="th">reporterCode</th>
<th data-quarto-table-cell-role="th">reporterISO</th>
<th data-quarto-table-cell-role="th">reporterDesc</th>
<th data-quarto-table-cell-role="th">flowCode</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">netWgt</th>
<th data-quarto-table-cell-role="th">isNetWgtEstimated</th>
<th data-quarto-table-cell-role="th">grossWgt</th>
<th data-quarto-table-cell-role="th">isGrossWgtEstimated</th>
<th data-quarto-table-cell-role="th">cifvalue</th>
<th data-quarto-table-cell-role="th">fobvalue</th>
<th data-quarto-table-cell-role="th">primaryValue</th>
<th data-quarto-table-cell-role="th">legacyEstimationFlag</th>
<th data-quarto-table-cell-role="th">isReported</th>
<th data-quarto-table-cell-role="th">isAggregate</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>C</td>
<td>M</td>
<td>20240401</td>
<td>2024</td>
<td>4</td>
<td>202404</td>
<td>757</td>
<td>CHE</td>
<td>Switzerland</td>
<td>M</td>
<td>...</td>
<td>130.000</td>
<td>False</td>
<td>0.0</td>
<td>False</td>
<td>1866.447</td>
<td>NaN</td>
<td>1866.447</td>
<td>0</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>C</td>
<td>M</td>
<td>20240401</td>
<td>2024</td>
<td>4</td>
<td>202404</td>
<td>757</td>
<td>CHE</td>
<td>Switzerland</td>
<td>X</td>
<td>...</td>
<td>11.638</td>
<td>True</td>
<td>0.0</td>
<td>False</td>
<td>NaN</td>
<td>1203.627</td>
<td>1203.627</td>
<td>6</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>C</td>
<td>M</td>
<td>20240401</td>
<td>2024</td>
<td>4</td>
<td>202404</td>
<td>757</td>
<td>CHE</td>
<td>Switzerland</td>
<td>X</td>
<td>...</td>
<td>11.000</td>
<td>False</td>
<td>0.0</td>
<td>False</td>
<td>NaN</td>
<td>1137.675</td>
<td>1137.675</td>
<td>0</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>C</td>
<td>M</td>
<td>20240401</td>
<td>2024</td>
<td>4</td>
<td>202404</td>
<td>757</td>
<td>CHE</td>
<td>Switzerland</td>
<td>X</td>
<td>...</td>
<td>0.638</td>
<td>True</td>
<td>0.0</td>
<td>False</td>
<td>NaN</td>
<td>65.952</td>
<td>65.952</td>
<td>6</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>C</td>
<td>M</td>
<td>20240401</td>
<td>2024</td>
<td>4</td>
<td>202404</td>
<td>842</td>
<td>USA</td>
<td>USA</td>
<td>M</td>
<td>...</td>
<td>217523.000</td>
<td>False</td>
<td>0.0</td>
<td>False</td>
<td>4915370.000</td>
<td>4866083.000</td>
<td>4915370.000</td>
<td>0</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">131</td>
<td>C</td>
<td>M</td>
<td>20240401</td>
<td>2024</td>
<td>4</td>
<td>202404</td>
<td>300</td>
<td>GRC</td>
<td>Greece</td>
<td>M</td>
<td>...</td>
<td>24.000</td>
<td>False</td>
<td>0.0</td>
<td>False</td>
<td>26.819</td>
<td>NaN</td>
<td>26.819</td>
<td>0</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">132</td>
<td>C</td>
<td>M</td>
<td>20240401</td>
<td>2024</td>
<td>4</td>
<td>202404</td>
<td>300</td>
<td>GRC</td>
<td>Greece</td>
<td>M</td>
<td>...</td>
<td>24.000</td>
<td>False</td>
<td>0.0</td>
<td>False</td>
<td>26.819</td>
<td>NaN</td>
<td>26.819</td>
<td>0</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">133</td>
<td>C</td>
<td>M</td>
<td>20240401</td>
<td>2024</td>
<td>4</td>
<td>202404</td>
<td>36</td>
<td>AUS</td>
<td>Australia</td>
<td>M</td>
<td>...</td>
<td>495415.000</td>
<td>False</td>
<td>502653.0</td>
<td>False</td>
<td>303606.306</td>
<td>276999.633</td>
<td>303606.306</td>
<td>0</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">134</td>
<td>C</td>
<td>M</td>
<td>20240401</td>
<td>2024</td>
<td>4</td>
<td>202404</td>
<td>36</td>
<td>AUS</td>
<td>Australia</td>
<td>M</td>
<td>...</td>
<td>600.000</td>
<td>False</td>
<td>1038.0</td>
<td>False</td>
<td>2845.630</td>
<td>2153.520</td>
<td>2845.630</td>
<td>0</td>
<td>False</td>
<td>True</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">135</td>
<td>C</td>
<td>M</td>
<td>20240401</td>
<td>2024</td>
<td>4</td>
<td>202404</td>
<td>36</td>
<td>AUS</td>
<td>Australia</td>
<td>M</td>
<td>...</td>
<td>494815.000</td>
<td>False</td>
<td>501615.0</td>
<td>False</td>
<td>300760.676</td>
<td>274846.113</td>
<td>300760.676</td>
<td>0</td>
<td>False</td>
<td>True</td>
</tr>
</tbody>
</table>

<p>136 rows × 47 columns</p>
</div>
</div>
</div>
</section>
<section id="받아진-데이터의-row수-확인" class="level3">
<h3 class="anchored" data-anchor-id="받아진-데이터의-row수-확인">받아진 데이터의 Row수 확인</h3>
<ul>
<li>한번에 너무 많이 받으면 Block당할 수 있으니 받은 데이터 Row수 확인 필요</li>
</ul>
<div id="9a82b42e" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">total_rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over all files in the directory</span></span>
<span id="cb15-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> filename <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> os.listdir(directory):</span>
<span id="cb15-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> filename.startswith((hscode)) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> filename.endswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.csv'</span>):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the file is a CSV file and starts with the specified prefixes</span></span>
<span id="cb15-6">        filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(directory, filename)</span>
<span id="cb15-7">        df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(filepath)</span>
<span id="cb15-8">        num_rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df)</span>
<span id="cb15-9">        total_rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> num_rows</span>
<span id="cb15-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'The file </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>filename<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> has </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_rows<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> rows.'</span>)</span>
<span id="cb15-11"></span>
<span id="cb15-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the total number of rows</span></span>
<span id="cb15-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'The total : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>total_rows<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The file 282540,283324_201705.csv has 136 rows.
The file 282540,283324_201706.csv has 698 rows.
The file 282540,283324_202404.csv has 136 rows.
The total : 970.</code></pre>
</div>
</div>
</section>
<section id="데이터프레임합치기" class="level3">
<h3 class="anchored" data-anchor-id="데이터프레임합치기">데이터프레임합치기</h3>
<div id="b6ebb997" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize an empty list to store the dataframes</span></span>
<span id="cb17-2">dfs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over all files in the directory</span></span>
<span id="cb17-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> filename <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> os.listdir(directory):</span>
<span id="cb17-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> filename.startswith((hscode)) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> filename.endswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.csv'</span>):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if the file is a CSV file and starts with the specified prefixes</span></span>
<span id="cb17-7">        filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.path.join(directory, filename)</span>
<span id="cb17-8">        df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(filepath)</span>
<span id="cb17-9">        dfs.append(df)</span>
<span id="cb17-10"></span>
<span id="cb17-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate all the dataframes in the list into a single dataframe</span></span>
<span id="cb17-12">merged_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(dfs, ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb17-13">merged_df.to_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hscode<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_merged.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>공모전</category>
  <category>공공데이터</category>
  <category>분석</category>
  <category>UN ComtradeAPI</category>
  <guid>https://kr9268.github.io/posts/dtcontest-ore-20240616/</guid>
  <pubDate>Sun, 16 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[M_Study_4주차] Convolutional Neural Network</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-dl-creditcard-20240616/</link>
  <description><![CDATA[ 





<section id="개요" class="level2">
<h2 class="anchored" data-anchor-id="개요">개요</h2>
<p>참여중인 딥러닝 스터디 4주차 기록입니다.</p>
</section>
<section id="주차-과제-설명mnist-설명" class="level2">
<h2 class="anchored" data-anchor-id="주차-과제-설명mnist-설명">3주차 과제 설명(MNIST 설명)</h2>
<ul>
<li><p>Binary(Hypothesis : Sigmoid, CrossEntropy : Y, 1-Y) <br> → Multiclass(Hypothesis : Softmax, CrossEntropy : <img src="https://latex.codecogs.com/png.latex?Y_1">, <img src="https://latex.codecogs.com/png.latex?Y_2">…)</p></li>
<li><p>MNIST</p>
<ul>
<li>데이터사이언스, 딥러닝에서의 기초(코딩의 Hello world와 같음)</li>
<li>사람들의 손글씨 데이터를 모아둔 유명한 데이터 셋</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tensorflow MNIST로딩 샘플코드</span></span>
<span id="cb1-2">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mnist</span>
<span id="cb1-3"></span>
<span id="cb1-4">  (x_train, y_train), (x_test, y_test) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mnist.load_data()</span>
<span id="cb1-5">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x_train.shape, y_train.shape, y_train[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb1-6"></span>
<span id="cb1-7">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>) (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60000</span>,) <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> </span>
<span id="cb1-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 6만건의 28*28형태의 데이터 (x_train.shape), 6만건의 0차원 형태 데이터(y_train.shape), 0번째 y_train 정답값(5)</span></span></code></pre></div></li>
</ul>
</section>
<section id="주차-과제-설명mnist의-softmax구현" class="level2">
<h2 class="anchored" data-anchor-id="주차-과제-설명mnist의-softmax구현">3주차 과제 설명(MNIST의 Softmax구현)</h2>
<ul>
<li>MNIST의 Softmax구현
<ul>
<li><p>reshape을 사용하는 이유</p>
<ul>
<li>모델에 통과시키기 위해 행렬을 flatten(28*28 → 784*1)한 후, 다시 Visualize할 때 사용</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">  img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train[i].reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb2-2">  plt.imshow(img, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.binary)</span></code></pre></div></li>
<li><p>Hyper parameter</p>
<ul>
<li>Parameter : W와 b와 같은 학습을 통해 최적화하는 값</li>
<li>Hyper parameter : 모델의 선택(Linear vs Logistic regression), learning_rate, epoch, class(몇개로 나눌지), feature(input data) 등</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MNIST dataset parameters</span></span>
<span id="cb3-2">  num_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb3-3">  num_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 784</span></span>
<span id="cb3-4"></span>
<span id="cb3-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training parameters</span></span>
<span id="cb3-6">  learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb3-7">  steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb3-8">  batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span></span></code></pre></div></li>
<li><p>np.array : list형태의 train data를 수학적 연산에 유리한 numpy로 변환하기 위해 사용</p>
<ul>
<li>권장하는 코딩습관 : 아래와 같이 데이터타입을 명시 (안적어도 float32로 기본지정되긴 함)
<ul>
<li>np.array(x_train) → np.array(x_train, np.float32)</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">x_train, x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(x_train, np.float32), np.array(x_test, np.float32)</span></code></pre></div></li>
</ul></li>
<li><p>구조변경(flatten)</p>
<ul>
<li>reshape([-1, num_features]) : flatten 구현
<ul>
<li>784 data에 reshape([-1, 28]) : reshape의 -1 부분은 28이 됨</li>
<li>784 data에 reshape([-1, 784]) : reshape의 -1 부분은 1이 됨</li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data 구조를 통일</span></span>
<span id="cb5-2">x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.reshape([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_features])</span>
<span id="cb5-3">x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_test.reshape([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_features])</span>
<span id="cb5-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x_train.shape, x_test.shape)</span>
<span id="cb5-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">784</span>) (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">784</span>)</span></code></pre></div></li>
</ul></li>
<li><p>데이터 전처리(Normalize, Zero-centering)</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">  x_train, x_test  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.</span> , x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalizd</span></span>
<span id="cb6-2">  x_train, x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x_train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.mean(x_train)), (x_test<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.mean(x_test)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Zero-Centering</span></span></code></pre></div></li>
<li><p>Variable 설정</p>
<ul>
<li>W와 b의 Shape은 결정해주어야 함 (W의 차원파악 중요)
<ul>
<li>W : input dimesion, output dimesion</li>
<li>b : number of classes(output dimesion)</li>
</ul>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">  W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.Variable(tf.ones([num_features, num_classes]), name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weight'</span>)</span>
<span id="cb7-2">  b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.Variable(tf.zeros([num_classes]), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bias'</span>)</span></code></pre></div></li>
</ul></li>
<li><p>Hypothesis와 평가방법(accuracy) 등 설정</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> softmax(x):</span>
<span id="cb8-2">    z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.matmul(x, W) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb8-3">    sm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.nn.softmax(z)</span>
<span id="cb8-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> sm</span>
<span id="cb8-5"></span>
<span id="cb8-6">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cross_entropy(y_pred, y_true):</span>
<span id="cb8-7">    y_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.one_hot(y_true, depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_classes)</span>
<span id="cb8-8">    y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.clip_by_value(y_pred, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>)</span>
<span id="cb8-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tf.reduce_mean(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tf.reduce_sum(y_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tf.math.log(y_pred), axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb8-10"></span>
<span id="cb8-11">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> accuracy(y_pred, y_true):</span>
<span id="cb8-12">    correct_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.equal(tf.argmax(y_pred, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), tf.cast(y_true, tf.int64))</span>
<span id="cb8-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span></code></pre></div></li>
<li><p>Optimizer</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">  optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.optimizers.SGD(learning_rate)</span>
<span id="cb9-2">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_optimization(x,y):</span>
<span id="cb9-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> tf.GradientTape() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tape:</span>
<span id="cb9-4">      pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> softmax(x)</span>
<span id="cb9-5">      loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cross_entropy(pred, y)</span>
<span id="cb9-6"></span>
<span id="cb9-7">    gradients <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tape.gradient(loss, [W,b])</span>
<span id="cb9-8"></span>
<span id="cb9-9">    optimizer.apply_gradients(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(gradients, [W,b]))</span></code></pre></div></li>
<li><p>Batch size구현</p>
<ul>
<li><p>아래 코드는 기초적 구현이며, 중복제거나 차례대로 진행되는 기능 등도 있음</p>
<ul>
<li>왜? 데이터가 시점 등에 따라 패턴이 있을 수 있다
<ul>
<li>100개의 데이터를 10등분했을 때, 각 데이터마다 패턴이 있을 수 있음</li>
<li>편향되지 않게 섞는 것이 batch_size의 기본적 컨셉 ```python n_train = x_train.shape[0] # 60000 n_test = x_test.shape[0] # 10000</li>
</ul></li>
</ul>
<p>def train_batch_maker(batch_size): random_idx = np.random.randint(n_train, size = batch_size) # (batch_size,) vector return x_train[random_idx], y_train[random_idx] # (batch_size, 28*28)</p>
<p>def test_batch_maker(batch_size): random_idx = np.random.randint(n_test, size = batch_size) # (batch_size,) vector return x_test[random_idx], y_test[random_idx] # (batch_size, 28*28) ```</p></li>
</ul></li>
<li><p>학습 및 Test</p></li>
</ul>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> step <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(steps):</span>
<span id="cb10-2">  batch_x, batch_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_batch_maker(batch_size)</span>
<span id="cb10-3"></span>
<span id="cb10-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run the optimization to update W and b values</span></span>
<span id="cb10-5">  run_optimization(batch_x, batch_y)</span>
<span id="cb10-6"></span>
<span id="cb10-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb10-8">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> softmax(batch_x)</span>
<span id="cb10-9">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cross_entropy(pred, batch_y)</span>
<span id="cb10-10">    acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy(pred, batch_y)</span>
<span id="cb10-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"step: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>step<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-12"></span>
<span id="cb10-13">  pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> softmax(x_test)</span>
<span id="cb10-14">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accuracy(pred, y_test)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb10-15">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> Test Accuracy: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8712000250816345</span></span>
<span id="cb10-16"></span>
<span id="cb10-17">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Predict 5 images from validaton set.</span></span>
<span id="cb10-18">  num_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb10-19">  test_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_test[:num_images]</span>
<span id="cb10-20">  predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> softmax(test_images)</span>
<span id="cb10-21"></span>
<span id="cb10-22">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize image and model predcition</span></span>
<span id="cb10-23">  plt.figure(figsize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb10-24">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_images):</span>
<span id="cb10-25">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_images, i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-26">    plt.imshow(np.reshape(test_images[i], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>]), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.binary)</span>
<span id="cb10-27">    plt.xlabel(np.argmax(predictions.numpy()[i]))</span>
<span id="cb10-28"></span>
<span id="cb10-29">  plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240616/index_files/figure-html/8027d92f-1-image.png" class="img-fluid figure-img"></p>
<figcaption>image.png</figcaption>
</figure>
</div></li>
</ul>
</section>
<section id="주차-과제-설명mnist의-neural-network구현" class="level2">
<h2 class="anchored" data-anchor-id="주차-과제-설명mnist의-neural-network구현">3주차 과제 설명(MNIST의 Neural Network구현)</h2>
<ul>
<li>MNIST의 Neural Network구현(기초)
<ul>
<li>Sequential : Python의 list 선언과 유사함
<ul>
<li>아래 코드의 경우, 사실상 Hidden layer가 없는 단층 Perceptron</li>
<li>GPT의 경우 하단 모델표에서 Total params가 엄청 많음</li>
</ul>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sequential</span>
<span id="cb11-2">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.layers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dense</span>
<span id="cb11-3"></span>
<span id="cb11-4">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sequential()</span>
<span id="cb11-5">  model.add(Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigmoid"</span>, input_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># neuron=2, input_dim=2</span></span>
<span id="cb11-6">  model.add(Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigmoid"</span>))              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output_dim = 1</span></span>
<span id="cb11-7">  model.summary()</span>
<span id="cb11-8"></span>
<span id="cb11-9">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span>Model: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sequential"</span></span>
<span id="cb11-10">    _________________________________________________________________</span>
<span id="cb11-11">    Layer (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>)                Output Shape              Param <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   </span></span>
<span id="cb11-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=================================================================</span></span>
<span id="cb11-13">    dense (Dense)               (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)                 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>         </span>
<span id="cb11-14"></span>
<span id="cb11-15">    dense_1 (Dense)             (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)                 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>         </span>
<span id="cb11-16"></span>
<span id="cb11-17">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=================================================================</span></span>
<span id="cb11-18">    Total params: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">36.00</span> Byte)</span>
<span id="cb11-19">    Trainable params: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">36.00</span> Byte)</span>
<span id="cb11-20">    Non<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>trainable params: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.00</span> Byte)</span>
<span id="cb11-21">    _________________________________________________________________</span></code></pre></div>
<ul>
<li>라이브러리를 활용하여 아래와 같이 코드가 간단해짐 (verbose을 0이 아닌값 지정시 진행상태 확인가능)</li>
</ul>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">  model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SGD"</span>,</span>
<span id="cb12-2">                loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>,</span>
<span id="cb12-3">                metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>])</span>
<span id="cb12-4"></span>
<span id="cb12-5">  history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit(x_data, y_data, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<ul>
<li>모델평가
<ul>
<li>아래와 같이 acc가 낮은 이유는, XOR문제처럼 현재와 같은 단층레이어로는 해결이 어렵기 때문</li>
</ul>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">loss, train_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.evaluate(x_data, y_data, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb13-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"train_acc = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"loss = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb13-4">predict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(x_data)</span>
<span id="cb13-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(predict)</span>
<span id="cb13-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span>train_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb13-7">  loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6908708810806274</span></span></code></pre></div></li>
</ul></li>
</ul></li>
<li>MNIST의 Neural Network구현(ANN, 인공신경망 Artificial Neural Network)
<ul>
<li>Dense(10, activation = “sigmoid”) : 뉴런이 10개이며 활성화함수가 Sigmoid</li>
<li>Dense(1, activation = “softmax”) : 활성화 함수로 Softmax 사용</li>
<li><strong>중요 포인트</strong>
<ul>
<li>input data의 shape와 일치시키기</li>
<li>output activation은 내가 풀고자 하는 문제에 맞춰 잘 지정해야함
<ul>
<li>Multi-class인데 Sigmoid를 사용한다면 돌아가지 않을 것임 ```python from tensorflow.keras.layers import Flatten</li>
</ul></li>
</ul>
model = Sequential() model.add(Flatten(input_shape=(28,28))) model.add(Dense(10, activation = “sigmoid”)) model.add(Dense(10, activation = “sigmoid”)) model.add(Dense(1, activation = “softmax”)) model.summary() ```</li>
<li>하단 모델표의 dense_2 (Dense)의 Param #의 의미
<ul>
<li>784*10 + 10(bias) : fully-connected layer</li>
</ul>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">Model: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sequential_1"</span></span>
<span id="cb14-2">_________________________________________________________________</span>
<span id="cb14-3">Layer (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>)                Output Shape              Param <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   </span></span>
<span id="cb14-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=================================================================</span></span>
<span id="cb14-5">flatten (Flatten)           (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">784</span>)               <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>         </span>
<span id="cb14-6"></span>
<span id="cb14-7">dense_2 (Dense)             (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)                <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7850</span>      </span>
<span id="cb14-8"></span>
<span id="cb14-9">dense_3 (Dense)             (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)                <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span>       </span>
<span id="cb14-10"></span>
<span id="cb14-11">dense_4 (Dense)             (<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)                 <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>        </span>
<span id="cb14-12"></span>
<span id="cb14-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=================================================================</span></span>
<span id="cb14-14">Total params: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7971</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">31.14</span> KB)</span>
<span id="cb14-15">Trainable params: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7971</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">31.14</span> KB)</span>
<span id="cb14-16">Non<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>trainable params: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.00</span> Byte)</span></code></pre></div></li>
</ul></li>
<li>Neural Network를 잘 사용하려면
<ul>
<li>하이퍼 파라미터 튜닝 : Activation fuction 어떤 것, 뉴런/레이어 갯수 등 설정
<ul>
<li>일반적으로 괜찮다고 알려진 값으로 지정해야 모델성능이 쓸만해짐</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="주차-정리" class="level2">
<h2 class="anchored" data-anchor-id="주차-정리">4주차 정리</h2>
<section id="deep-neural-network-convolution-nn" class="level3">
<h3 class="anchored" data-anchor-id="deep-neural-network-convolution-nn">Deep Neural Network (Convolution NN)</h3>
<ul>
<li>딥러닝은 비선형적 관계를 잘 묘사함
<ul>
<li>과거에는 숫자데이터(금리, 고용률 등)만 다룰 수 있었음</li>
<li>이미지 등 비정형데이터를 잘 다룰 수 있게됨</li>
</ul></li>
<li>CNN(Convolutional Neural Network)
<ul>
<li><p>이미지를 분류, 처리하는 기술</p>
<ul>
<li>분류(Classification) : 대상이 어디에 속하는지 분류</li>
<li>식별(Detection) : 사진에서의 어떤 객체를 분류하고, 그 객체가 어디에 속하는지 분류</li>
<li>이러한 분류와 식별을 응용하여 자율주행 자동차, 얼굴인식App 등 구현 가능 (CNN Architecture영향을 받아 발전)<br>
</li>
</ul></li>
<li><p>CNN의 구성</p>
<ul>
<li>특성추출(feature learning)
<ul>
<li>사진은 많은 정보를 포함해 계산량이 너무 많아지므로, 특성추출을 통해 압축이 필요함</li>
<li>CNN은 모델이 이런 정보에서 어느 부분이 중요한지 찾게 만듦</li>
<li><strong>특성추출로 압축된 정보를 Neural Network에 넣어, 원본사진 넣은 것과 동일한 것처럼, 빠르고 가볍게 돌아감</strong><br> (예를 들어 자율주행에 활용하기 위해서는 짧은 시간에 처리해야함)</li>
<li>Convolution alyer(정보압축) / Pooling layer(정보버림) 등의 반복</li>
</ul></li>
<li>Classification
<ul>
<li>Flatten / Fully-connected / Softmax 등 3주차까지 배운 내용</li>
</ul></li>
</ul></li>
<li><p>Convolution layer</p>
<ul>
<li>Source(X)에 Kernel(W)행렬을 곱해 Result(Y)를 만드는것과 같음
<ul>
<li>원본이미지(Source)의 손실을 최소화하며 잘 압축하는 좋은Kernel값을 찾고자 함</li>
<li>아다마르곱 활용 : 매칭되는 칸의 숫자끼리 곱하여 더함<br> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240616/index_files/figure-html/00653178-1-image-4.png" class="img-fluid" alt="image-4.png"></li>
</ul></li>
<li>Convolution layer를 통과해 (28,28)이 (14,14)가 되어도 특징 식별 가능
<ul>
<li>CNN은, 마스크 쓴 사람의 일부 얼굴 특징만으로 사람을 판단하는 것과 같은 방법을 차용</li>
</ul></li>
<li>CNN이 잘 작동하기 위한 가정
<ul>
<li>Spatial Locality : 사진의 일부만 봐도 식별이 가능하다</li>
<li>Positional invariance : 이미지에서 사과 등 객체가 어디에 있던 사과임
<ul>
<li>예외 상황 : 엑스레이의 흰색이 위치에 따라 심장, 간 등 다름</li>
</ul></li>
</ul></li>
</ul></li>
<li><p>Convolution layer 추가설명</p>
<ul>
<li>image(32,32,3)를 filter(3,3,3)가 움직이며 아다마르곱으로 처리
<ul>
<li>kernel과 filter는 동일한 의미로 사용 <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240616/index_files/figure-html/00653178-2-image-5.png" class="img-fluid" alt="image-5.png"></li>
<li>(32X32X3)image에 (5X5X3)filter 적용시 output은 (28X28X1)
<ul>
<li>output은 activation map임(매핑을 했다는 것)</li>
</ul></li>
<li>(32X32X3)image에 (5X5X3)filter 4개를 적용하는 이유? <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240616/index_files/figure-html/00653178-3-image-6.png" class="img-fluid" alt="image-6.png">
<ul>
<li>필터가 필요했던 이유는 정보 압축 → 정보가 작아지며 손실 발생 (코끼리의 일부만을 보는 것과 같음)</li>
<li>각 부분의 정보(4개의 filter)를 모두 모아서 정확히 알 수 있음 (4개의 filter라는 서로 다른 각도에서 본 코끼리를 합쳐서 보게되는 것)</li>
</ul></li>
</ul></li>
</ul></li>
<li><p>Nested Conv-layers(Convolution layer에 대한 문제)</p>
<ul>
<li>Layer를 여러번 통과하여 너무 작아지는 문제(get smaller quickly) + 4k와 같은 큰 데이터의 계산량 문제</li>
<li>이러한 문제를 방지하기 위해 stride와 padding이라는 parameter를 추가</li>
</ul></li>
<li><p>Stride</p>
<ul>
<li>(Input - Filter) / stride + 1
<ul>
<li>(7x7)image에 (3X3)filter, stride 1 → (7-3)/1 + 1 = (5X5)</li>
<li>(7x7)image에 (3X3)filter, stride 2 → (7-3)/2 + 1 = (3X3)</li>
<li>(7x7)image에 (3X3)filter, stride 3 → (7-3)/3 + 1 = (2.33X2.33)
<ul>
<li>output 소수인 것은 불가, padding(가장 자리에 0을 붙여줌)을 사용</li>
</ul></li>
</ul></li>
<li><strong>(Input - Filter + 2 <img src="https://latex.codecogs.com/png.latex?*"> Padding) / stride + 1</strong>
<ul>
<li>Padding을 2배하는 이유는 양쪽 테두리에 각 1개씩 추가되기 때문</li>
</ul></li>
</ul></li>
<li><p>예시</p>
<ul>
<li>Input (32x32x3) / 10 Filter(5X5) / stride 1, pad 2
<ul>
<li>Output size(=32X32X10) : (32-5+2*2)/1 + 1 → (32X32) → 10개의 필터</li>
<li>Number of Parameter(=760) : (Filter (5X5) * Input의 차원 3 + Bias 1) → (5<em>5</em>3+1) → 필터 10개 → (5<em>5</em>3+1) * 10</li>
<li>Number of Parameter if fully-connected(=31,467,520) : (32<em>32</em>10)<em>(32</em>32*3_1)
<ul>
<li>Fully-connected로 31,467,520개 파라미터가 필요했다면, CNN으로 760개 파라미터로 가능해짐</li>
</ul></li>
</ul></li>
</ul></li>
<li><p>관례적으로 filter size는 정사각형이지만 직사각형도 가능하다</p></li>
<li><p>Pooling Layer : 쓸모없는 정보를 버림</p>
<ul>
<li>Pooling Layer의 종류
<ul>
<li>Max pooling : 제일 큰 수만 가져옴</li>
<li>Average pooling : 평균 가져옴</li>
<li>Parameters 0개 (숫자를 찾는게 아닌 버림. 학습이 일어나지 않음)</li>
</ul></li>
<li>Pooling Layer의 특징
<ul>
<li>파라미터수가 0 (학습이 일어나지 않는다, Kernel[Filter]처럼 좋은 숫자를 찾는 작업이 없기 때문)</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="final-project-설명" class="level3">
<h3 class="anchored" data-anchor-id="final-project-설명">Final project 설명</h3>
<ul>
<li><p>28만건의 신용카드 데이터로 만들기</p></li>
<li><p>금융데이터는 privacy이슈가 있어 공개시 익명화되어있음</p>
<ul>
<li>단위가 다르면 연봉, 자산 여부를 역추적할 수 있어, PCA를 통해 익명화 가능
<ul>
<li>PCA : 데이터 익명화기법은 아니고 처리기법</li>
<li>V1, V2와 같은 세상에 존재하지 않는 축으로 변환하기때문에 익명화에 좋다</li>
<li>원래는 상관관계를 0이 되게만드는 테크닉</li>
</ul></li>
</ul></li>
<li><p>Missing value 처리</p>
<ul>
<li>평균,최빈,중앙 값 중 프로젝트에 가장 적합한 값 사용하여 대치</li>
</ul></li>
<li><p>상관관계 파악 (Heatmap 분석)</p>
<ul>
<li>과제의 금융데이터는 PCA로 인해 상관관계가 이미 사라져있음</li>
</ul></li>
<li><p>데이터의 구조 파악</p>
<ul>
<li>class : 0정상 1이상거래 (0.17%만이 이상거래 → 모델평가시 고려)</li>
</ul></li>
<li><p>불필요한 컬럼 삭제</p></li>
<li><p>Target이 합쳐져있는 원본데이터이므로 X, Y로 나누는 작업 필요</p></li>
<li><p>모델 평가</p>
<ul>
<li>99프로가 정상거래인데 99프로 정상임을 맞췄다면, 단순히 모델이 좋다고 보기 어려움
<ul>
<li>Precision, Recall, F1-Score → 이상거래를 몇건 맞췄는지 볼 수 있음</li>
</ul></li>
</ul></li>
<li><p>평가지표는 f1-score를 사용 예정</p>
<ul>
<li>바꾸고싶다면 사유 명시(어떤 부분을 중요하게 생각하여 Recall을 기준으로 삼았다)</li>
</ul></li>
</ul>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>파이썬</category>
  <category>머신러닝</category>
  <category>딥러닝</category>
  <category>202406Study_FDS</category>
  <guid>https://kr9268.github.io/posts/meta-dl-creditcard-20240616/</guid>
  <pubDate>Sun, 16 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[M_Study_3주차과제2] Neural Network로 MNIST다루기</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/</link>
  <description><![CDATA[ 





<p>스터디 진행하며 진행한 과제 기록(MNIST, Neural Network)</p>
<section id="개요" class="level2">
<h2 class="anchored" data-anchor-id="개요">개요</h2>
<p>참여중인 딥러닝 스터디 3주차 기록입니다.</p>
<ul>
<li>Neural Network로 MNIST다루기</li>
<li>강사님이 주신 샘플코드 참고해서, 나에게 맞추거나 추가공부 진행</li>
</ul>
</section>
<section id="과제-작성-neuralnetwork-nonlinear" class="level2">
<h2 class="anchored" data-anchor-id="과제-작성-neuralnetwork-nonlinear">과제 작성 (NeuralNetwork / NonLinear)</h2>
<div id="8168521b" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Sequential</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> layers</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> keras.utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> to_categorical</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mnist</span></code></pre></div>
</div>
<section id="mnist-dataset로딩-및-전처리" class="level3">
<h3 class="anchored" data-anchor-id="mnist-dataset로딩-및-전처리">Mnist Dataset로딩 및 전처리</h3>
<div id="71a27e70" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">(x_train, y_train), (x_test, y_test) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mnist.load_data()</span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (x_train, y_train, x_test, y_test):</span>
<span id="cb2-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(i.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(60000, 28, 28)
(60000,)
(10000, 28, 28)
(10000,)</code></pre>
</div>
</div>
<div id="a4ef5eb8" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shape 오류 발생하여 원핫인코딩 수행</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X는 (28, 28)인데 Y는 그냥 정답(5면 5)여서 그런듯 함</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ValueError: Arguments `target` and `output` must have the same rank (ndim). Received: target.shape=(None,), output.shape=(None, 10)</span></span>
<span id="cb4-4"></span>
<span id="cb4-5">x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.reshape((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb4-6">y_train_one_hot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_categorical(y_train, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb4-7"></span>
<span id="cb4-8">x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_test.reshape((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb4-9">y_test_one_hot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_categorical(y_test, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</div>
</section>
<section id="모델구성" class="level3">
<h3 class="anchored" data-anchor-id="모델구성">모델구성</h3>
<ul>
<li>Codestral에게 MNIST데이터셋에 적합한 파라미터와 레이어로 조정해달라고 하여 맞춤</li>
<li>수업 때 거의 ReLU에요라고 들었는데 마지막 빼고는 거의 ReLU가 사용되었음</li>
<li>Softmax는 주로 마지막 층에 쓰인다고 들은 적이 있는데 여기서도 동일하게 되었음<br> (추가로 알아볼때도 주로 마지막레이어에 쓰인다는 내용 다수 확인)</li>
</ul>
<div id="644402c8" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 구성</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Mistral에게 Mnist데이터셋이 적합한 레이어와 파라메터로 구성해달라고 해서 조정</span></span>
<span id="cb5-3">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Sequential([</span>
<span id="cb5-4">    layers.Input((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb5-5">    layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>),</span>
<span id="cb5-6">    layers.BatchNormalization(),</span>
<span id="cb5-7">    layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>),</span>
<span id="cb5-8">    layers.BatchNormalization(),</span>
<span id="cb5-9">    layers.MaxPooling2D((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)),</span>
<span id="cb5-10">    layers.Dropout(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>),</span>
<span id="cb5-11">    layers.Conv2D(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>),</span>
<span id="cb5-12">    layers.BatchNormalization(),</span>
<span id="cb5-13">    layers.MaxPooling2D((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)),</span>
<span id="cb5-14">    layers.Dropout(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>),</span>
<span id="cb5-15">    layers.Flatten(),</span>
<span id="cb5-16">    layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'relu'</span>),</span>
<span id="cb5-17">    layers.BatchNormalization(),</span>
<span id="cb5-18">    layers.Dropout(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb5-19">    layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'softmax'</span>)</span>
<span id="cb5-20">])</span>
<span id="cb5-21">model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'adam'</span>,</span>
<span id="cb5-22">              loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'binary_crossentropy'</span>,</span>
<span id="cb5-23">              metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>])</span>
<span id="cb5-24"></span>
<span id="cb5-25">model.summary()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">Model: "sequential_14"</span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓
┃<span style="font-weight: bold"> Layer (type)                    </span>┃<span style="font-weight: bold"> Output Shape           </span>┃<span style="font-weight: bold">       Param # </span>┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩
│ conv2d_40 (<span style="color: #0087ff; text-decoration-color: #0087ff">Conv2D</span>)              │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">28</span>, <span style="color: #00af00; text-decoration-color: #00af00">28</span>, <span style="color: #00af00; text-decoration-color: #00af00">32</span>)     │           <span style="color: #00af00; text-decoration-color: #00af00">320</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization_52          │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">28</span>, <span style="color: #00af00; text-decoration-color: #00af00">28</span>, <span style="color: #00af00; text-decoration-color: #00af00">32</span>)     │           <span style="color: #00af00; text-decoration-color: #00af00">128</span> │
│ (<span style="color: #0087ff; text-decoration-color: #0087ff">BatchNormalization</span>)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ conv2d_41 (<span style="color: #0087ff; text-decoration-color: #0087ff">Conv2D</span>)              │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">28</span>, <span style="color: #00af00; text-decoration-color: #00af00">28</span>, <span style="color: #00af00; text-decoration-color: #00af00">64</span>)     │        <span style="color: #00af00; text-decoration-color: #00af00">18,496</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization_53          │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">28</span>, <span style="color: #00af00; text-decoration-color: #00af00">28</span>, <span style="color: #00af00; text-decoration-color: #00af00">64</span>)     │           <span style="color: #00af00; text-decoration-color: #00af00">256</span> │
│ (<span style="color: #0087ff; text-decoration-color: #0087ff">BatchNormalization</span>)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ max_pooling2d_27 (<span style="color: #0087ff; text-decoration-color: #0087ff">MaxPooling2D</span>) │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">14</span>, <span style="color: #00af00; text-decoration-color: #00af00">14</span>, <span style="color: #00af00; text-decoration-color: #00af00">64</span>)     │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_39 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)            │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">14</span>, <span style="color: #00af00; text-decoration-color: #00af00">14</span>, <span style="color: #00af00; text-decoration-color: #00af00">64</span>)     │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ conv2d_42 (<span style="color: #0087ff; text-decoration-color: #0087ff">Conv2D</span>)              │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">14</span>, <span style="color: #00af00; text-decoration-color: #00af00">14</span>, <span style="color: #00af00; text-decoration-color: #00af00">128</span>)    │        <span style="color: #00af00; text-decoration-color: #00af00">73,856</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization_54          │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">14</span>, <span style="color: #00af00; text-decoration-color: #00af00">14</span>, <span style="color: #00af00; text-decoration-color: #00af00">128</span>)    │           <span style="color: #00af00; text-decoration-color: #00af00">512</span> │
│ (<span style="color: #0087ff; text-decoration-color: #0087ff">BatchNormalization</span>)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ max_pooling2d_28 (<span style="color: #0087ff; text-decoration-color: #0087ff">MaxPooling2D</span>) │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">7</span>, <span style="color: #00af00; text-decoration-color: #00af00">7</span>, <span style="color: #00af00; text-decoration-color: #00af00">128</span>)      │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_40 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)            │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">7</span>, <span style="color: #00af00; text-decoration-color: #00af00">7</span>, <span style="color: #00af00; text-decoration-color: #00af00">128</span>)      │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ flatten_14 (<span style="color: #0087ff; text-decoration-color: #0087ff">Flatten</span>)            │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">6272</span>)           │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_27 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">256</span>)            │     <span style="color: #00af00; text-decoration-color: #00af00">1,605,888</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization_55          │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">256</span>)            │         <span style="color: #00af00; text-decoration-color: #00af00">1,024</span> │
│ (<span style="color: #0087ff; text-decoration-color: #0087ff">BatchNormalization</span>)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout_41 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dropout</span>)            │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">256</span>)            │             <span style="color: #00af00; text-decoration-color: #00af00">0</span> │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense_28 (<span style="color: #0087ff; text-decoration-color: #0087ff">Dense</span>)                │ (<span style="color: #00d7ff; text-decoration-color: #00d7ff">None</span>, <span style="color: #00af00; text-decoration-color: #00af00">10</span>)             │         <span style="color: #00af00; text-decoration-color: #00af00">2,570</span> │
└─────────────────────────────────┴────────────────────────┴───────────────┘
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Total params: </span><span style="color: #00af00; text-decoration-color: #00af00">1,703,050</span> (6.50 MB)
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Trainable params: </span><span style="color: #00af00; text-decoration-color: #00af00">1,702,090</span> (6.49 MB)
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold"> Non-trainable params: </span><span style="color: #00af00; text-decoration-color: #00af00">960</span> (3.75 KB)
</pre>
</div>
</div>
</section>
<section id="모델학습-및-학습과정-시각화" class="level3">
<h3 class="anchored" data-anchor-id="모델학습-및-학습과정-시각화">모델학습 및 학습과정 시각화</h3>
<div id="a586ca26" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit(x_train, y_train_one_hot, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb6-2">history.history</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'accuracy': [0.9526000022888184,
  0.9849333167076111,
  0.9872333407402039,
  0.9904000163078308,
  0.9906499981880188,
  0.9917166829109192,
  0.9925500154495239,
  0.9933333396911621,
  0.9935333132743835,
  0.9948333501815796],
 'loss': [0.09701579809188843,
  0.014779138378798962,
  0.01159658282995224,
  0.009130637161433697,
  0.008214634843170643,
  0.007283014710992575,
  0.0065074339509010315,
  0.005834747105836868,
  0.005641818046569824,
  0.004907044116407633]}</code></pre>
</div>
</div>
<div id="57a7afcb" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">plt.plot(history.history[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'loss'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Train loss'</span>)</span>
<span id="cb8-2">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The number of learning'</span>)</span>
<span id="cb8-3">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cost'</span>)</span>
<span id="cb8-4">plt.legend()</span>
<span id="cb8-5">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="모델평가-및-모델-활용한-예측" class="level3">
<h3 class="anchored" data-anchor-id="모델평가-및-모델-활용한-예측">모델평가 및 모델 활용한 예측</h3>
<ul>
<li>모델평가</li>
</ul>
<div id="d6872357" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">model.evaluate(x_test, y_test_one_hot, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[0.003361478913575411, 0.994700014591217]</code></pre>
</div>
</div>
<ul>
<li>예측</li>
</ul>
<div id="5f6ef8a1" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">y_predict_one_hot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(x_test)</span>
<span id="cb11-2">y_predict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(y_predict_one_hot, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb11-3">y_predict</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>313/313 ━━━━━━━━━━━━━━━━━━━━ 3s 10ms/step</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>array([7, 2, 1, ..., 4, 5, 6], dtype=int64)</code></pre>
</div>
</div>
<div id="894ef30f" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">y_test</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([7, 2, 1, ..., 4, 5, 6], dtype=uint8)</code></pre>
</div>
</div>
</section>
<section id="추가-예측치가-틀린값-추출-후-시각화해보기" class="level3">
<h3 class="anchored" data-anchor-id="추가-예측치가-틀린값-추출-후-시각화해보기">[추가] 예측치가 틀린값 추출 후 시각화해보기</h3>
<ul>
<li>예측 틀린 값 확인</li>
</ul>
<div id="8cba8e5c" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb16-2"></span>
<span id="cb16-3">df_answersheet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(y_test, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y_test(정답)'</span>])</span>
<span id="cb16-4">df_answersheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y_pred(예측)'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(y_predict_one_hot, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-5">df_answersheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'비교'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df_answersheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y_test(정답)'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> df_answersheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y_pred(예측)'</span>])</span>
<span id="cb16-6">df_answersheet</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Y_test(정답)</th>
<th data-quarto-table-cell-role="th">Y_pred(예측)</th>
<th data-quarto-table-cell-role="th">비교</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>7</td>
<td>7</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2</td>
<td>2</td>
<td>True</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>1</td>
<td>1</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0</td>
<td>0</td>
<td>True</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>4</td>
<td>4</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">9995</td>
<td>2</td>
<td>2</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9996</td>
<td>3</td>
<td>3</td>
<td>True</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">9997</td>
<td>4</td>
<td>4</td>
<td>True</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9998</td>
<td>5</td>
<td>5</td>
<td>True</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">9999</td>
<td>6</td>
<td>6</td>
<td>True</td>
</tr>
</tbody>
</table>

<p>10000 rows × 3 columns</p>
</div>
</div>
</div>
<div id="95096666" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">df_answersheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'비교'</span>].value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>비교
True     9947
False      53
Name: count, dtype: int64</code></pre>
</div>
</div>
<ul>
<li>예측 틀린 값들의 시각화 및 정답/예측치 비교</li>
</ul>
<div id="b96cc66d" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">idx_false <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_answersheet[df_answersheet[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'비교'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>].index</span>
<span id="cb19-2">idx_false</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Index([ 445,  449,  947, 1014, 1232, 1242, 1247, 1709, 1878, 1901, 2035, 2070,
       2118, 2130, 2135, 2414, 2454, 2597, 2654, 2896, 2939, 2953, 3422, 3520,
       3808, 3985, 4027, 4176, 4284, 4571, 4639, 4699, 4740, 4761, 5749, 5955,
       6571, 6576, 6597, 6625, 8408, 9009, 9015, 9019, 9587, 9620, 9638, 9642,
       9664, 9679, 9692, 9698, 9729],
      dtype='int64')</code></pre>
</div>
</div>
<div id="dc588030" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> koreanize_matplotlib</span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시각화로 Validation 확인</span></span>
<span id="cb21-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> idx_false.tolist():</span>
<span id="cb21-5">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb21-6"></span>
<span id="cb21-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결과 확인</span></span>
<span id="cb21-8">    plt.xlabel(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"정답:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_test[i]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | 예상:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_predict[i]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb21-9">    plt.imshow(np.reshape(x_test[i], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>]), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.binary)</span>
<span id="cb21-10">    plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-5.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-6.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-7.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-8.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-9.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-10.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-11.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-12.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-13.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-14.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-15.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-16.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-17.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-18.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-19.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-20.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-21.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-22.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-23.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-24.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-25.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-26.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-27.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-28.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-29.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-30.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-31.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-32.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-33.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-34.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-35.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-36.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-37.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-38.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-39.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-40.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-41.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-42.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-43.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-44.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-45.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-46.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-47.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-48.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-49.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-50.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-51.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-52.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/index_files/figure-html/cell-14-output-53.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>파이썬</category>
  <category>머신러닝</category>
  <category>딥러닝</category>
  <category>202406Study_FDS</category>
  <category>MNIST</category>
  <category>Tensorflow</category>
  <guid>https://kr9268.github.io/posts/meta-dl-creditcard-20240615_2/</guid>
  <pubDate>Sat, 15 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[공모전] 공공데이터 공모전-4(모델에 대한 Feature개발 및 평가지표)</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/dtcontest-ore-20240615/</link>
  <description><![CDATA[ 





<p>2024년 12회 산업통상자원부 공공데이터 활용 아이디어 공모전 참가 기록.(모델에 대한 Feature개발 및 평가지표)</p>
<section id="개요" class="level2">
<h2 class="anchored" data-anchor-id="개요">개요</h2>
<ul>
<li>2024년 12회 산업통상자원부 공공데이터 활용 아이디어 공모전 참가해보기로 함
<ul>
<li>https://datacontest.kr/apply/applyAdd/3</li>
</ul></li>
<li>분석 대상 광물에 대한 HSCODE 등 기준 고민</li>
<li>모델 평가지표에 대한 고민 : Recall</li>
<li>모델에 사용할 지표 개발에 대한 부분 (UN Comtrade 활용)
<ul>
<li>생산국 수출량</li>
<li>생산국 판매가격</li>
<li>수입국 수입량</li>
</ul></li>
</ul>
</section>
<section id="내용정리" class="level2">
<h2 class="anchored" data-anchor-id="내용정리">내용정리</h2>
<section id="지난-회의정리" class="level3">
<h3 class="anchored" data-anchor-id="지난-회의정리">지난 회의정리</h3>
<ul>
<li>모델링에 사용할 지표 중 <code>시장위험지수</code> 제거에 대한 동의
<ul>
<li>수급안정화지수에 공통항목이 많아 추이가 비슷하여 제외</li>
</ul></li>
<li>Feature 중 하나로 <code>BDI지수</code> 추가</li>
<li>Feature로 사용할 데이터를 추가로 발굴
<ul>
<li><a href="https://comtradeplus.un.org/TradeFlow">UN Comtrade database</a>에서도 활용할 데이터 있는지 검토(타 팀원 제보)</li>
</ul></li>
<li>잘 만들어진 기존 모델들을 잘 사용하는 방안 고려
<ul>
<li>이상요소 탐지에 R AnomalyDetection패키지 사용 (타 팀원이 적용예정)</li>
</ul></li>
</ul>
</section>
<section id="회의내용에-대한-self고찰-및-아이디어-develope" class="level3">
<h3 class="anchored" data-anchor-id="회의내용에-대한-self고찰-및-아이디어-develope">회의내용에 대한 Self고찰 및 아이디어 Develope</h3>
<ul>
<li>분석할 광물에 대해 어떤 기준을 적용할지 고민
<ul>
<li>UN Comtrade를 활용할 때 어떤 HSCODE를 적용할지에 대한 고민
<ul>
<li>한국무역통계진흥원에서 제공하는 <a href="https://www.bandtrass.or.kr/hsnavi.do?page=F&amp;site=">HSCODE분류서비스</a>를 활용해, 가장 신고율이 높은 HSCODE 채택
<ul>
<li>‘이차전지용’ 등 여러 용도가 있음에도 가장 높은 신고율은 ’기타’인 것으로 확인해 이 로직은 <code>Drop</code></li>
</ul></li>
<li>현대경제연구원의 <a href="https://www.hri.co.kr/kor/report/report-view.html?mode=2&amp;uid=97723&amp;find_field=total&amp;find_word=2%EC%B0%A8%EC%A0%84%EC%A7%80&amp;page=1">2차전지 보고서</a> 중 품목별 HSCODE 내용이 있어 활용 검토
<ul>
<li><strong>핵심사업에 사용될 광물에 대한 분석</strong>이라는 점에서, 2차전지 컨셉 차용이 나쁘지 않은 것으로 보여 <code>활용제안 예정</code>
<ul>
<li>산화/수산화리튬(282520), 산화/수산화코발트(282200), 황산코발트(283329)</li>
<li>탄산리튬(283691), 이산화망간(850610), 산화/수산화니켈(282540), 황산니켈(283324)</li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
<li>모델링에 사용할 평가기준에 대한 분석
<ul>
<li>위험요소 탐지에 대한 모델이므로 <code>Recall 사용으로 제안 예정</code>
<ul>
<li>위기로 ’판정’하는게 많아져야 위기를 놓치지 않을 확률이 크므로 Recall이 맞다고 생각했음</li>
</ul></li>
</ul></li>
<li>모델링에 사용할 Feature에 대한 생각 (<code>아래의 3개 지표를 개발하여 활용하도록 의견제안 예정</code>)
<ul>
<li>UN Comtrade의 요소를 바탕으로 아래의 지표를 생성하는 것을 고려
<ul>
<li><code>생산국 수출량</code> : 각 광물의 생산량 상위 국가를 from기준으로 하여 수출(공급)량 판단</li>
<li><code>생산국 판매가격</code> : 각 광물의 판매가격을 수출량으로 나누어 kg당 단가로 판단
<ul>
<li>가격은 CIF, FOB중 기타비용을 제외하는 FOB를 우선고려, 데이터를 보고 추가결정</li>
</ul></li>
<li><code>수입국 수입량</code> : 특정 국가에서 수입량 변동이 급격히 변동(상승)하는 것 탐지</li>
</ul></li>
</ul></li>
</ul>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>공모전</category>
  <category>공공데이터</category>
  <category>분석</category>
  <guid>https://kr9268.github.io/posts/dtcontest-ore-20240615/</guid>
  <pubDate>Sat, 15 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[M_Study_3주차과제1] Softmax로 MNIST다루기</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-dl-creditcard-20240615_1/</link>
  <description><![CDATA[ 





<p>스터디 진행하며 진행한 과제 기록(MNIST, Softmax)</p>
<section id="개요" class="level2">
<h2 class="anchored" data-anchor-id="개요">개요</h2>
<p>참여중인 딥러닝 스터디 3주차 기록입니다.</p>
<ul>
<li>Softmax로 MNIST다루기</li>
<li>강사님이 주신 샘플코드 참고해서, 나에게 맞추거나 추가공부 진행</li>
</ul>
</section>
<section id="과제-작성-softmax-linear" class="level2">
<h2 class="anchored" data-anchor-id="과제-작성-softmax-linear">과제 작성 (Softmax / Linear)</h2>
<div id="c2c7d438" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mnist</span></code></pre></div>
</div>
<section id="mnist-dataset로딩-및-전처리" class="level3">
<h3 class="anchored" data-anchor-id="mnist-dataset로딩-및-전처리">Mnist Dataset로딩 및 전처리</h3>
<div id="3cc2dc4b" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">(x_train, y_train), (x_test, y_test) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mnist.load_data()</span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (x_train, y_train, x_test, y_test):</span>
<span id="cb2-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(i.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(60000, 28, 28)
(60000,)
(10000, 28, 28)
(10000,)</code></pre>
</div>
</div>
<section id="float변환" class="level4">
<h4 class="anchored" data-anchor-id="float변환">float변환</h4>
<div id="d17a0531" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">x_train, x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(x_train, np.float32), np.array(x_test, np.float32)</span></code></pre></div>
</div>
</section>
<section id="flatten" class="level4">
<h4 class="anchored" data-anchor-id="flatten">Flatten</h4>
<div id="9ca4ba93" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten (num_features=784)</span></span>
<span id="cb5-2">num_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">784</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 28*28 (Data의 Shape)</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Flatten전 : '</span>, x_train.shape, x_test.shape)</span>
<span id="cb5-5">x_train, x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_features), x_test.reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_features)</span>
<span id="cb5-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Flatten후 : '</span>, x_train.shape, x_test.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Flatten전 :  (60000, 28, 28) (10000, 28, 28)
Flatten후 :  (60000, 784) (10000, 784)</code></pre>
</div>
</div>
</section>
<section id="normalize" class="level4">
<h4 class="anchored" data-anchor-id="normalize">Normalize</h4>
<div id="8b98cd1a" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalize (0~255사이의 값을 0~1 사이의 값으로)</span></span>
<span id="cb7-2">x_train, x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.</span>, x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">255.</span></span></code></pre></div>
</div>
</section>
</section>
<section id="함수-및-파라메터-설정" class="level3">
<h3 class="anchored" data-anchor-id="함수-및-파라메터-설정">함수 및 파라메터 설정</h3>
<div id="28184919" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameters</span></span>
<span id="cb8-2">learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb8-3">training_steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb8-4">batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span></span>
<span id="cb8-5"></span>
<span id="cb8-6">num_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># MNIST의 0~9 숫자 10개</span></span>
<span id="cb8-7">num_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">784</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 28*28 (Data의 Shape)</span></span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Variables</span></span>
<span id="cb8-10">W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.Variable(tf.ones([num_features, num_classes]), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weight'</span>)</span>
<span id="cb8-11">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.Variable(tf.zeros([num_classes]), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bias'</span>)</span>
<span id="cb8-12"></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Functions</span></span>
<span id="cb8-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> softmax(x):</span>
<span id="cb8-15">    z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.matmul(x, W) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb8-16">    sm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.nn.softmax(z)</span>
<span id="cb8-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> sm</span>
<span id="cb8-18"></span>
<span id="cb8-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cross_entropy(y_pred, y_true):</span>
<span id="cb8-20">    y_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.one_hot(y_true, depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_classes)</span>
<span id="cb8-21">    y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.clip_by_value(y_pred, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clip_by_value에서 1e-9 최소값지정사유 : </span></span>
<span id="cb8-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tf.reduce_mean(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tf.reduce_sum(y_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> tf.math.log(y_pred), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
</div>
<ul>
<li><p>tf.nn.softmax : 0~1 사이로 출력</p></li>
<li><p>tf.one_hot(y_true, depth=num_classes) : y_true인 대상을 depth에 맞춰 원핫인코딩</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 샘플</span></span>
<span id="cb9-2">  tf.one_hot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>).numpy()</span>
<span id="cb9-3">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> array([[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>]], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>float32)</span></code></pre></div></li>
<li><p>tf.clip_by_value(y_pred, 1e-9, 1.) : y_pred인 대상을 제시한 min, max에 맞춰 변환</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 샘플</span></span>
<span id="cb10-2">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 변환 전</span></span>
<span id="cb10-3">  t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.constant([[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tf.float32)</span>
<span id="cb10-4">  t.numpy()</span>
<span id="cb10-5">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> array([[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>],</span>
<span id="cb10-6">     [ <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>,  <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.</span>]], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>float32)</span>
<span id="cb10-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 변환 후</span></span>
<span id="cb10-8">  tf.clip_by_value(t, clip_value_min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, clip_value_max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).numpy()</span>
<span id="cb10-9">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> array([[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>],</span>
<span id="cb10-10">     [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>]], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>float32)</span></code></pre></div></li>
</ul>
<div id="fb36658f" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optimization</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> accuracy(y_pred, y_true):</span>
<span id="cb11-3">    correct_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.equal(tf.argmax(y_pred, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), tf.cast(y_true, tf.int64))</span>
<span id="cb11-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> tf.reduce_mean(tf.cast(correct_prediction, tf.float32), axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> batch_maker(text, data_row, batch_size):</span>
<span id="cb11-7">    random_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(data_row, size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_size)</span>
<span id="cb11-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x_train[random_idx], y_train[random_idx]</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_optimization(x, y):</span>
<span id="cb11-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> tf.GradientTape() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> g:</span>
<span id="cb11-12">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> softmax(x)</span>
<span id="cb11-13">        cost <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cross_entropy(pred, y)</span>
<span id="cb11-14"></span>
<span id="cb11-15">    gradients <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> g.gradient(cost, [W, b])</span>
<span id="cb11-16"></span>
<span id="cb11-17">    optimizer.apply_gradients(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(gradients, [W, b]))</span>
<span id="cb11-18"></span>
<span id="cb11-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optimizer (Stochastic Gradient Descent)</span></span>
<span id="cb11-20">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.optimizers.SGD(learning_rate)</span>
<span id="cb11-21"></span>
<span id="cb11-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> step <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(training_steps): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># training_steps = 1000로 위에서 지정해둠</span></span>
<span id="cb11-23">    batch_x, batch_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_maker(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'training'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60000</span>, batch_size) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># batch_size = 256로 위에서 지정해둠</span></span>
<span id="cb11-24"></span>
<span id="cb11-25">    run_optimization(batch_x, batch_y)</span>
<span id="cb11-26"></span>
<span id="cb11-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb11-28">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> softmax(batch_x)</span>
<span id="cb11-29">        cost <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cross_entropy(pred, batch_y)</span>
<span id="cb11-30">        acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy(pred, batch_y)</span>
<span id="cb11-31">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Step : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>step<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | loss : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cost<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> / accuracy : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Step : 0 | loss : 2.287696123123169 / accuracy : 0.6875
Step : 100 | loss : 1.5578452348709106 / accuracy : 0.7578125
Step : 200 | loss : 1.188745379447937 / accuracy : 0.8359375
Step : 300 | loss : 1.010088324546814 / accuracy : 0.796875
Step : 400 | loss : 0.8610934019088745 / accuracy : 0.859375
Step : 500 | loss : 0.807215690612793 / accuracy : 0.8359375
Step : 600 | loss : 0.7144550085067749 / accuracy : 0.8671875
Step : 700 | loss : 0.7559677362442017 / accuracy : 0.81640625
Step : 800 | loss : 0.6656553745269775 / accuracy : 0.8515625
Step : 900 | loss : 0.59657222032547 / accuracy : 0.8828125</code></pre>
</div>
</div>
</section>
<section id="학습-후-validationtest" class="level3">
<h3 class="anchored" data-anchor-id="학습-후-validationtest">학습 후 Validation(Test)</h3>
<div id="a06dd500" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># W와 b가 학습된 model로 Validation(Test Dataset사용)</span></span>
<span id="cb13-2">prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> softmax(x_test)</span>
<span id="cb13-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Test accuracy : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accuracy(prediction, y_test)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test accuracy : 0.8716999888420105</code></pre>
</div>
</div>
</section>
<section id="추가적으로-검증기능-구현해보기" class="level3">
<h3 class="anchored" data-anchor-id="추가적으로-검증기능-구현해보기">추가적으로 검증기능 구현해보기</h3>
<ul>
<li>추가적으로, 아래의 기능을 구현해보았음
<ul>
<li>number_to_look을 입력하여 원하는 횟수만큼 모델검증</li>
<li>randint를 활용하여 랜덤추출, tested_list로 추출내역 관리하여 중복회피</li>
<li>pyplot으로 형태/예측/정답을 시각화</li>
</ul></li>
</ul>
<div id="e1bb8562" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> koreanize_matplotlib</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시각화로 Validation 확인</span></span>
<span id="cb15-4">number_to_look <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb15-5">tested_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(number_to_look):</span>
<span id="cb15-8">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb15-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 테스트할 데이터 랜덤추출</span></span>
<span id="cb15-10">    idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tested_list:</span>
<span id="cb15-12">        idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, y_test.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb15-13">        tested_list.append(idx)</span>
<span id="cb15-14"></span>
<span id="cb15-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결과 확인</span></span>
<span id="cb15-16">    plt.xlabel(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"예상:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>argmax(prediction[idx])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | 정답:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_test[idx]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-17">    plt.imshow(np.reshape(x_test[idx], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>]), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.binary)</span>
<span id="cb15-18">    plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_1/index_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_1/index_files/figure-html/cell-10-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_1/index_files/figure-html/cell-10-output-3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240615_1/index_files/figure-html/cell-10-output-4.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>파이썬</category>
  <category>머신러닝</category>
  <category>딥러닝</category>
  <category>202406Study_FDS</category>
  <category>MNIST</category>
  <guid>https://kr9268.github.io/posts/meta-dl-creditcard-20240615_1/</guid>
  <pubDate>Sat, 15 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[공모전] 공공데이터 공모전-3(사용할 피쳐 재분석)</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/dtcontest-ore-20240612/</link>
  <description><![CDATA[ 





<p>2024년 12회 산업통상자원부 공공데이터 활용 아이디어 공모전 참가 기록.(지표 및 사용할 데이터에 대한 고민)</p>
<section id="개요" class="level2">
<h2 class="anchored" data-anchor-id="개요">개요</h2>
<ul>
<li>2024년 12회 산업통상자원부 공공데이터 활용 아이디어 공모전 참가해보기로 함
<ul>
<li>https://datacontest.kr/apply/applyAdd/3</li>
</ul></li>
<li>사용하기로 한 지표에 대한 재조사 및 통합사용하기로 의견제안 예정</li>
<li>모델의 Feature로 원자재의 벌크운송에 대한 운임지수(BDI)사용 의견제안 예정</li>
</ul>
</section>
<section id="내용정리" class="level2">
<h2 class="anchored" data-anchor-id="내용정리">내용정리</h2>
<section id="지난-회의정리" class="level3">
<h3 class="anchored" data-anchor-id="지난-회의정리">지난 회의정리</h3>
<ul>
<li>모델링에 사용할 지표 2가지 선정
<ul>
<li>수급안정화지수</li>
<li>시장위험지수</li>
</ul></li>
<li>광물별 가격 영향 미치는 요소 생각해보기</li>
<li>모델링 관련 아이디어</li>
</ul>
</section>
<section id="회의내용에-대한-self고찰-및-아이디어-develope" class="level3">
<h3 class="anchored" data-anchor-id="회의내용에-대한-self고찰-및-아이디어-develope">회의내용에 대한 Self고찰 및 아이디어 Develope</h3>
<ul>
<li>모델링에 사용할 지표에 대한 분석
<ul>
<li>데이터를 살펴보다보니 둘의 움직임이 거의 같게 나타남</li>
<li>가격리스크, 중장기적 시계 등 공통적인 요소가 서로 많은 지표임을 발견</li>
<li>포함항목을 좀 더 구체적으로 명시한 <code>수급안정화지수로 통합사용 하는 것으로 의견 제안 예정</code>
<ul>
<li>광종별 중장기 가격리스크, 세계 수급비율(공급/소비), 세계 공급(매장)편중도, 국내 수입증가율, 국내 수입국 편중도 등</li>
</ul></li>
</ul></li>
</ul>
<div id="71278759" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> koreanize_matplotlib</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"></span>
<span id="cb1-6">df_source <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'비교_한국광해광업공단_수급안정화지수_코발트_20240520 (1).csv'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cp949'</span>)</span>
<span id="cb1-7">df_source[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'기간'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'시장위험지수'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'수급안정화지수'</span>]].plot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'기간'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/dtcontest-ore-20240612/index_files/figure-html/cell-2-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<ul>
<li><p>광물별 고려요소 및 모델링에 쓸 데이터 관련 아이디어</p>
<ol type="1">
<li>고려대상 광물들의 세계 생산량 비중 등을 고려할 때 <code>국제수송(수입)을 고려</code>해야할 것으로 보임
<ul>
<li>조사를 통해 <code>상하이 컨테이너 운임지수(SCFI)</code>를 확인, 국가별 운임지수에 대한 가중치를 반영한 지표로 주요 수입국에 대해 반영 고려
<ul>
<li>그러나 광물운송의 특성상 컨테이너로 운송하지 않기 때문에 다른 지수를 모색</li>
</ul></li>
<li>벌크선에 대한 지수인 <code>발틱운임지수(BDI)</code> 도입 검토
<ul>
<li>공급 대비 운송량에 대한 수요를 알 수 있음</li>
<li>벌크선은 광물, 곡물 등을 운송하므로 원자재에 대한 글로벌 수요와 공급을 간접적으로 측정 원자재 소요에 대한 미래의 경제선행지표로도 간주되기도 함</li>
<li>구체적인 운송수요가 있을 때만 예약되는 벌크선 특성상 특정 목적에 의해 조정되는 경우가 적음</li>
<li>위키백과에서 위의 내용들 발췌 : https://en.wikipedia.org/wiki/Baltic_Dry_Index</li>
</ul></li>
<li><code>발틱운임지수(BDI)를 데이터로 사용하는 것으로 의견 제안 예정</code></li>
</ul></li>
<li>주요 생산국에 대한 여러 요소의 고려
<ul>
<li>전쟁, 전염병, 인건비 등을 대상으로 고려할 수는 없을지에 대한 고민
<ul>
<li>수치화하기 어렵거나, 자료를 구하기 어려울 것으로 보여 일단 Drop</li>
</ul></li>
</ul></li>
</ol></li>
</ul>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>공모전</category>
  <category>공공데이터</category>
  <category>분석</category>
  <category>공공데이터API</category>
  <category>github</category>
  <guid>https://kr9268.github.io/posts/dtcontest-ore-20240612/</guid>
  <pubDate>Mon, 10 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[M_Study_3주차] Multi-class Classification / Artificial Neural Network</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-dl-creditcard-20240609/</link>
  <description><![CDATA[ 





<section id="개요" class="level2">
<h2 class="anchored" data-anchor-id="개요">개요</h2>
<p>참여중인 딥러닝 스터디 3주차 기록입니다.</p>
</section>
<section id="주차-과제-설명" class="level2">
<h2 class="anchored" data-anchor-id="주차-과제-설명">2주차 과제 설명</h2>
<ul>
<li>tf.random.set_seed(2024)
<ul>
<li>서로 다른 모델을 비교하는 경우, 시작점이 다른 것 때문에 성능우위가 다르게 측정되는 경우 발생 (같은 성능임에도 다르게 나오거나, 좋은 모델이 더 나쁜 모델로 오인되는 경우)</li>
<li>이러한 경우를 방지하고자, set_seed로 같은 지점에서 시작하게 할 수 있음</li>
<li>딥러닝은 복잡한 다차원의 함수이므로, 좋은 시작점에 따라 달라질 수 있음 (좋은 Optimizer를 사용하고 좋은 데이터를 쓴다면 차이는 줄어들 수 있음)</li>
</ul></li>
<li>Matrix Multiplication
<ul>
<li>A(1,2), B(2,1)와 같은 Matrix에서, A의 열(,2)과 B의 행(2,)의 숫자가 같아야 가능</li>
</ul></li>
<li>Cost function에서 마이너스(-)를 붙이는 경우
<ul>
<li>높을수록 안좋은 척도여야 할 때, 계산식이 높을수록 좋은 값인 경우 붙여서 변환</li>
</ul></li>
<li>Learning rate
<ul>
<li>GD에서 안정적으로 최적점에 가게하기 위해 학습률을 조정</li>
<li>사람이 지정하는 hyper parameter, 경험에 의해 넣는 경우가 많다(정답은 없음)</li>
</ul></li>
<li>Confusion Matrix
<ul>
<li>Recall, Precision 으로 표현하는 것은 경영진 등에는 와닿지 않을 수 있으므로 시각화하여 보여주면 좋음</li>
</ul></li>
</ul>
</section>
<section id="주차-과제-logistic-regression-코드-작성한-것" class="level2">
<h2 class="anchored" data-anchor-id="주차-과제-logistic-regression-코드-작성한-것">2주차 과제 Logistic regression 코드 작성한 것</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train data</span></span>
<span id="cb1-6">X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>],</span>
<span id="cb1-7">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>],</span>
<span id="cb1-8">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>],</span>
<span id="cb1-9">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>],</span>
<span id="cb1-10">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>],</span>
<span id="cb1-11">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>]],</span>
<span id="cb1-12">                   dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32)</span>
<span id="cb1-13">Y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>],</span>
<span id="cb1-14">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>],</span>
<span id="cb1-15">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>],</span>
<span id="cb1-16">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>],</span>
<span id="cb1-17">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>],</span>
<span id="cb1-18">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>],],</span>
<span id="cb1-19">                   dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32)</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 회귀선 작성 전 분포확인</span></span>
<span id="cb1-22">colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> L <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> Y_train]</span>
<span id="cb1-23">plt.scatter(X_train[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], X_train[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Logistics regression'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240609/index_files/figure-html/1b6f06d5-4-image.png" class="img-fluid figure-img"></p>
<figcaption>image.png</figcaption>
</figure>
</div>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 학습</span></span>
<span id="cb2-2">tf.random.set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2020</span>)</span>
<span id="cb2-3">W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.Variable(tf.random.normal([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>))</span>
<span id="cb2-4">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.Variable(tf.random.normal([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span>))</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> hypothesis(X):</span>
<span id="cb2-7">    z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.matmul(X, W) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb2-8">    sigmoid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> tf.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>z))</span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> sigmoid</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cost_fn(H, Y):</span>
<span id="cb2-12">    cost <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>tf.reduce_mean(Y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>tf.math.log(H) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>tf.math.log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>H))</span>
<span id="cb2-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> cost</span>
<span id="cb2-14"></span>
<span id="cb2-15">learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb2-16">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.optimizers.SGD(learning_rate)</span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> step <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5001</span>):</span>
<span id="cb2-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> tf.GradientTape() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> g:</span>
<span id="cb2-20">        pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hypothesis(X_train)</span>
<span id="cb2-21">        cost <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cost_fn(pred, Y_train)</span>
<span id="cb2-22"></span>
<span id="cb2-23">        gradients <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> g.gradient(cost, [W,b])</span>
<span id="cb2-24">    </span>
<span id="cb2-25">    optimizer.apply_gradients(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(gradients, [W, b]))</span>
<span id="cb2-26"></span>
<span id="cb2-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-28">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Step=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Cost = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cost<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, W=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>W<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>numpy()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, b = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>b<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>numpy()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-29"></span>
<span id="cb2-30">w_hat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> W.numpy()</span>
<span id="cb2-31">b_hat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.numpy()</span></code></pre></div>
<blockquote class="blockquote">
<p>Step=1, Cost = 0.7932398319244385, W=[[-0.10415223] [0.68125504]], b = [0.3810195] <br> Step=1001, Cost = 0.5122759938240051, W=[[0.1809378] [0.55177015]], b = [-0.97815347] <br> Step=2001, Cost = 0.39883172512054443, W=[[0.5135696] [0.6884617]], b = [-1.9777462] <br> Step=3001, Cost = 0.32507583498954773, W=[[0.7515713] [0.8368167]], b = [-2.7877953] <br> Step=4001, Cost = 0.27400580048561096, W=[[0.9350327] [0.97824335]], b = [-3.4628296] <br> Step=5001, Cost = 0.2367737740278244, W=[[1.0848083] [1.1075894]], b = [-4.039375]</p>
</blockquote>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Slope(Coefficient) 확인</span></span>
<span id="cb3-2">slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w_hat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>w_hat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb3-3">xx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(X_train[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]),np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(X_train[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># min과 max 사이 구간의 숫자를 생성. x값</span></span>
<span id="cb3-4">yy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>slope<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>xx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> b_hat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>w_hat[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]                             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># xx(x값)입력하여 y값 생성</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train data분포</span></span>
<span id="cb3-7">plt.scatter(X_train[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], X_train[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Logistics regression'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors)</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 분류선(Decision Boundary)확인</span></span>
<span id="cb3-10">plt.plot(xx, yy, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Decision Boundary'</span>)</span>
<span id="cb3-11">plt.legend()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240609/index_files/figure-html/1b6f06d5-1-image-2.png" class="img-fluid figure-img"></p>
<figcaption>image-2.png</figcaption>
</figure>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Confusion matrix</span></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> confusion_matrix</span>
<span id="cb4-3"></span>
<span id="cb4-4">X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>],</span>
<span id="cb4-5">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>],</span>
<span id="cb4-6">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>],</span>
<span id="cb4-7">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>],</span>
<span id="cb4-8">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>],</span>
<span id="cb4-9">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>]],</span>
<span id="cb4-10">                   dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32)</span>
<span id="cb4-11">Y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>],</span>
<span id="cb4-12">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>],</span>
<span id="cb4-13">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>],</span>
<span id="cb4-14">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>],</span>
<span id="cb4-15">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>],</span>
<span id="cb4-16">                   [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>],],</span>
<span id="cb4-17">                   dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32)</span>
<span id="cb4-18"></span>
<span id="cb4-19">Y_actual <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Y_test</span>
<span id="cb4-20">Y_predicted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hypothesis(X_test)</span>
<span id="cb4-21">Y_predicted_binary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(Y_predicted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-22"></span>
<span id="cb4-23">CM_array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(Y_actual, Y_predicted_binary, labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) </span>
<span id="cb4-24">CM_array</span></code></pre></div>
<blockquote class="blockquote">
<p>array([[2, 2],<br> [1, 1]], dtype=int64)</p>
</blockquote>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Confusion matrix 시각화(seaborn)</span></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb5-4"></span>
<span id="cb5-5">class_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Negative'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Positive'</span>]</span>
<span id="cb5-6">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb5-7">sns.heatmap(CM_array, annot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Blues'</span>,</span>
<span id="cb5-8">            xticklabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>class_labels, yticklabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>class_labels)</span>
<span id="cb5-9"></span>
<span id="cb5-10">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Confusion Matrix'</span>)</span>
<span id="cb5-11">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Predicted'</span>)</span>
<span id="cb5-12">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'True'</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240609/index_files/figure-html/1b6f06d5-2-image-3.png" class="img-fluid figure-img"></p>
<figcaption>image-3.png</figcaption>
</figure>
</div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Confusion matrix 시각화(Scikit-learn)</span></span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> confusion_matrix, ConfusionMatrixDisplay</span>
<span id="cb6-3"></span>
<span id="cb6-4">disp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConfusionMatrixDisplay(confusion_matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CM_array, display_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb6-5">disp.plot(cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.Blues)</span>
<span id="cb6-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Confusion Matrix'</span>)</span>
<span id="cb6-7">plt.show()</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240609/index_files/figure-html/1b6f06d5-3-image-4.png" class="img-fluid figure-img"></p>
<figcaption>image-4.png</figcaption>
</figure>
</div>
</section>
<section id="multi-class-classfication-regression" class="level2">
<h2 class="anchored" data-anchor-id="multi-class-classfication-regression">Multi-class Classfication regression</h2>
<ul>
<li><p>2가지 분류가 아닌 3가지 이상의 분류(A,B,C로 나누는 신용등급 등)</p></li>
<li><p>Binary classification과 달리 하나의 Decision boundary로는 해결 불가</p></li>
<li><p>One vs All(Rest)</p>
<ul>
<li>하나의 대상과, 아닌 것’들’로 Binary Classification을 여러번 수행</li>
<li>예를 들어 a, b, c 3가지를 분류하는 경우
<ul>
<li>아래와 같은 같은 3개의 식으로 표현할 수 있고,<br> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240609/index_files/figure-html/00653178-3-image.png" class="img-fluid" alt="image.png"></li>
<li>아래와 같이 하나의 행렬로 한번에 표현할 수 있다 <br> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240609/index_files/figure-html/00653178-1-image-2.png" class="img-fluid" alt="image-2.png"></li>
</ul></li>
<li>Softmax : 각 결과값(<img src="https://latex.codecogs.com/png.latex?H_a,%20H_b,%20H_c">)의 비율(확률)이 나오게 됨(총합이 1)</li>
</ul></li>
<li><p>Cross entropy cost function</p>
<ul>
<li><p><strong>정보량은 확률에 반비례한다고 정의</strong> (정보량= $ 1 p$)</p>
<ul>
<li>특정 성씨의 사람을 뽑는다고 할 때, 한국의 주요 성씨인 김씨<img src="https://latex.codecogs.com/png.latex?1%20%5Cover%2010"> vs 소수 성씨인 남궁씨<img src="https://latex.codecogs.com/png.latex?1%20%5Cover%20100"></li>
</ul></li>
<li><p>로그를 취하여 전개하면 Cross entropy 식이 된다</p></li>
<li><p>Entropy : Measure for uncertainty (불확실성의 측정) <br> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240609/index_files/figure-html/00653178-2-image-3.png" class="img-fluid" alt="image-3.png"></p></li>
<li><p>Case별 Cross entropy(cost function)</p>
<ul>
<li>출력값(결과값 softmax)과 실제값이 비슷한 경우 : 특정 값 산출</li>
<li>출력값(결과값 softmax)과 실제값이 완전히 다른 경우 : 무한대</li>
<li>출력값(결과값 softmax)과 실제값이 완전히 동일한 경우 : 0</li>
</ul></li>
<li><p>Cross entropy를 개인이 직접구현한다면 놓칠 수 있는 부분(cross entropy의 무한대)의 문제</p>
<ul>
<li>파이토치 등 많은 사람이 참여한 패키지를 사용하면 방지할 수 있음</li>
<li>컴퓨터에서의 Zero division error 등의 경우, 텐서플로우 등 패키지에선 분모에 0.00001등을 더하여 실제값엔 영향이 작게하며 오류 제거</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="softmax" class="level1">
<h1>Softmax</h1>
<ul>
<li><p>Multi class 분류에서 많이 하는 것 : 이미지 분류</p>
<ul>
<li>Image X가 함수f(x)[모델]를 통과하여 Label Y(Class)로 산출</li>
<li>Image데이터는 컴퓨터에게는 숫자로 이루어진 행렬로 보여짐</li>
</ul></li>
<li><p>아래의 경우에서 W의 차원은? (<img src="https://latex.codecogs.com/png.latex?Y=W*X+B">) → (10*3072)</p>
<ul>
<li>X : Image (3072<em>1) (실제로는 32[가로] </em> 32[세로] * 3[RGB])</li>
<li>Y : 고양이/자동차/새 등 Label (10 * 1)</li>
<li>B : (10*1)</li>
</ul></li>
<li><p>계산속도를 높이기 위한 방법</p>
<ul>
<li>곱하기 한번으로 값이 나오게끔 계산횟수를 줄임<br> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240609/index_files/figure-html/c12fd90a-1-image.png" class="img-fluid" alt="image.png"></li>
</ul></li>
<li><p>Flatten</p>
<ul>
<li>(2, 2)를 (4, 1)로 변경</li>
</ul></li>
<li><p>학습한 W를 시각화하면, 분류하고자 하는 것의 형태가 어느정도보임(고양이 분류를 위한 W라면 고양이 실루엣)</p></li>
<li><p>Softmax 함수</p>
<ul>
<li>Exponetial(<img src="https://latex.codecogs.com/png.latex?e">)의 사용
<ul>
<li>음수가 Score로 나와서 확률적 해석에 방해되는 상황을 방지하기 위해 사용</li>
</ul></li>
<li>Sigmoid가 Binary classification에 대한 함수인 것과 달리, Multi-class에 대해 사용 가능</li>
</ul></li>
</ul>
</section>
<section id="loss-function" class="level1">
<h1>Loss function</h1>
<ul>
<li>0/1 Loss (가장 원시적)
<ul>
<li>맞으면 0, 틀리면 1</li>
<li>문제점 : 적게 틀린 것(고양이를 다른 동물로)과 많이 틀린 것(고양이를 자동차로)의 패널티가 같음</li>
</ul></li>
<li>Log loss
<ul>
<li>틀린/맞춘 정도에 따라 패널티를 부여</li>
</ul></li>
<li>Exponetial loss
<ul>
<li>틀렸을 때 더 강한 패널티(기울기)</li>
</ul></li>
<li>Hinge loss
<ul>
<li>SVM(Support Vector Machine)에서 많이 사용</li>
</ul></li>
</ul>
</section>
<section id="cross-entropy" class="level1">
<h1>Cross entropy</h1>
<ul>
<li>Binary 상황에서의 Cross entropy 수식 <br> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240609/index_files/figure-html/83629cdf-2-image.png" class="img-fluid" alt="image.png"></li>
<li>Multi class 상황에서의 Cross entropy 수식<br> <img src="https://kr9268.github.io/posts/meta-dl-creditcard-20240609/index_files/figure-html/83629cdf-1-image-2.png" class="img-fluid" alt="image-2.png"></li>
</ul>
</section>
<section id="stochastic-gradient-descent" class="level1">
<h1>Stochastic Gradient Descent</h1>
<ul>
<li>Stochastic Gradient Descent : 데이터를 메모리 상황에 맞게 쪼개서 넣는 방식
<ul>
<li>예를 들어, 메모리 1GB/학습할 데이터 100GB 라면 데이터를 쪼개서 넣는 것</li>
<li>학습용 메모리 확보의 어려움 : V-Ram(그래픽카드 메모리)는 D-Ram(일반 램)보다 매우 비쌈</li>
<li>데이터는 많으므로 확보된 메모리에 맞게 데이터를 쪼개서 GD 진행</li>
</ul></li>
<li>Batch size(Minibatch) : 나눈 데이터의 단위
<ul>
<li>예를 들어 100을 1씩 나누었다면, Minibatch가 1이다 와 같이 표현함</li>
<li>Batch size는 2의 배수로 넣는 것이 관례</li>
<li>1만개의 데이터를 100으로 나누었다면, 경사하강법(GD)을 100회 진행</li>
</ul></li>
<li>Epoch, Step
<ul>
<li>100만개의 데이터를 1만개로 나눴고, 1만개를 100회 넣어 전체데이터를 1번 넣었다면?
<ul>
<li>1 Epoch (모든 데이터가 다 들어가야 1 epoch)</li>
<li>100 Step (데이터를 넣은 횟수)</li>
<li>Step횟수 &gt; Epoch횟수</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="neural-networks" class="level1">
<h1>Neural Networks</h1>
<ul>
<li><p>이미지나 오디오, 텍스트 등 비정형데이터를 처리하기 위해 만들어진 아키텍쳐</p></li>
<li><p>MLP : XOR문제를 풀 수 없는 상황에서, 사람의 신경망에서 착안하여 해결</p>
<ul>
<li>중간 신경망(hidden layer)하여, Multi Layer Perceptron(MLP)</li>
<li>위에서 진행한 Multi classification은 1 layer라면, MLP는 layer가 더 추가된 것</li>
<li>다양한 관계를 복합적으로 표현</li>
</ul></li>
<li><p>중간에 Activation function을 넣어 비선형성을 추가</p>
<ul>
<li>Sigmoid, tanh, ReLU 등 (ReLU를 많이 사용)</li>
</ul></li>
<li><p>Forward pass vs Back propagation</p>
<ul>
<li>Forward pass : 순서대로 계산</li>
<li>Back propagation : 뒤에서부터 앞쪽으로 미분(시작값은 1)
<ul>
<li>Chain rule를 활용
<ul>
<li>Upstream gradient에 Local grandient를 곱해 Downstream gradient가 나옴</li>
</ul></li>
<li>Forward pass대비 계산량이 적은 이점이 있다
<ul>
<li>Parameter <img src="https://latex.codecogs.com/png.latex?W_1">(계산량 10만), <img src="https://latex.codecogs.com/png.latex?W_2">(계산량 5만)가 있을 때,
<ul>
<li>Forward pass가 <img src="https://latex.codecogs.com/png.latex?W_1">의 중복계산이 발생</li>
<li>Back propagation은 Upstream의 값을 저장해두었다가 사용, 필요한 계산만 추가계산</li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
<li><p>Patterns in Gradient Flow</p>
<ul>
<li>계산노드의 고정 : 미리 정해두면 Backpropagation미분계산을 빠르게 진행할 수 있음
<ul>
<li>1.0 Tensorflow가 Flexble하지 않지만 빠른 이유는 이런 계산노드의 고정 때문</li>
</ul></li>
<li>add gate(gradient distributor) : Upstream을 그대로 downstream으로</li>
<li>mul gate(swap multiplier) : downstream을 upstream에 곱해 반대쪽 downstream으로</li>
<li>copy gate(gradient adder)</li>
<li>max gate(gradient router)</li>
</ul></li>
</ul>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>파이썬</category>
  <category>머신러닝</category>
  <category>딥러닝</category>
  <category>202406Study_FDS</category>
  <guid>https://kr9268.github.io/posts/meta-dl-creditcard-20240609/</guid>
  <pubDate>Sun, 09 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[공모전] 공공데이터 공모전-2(github온라인db)</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/dtcontest-ore-20240610/</link>
  <description><![CDATA[ 





<p>2024년 12회 산업통상자원부 공공데이터 활용 아이디어 공모전 참가 기록.(+github활용한 온라인db구축)</p>
<section id="개요" class="level2">
<h2 class="anchored" data-anchor-id="개요">개요</h2>
<ul>
<li>2024년 12회 산업통상자원부 공공데이터 활용 아이디어 공모전 참가해보기로 함
<ul>
<li>https://datacontest.kr/apply/applyAdd/3</li>
</ul></li>
<li>단순 API로딩이 아니라, 각자 바로 데이터를 로딩할 수 있는 매체에 대한 고민 후 구현
<ul>
<li>코딩이 익숙하지 않은 팀원이 쉽게 이용할 수 있도록하고, readme에 바로 사용할 수 있게 샘플코드 제공</li>
<li>github를 활용해 pandas에서 바로 로딩할 수 있도록 구현</li>
</ul></li>
</ul>
</section>
<section id="내용정리" class="level2">
<h2 class="anchored" data-anchor-id="내용정리">내용정리</h2>
<section id="도입목적" class="level3">
<h3 class="anchored" data-anchor-id="도입목적">도입목적</h3>
<ul>
<li>본격적으로 모델 학습을 하기 전, 데이터 이용 편의를 증진하고자 함</li>
<li>팀원들이 R이나 통계분석에는 익숙하나 파이썬 코딩에는 익숙하지않아, 최대한 모델링에 집중하도록 지원
<ul>
<li>하나의 repository에서 원하는 데이터를 한번에 확인 가능</li>
<li>업데이트 일자를 표기하여 얼마나 최신 데이터인지 확인 가능</li>
</ul></li>
<li>데이터를 하나의 페이지에서 통합관리(공공데이터 홈페이지 접속 등 불필요)</li>
<li>개인서버(NAS)에서 매일 특정시간 구동하여 별도의 수작업없이 자동으로 최신화</li>
</ul>
</section>
<section id="구동방식" class="level3">
<h3 class="anchored" data-anchor-id="구동방식">구동방식</h3>
<ul>
<li>공공데이터 리스트와 API키가 저장된 json파일 로딩</li>
<li>지정된 공공데이터를 다운로드하고 csv파일로 저장</li>
<li>바로 로딩하기위한 파일 주소생성, 업데이트 날짜 저장</li>
<li>README 파일에 파일주소와 업데이트 날짜 등 업데이트</li>
<li>git_push함수로 github repository에 자동업로드</li>
</ul>
</section>
<section id="github-reposiroty주소" class="level3">
<h3 class="anchored" data-anchor-id="github-reposiroty주소">github reposiroty주소</h3>
<p><a href="https://github.com/KR9268/db_datagokr">https://github.com/KR9268/db_datagokr</a></p>
</section>
<section id="샘플코드패키지-및-함수" class="level3">
<h3 class="anchored" data-anchor-id="샘플코드패키지-및-함수">샘플코드(패키지 및 함수)</h3>
<div id="298e7956" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> subprocess</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> json_load(json_path, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>):</span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(json_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>encoding) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb1-11">        json_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb1-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> json_data</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> request_and_to_json(url):</span>
<span id="cb1-15">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url)</span>
<span id="cb1-16">    json_ob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(response.text)</span>
<span id="cb1-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> json_ob</span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> chk_json_status_of_data_go_kr(json_obj):</span>
<span id="cb1-20">    other_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'currentCount'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'matchCount'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'page'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'perPage'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'totalCount'</span>]</span>
<span id="cb1-21">    result_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb1-22">    </span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_column <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> other_data:</span>
<span id="cb1-24">        result_dict[each_column] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json_obj[each_column]  </span>
<span id="cb1-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result_dict </span>
<span id="cb1-26"></span>
<span id="cb1-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> download_from_data_go_kr_with_json(url):</span>
<span id="cb1-28">    json_ob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request_and_to_json(url)</span>
<span id="cb1-29"></span>
<span id="cb1-30">    json_status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chk_json_status_of_data_go_kr(json_ob)</span>
<span id="cb1-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> json_status[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'currentCount'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> json_status[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'totalCount'</span>]:</span>
<span id="cb1-32">        url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> url.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'perPage=1'</span>,<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'perPage=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>json_status[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"totalCount"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-33">        json_ob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request_and_to_json(url)</span>
<span id="cb1-34"></span>
<span id="cb1-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> json_ob</span>
<span id="cb1-36"></span>
<span id="cb1-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_readme(new_content_list):</span>
<span id="cb1-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the README.md file in read mode</span></span>
<span id="cb1-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'README.md'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb1-40">        lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.readlines()</span>
<span id="cb1-41"></span>
<span id="cb1-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find the index of the line that starts with '* 데이터 현황'</span></span>
<span id="cb1-43">    index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>((i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(lines) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> line.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'* 데이터 현황'</span>)), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-44"></span>
<span id="cb1-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the line is found, remove the following lines and insert new content</span></span>
<span id="cb1-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> index <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb1-47">        lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lines[:index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the following lines</span></span>
<span id="cb1-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#lines.extend(new_content) # Insert new content</span></span>
<span id="cb1-49">        lines.extend(new_content_list) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Insert new content</span></span>
<span id="cb1-50"></span>
<span id="cb1-51">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the README.md file in write mode and write the updated content</span></span>
<span id="cb1-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'README.md'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb1-53">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.writelines(lines)</span>
<span id="cb1-54"></span>
<span id="cb1-55"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> git_push():</span>
<span id="cb1-56">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of all .csv files in the current directory</span></span>
<span id="cb1-57">    csv_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [f <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> os.listdir(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> f.endswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.csv'</span>)]</span>
<span id="cb1-58"></span>
<span id="cb1-59">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stage all .csv files</span></span>
<span id="cb1-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> csv_files:</span>
<span id="cb1-61">        subprocess.call([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'git'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add'</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>])</span>
<span id="cb1-62"></span>
<span id="cb1-63">    subprocess.call([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'git'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'README.md'</span>])</span>
<span id="cb1-64">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Commit the changes with a message</span></span>
<span id="cb1-65">    subprocess.call([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'git'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'commit'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-m'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Automatic commit'</span>])</span>
<span id="cb1-66"></span>
<span id="cb1-67">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Push the changes to the remote repository</span></span>
<span id="cb1-68">    subprocess.call([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'git'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'push'</span>])</span></code></pre></div>
</div>
</section>
<section id="샘플코드메인코드" class="level3">
<h3 class="anchored" data-anchor-id="샘플코드메인코드">샘플코드(메인코드)</h3>
<div id="2a362ba2" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># json load</span></span>
<span id="cb2-2">serviceKey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json_load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'option.json'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'serviceKey'</span>]</span>
<span id="cb2-3">db_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json_load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'db_list.json'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cp949'</span>)</span></code></pre></div>
</div>
<div id="5a783f4f" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># main</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 작업하기</span></span>
<span id="cb3-4">txt_for_readme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>]</span>
<span id="cb3-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> db_list:</span>
<span id="cb3-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 다운로드</span></span>
<span id="cb3-7">    url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'base_url'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>each[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'address_get'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">?page=1&amp;perPage=1&amp;serviceKey=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>serviceKey<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-8">    json_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> download_from_data_go_kr_with_json(url)</span>
<span id="cb3-9">    result_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chk_json_status_of_data_go_kr(json_data)</span>
<span id="cb3-10">    </span>
<span id="cb3-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 저장</span></span>
<span id="cb3-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> result_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'currentCount'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> result_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'totalCount'</span>]:</span>
<span id="cb3-13">        pd.json_normalize(json_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>]).to_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file_name_to'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.csv"</span>,encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cp949'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb3-14"></span>
<span id="cb3-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 파일주소 및 이름, 업데이트시간 저장</span></span>
<span id="cb3-16">    owner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KR9268'</span></span>
<span id="cb3-17">    repo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'db_datagokr'</span></span>
<span id="cb3-18">    branch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'main'</span></span>
<span id="cb3-19">    file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file_name_to'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.csv"</span></span>
<span id="cb3-20"></span>
<span id="cb3-21">    url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://raw.githubusercontent.com/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>owner<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>repo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>branch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb3-22"></span>
<span id="cb3-23">    txt_for_readme.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  *  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>datetime<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>strftime(datetime.now(),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">업데이트 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-24">    time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-25"></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 업데이트 내역과 파일 git push</span></span>
<span id="cb3-27">update_readme(txt_for_readme)</span>
<span id="cb3-28">git_push()</span></code></pre></div>
</div>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>공모전</category>
  <category>공공데이터</category>
  <category>분석</category>
  <category>공공데이터API</category>
  <category>github</category>
  <guid>https://kr9268.github.io/posts/dtcontest-ore-20240610/</guid>
  <pubDate>Sat, 08 Jun 2024 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
