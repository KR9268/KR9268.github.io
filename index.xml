<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Blog</title>
<link>https://kr9268.github.io/</link>
<atom:link href="https://kr9268.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.7.31</generator>
<lastBuildDate>Sun, 02 Feb 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>[DA스터디/최종과제] Autogluon활용한 베이스모델 생성 및 고도화 실험</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250202/</link>
  <description><![CDATA[ 






<p>금융권 데이터를 활용한 분석 스터디 - 최종과제</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>최종과제
<ul>
<li>기존에 진행했던 과제에서 해보지 않았던 것 위주로 진행해보고자 함함
<ul>
<li>GPU(CUDA)설정 : docker 및 전용 torch 패키지 설치 등</li>
<li>autogluon으로 빠르게 베이스모델 설정 후(medium quality설정) 결정력 없는 변수 먼저 제거</li>
<li>SHAP시각화 진행시, EDA로 전처리하기 전보다 데이터의 경향성 등을 확인하기 어려웠음</li>
</ul></li>
<li>학습했던 음수변수에 대한 최소값 조정 등 진행</li>
<li>One-hot, Ordinal 인코딩에 대해 배웠는데, 상하관계 혼동을 주지않으면서 컬럼 수를 증가시키지 않는 방법 고민
<ul>
<li>Leaveoneout 인코딩이라는 것을 적용. 향후에는 좀 더 알아보고 적용하면 좋을 것 같음</li>
</ul></li>
<li>전처리한 데이터를 바탕으로 autogluon(best quality)으로 고도화된 모델을 얻고자 함
<ul>
<li>데이터에 대한 반영과 AutoML을 반복하며 개선을 진행하고자하였으나, 시간관계상 1회만 진행함</li>
<li>1회만 진행하며 오히려 점수는 조금 떨어짐.</li>
<li>향후 파생변수 생성 등 데이터에 좀 더 중점을 둔 방법으로 진행해보면 좋을 것 같음</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="최종과제" class="level1">
<h1>최종과제</h1>
<section id="과제-목표-및-데이터-설명" class="level2">
<h2 class="anchored" data-anchor-id="과제-목표-및-데이터-설명">과제 목표 및 데이터 설명</h2>
<ul>
<li>과제 목표
<ul>
<li>차량소유 여부 등 데이터를 바탕으로, 고객의 신용도를 예측(대금연체를 기준으로 한 신용도)</li>
<li><strong><code>Logloss</code>의 최소화</strong></li>
</ul></li>
<li>데이터 설명
<ul>
<li>데이터 출처 : <a href="https://dacon.io/competitions/official/235713/overview/description">월간 데이콘 신용카드 사용자 연체 예측 AI 경진대회 데이터</a>
<ul>
<li>세부 출처 : https://mp.weixin.qq.com/s/upjzuPg5AMIDsGxlpqnoCg</li>
</ul></li>
<li>변수 설명 <a href="https://www.dacon.io/competitions/official/235713/talkboard/402821/?_gl=1%2a1qi5pgu%2a_gcl_au%2aMTY1MzAzMjUwMi4xNzMyNDU0MDQ2%2a_ga%2aNTU2Mjg0MDUwLjE3MjQxMzkwODk.%2a_ga_35PZM515YN%2aMTczNjI1MzI0NS4xOC4xLjE3MzYyNTMyNjQuNDEuMC4w">(데이콘설명 원본링크)</a>
<ul>
<li>gender: 성별</li>
<li>car: 차량 소유 여부</li>
<li>reality: 부동산 소유 여부</li>
<li>child_num: 자녀 수</li>
<li>income_total: 연간 소득</li>
<li>income_type: 소득 분류 [‘Commercial associate’, ‘Working’, ‘State servant’, ‘Pensioner’, ‘Student’]</li>
<li>edu_type: 교육 수준 [‘Higher education’ ,‘Secondary / secondary special’, ‘Incomplete higher’, ‘Lower secondary’, ‘Academic degree’]</li>
<li>family_type: 결혼 여부 [‘Married’, ‘Civil marriage’, ‘Separated’, ‘Single / not married’, ‘Widow’]</li>
<li>house_type: 생활 방식 [‘Municipal apartment’, ‘House / apartment’, ‘With parents’, ‘Co-op apartment’, ‘Rented apartment’, ‘Office apartment’]</li>
<li>DAYS_BIRTH: 출생일
<ul>
<li>데이터 수집 당시 (0)부터 역으로 셈, 즉, -1은 데이터 수집일 하루 전에 태어났음을 의미</li>
</ul></li>
<li>DAYS_EMPLOYED: 업무 시작일
<ul>
<li>데이터 수집 당시 (0)부터 역으로 셈, 즉, -1은 데이터 수집일 하루 전부터 일을 시작함을 의미</li>
<li>양수 값은 고용되지 않은 상태를 의미함</li>
</ul></li>
<li>FLAG_MOBIL: 핸드폰 소유 여부</li>
<li>work_phone: 업무용 전화 소유 여부</li>
<li>phone: 전화 소유 여부</li>
<li>email: 이메일 소유 여부</li>
<li>occyp_type: 직업 유형<br>
</li>
<li>family_size: 가족 규모</li>
<li>begin_month: 신용카드 발급 월
<ul>
<li>데이터 수집 당시 (0)부터 역으로 셈, 즉, -1은 데이터 수집일 한 달 전에 신용카드를 발급함을 의미</li>
</ul></li>
<li><strong>credit</strong>: 사용자의 신용카드 대금 연체를 기준으로 한 신용도
<ul>
<li>낮을 수록 높은 신용의 신용카드 사용자를 의미함</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="section" class="level2">
<h2 class="anchored" data-anchor-id="section"></h2>
</section>
<section id="eda-기초통계-등" class="level2">
<h2 class="anchored" data-anchor-id="eda-기초통계-등">EDA : 기초통계 등</h2>
<ul>
<li>데이터 로딩 및 train x,y로 분할</li>
</ul>
<div id="3cff5335" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pkb_sqlite3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DB_sqlite3</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># db로 저장해둔 데이터 읽기</span></span>
<span id="cb1-5">db_controller <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DB_sqlite3(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dacon_creditcard_overdue.db'</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7">df_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM train'</span>)</span>
<span id="cb1-8">df_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM test'</span>)</span>
<span id="cb1-9">df_sample_submission <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM sample_submission'</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터 나누기</span></span>
<span id="cb1-12">Y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>].copy()</span>
<span id="cb1-13">X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_train.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).copy()</span>
<span id="cb1-14">X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_test.copy()</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 나눠진 데이터 확인</span></span>
<span id="cb1-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""* 전체 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-18"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* x_train : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-19"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* y_train : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Y_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* 전체 : (26457, 20)
* x_train : (26457, 19)
* y_train : (26457,)</code></pre>
</div>
</div>
<ul>
<li>describe()를 활용한 데이터 확인
<ul>
<li>index컬럼은 삭제</li>
<li><strong>unique</strong>와 <strong>top</strong>을 기준으로, <code>gender</code>, <code>income_type</code> 등 컬럼은 범주형 변수로 추측</li>
<li><strong>count</strong>를 기준으로, <code>occyp_type</code>컬럼은 결측치가 많을 것으로 추측</li>
<li><strong>count</strong>대비 <strong>freq</strong>값을 참고하여, <code>house_type</code> 등 컬럼이 편향되어 있음을 추측</li>
</ul></li>
</ul>
<div id="c81d4725" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">X_train.describe(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all'</span>).transpose().reset_index()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">index</th>
<th data-quarto-table-cell-role="th">count</th>
<th data-quarto-table-cell-role="th">unique</th>
<th data-quarto-table-cell-role="th">top</th>
<th data-quarto-table-cell-role="th">freq</th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">std</th>
<th data-quarto-table-cell-role="th">min</th>
<th data-quarto-table-cell-role="th">25%</th>
<th data-quarto-table-cell-role="th">50%</th>
<th data-quarto-table-cell-role="th">75%</th>
<th data-quarto-table-cell-role="th">max</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>index</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>13228.0</td>
<td>7637.622372</td>
<td>0.0</td>
<td>6614.0</td>
<td>13228.0</td>
<td>19842.0</td>
<td>26456.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>gender</td>
<td>26457</td>
<td>2</td>
<td>F</td>
<td>17697</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>car</td>
<td>26457</td>
<td>2</td>
<td>N</td>
<td>16410</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>reality</td>
<td>26457</td>
<td>2</td>
<td>Y</td>
<td>17830</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>child_num</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.428658</td>
<td>0.747326</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>19.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>income_total</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>187306.524493</td>
<td>101878.367995</td>
<td>27000.0</td>
<td>121500.0</td>
<td>157500.0</td>
<td>225000.0</td>
<td>1575000.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>income_type</td>
<td>26457</td>
<td>5</td>
<td>Working</td>
<td>13645</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>edu_type</td>
<td>26457</td>
<td>5</td>
<td>Secondary / secondary special</td>
<td>17995</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>family_type</td>
<td>26457</td>
<td>5</td>
<td>Married</td>
<td>18196</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>house_type</td>
<td>26457</td>
<td>6</td>
<td>House / apartment</td>
<td>23653</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>DAYS_BIRTH</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>-15958.053899</td>
<td>4201.589022</td>
<td>-25152.0</td>
<td>-19431.0</td>
<td>-15547.0</td>
<td>-12446.0</td>
<td>-7705.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>DAYS_EMPLOYED</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>59068.750728</td>
<td>137475.427503</td>
<td>-15713.0</td>
<td>-3153.0</td>
<td>-1539.0</td>
<td>-407.0</td>
<td>365243.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>FLAG_MOBIL</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>work_phone</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.224742</td>
<td>0.41742</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>phone</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.294251</td>
<td>0.455714</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>email</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.09128</td>
<td>0.288013</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>occyp_type</td>
<td>18286</td>
<td>18</td>
<td>Laborers</td>
<td>4512</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>family_size</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>2.196848</td>
<td>0.916717</td>
<td>1.0</td>
<td>2.0</td>
<td>2.0</td>
<td>3.0</td>
<td>20.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">18</td>
<td>begin_month</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>-26.123294</td>
<td>16.55955</td>
<td>-60.0</td>
<td>-39.0</td>
<td>-24.0</td>
<td>-12.0</td>
<td>0.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="결측치-처리-직업유형occyp_type의-결측치는-무직을-의미할까" class="level2">
<h2 class="anchored" data-anchor-id="결측치-처리-직업유형occyp_type의-결측치는-무직을-의미할까">결측치 처리 : 직업유형(occyp_type)의 결측치는 무직을 의미할까?</h2>
<ul>
<li><strong>결측치가 69%에 해당하여 삭제가 아닌 대체</strong>로 진행 필요함</li>
<li>결측치에 <strong>맥락이나 의미</strong>가 있는지에 대한 고민
<ul>
<li><p>직업유형에 ’무직’을 뜻하는 단어가 없음 → None은 무직을 의미하는가?</p>
<pre><code>array([None, 'Laborers', 'Managers', 'Sales staff',
    'High skill tech staff', 'Core staff', 'Drivers', 'Medicine staff',
    'Accountants', 'Realty agents', 'Security staff', 'Cleaning staff',
    'Private service staff', 'Cooking staff', 'Secretaries',
    'HR staff', 'IT staff', 'Low-skill Laborers',
    'Waiters/barmen staff'], dtype=object)</code></pre></li>
<li><p>실제로 직업이 없음을 의미하는 데이터로 검증</p>
<ul>
<li>방법 : DAYS_EMPLOYED(고용일)이 양수인 경우 무직. 이를 대조함
<ul>
<li>직업유형이 None인 값 중, 고용기간이 있는 값과 없는 값이 공존</li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DAYS_EMPLOYED 고용기간 있음</span></span>
<span id="cb5-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(X_train[(X_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>].isna())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>(X_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)])</span>
<span id="cb5-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3733</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DAYS_EMPLOYED 고용기간 없음</span></span>
<span id="cb5-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(X_train[(X_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>].isna())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>(X_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)])</span>
<span id="cb5-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4438</span></span></code></pre></div>
<ul>
<li><strong>고용기간도 없는 경우는 ’NoJob’으로 대체</strong></li>
</ul></li>
</ul></li>
</ul></li>
</ul>
<div id="983ecb41" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결측치 처리 함수</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fill_occyp_type(row):</span>
<span id="cb6-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pd.isna(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>]):</span>
<span id="cb6-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb6-5">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NoJob'</span></span>
<span id="cb6-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>]</span>
<span id="cb6-7"></span>
<span id="cb6-8">X_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(fill_occyp_type, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-9">X_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([None, 'Laborers', 'Managers', 'Sales staff',
       'High skill tech staff', 'Core staff', 'Drivers', 'Medicine staff',
       'Accountants', 'NoJob', 'Realty agents', 'Security staff',
       'Cleaning staff', 'Private service staff', 'Cooking staff',
       'Secretaries', 'HR staff', 'IT staff', 'Low-skill Laborers',
       'Waiters/barmen staff'], dtype=object)</code></pre>
</div>
</div>
</section>
<section id="trainvalidatetest-데이터셋으로-정리" class="level2">
<h2 class="anchored" data-anchor-id="trainvalidatetest-데이터셋으로-정리">train/validate/test 데이터셋으로 정리</h2>
<div id="deaf5cbb" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># index컬럼 삭제</span></span>
<span id="cb8-4">X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>])</span>
<span id="cb8-5">X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_test.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>])</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터 분할</span></span>
<span id="cb8-8">x_train, x_validate, y_train, y_validate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X_train, Y_train, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, stratify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Y_train)</span></code></pre></div>
</div>
</section>
<section id="빠른-처리를-위한-gpu설정" class="level2">
<h2 class="anchored" data-anchor-id="빠른-처리를-위한-gpu설정">빠른 처리를 위한 GPU설정</h2>
<ul>
<li>CUDA 설치 : https://developer.nvidia.com/cuda-downloads?target_os=Windows&amp;target_arch=x86_64&amp;target_version=11&amp;target_type=exe_local</li>
<li>CUDA버전 확인 : 12.1</li>
<li>CUDA버전에 맞는, GPU지원되는 torch버전으로 설치</li>
</ul>
<div id="a6d3c503" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>nvcc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>version</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2025 NVIDIA Corporation
Built on Wed_Jan_15_19:38:46_Pacific_Standard_Time_2025
Cuda compilation tools, release 12.8, V12.8.61
Build cuda_12.8.r12.8/compiler.35404655_0</code></pre>
</div>
</div>
<div id="a66df11a" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 설치된 torch버전을 확인해, torch.version.cuda가 None인 경우 CUDA지원버전으로 torch 재설치</span></span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># torch가 GPU지원버전인지 확인(+cu121)</span></span>
<span id="cb11-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(torch.__version__)</span>
<span id="cb11-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(torch.version.cuda)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CUDA 버전 확인 (None이면 GPU 미지원 버전)</span></span>
<span id="cb11-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(torch.cuda.is_available())  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># False면 GPU 미지원</span></span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 사용가능한 GPU확인</span></span>
<span id="cb11-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(torch.cuda.device_count())  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 사용 가능한 GPU 개수</span></span>
<span id="cb11-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(torch.cuda.get_device_name(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 첫 번째 GPU 이름</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2.5.1+cu121
12.1
True
1
NVIDIA GeForce RTX 2060 SUPER</code></pre>
</div>
</div>
</section>
<section id="평가-metric-설정" class="level2">
<h2 class="anchored" data-anchor-id="평가-metric-설정">평가 Metric 설정</h2>
<ul>
<li>대회 규정에 맞춰 <code>Logloss</code>를 primary metric으로 설정</li>
<li>데이터를 좀 더 용이하게 파악하고, 소통 등의 이점을 위해 보조 지표 설정
<ul>
<li>balance accuracy, weighted f1-score, roc_auc</li>
</ul></li>
</ul>
</section>
<section id="autogluon-활용한-베이스-모델" class="level2">
<h2 class="anchored" data-anchor-id="autogluon-활용한-베이스-모델">Autogluon 활용한 베이스 모델</h2>
<div id="098e0305" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> autogluon.tabular <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TabularPredictor</span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> f1_score</span>
<span id="cb13-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb13-4"></span>
<span id="cb13-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 저장할 경로 지정</span></span>
<span id="cb13-6">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'autogluon_1basemodel'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 저장할 경로</span></span>
<span id="cb13-7"></span>
<span id="cb13-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Autogluon이 지원하지 않는 metric함수 설정(logloss로 평가예정으로 여기서는 미사용)</span></span>
<span id="cb13-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> weighted_f1_autogluon(y_true, y_pred_proba):</span>
<span id="cb13-10">    y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.argmax(y_pred_proba, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> f1_score(y_true, y_pred, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'weighted'</span>)</span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AutoGluon을 위해 데이터프레임으로 병합</span></span>
<span id="cb13-14">train_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train</span>
<span id="cb13-15">train_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train</span>
<span id="cb13-16"></span>
<span id="cb13-17">val_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_validate</span>
<span id="cb13-18">val_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_validate</span>
<span id="cb13-19"></span>
<span id="cb13-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AutoGluon 학습</span></span>
<span id="cb13-21">predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TabularPredictor(</span>
<span id="cb13-22">    label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>, </span>
<span id="cb13-23">    problem_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'multiclass'</span>, </span>
<span id="cb13-24">    eval_metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log_loss'</span>, </span>
<span id="cb13-25">    verbosity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb13-26">    path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>path</span>
<span id="cb13-27">)</span>
<span id="cb13-28">predictor.fit(</span>
<span id="cb13-29">    train_data,</span>
<span id="cb13-30">    tuning_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>val_data,</span>
<span id="cb13-31">    time_limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3600</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시간 제한 설정 (1시간)</span></span>
<span id="cb13-32">    num_gpus<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb13-33">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: path already exists! This predictor may overwrite an existing predictor! path="autogluon_1basemodel"
Verbosity: 2 (Standard Logging)
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.12.8
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          8
Memory Avail:       5.73 GB / 15.94 GB (35.9%)
Disk Space Avail:   504.61 GB / 931.51 GB (54.2%)
===================================================
No presets specified! To achieve strong results with AutoGluon, it is recommended to use the available presets. Defaulting to `'medium'`...
    Recommended Presets (For more details refer to https://auto.gluon.ai/stable/tutorials/tabular/tabular-essentials.html#presets):
    presets='experimental' : New in v1.2: Pre-trained foundation model + parallel fits. The absolute best accuracy without consideration for inference speed. Does not support GPU.
    presets='best'         : Maximize accuracy. Recommended for most users. Use in competitions and benchmarks.
    presets='high'         : Strong accuracy with fast inference speed.
    presets='good'         : Good accuracy with very fast inference speed.
    presets='medium'       : Fast training time, ideal for initial prototyping.
Beginning AutoGluon training ... Time limit = 3600s
AutoGluon will save models to "e:\0_Backup\14.Python\metacode_202412_study_creditmodeling\autogluon_1basemodel"
Train Data Rows:    18519
Train Data Columns: 18
Tuning Data Rows:    7938
Tuning Data Columns: 18
Label Column:       target
Problem Type:       multiclass
Preprocessing data ...
Train Data Class Count: 3
Using Feature Generators to preprocess the data ...
Fitting AutoMLPipelineFeatureGenerator...
    Available Memory:                    5876.50 MB
    Train Data (Original)  Memory Usage: 13.65 MB (0.2% of available memory)
    Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
    Stage 1 Generators:
        Fitting AsTypeFeatureGenerator...
            Note: Converting 6 features to boolean dtype as they only contain 2 unique values.
    Stage 2 Generators:
        Fitting FillNaFeatureGenerator...
    Stage 3 Generators:
        Fitting IdentityFeatureGenerator...
        Fitting CategoryFeatureGenerator...
            Fitting CategoryMemoryMinimizeFeatureGenerator...
    Stage 4 Generators:
        Fitting DropUniqueFeatureGenerator...
    Stage 5 Generators:
        Fitting DropDuplicatesFeatureGenerator...
    Useless Original Features (Count: 1): ['FLAG_MOBIL']
        These features carry no predictive signal and should be manually investigated.
        This is typically a feature which has the same value for all rows.
        These features do not need to be present at inference time.
    Types of features in original data (raw dtype, special dtypes):
        ('float', [])  : 3 | ['income_total', 'family_size', 'begin_month']
        ('int', [])    : 6 | ['child_num', 'DAYS_BIRTH', 'DAYS_EMPLOYED', 'work_phone', 'phone', ...]
        ('object', []) : 8 | ['gender', 'car', 'reality', 'income_type', 'edu_type', ...]
    Types of features in processed data (raw dtype, special dtypes):
        ('category', [])  : 5 | ['income_type', 'edu_type', 'family_type', 'house_type', 'occyp_type']
        ('float', [])     : 3 | ['income_total', 'family_size', 'begin_month']
        ('int', [])       : 3 | ['child_num', 'DAYS_BIRTH', 'DAYS_EMPLOYED']
        ('int', ['bool']) : 6 | ['gender', 'car', 'reality', 'work_phone', 'phone', ...]
    0.4s = Fit runtime
    17 features in original data used to generate 17 features in processed data.
    Train Data (Processed) Memory Usage: 1.49 MB (0.0% of available memory)
Data preprocessing and feature engineering runtime = 0.44s ...
AutoGluon will gauge predictive performance using evaluation metric: 'log_loss'
    This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
    This metric expects predicted probabilities rather than predicted class labels, so you'll need to use predict_proba() instead of predict()
    To change this, specify the eval_metric parameter of Predictor()
User-specified model hyperparameters to be fit:
{
    'NN_TORCH': [{}],
    'GBM': [{'extra_trees': True, 'ag_args': {'name_suffix': 'XT'}}, {}, {'learning_rate': 0.03, 'num_leaves': 128, 'feature_fraction': 0.9, 'min_data_in_leaf': 3, 'ag_args': {'name_suffix': 'Large', 'priority': 0, 'hyperparameter_tune_kwargs': None}}],
    'CAT': [{}],
    'XGB': [{}],
    'FASTAI': [{}],
    'RF': [{'criterion': 'gini', 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],
    'XT': [{'criterion': 'gini', 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],
    'KNN': [{'weights': 'uniform', 'ag_args': {'name_suffix': 'Unif'}}, {'weights': 'distance', 'ag_args': {'name_suffix': 'Dist'}}],
}
Fitting 13 L1 models, fit_strategy="sequential" ...
Fitting model: KNeighborsUnif ... Training model for up to 3599.56s of the 3599.55s of remaining time.
    -2.1126  = Validation score   (-log_loss)
    0.04s    = Training   runtime
    0.06s    = Validation runtime
Fitting model: KNeighborsDist ... Training model for up to 3599.42s of the 3599.42s of remaining time.
    -2.5663  = Validation score   (-log_loss)
    0.05s    = Training   runtime
    0.05s    = Validation runtime
Fitting model: NeuralNetFastAI ... Training model for up to 3599.30s of the 3599.29s of remaining time.
    -0.8157  = Validation score   (-log_loss)
    29.12s   = Training   runtime
    0.11s    = Validation runtime
Fitting model: LightGBMXT ... Training model for up to 3570.04s of the 3570.03s of remaining time.
    Training LightGBMXT with GPU, note that this may negatively impact model quality compared to CPU training.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>[1000]  valid_set's multi_logloss: 0.760515</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>    -0.7594  = Validation score   (-log_loss)
    25.16s   = Training   runtime
    0.22s    = Validation runtime
Fitting model: LightGBM ... Training model for up to 3544.53s of the 3544.52s of remaining time.
    Training LightGBM with GPU, note that this may negatively impact model quality compared to CPU training.
    -0.7514  = Validation score   (-log_loss)
    11.64s   = Training   runtime
    0.09s    = Validation runtime
Fitting model: RandomForestGini ... Training model for up to 3532.74s of the 3532.74s of remaining time.
    -0.7675  = Validation score   (-log_loss)
    1.74s    = Training   runtime
    0.1s     = Validation runtime
Fitting model: RandomForestEntr ... Training model for up to 3530.57s of the 3530.56s of remaining time.
    -0.7735  = Validation score   (-log_loss)
    1.94s    = Training   runtime
    0.1s     = Validation runtime
Fitting model: CatBoost ... Training model for up to 3528.25s of the 3528.24s of remaining time.
    Training CatBoost with GPU, note that this may negatively impact model quality compared to CPU training.
    Warning: CatBoost on GPU is experimental. If you encounter issues, use CPU for training CatBoost instead.
    -0.7615  = Validation score   (-log_loss)
    26.21s   = Training   runtime
    0.03s    = Validation runtime
Fitting model: ExtraTreesGini ... Training model for up to 3501.99s of the 3501.99s of remaining time.
    -0.7841  = Validation score   (-log_loss)
    1.15s    = Training   runtime
    0.12s    = Validation runtime
Fitting model: ExtraTreesEntr ... Training model for up to 3500.37s of the 3500.37s of remaining time.
    -0.7812  = Validation score   (-log_loss)
    1.14s    = Training   runtime
    0.1s     = Validation runtime
Fitting model: XGBoost ... Training model for up to 3482.78s of the 3482.78s of remaining time.
e:\0_Backup\14.Python\metacode_202412_study_creditmodeling\.venv\Lib\site-packages\xgboost\core.py:158: UserWarning: [02:32:39] WARNING: C:\buildkite-agent\builds\buildkite-windows-cpu-autoscaling-group-i-0c55ff5f71b100e98-1\xgboost\xgboost-ci-windows\src\common\error_msg.cc:27: The tree method `gpu_hist` is deprecated since 2.0.0. To use GPU training, set the `device` parameter to CUDA instead.

    E.g. tree_method = "hist", device = "cuda"

  warnings.warn(smsg, UserWarning)
e:\0_Backup\14.Python\metacode_202412_study_creditmodeling\.venv\Lib\site-packages\xgboost\core.py:158: UserWarning: [02:32:44] WARNING: C:\buildkite-agent\builds\buildkite-windows-cpu-autoscaling-group-i-0c55ff5f71b100e98-1\xgboost\xgboost-ci-windows\src\common\error_msg.cc:27: The tree method `gpu_hist` is deprecated since 2.0.0. To use GPU training, set the `device` parameter to CUDA instead.

    E.g. tree_method = "hist", device = "cuda"

  warnings.warn(smsg, UserWarning)
    -0.7579  = Validation score   (-log_loss)
    5.54s    = Training   runtime
    0.04s    = Validation runtime
Fitting model: NeuralNetTorch ... Training model for up to 3477.17s of the 3477.17s of remaining time.
    -0.8183  = Validation score   (-log_loss)
    36.99s   = Training   runtime
    0.04s    = Validation runtime
Fitting model: LightGBMLarge ... Training model for up to 3440.13s of the 3440.13s of remaining time.
    Training LightGBMLarge with GPU, note that this may negatively impact model quality compared to CPU training.
    -0.7414  = Validation score   (-log_loss)
    39.25s   = Training   runtime
    0.12s    = Validation runtime
Fitting model: WeightedEnsemble_L2 ... Training model for up to 360.00s of the 3400.63s of remaining time.
    Ensemble Weights: {'RandomForestGini': 0.32, 'LightGBM': 0.2, 'KNeighborsDist': 0.12, 'CatBoost': 0.12, 'LightGBMLarge': 0.12, 'NeuralNetTorch': 0.08, 'XGBoost': 0.04}
    -0.7193  = Validation score   (-log_loss)
    0.67s    = Training   runtime
    0.0s     = Validation runtime
AutoGluon training complete, total runtime = 200.09s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 16983.3 rows/s (7938 batch size)
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("e:\0_Backup\14.Python\metacode_202412_study_creditmodeling\autogluon_1basemodel")</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>&lt;autogluon.tabular.predictor.predictor.TabularPredictor at 0x2543c01fec0&gt;</code></pre>
</div>
</div>
<div id="9d299941" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 단순 참고용</span></span>
<span id="cb18-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score, log_loss, confusion_matrix</span>
<span id="cb18-3"></span>
<span id="cb18-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 예측 및 평가</span></span>
<span id="cb18-5">test_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_validate</span>
<span id="cb18-6">test_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_validate</span>
<span id="cb18-7"></span>
<span id="cb18-8">y_pred_proba_ag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor.predict_proba(test_data)</span>
<span id="cb18-9">y_pred_ag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor.predict(test_data)</span>
<span id="cb18-10"></span>
<span id="cb18-11">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor.predict(test_data)</span>
<span id="cb18-12">y_proba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor.predict_proba(test_data)</span>
<span id="cb18-13">accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(test_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>], y_pred)</span>
<span id="cb18-14">logloss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_loss(test_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>], y_proba)</span>
<span id="cb18-15">cf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(test_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>], y_pred)</span></code></pre></div>
</div>
<div id="b7e8987a" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">predictor.leaderboard(x_validate, extra_metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'balanced_accuracy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f1_weighted'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'roc_auc_ovr_weighted'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">model</th>
<th data-quarto-table-cell-role="th">score_test</th>
<th data-quarto-table-cell-role="th">balanced_accuracy</th>
<th data-quarto-table-cell-role="th">f1_weighted</th>
<th data-quarto-table-cell-role="th">roc_auc_ovr_weighted</th>
<th data-quarto-table-cell-role="th">score_val</th>
<th data-quarto-table-cell-role="th">eval_metric</th>
<th data-quarto-table-cell-role="th">pred_time_test</th>
<th data-quarto-table-cell-role="th">pred_time_val</th>
<th data-quarto-table-cell-role="th">fit_time</th>
<th data-quarto-table-cell-role="th">pred_time_test_marginal</th>
<th data-quarto-table-cell-role="th">pred_time_val_marginal</th>
<th data-quarto-table-cell-role="th">fit_time_marginal</th>
<th data-quarto-table-cell-role="th">stack_level</th>
<th data-quarto-table-cell-role="th">can_infer</th>
<th data-quarto-table-cell-role="th">fit_order</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>WeightedEnsemble_L2</td>
<td>-0.719272</td>
<td>0.506493</td>
<td>0.679734</td>
<td>0.759321</td>
<td>-0.719287</td>
<td>log_loss</td>
<td>1.010035</td>
<td>0.467401</td>
<td>122.088188</td>
<td>0.006076</td>
<td>0.001995</td>
<td>0.671924</td>
<td>2</td>
<td>True</td>
<td>14</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>LightGBMLarge</td>
<td>-0.741424</td>
<td>0.473018</td>
<td>0.658814</td>
<td>0.734866</td>
<td>-0.741424</td>
<td>log_loss</td>
<td>0.145274</td>
<td>0.116242</td>
<td>39.248754</td>
<td>0.145274</td>
<td>0.116242</td>
<td>39.248754</td>
<td>1</td>
<td>True</td>
<td>13</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>LightGBM</td>
<td>-0.751353</td>
<td>0.453062</td>
<td>0.644461</td>
<td>0.723493</td>
<td>-0.751353</td>
<td>log_loss</td>
<td>0.158483</td>
<td>0.090607</td>
<td>11.635407</td>
<td>0.158483</td>
<td>0.090607</td>
<td>11.635407</td>
<td>1</td>
<td>True</td>
<td>5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>XGBoost</td>
<td>-0.757927</td>
<td>0.465824</td>
<td>0.651667</td>
<td>0.720750</td>
<td>-0.757927</td>
<td>log_loss</td>
<td>0.178037</td>
<td>0.036000</td>
<td>5.536725</td>
<td>0.178037</td>
<td>0.036000</td>
<td>5.536725</td>
<td>1</td>
<td>True</td>
<td>11</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>LightGBMXT</td>
<td>-0.759434</td>
<td>0.459947</td>
<td>0.645968</td>
<td>0.718343</td>
<td>-0.759434</td>
<td>log_loss</td>
<td>0.324177</td>
<td>0.224359</td>
<td>25.162158</td>
<td>0.324177</td>
<td>0.224359</td>
<td>25.162158</td>
<td>1</td>
<td>True</td>
<td>4</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>CatBoost</td>
<td>-0.761541</td>
<td>0.439993</td>
<td>0.633287</td>
<td>0.713087</td>
<td>-0.761541</td>
<td>log_loss</td>
<td>0.074158</td>
<td>0.026571</td>
<td>26.207678</td>
<td>0.074158</td>
<td>0.026571</td>
<td>26.207678</td>
<td>1</td>
<td>True</td>
<td>8</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>RandomForestGini</td>
<td>-0.767504</td>
<td>0.534628</td>
<td>0.685285</td>
<td>0.752369</td>
<td>-0.767504</td>
<td>log_loss</td>
<td>0.331259</td>
<td>0.102593</td>
<td>1.737886</td>
<td>0.331259</td>
<td>0.102593</td>
<td>1.737886</td>
<td>1</td>
<td>True</td>
<td>6</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>RandomForestEntr</td>
<td>-0.773531</td>
<td>0.532764</td>
<td>0.684485</td>
<td>0.752317</td>
<td>-0.773531</td>
<td>log_loss</td>
<td>0.299343</td>
<td>0.100369</td>
<td>1.936155</td>
<td>0.299343</td>
<td>0.100369</td>
<td>1.936155</td>
<td>1</td>
<td>True</td>
<td>7</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>ExtraTreesEntr</td>
<td>-0.781154</td>
<td>0.514000</td>
<td>0.672208</td>
<td>0.737642</td>
<td>-0.781154</td>
<td>log_loss</td>
<td>0.451465</td>
<td>0.101042</td>
<td>1.143195</td>
<td>0.451465</td>
<td>0.101042</td>
<td>1.143195</td>
<td>1</td>
<td>True</td>
<td>10</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>ExtraTreesGini</td>
<td>-0.784103</td>
<td>0.515487</td>
<td>0.674453</td>
<td>0.736337</td>
<td>-0.784103</td>
<td>log_loss</td>
<td>0.368600</td>
<td>0.121832</td>
<td>1.149729</td>
<td>0.368600</td>
<td>0.121832</td>
<td>1.149729</td>
<td>1</td>
<td>True</td>
<td>9</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>NeuralNetFastAI</td>
<td>-0.815732</td>
<td>0.439552</td>
<td>0.628491</td>
<td>0.674919</td>
<td>-0.815732</td>
<td>log_loss</td>
<td>0.096067</td>
<td>0.113365</td>
<td>29.115618</td>
<td>0.096067</td>
<td>0.113365</td>
<td>29.115618</td>
<td>1</td>
<td>True</td>
<td>3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>NeuralNetTorch</td>
<td>-0.818329</td>
<td>0.411790</td>
<td>0.606342</td>
<td>0.648959</td>
<td>-0.818329</td>
<td>log_loss</td>
<td>0.063465</td>
<td>0.040002</td>
<td>36.994816</td>
<td>0.063465</td>
<td>0.040002</td>
<td>36.994816</td>
<td>1</td>
<td>True</td>
<td>12</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>KNeighborsUnif</td>
<td>-2.112598</td>
<td>0.473339</td>
<td>0.607854</td>
<td>0.666518</td>
<td>-2.112598</td>
<td>log_loss</td>
<td>0.036525</td>
<td>0.056145</td>
<td>0.042302</td>
<td>0.036525</td>
<td>0.056145</td>
<td>0.042302</td>
<td>1</td>
<td>True</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>KNeighborsDist</td>
<td>-2.566280</td>
<td>0.530617</td>
<td>0.647806</td>
<td>0.697774</td>
<td>-2.566280</td>
<td>log_loss</td>
<td>0.053282</td>
<td>0.053392</td>
<td>0.054998</td>
<td>0.053282</td>
<td>0.053392</td>
<td>0.054998</td>
<td>1</td>
<td>True</td>
<td>2</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="xaishap를-통한-데이터-확인-및-불필요한-변수-제거" class="level2">
<h2 class="anchored" data-anchor-id="xaishap를-통한-데이터-확인-및-불필요한-변수-제거">XAI(SHAP)를 통한 데이터 확인 및 불필요한 변수 제거</h2>
<ul>
<li>WeightedEnsemble_L2모델은 KernelExplainer 실행시 76~79시간 소요 예상</li>
<li>데이터의 확인과 변수를 걸러낼 용도이므로, 빠르게 가능하면서 2번째로 성능이 좋았던 모델로 SHAP 확인
<ul>
<li>X_train을 넣엇으나, 데이터구성이 다르다는 오류 발생 (autogluon이 제거했던 feature가 있었음)
<ul>
<li>확인해보니 휴대폰 소유여부로, 요즘 시대에 중요한 변수는 아닐 것 같은 생각이 들어 제외하기로 함</li>
</ul>
<pre><code>set(X_train) - set(model.feature_name())
&gt;&gt;&gt; {'FLAG_MOBIL'}</code></pre></li>
</ul></li>
</ul>
<div id="9bf74a92" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb21-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> shap</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># FLAG_MOBIL 드랍</span></span>
<span id="cb21-5">X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FLAG_MOBIL'</span>)</span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Autogluon의 모델 가져오기</span></span>
<span id="cb21-8">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor._trainer.load_model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LightGBMLarge"</span>).model</span>
<span id="cb21-9"></span>
<span id="cb21-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SHAP계산을 위해 Autogluon의 피쳐형태와 동일하게 만들기</span></span>
<span id="cb21-11">X_train_transformed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor.transform_features(X_train)</span>
<span id="cb21-12"></span>
<span id="cb21-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explainer를 활용한 SHAP 계산</span></span>
<span id="cb21-14">explainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shap.TreeExplainer(model)</span>
<span id="cb21-15">shap_values_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> explainer.shap_values(X_train_transformed)</span>
<span id="cb21-16"></span>
<span id="cb21-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 SHAP값의 절대값의 평균으로 Feature Importance 구하기</span></span>
<span id="cb21-18">shap_values_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(shap_values_train), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (35,) 크기</span></span>
<span id="cb21-19"></span>
<span id="cb21-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""SHAP value의 Shape              : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>shap_values_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb21-21"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">SHAP Feature Importance의 Shape : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>shap_values_mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>SHAP value의 Shape              : (26457, 17, 3)
SHAP Feature Importance의 Shape : (17,)</code></pre>
</div>
</div>
<ul>
<li>Feature importance 확인
<ul>
<li>소득이나 교육수준 등 일반적으로 영향을 미칠것으로 보이는 feature들이 상위에 보임</li>
<li>importance가 0인 경우는 없어, 현재 상황에서 feature삭제는 별도로 하지 않음
<ul>
<li>지난 실습때는 전체fit &amp; SHAP importance산출 후 0이었던 FLAG_MOBIL을 직접 삭제</li>
<li>이번에는 autogluon을 통해 영향없는 feature로 자동 제외됨</li>
</ul></li>
</ul></li>
</ul>
<div id="00c47146" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb23-2"></span>
<span id="cb23-3">feature_importance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb23-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Feature'</span>: [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>columns[i]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(shap_values_mean.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])],</span>
<span id="cb23-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Importance'</span>: shap_values_mean</span>
<span id="cb23-6">}).sort_values(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Importance'</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb23-7"></span>
<span id="cb23-8">feature_importance</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Feature</th>
<th data-quarto-table-cell-role="th">Importance</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">11</td>
<td>work_phone</td>
<td>0.309656</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>income_type</td>
<td>0.126218</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>edu_type</td>
<td>0.093286</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4</td>
<td>income_total</td>
<td>0.087204</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>begin_month</td>
<td>0.083925</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">12</td>
<td>phone</td>
<td>0.029627</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">13</td>
<td>email</td>
<td>0.021359</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">14</td>
<td>occyp_type</td>
<td>0.020650</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">3</td>
<td>child_num</td>
<td>0.019754</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">10</td>
<td>DAYS_EMPLOYED</td>
<td>0.018939</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>house_type</td>
<td>0.017252</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>family_type</td>
<td>0.014357</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>reality</td>
<td>0.014261</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>DAYS_BIRTH</td>
<td>0.012142</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1</td>
<td>car</td>
<td>0.011479</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">0</td>
<td>gender</td>
<td>0.010771</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">15</td>
<td>family_size</td>
<td>0.008313</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<ul>
<li>신용도 높음(0)과 낮음(2)에 대해서 SHAP Summary plot 시각화
<ul>
<li>회색은 영향도가 낮은 값이라고 하며, 해당하는 값인 소득수준 등이 제외할 정도로 무의미한 값으로는 판단되지 않아 삭제는 하지 않음</li>
<li>전반적으로 섞여있거나 유의미하게 특징적인 부분은 발견하지 못함</li>
</ul></li>
</ul>
<div id="c773beca" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb24-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> shap</span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 글꼴 크기 조정</span></span>
<span id="cb24-5">plt.rcParams.update({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'font.size'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>})</span>
<span id="cb24-6"></span>
<span id="cb24-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그림 생성 및 크기 설정 (2개의 서브플롯)</span></span>
<span id="cb24-8">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb24-9"></span>
<span id="cb24-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Class 0에 대한 SHAP 값 시각화</span></span>
<span id="cb24-11">plt.sca(axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb24-12">shap.summary_plot(</span>
<span id="cb24-13">    shap_values_train[:, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb24-14">    X_train_transformed,</span>
<span id="cb24-15">    feature_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>X_train_transformed.columns,</span>
<span id="cb24-16">    plot_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dot"</span>,</span>
<span id="cb24-17">    show<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb24-18">    title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Class 0"</span></span>
<span id="cb24-19">)</span>
<span id="cb24-20">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SHAP value"</span>)</span>
<span id="cb24-21"></span>
<span id="cb24-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Class 2에 대한 SHAP 값 시각화</span></span>
<span id="cb24-23">plt.sca(axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb24-24">shap.summary_plot(</span>
<span id="cb24-25">    shap_values_train[:, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb24-26">    X_train_transformed,</span>
<span id="cb24-27">    feature_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>X_train_transformed.columns,</span>
<span id="cb24-28">    plot_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dot"</span>,</span>
<span id="cb24-29">    show<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb24-30">    title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Class 2"</span></span>
<span id="cb24-31">)</span>
<span id="cb24-32">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SHAP value"</span>)</span>
<span id="cb24-33"></span>
<span id="cb24-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 그림 제목 설정</span></span>
<span id="cb24-35">plt.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SHAP Summary Plots for Classes 0 and 2"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb24-36"></span>
<span id="cb24-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그림 간격 조정</span></span>
<span id="cb24-38">plt.tight_layout()</span>
<span id="cb24-39"></span>
<span id="cb24-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그림 표시</span></span>
<span id="cb24-41">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250202/index_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="데이터-전처리를-위한-추가-eda" class="level2">
<h2 class="anchored" data-anchor-id="데이터-전처리를-위한-추가-eda">데이터 전처리를 위한 추가 EDA</h2>
<section id="수치형-변수의-eda-및-전처리-방향" class="level3">
<h3 class="anchored" data-anchor-id="수치형-변수의-eda-및-전처리-방향">수치형 변수의 EDA 및 전처리 방향</h3>
<ul>
<li>유무(0,1)만을 나타내는 값은 별도로 처리하지 않음 : <code>work_phone</code>, <code>phone</code>, <code>email</code></li>
<li>음수변수는 최소값 조정 : <code>DAYS_BIRTH</code>, <code>DAYS_EMPLOYED</code>, <code>begin_month</code></li>
<li>왜도/첨도/이상치 확인에 따라 추가적인 조정 : <code>DAYS_BIRTH</code>, <code>DAYS_EMPLOYED</code>, <code>begin_month</code>, <code>child_num</code>, <code>income_total</code>, <code>family_size</code>
<ul>
<li>왜도가 크고, IQR기준 이상치를 보유한 3개 변수에 대해 로그변환 진행 : <code>child_num</code>, <code>income_total</code>, <code>DAYS_EMPLOYED</code></li>
<li>타 변수 대비 값의 규모(천~만 단위)가 달라 발생할 수 있는 문제를 방지하고자 정규화(Min-Max) : <code>DAYS_BIRTH</code></li>
</ul></li>
</ul>
<div id="b9474db4" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 수치형 변수 추출</span></span>
<span id="cb25-2">x_numerical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train.select_dtypes(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'float64'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int64'</span>])</span></code></pre></div>
</div>
<ul>
<li>전반적인 시각화 및 왜도/첨도 확인
<ul>
<li>왜도가 큰 3개 변수 : <code>child_num</code>, <code>income_total</code>, <code>DAYS_EMPLOYED</code></li>
</ul></li>
</ul>
<div id="4f0428b1" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 왜도/첨도 분석</span></span>
<span id="cb26-2">df_to_analyze <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child_num'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_total'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family_size'</span>]]</span>
<span id="cb26-3"></span>
<span id="cb26-4">numeric_skew <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_to_analyze.skew().reset_index().rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'왜도'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'feature_s'</span>}).sort_values(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'왜도'</span>)</span>
<span id="cb26-5">numeric_kurt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_to_analyze.kurtosis().reset_index().rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'첨도'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'feature_k'</span>}).sort_values(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'첨도'</span>)</span>
<span id="cb26-6"></span>
<span id="cb26-7">pd.concat([numeric_skew.reset_index(), numeric_kurt.reset_index()], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'feature_s'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'왜도'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'feature_k'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'첨도'</span>]]</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">feature_s</th>
<th data-quarto-table-cell-role="th">왜도</th>
<th data-quarto-table-cell-role="th">feature_k</th>
<th data-quarto-table-cell-role="th">첨도</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>begin_month</td>
<td>-0.290050</td>
<td>DAYS_BIRTH</td>
<td>-1.046188</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>DAYS_BIRTH</td>
<td>-0.185986</td>
<td>begin_month</td>
<td>-1.041906</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>family_size</td>
<td>1.431759</td>
<td>DAYS_EMPLOYED</td>
<td>1.161734</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>DAYS_EMPLOYED</td>
<td>1.777596</td>
<td>family_size</td>
<td>10.578051</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>income_total</td>
<td>2.659271</td>
<td>income_total</td>
<td>16.359621</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>child_num</td>
<td>2.852376</td>
<td>child_num</td>
<td>29.172394</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="42fc5607" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 히스토그램 시각화를 통한 확인</span></span>
<span id="cb27-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb27-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb27-4"></span>
<span id="cb27-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시각화 대상</span></span>
<span id="cb27-6">columns_to_visualize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child_num'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_total'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family_size'</span>]</span>
<span id="cb27-7">df_to_visualize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_numerical[columns_to_visualize]</span>
<span id="cb27-8"></span>
<span id="cb27-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 설정: 가로 그래프 개수</span></span>
<span id="cb27-10">cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb27-11">num_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(columns_to_visualize)</span>
<span id="cb27-12">rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.ceil(num_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cols)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 필요한 행(row) 수 계산</span></span>
<span id="cb27-13"></span>
<span id="cb27-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 서브플롯 생성</span></span>
<span id="cb27-15">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(rows, cols, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 figure 크기 조정</span></span>
<span id="cb27-16">axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes.flatten()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2D 배열을 1D로 변환하여 인덱싱 편리하게</span></span>
<span id="cb27-17"></span>
<span id="cb27-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그래프 그리기</span></span>
<span id="cb27-19"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> var_idx, var_nm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(columns_to_visualize):</span>
<span id="cb27-20">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[var_idx]</span>
<span id="cb27-21">    ax.hist(df_to_visualize.iloc[:, var_idx], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>)</span>
<span id="cb27-22">    ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>var_nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb27-23"></span>
<span id="cb27-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 빈 서브플롯 숨기기</span></span>
<span id="cb27-25"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_vars, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(axes)):</span>
<span id="cb27-26">    axes[i].axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb27-27"></span>
<span id="cb27-28">plt.tight_layout()</span>
<span id="cb27-29">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250202/index_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>이상치 확인
<ul>
<li><code>DAYS_EMPLOYED</code>의 경우 365243값에 3천여개가 모여있으며, 양수인 경우 무직임을 표현하므로 1로 변경을 고려했으나, 모델에 확실히 다른 값임을 알리기 위해 변환하지 않음</li>
<li>나머지 변수는 이상치의 적정 수준과 판단이 어려워 별도로 처리하지 않음
<ul>
<li>IQR기준으로 판단된 이상치가 실제 이상치로 봐야할지에 대한 부분이 모호</li>
<li><code>child_num</code> : 자녀가 19명인 경우는 확실히 이상치라는 느낌이지만, 몇명부터 이상치로 봐야할지 판단 어려움</li>
<li><code>family_size</code> : 가족구성원도 시대상에 따라 평균치가 감소할 순 있겠으나, 이상치의 기준선이 모호함</li>
</ul></li>
</ul></li>
</ul>
<div id="3bfd7920" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># IQR기준 이상치</span></span>
<span id="cb28-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> summarize_unique_outliers(x_numerical, x_outliers):</span>
<span id="cb28-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 각 컬럼별로 이상치의 고유값을 추출하여 딕셔너리로 저장</span></span>
<span id="cb28-4">    unique_outliers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_numerical[x_outliers].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> col: col.unique().tolist())</span>
<span id="cb28-5"></span>
<span id="cb28-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 딕셔너리 형태로 반환</span></span>
<span id="cb28-7">    unique_outliers_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unique_outliers.to_dict()</span>
<span id="cb28-8"></span>
<span id="cb28-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> unique_outliers_dict</span>
<span id="cb28-10"></span>
<span id="cb28-11">unique_outliers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summarize_unique_outliers(x_numerical, x_outliers)</span>
<span id="cb28-12"></span>
<span id="cb28-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""* 이상치로 판명된 Unique값 현황</span></span>
<span id="cb28-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">child_num : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>unique_outliers[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child_num'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb28-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">income_total : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>unique_outliers[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_total'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb28-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">DAYS_EMPLOYED : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>unique_outliers[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb28-17"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">family_size : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>unique_outliers[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family_size'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* 이상치로 판명된 Unique값 현황
child_num : [nan, 3.0, 4.0, 5.0, 14.0, 19.0, 7.0]
income_total : [nan, 450000.0, 405000.0, 585000.0, 495000.0, 540000.0, 459000.0, 720000.0, 382500.0, 427500.0, 562500.0, 630000.0, 432000.0, 391500.0, 675000.0, 612000.0, 1575000.0, 652500.0, 387000.0, 945000.0, 418500.0, 634500.0, 423000.0, 517500.0, 900000.0, 560250.0, 445500.0, 616500.0, 765000.0, 396000.0, 472500.0, 594000.0, 810000.0, 468000.0, 661500.0, 716323.5, 787500.0, 990000.0, 494100.0, 441000.0, 531000.0, 607500.0, 742500.0, 697500.0, 1125000.0, 414000.0, 1350000.0]
DAYS_EMPLOYED : [nan, 365243.0, -9391.0, -9404.0, -12332.0, -9988.0, -11940.0, -8091.0, -9957.0, -7310.0, -11062.0, -7514.0, -8671.0, -10121.0, -12278.0, -7415.0, -8553.0, -7593.0, -7401.0, -9683.0, -7346.0, -9925.0, -7379.0, -8375.0, -7536.0, -10600.0, -7851.0, -9575.0, -9255.0, -8298.0, -8163.0, -12179.0, -13245.0, -9258.0, -8100.0, -10384.0, -10821.0, -8538.0, -8772.0, -9359.0, -15072.0, -7733.0, -7979.0, -7471.0, -11951.0, -8412.0, -7824.0, -11589.0, -12169.0, -7840.0, -8022.0, -8316.0, -9485.0, -7624.0, -10149.0, -8953.0, -11451.0, -10454.0, -9479.0, -11183.0, -9870.0, -10079.0, -8109.0, -8684.0, -7465.0, -11157.0, -11083.0, -9269.0, -15038.0, -8643.0, -7371.0, -10094.0, -8479.0, -10290.0, -7734.0, -8469.0, -9866.0, -8760.0, -10689.0, -7752.0, -8737.0, -8855.0, -10236.0, -7627.0, -8794.0, -9136.0, -9751.0, -12423.0, -10437.0, -13102.0, -7369.0, -10050.0, -7288.0, -7718.0, -12148.0, -7866.0, -7827.0, -9947.0, -7341.0, -7830.0, -7400.0, -14810.0, -7804.0, -12949.0, -14473.0, -7614.0, -9046.0, -8131.0, -9447.0, -7404.0, -12827.0, -8649.0, -8369.0, -9178.0, -8405.0, -12621.0, -8063.0, -9225.0, -11884.0, -8284.0, -10936.0, -9745.0, -7698.0, -8377.0, -8497.0, -7364.0, -8624.0, -8083.0, -10364.0, -10994.0, -8348.0, -8206.0, -7888.0, -10490.0, -13800.0, -7778.0, -8448.0, -8862.0, -8015.0, -7551.0, -8714.0, -9422.0, -10758.0, -8509.0, -7347.0, -8803.0, -7811.0, -7413.0, -8157.0, -10110.0, -10993.0, -8143.0, -7747.0, -11693.0, -8040.0, -8691.0, -8033.0, -8875.0, -12647.0, -10762.0, -7557.0, -10773.0, -8601.0, -11552.0, -7522.0, -7738.0, -11542.0, -8756.0, -9152.0, -8987.0, -9482.0, -9029.0, -9076.0, -11906.0, -8140.0, -7949.0, -11907.0, -7622.0, -9239.0, -9748.0, -9349.0, -7278.0, -7500.0, -9724.0, -8036.0, -9975.0, -8767.0, -8443.0, -7871.0, -13415.0, -7513.0, -8966.0, -14018.0, -9044.0, -9240.0, -7276.0, -9564.0, -8044.0, -8175.0, -9385.0, -7679.0, -8376.0, -8647.0, -7786.0, -8254.0, -8995.0, -10155.0, -8710.0, -8290.0, -9419.0, -10909.0, -8071.0, -7343.0, -9581.0, -10475.0, -10217.0, -9363.0, -12490.0, -7373.0, -9236.0, -9131.0, -10361.0, -9508.0, -8535.0, -12870.0, -7640.0, -11398.0, -9756.0, -8152.0, -11202.0, -7900.0, -9052.0, -14536.0, -8808.0, -14413.0, -9194.0, -11954.0, -8325.0, -8801.0, -9794.0, -10843.0, -11555.0, -8230.0, -8618.0, -9389.0, -10629.0, -7916.0, -7504.0, -11272.0, -7566.0, -10353.0, -8072.0, -9325.0, -9311.0, -8757.0, -7676.0, -8411.0, -9698.0, -10647.0, -11061.0, -14338.0, -9830.0, -14887.0, -9320.0, -7314.0, -11332.0, -7838.0, -10147.0, -9527.0, -12455.0, -8011.0, -10305.0, -7280.0, -13010.0, -10746.0, -7953.0, -8491.0, -7706.0, -10052.0, -9316.0, -11603.0, -10688.0, -7835.0, -8410.0, -11692.0, -7518.0, -9574.0, -12917.0, -9559.0, -12513.0, -8870.0, -7494.0, -7591.0, -8256.0, -7756.0, -8342.0, -9270.0, -9181.0, -11683.0, -8510.0, -8189.0, -10232.0, -8863.0, -12462.0, -10627.0, -12163.0, -9989.0, -10452.0, -7736.0, -11448.0, -8205.0, -12253.0, -8066.0, -9019.0, -10777.0]
family_size : [nan, 5.0, 6.0, 7.0, 15.0, 20.0, 9.0]</code></pre>
</div>
</div>
<div id="cffc2270" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># IQR기준 이상치 시각화</span></span>
<span id="cb30-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb30-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb30-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb30-5"></span>
<span id="cb30-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> detect_outliers_fast(df):</span>
<span id="cb30-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate IQR without NaN values</span></span>
<span id="cb30-8">    Q1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'midpoint'</span>)</span>
<span id="cb30-9">    Q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>, interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'midpoint'</span>)</span>
<span id="cb30-10">    IQR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Q1</span>
<span id="cb30-11">    lower_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Q1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> IQR</span>
<span id="cb30-12">    upper_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> IQR</span>
<span id="cb30-13"></span>
<span id="cb30-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Vectorized outlier detection with NaN handling</span></span>
<span id="cb30-15">    outlier_flags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(</span>
<span id="cb30-16">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> col: <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>col.between(lower_bound[col.name], upper_bound[col.name]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> col.notna()</span>
<span id="cb30-17">    )</span>
<span id="cb30-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> outlier_flags</span>
<span id="cb30-19"></span>
<span id="cb30-20"></span>
<span id="cb30-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시각화 대상</span></span>
<span id="cb30-22">columns_to_visualize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child_num'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_total'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family_size'</span>]</span>
<span id="cb30-23">df_to_visualize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_numerical[columns_to_visualize]</span>
<span id="cb30-24"></span>
<span id="cb30-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 구한 이상치가 0인 경우를 제외하고 표기</span></span>
<span id="cb30-26">x_outliers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> detect_outliers_fast(df_to_visualize)</span>
<span id="cb30-27">outliers_to_see <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_outliers.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()[x_outliers.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb30-28"></span>
<span id="cb30-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 설정: 가로 그래프 개수</span></span>
<span id="cb30-30">cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb30-31">num_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(outliers_to_see.index)</span>
<span id="cb30-32">rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.ceil(num_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cols)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 필요한 행(row) 수 계산</span></span>
<span id="cb30-33"></span>
<span id="cb30-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 서브플롯 생성</span></span>
<span id="cb30-35">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(rows, cols, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 figure 크기 조정</span></span>
<span id="cb30-36">axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes.flatten()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2D 배열을 1D로 변환하여 인덱싱 편리하게</span></span>
<span id="cb30-37"></span>
<span id="cb30-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그래프 그리기</span></span>
<span id="cb30-39"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> var_idx, var_nm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(outliers_to_see.index):</span>
<span id="cb30-40">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[var_idx]</span>
<span id="cb30-41">    sns.boxplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_to_visualize[var_nm], ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lightblue'</span>)</span>
<span id="cb30-42">    ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>var_nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb30-43">    ax.set_xlabel(var_nm)</span>
<span id="cb30-44"></span>
<span id="cb30-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 빈 서브플롯 숨기기</span></span>
<span id="cb30-46"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_vars, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(axes)):</span>
<span id="cb30-47">    axes[i].axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb30-48"></span>
<span id="cb30-49">plt.tight_layout()</span>
<span id="cb30-50">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250202/index_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="수치형-변수의-전처리-진행-최소값-조정-및-로그변환" class="level3">
<h3 class="anchored" data-anchor-id="수치형-변수의-전처리-진행-최소값-조정-및-로그변환">수치형 변수의 전처리 진행 : 최소값 조정 및 로그변환</h3>
<div id="ce97f66a" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MinMaxScaler</span>
<span id="cb31-2"></span>
<span id="cb31-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 최소값 조정</span></span>
<span id="cb31-4">x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>]].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb31-5"></span>
<span id="cb31-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 로그변환</span></span>
<span id="cb31-7">x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child_num'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_total'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child_num'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_total'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>]].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : np.log1p(x))</span>
<span id="cb31-8"></span>
<span id="cb31-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Min-Max Scaler 적용</span></span>
<span id="cb31-10">min_max_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MinMaxScaler()</span>
<span id="cb31-11">x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>]]  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> min_max_scaler.fit_transform(x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>]])</span></code></pre></div>
</div>
<div id="7fb4abfc" class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">x_numerical.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">child_num</th>
<th data-quarto-table-cell-role="th">income_total</th>
<th data-quarto-table-cell-role="th">DAYS_BIRTH</th>
<th data-quarto-table-cell-role="th">DAYS_EMPLOYED</th>
<th data-quarto-table-cell-role="th">FLAG_MOBIL</th>
<th data-quarto-table-cell-role="th">work_phone</th>
<th data-quarto-table-cell-role="th">phone</th>
<th data-quarto-table-cell-role="th">email</th>
<th data-quarto-table-cell-role="th">family_size</th>
<th data-quarto-table-cell-role="th">begin_month</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0.000000</td>
<td>12.218500</td>
<td>0.644982</td>
<td>9.306105</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2.0</td>
<td>54.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0.693147</td>
<td>12.419170</td>
<td>0.789362</td>
<td>9.559165</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>3.0</td>
<td>55.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0.000000</td>
<td>13.017005</td>
<td>0.347624</td>
<td>9.330787</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>2.0</td>
<td>38.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="범주형-변수의-eda-및-전처리-방향" class="level3">
<h3 class="anchored" data-anchor-id="범주형-변수의-eda-및-전처리-방향">범주형 변수의 EDA 및 전처리 방향</h3>
<ul>
<li>전체 변수 : <code>gender</code>, <code>car</code>, <code>reality</code>, <code>income_type</code>, <code>family_type</code>, <code>house_type</code>, <code>occyp_type</code>, <code>edu_type</code></li>
<li>모델의 혼동(상위관계 여부)을 방지하고자 <code>OneHotEncoder</code> : <code>gender</code>, <code>car</code>, <code>reality</code>, <code>income_type</code>, <code>family_type</code>, <code>house_type</code>
<ul>
<li>대다수의 변수가 2~6개의 unique값을 가져 크게 어려움은 없을 것으로 보임</li>
</ul></li>
<li>순서가 중요한 Ordinal변수에 대해서 <code>OrdinalEncoder</code>로 우선순위를 지정 : <code>edu_type</code></li>
<li>unique값이 18개로 많은 편이며, 모델의 상하관계 혼동도 방지하고자 <code>LeaveOneOutEncoder</code>(타겟 인코딩) : <code>occyp_type</code></li>
</ul>
<div id="05e68f8a" class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 범주형 변수 추출</span></span>
<span id="cb33-2">x_categorical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train.select_dtypes(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'object'</span>])</span></code></pre></div>
</div>
<div id="c376d28c" class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전반적인 시각화</span></span>
<span id="cb34-2"></span>
<span id="cb34-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb34-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb34-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb34-6"></span>
<span id="cb34-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># credit 데이터 합치기</span></span>
<span id="cb34-8">combined_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_categorical.copy()</span>
<span id="cb34-9">combined_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train.copy()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 동일한 인덱스를 기준으로 credit 추가</span></span>
<span id="cb34-10"></span>
<span id="cb34-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 범주형 변수 설정</span></span>
<span id="cb34-12">categorical_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gender'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'car'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reality'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_type'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edu_type'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family_type'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'house_type'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>]</span>
<span id="cb34-13">cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb34-14">num_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(categorical_columns)</span>
<span id="cb34-15">rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.ceil(num_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cols)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 필요한 행(row) 수 계산</span></span>
<span id="cb34-16"></span>
<span id="cb34-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 서브플롯 생성</span></span>
<span id="cb34-18">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(rows, cols, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 figure 크기 조정</span></span>
<span id="cb34-19">axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes.flatten()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2D 배열을 1D로 변환하여 인덱싱 편리하게</span></span>
<span id="cb34-20"></span>
<span id="cb34-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그래프 그리기</span></span>
<span id="cb34-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, var_nm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(categorical_columns):</span>
<span id="cb34-23">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[idx]</span>
<span id="cb34-24"></span>
<span id="cb34-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터 그룹화 및 스택 데이터 계산</span></span>
<span id="cb34-26">    stacked_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combined_data.groupby([var_nm, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>]).size().unstack(fill_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb34-27"></span>
<span id="cb34-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 각 카테고리의 막대 그래프 그리기</span></span>
<span id="cb34-29">    bottom_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(stacked_data))</span>
<span id="cb34-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> credit_value <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> stacked_data.columns:</span>
<span id="cb34-31">        ax.bar(stacked_data.index, stacked_data[credit_value], bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bottom_values, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Credit </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>credit_value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb34-32">        bottom_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> stacked_data[credit_value]</span>
<span id="cb34-33"></span>
<span id="cb34-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그래프 설정</span></span>
<span id="cb34-35">    ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Stacked Bar Plot of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>var_nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb34-36">    ax.set_xlabel(var_nm)</span>
<span id="cb34-37">    ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb34-38">    ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb34-39">    ax.legend(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Credit'</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper right'</span>)</span>
<span id="cb34-40"></span>
<span id="cb34-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 빈 서브플롯 숨기기</span></span>
<span id="cb34-42"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_vars, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(axes)):</span>
<span id="cb34-43">    axes[i].axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb34-44"></span>
<span id="cb34-45">plt.tight_layout()</span>
<span id="cb34-46">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250202/index_files/figure-html/cell-22-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="범주형-변수의-전처리-진행-ordinalencoder-edu_type" class="level3">
<h3 class="anchored" data-anchor-id="범주형-변수의-전처리-진행-ordinalencoder-edu_type">범주형 변수의 전처리 진행 : OrdinalEncoder (edu_type)</h3>
<div id="6733346b" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Label인코딩 후 (Order값은 낮은 것부터 입력)</span></span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OrdinalEncoder</span>
<span id="cb35-4"></span>
<span id="cb35-5">order <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb35-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lower secondary'</span>,</span>
<span id="cb35-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Secondary / secondary special'</span>,</span>
<span id="cb35-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Incomplete higher'</span>,</span>
<span id="cb35-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Higher education'</span>,</span>
<span id="cb35-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Academic degree'</span></span>
<span id="cb35-11">]</span>
<span id="cb35-12"></span>
<span id="cb35-13">o_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OrdinalEncoder(categories<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[order])</span>
<span id="cb35-14">oe_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> o_encoder.fit_transform(x_categorical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edu_type'</span>]])</span>
<span id="cb35-15">x_categorical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edu_type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> oe_df.flatten()</span></code></pre></div>
</div>
</section>
<section id="범주형-변수의-전처리-진행-onehotencoder-gender-car-reality-income_type-family_type-house_type" class="level3">
<h3 class="anchored" data-anchor-id="범주형-변수의-전처리-진행-onehotencoder-gender-car-reality-income_type-family_type-house_type">범주형 변수의 전처리 진행 : OneHotEncoder (gender, car, reality, income_type, family_type, house_type)</h3>
<div id="4db19851" class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># One-hot 인코딩 데이터프레임 생성</span></span>
<span id="cb36-2"></span>
<span id="cb36-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OneHotEncoder</span>
<span id="cb36-4"></span>
<span id="cb36-5">one_hot_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gender'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'car'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reality'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_type'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family_type'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'house_type'</span>]</span>
<span id="cb36-6"></span>
<span id="cb36-7">oh_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OneHotEncoder(sparse_output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb36-8">onehot_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> oh_encoder.fit_transform(x_categorical[one_hot_columns])</span>
<span id="cb36-9">encoded_col_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> oh_encoder.get_feature_names_out(input_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>one_hot_columns)</span>
<span id="cb36-10"></span>
<span id="cb36-11">df_onehot_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(onehot_encoded, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>encoded_col_names, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_categorical.index)</span>
<span id="cb36-12"></span>
<span id="cb36-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ont-hot인코딩된 데이터프레임으로 교체</span></span>
<span id="cb36-14">x_categorical.drop(one_hot_columns, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb36-15">x_categorical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([x_categorical, df_onehot_encoded], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
</section>
<section id="범주형-변수의-전처리-진행-leaveoneoutencoder-occyp_type" class="level3">
<h3 class="anchored" data-anchor-id="범주형-변수의-전처리-진행-leaveoneoutencoder-occyp_type">범주형 변수의 전처리 진행 : LeaveOneOutEncoder (occyp_type)</h3>
<div id="38cc5927" class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> category_encoders <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ce</span>
<span id="cb37-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> joblib</span>
<span id="cb37-3"></span>
<span id="cb37-4">x_column <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span></span>
<span id="cb37-5"></span>
<span id="cb37-6">leave_one_out_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ce.LeaveOneOutEncoder(cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_column, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, return_df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb37-7">df_target_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> leave_one_out_encoder.fit_transform(x_categorical[x_column], Y_train)</span>
<span id="cb37-8"></span>
<span id="cb37-9">joblib.dump(leave_one_out_encoder, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'encoder_leave_one_out.pkl'</span>)</span>
<span id="cb37-10"></span>
<span id="cb37-11">x_categorical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_target_encoded[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>]</span></code></pre></div>
</div>
</section>
</section>
<section id="전처리-기능-함수화-및-저장" class="level2">
<h2 class="anchored" data-anchor-id="전처리-기능-함수화-및-저장">전처리 기능 함수화 및 저장</h2>
<div id="d1ebb552" class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb38-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb38-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb38-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataFrame</span>
<span id="cb38-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MinMaxScaler, StandardScaler, OrdinalEncoder, OneHotEncoder</span>
<span id="cb38-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> category_encoders <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ce</span>
<span id="cb38-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> joblib</span>
<span id="cb38-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pkb_sqlite3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DB_sqlite3</span>
<span id="cb38-9"></span>
<span id="cb38-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> preprocess_x_data(train_or_test:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, dataset:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[DataFrame], output_name:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb38-11"></span>
<span id="cb38-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 파라메터 검증 및 데이터셋 복사</span></span>
<span id="cb38-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> train_or_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>:</span>
<span id="cb38-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb38-15">            X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].copy()</span>
<span id="cb38-16">            Y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].copy()</span>
<span id="cb38-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb38-18">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train인 경우 x,y 데이터가 필요합니다'</span></span>
<span id="cb38-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> train_or_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>:</span>
<span id="cb38-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb38-21">            X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].copy()</span>
<span id="cb38-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb38-23">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test인 경우 x 데이터만 필요합니다'</span></span>
<span id="cb38-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb38-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train 또는 test만 입력 가능합니다'</span></span>
<span id="cb38-26"></span>
<span id="cb38-27">    </span>
<span id="cb38-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (공통)결측치 대체 : occyp_type</span></span>
<span id="cb38-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fill_occyp_type(row):</span>
<span id="cb38-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pd.isna(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>]):</span>
<span id="cb38-31">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb38-32">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NoJob'</span></span>
<span id="cb38-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>]</span>
<span id="cb38-34"></span>
<span id="cb38-35">    X_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(fill_occyp_type, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb38-36"></span>
<span id="cb38-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 수치형 변수 작업</span></span>
<span id="cb38-38">    x_numerical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train.select_dtypes(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'float64'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int64'</span>])</span>
<span id="cb38-39"></span>
<span id="cb38-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 최소값 조정</span></span>
<span id="cb38-41">    x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>]].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb38-42"></span>
<span id="cb38-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 로그변환</span></span>
<span id="cb38-44">    x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child_num'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_total'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child_num'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_total'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>]].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : np.log1p(x))</span>
<span id="cb38-45"></span>
<span id="cb38-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Min-Max Scaler 적용</span></span>
<span id="cb38-47">    min_max_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MinMaxScaler()</span>
<span id="cb38-48">    x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>]]  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> min_max_scaler.fit_transform(x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>]])</span>
<span id="cb38-49"></span>
<span id="cb38-50"></span>
<span id="cb38-51">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 범주형 변수 작업</span></span>
<span id="cb38-52">    x_categorical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train.select_dtypes(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'object'</span>])</span>
<span id="cb38-53"></span>
<span id="cb38-54">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Label인코딩</span></span>
<span id="cb38-55">    order <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb38-56">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lower secondary'</span>,</span>
<span id="cb38-57">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Secondary / secondary special'</span>,</span>
<span id="cb38-58">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Incomplete higher'</span>,</span>
<span id="cb38-59">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Higher education'</span>,</span>
<span id="cb38-60">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Academic degree'</span></span>
<span id="cb38-61">    ]</span>
<span id="cb38-62"></span>
<span id="cb38-63">    o_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OrdinalEncoder(categories<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[order])</span>
<span id="cb38-64">    oe_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> o_encoder.fit_transform(x_categorical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edu_type'</span>]])</span>
<span id="cb38-65">    x_categorical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edu_type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> oe_df.flatten()</span>
<span id="cb38-66"></span>
<span id="cb38-67">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## One-hot 인코딩</span></span>
<span id="cb38-68">    one_hot_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gender'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'car'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reality'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_type'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family_type'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'house_type'</span>]</span>
<span id="cb38-69"></span>
<span id="cb38-70">    oh_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OneHotEncoder(sparse_output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb38-71">    onehot_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> oh_encoder.fit_transform(x_categorical[one_hot_columns])</span>
<span id="cb38-72">    encoded_col_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> oh_encoder.get_feature_names_out(input_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>one_hot_columns)</span>
<span id="cb38-73"></span>
<span id="cb38-74">    df_onehot_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(onehot_encoded, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>encoded_col_names, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_categorical.index)</span>
<span id="cb38-75"></span>
<span id="cb38-76">    x_categorical.drop(one_hot_columns, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb38-77">    x_categorical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([x_categorical, df_onehot_encoded], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb38-78"></span>
<span id="cb38-79"></span>
<span id="cb38-80">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## LeaveOneOut인코딩</span></span>
<span id="cb38-81">    x_column <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span></span>
<span id="cb38-82"></span>
<span id="cb38-83">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### 파일로 저장해둔 인코더가 있으면 로딩, 아니면 생성</span></span>
<span id="cb38-84">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> os.path.isfile(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'encoder_leave_one_out.pkl'</span>):</span>
<span id="cb38-85">        leave_one_out_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> joblib.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'encoder_leave_one_out.pkl'</span>)</span>
<span id="cb38-86">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb38-87">        leave_one_out_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ce.LeaveOneOutEncoder(cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_column, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, return_df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb38-88"></span>
<span id="cb38-89">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### 인코딩된 데이터 생성 및 인코더 업데이트</span></span>
<span id="cb38-90">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> train_or_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>:</span>
<span id="cb38-91">        df_target_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> leave_one_out_encoder.fit_transform(x_categorical[x_column], Y_train)</span>
<span id="cb38-92">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> train_or_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>:</span>
<span id="cb38-93">        df_target_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> leave_one_out_encoder.transform(x_categorical[x_column])</span>
<span id="cb38-94">    joblib.dump(leave_one_out_encoder, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'encoder_leave_one_out.pkl'</span>)</span>
<span id="cb38-95"></span>
<span id="cb38-96">    x_categorical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_target_encoded[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>]</span>
<span id="cb38-97"></span>
<span id="cb38-98"></span>
<span id="cb38-99">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 나누어 작업한 수치형/범주형 변수 합치고 저장</span></span>
<span id="cb38-100">    x_train_preprocessed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([x_categorical, x_numerical], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb38-101">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> train_or_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>:</span>
<span id="cb38-102">        x_train_preprocessed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([x_train_preprocessed, Y_train], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb38-103">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> train_or_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>:</span>
<span id="cb38-104">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span>
<span id="cb38-105"></span>
<span id="cb38-106">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## CSV저장 </span></span>
<span id="cb38-107">    x_train_preprocessed.to_csv(output_name[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_file_name'</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'train_preprocessed.csv'</span></span>
<span id="cb38-108"></span>
<span id="cb38-109">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## DB저장 (아래 함수는 이미 테이블이 있는 경우 덮어씀)</span></span>
<span id="cb38-110">    db_controller.df_to_table(output_name[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'db_table_name'</span>], x_train_preprocessed) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'train_pre'</span></span>
<span id="cb38-111"></span>
<span id="cb38-112">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'작업이 완료되었습니다'</span></span></code></pre></div>
</div>
<div id="c3dd48ce" class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train 데이터 전처리</span></span>
<span id="cb39-2">preprocess_x_data(train_or_test<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>, </span>
<span id="cb39-3">                  dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[X_train, Y_train], </span>
<span id="cb39-4">                  output_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_file_name'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_preprocessed.csv'</span>, </span>
<span id="cb39-5">                               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'db_table_name'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_pre'</span>}</span>
<span id="cb39-6">                  )</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'작업이 완료되었습니다'</code></pre>
</div>
</div>
<div id="db828cdf" class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전처리 후 db저장된 결과 확인</span></span>
<span id="cb41-2">db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM train_pre"</span>).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">edu_type</th>
<th data-quarto-table-cell-role="th">occyp_type</th>
<th data-quarto-table-cell-role="th">gender_F</th>
<th data-quarto-table-cell-role="th">gender_M</th>
<th data-quarto-table-cell-role="th">car_N</th>
<th data-quarto-table-cell-role="th">car_Y</th>
<th data-quarto-table-cell-role="th">reality_N</th>
<th data-quarto-table-cell-role="th">reality_Y</th>
<th data-quarto-table-cell-role="th">income_type_Commercial associate</th>
<th data-quarto-table-cell-role="th">income_type_Pensioner</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">income_total</th>
<th data-quarto-table-cell-role="th">DAYS_BIRTH</th>
<th data-quarto-table-cell-role="th">DAYS_EMPLOYED</th>
<th data-quarto-table-cell-role="th">FLAG_MOBIL</th>
<th data-quarto-table-cell-role="th">work_phone</th>
<th data-quarto-table-cell-role="th">phone</th>
<th data-quarto-table-cell-role="th">email</th>
<th data-quarto-table-cell-role="th">family_size</th>
<th data-quarto-table-cell-role="th">begin_month</th>
<th data-quarto-table-cell-role="th">credit</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>3.0</td>
<td>1.461445</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>...</td>
<td>12.218500</td>
<td>0.644982</td>
<td>9.306105</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>2.0</td>
<td>54.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1.0</td>
<td>1.488029</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.0</td>
<td>...</td>
<td>12.419170</td>
<td>0.789362</td>
<td>9.559165</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>3.0</td>
<td>55.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>3.0</td>
<td>1.652069</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>13.017005</td>
<td>0.347624</td>
<td>9.330787</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>2.0</td>
<td>38.0</td>
<td>2.0</td>
</tr>
</tbody>
</table>

<p>3 rows × 35 columns</p>
</div>
</div>
</div>
<div id="04bb680c" class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test 데이터 전처리</span></span>
<span id="cb42-2">preprocess_x_data(train_or_test<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>, </span>
<span id="cb42-3">                  dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[X_test], </span>
<span id="cb42-4">                  output_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_file_name'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_preprocessed.csv'</span>, </span>
<span id="cb42-5">                               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'db_table_name'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_pre'</span>}</span>
<span id="cb42-6">                  )</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'작업이 완료되었습니다'</code></pre>
</div>
</div>
</section>
<section id="전처리한-데이터-및-autogluon활용한-모델-고도화" class="level2">
<h2 class="anchored" data-anchor-id="전처리한-데이터-및-autogluon활용한-모델-고도화">전처리한 데이터 및 autogluon활용한 모델 고도화</h2>
<div id="607646b1" class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb44-2"></span>
<span id="cb44-3">pre_df_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM train_pre"</span>)</span>
<span id="cb44-4"></span>
<span id="cb44-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터 나누기</span></span>
<span id="cb44-6">Y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pre_df_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>].copy()</span>
<span id="cb44-7">pre_X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pre_df_train.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).copy()</span>
<span id="cb44-8">X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_test.copy()</span>
<span id="cb44-9"></span>
<span id="cb44-10"></span>
<span id="cb44-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터 분할</span></span>
<span id="cb44-12">pre_x_train, pre_x_validate, y_train, y_validate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(pre_X_train, Y_train, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, stratify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Y_train)</span></code></pre></div>
</div>
<div id="69776404" class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> autogluon.tabular <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TabularPredictor</span>
<span id="cb45-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb45-3"></span>
<span id="cb45-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 저장할 경로 지정</span></span>
<span id="cb45-5">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'autogluon_2secondmodel'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 저장할 경로</span></span>
<span id="cb45-6"></span>
<span id="cb45-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AutoGluon을 위해 데이터프레임으로 병합</span></span>
<span id="cb45-8">train_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pre_x_train</span>
<span id="cb45-9">train_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train</span>
<span id="cb45-10"></span>
<span id="cb45-11">val_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pre_x_validate</span>
<span id="cb45-12">val_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_validate</span>
<span id="cb45-13"></span>
<span id="cb45-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AutoGluon 학습</span></span>
<span id="cb45-15">predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TabularPredictor(</span>
<span id="cb45-16">    label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>, </span>
<span id="cb45-17">    problem_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'multiclass'</span>, </span>
<span id="cb45-18">    eval_metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log_loss'</span>, </span>
<span id="cb45-19">    verbosity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb45-20">    path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>path,</span>
<span id="cb45-21">)</span>
<span id="cb45-22">predictor.fit(</span>
<span id="cb45-23">    train_data,</span>
<span id="cb45-24">    tuning_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>val_data,</span>
<span id="cb45-25">    time_limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3600</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시간 제한 설정 (1시간)</span></span>
<span id="cb45-26">    num_gpus<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb45-27">    presets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'best_quality'</span>,</span>
<span id="cb45-28">    use_bag_holdout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb45-29">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: path already exists! This predictor may overwrite an existing predictor! path="autogluon_2secondmodel"
Verbosity: 2 (Standard Logging)
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.12.8
Operating System:   Windows
Platform Machine:   AMD64
Platform Version:   10.0.26100
CPU Count:          8
Memory Avail:       5.04 GB / 15.94 GB (31.6%)
Disk Space Avail:   504.61 GB / 931.51 GB (54.2%)
===================================================
Presets specified: ['best_quality']
Setting dynamic_stacking from 'auto' to False. Reason: Skip dynamic_stacking when use_bag_holdout is enabled. (use_bag_holdout=True)
Stack configuration (auto_stack=True): num_stack_levels=1, num_bag_folds=8, num_bag_sets=1
Beginning AutoGluon training ... Time limit = 3600s
AutoGluon will save models to "e:\0_Backup\14.Python\metacode_202412_study_creditmodeling\autogluon_2secondmodel"
Train Data Rows:    18519
Train Data Columns: 34
Tuning Data Rows:    7938
Tuning Data Columns: 34
Label Column:       target
Problem Type:       multiclass
Preprocessing data ...
Train Data Class Count: 3
Using Feature Generators to preprocess the data ...
Fitting AutoMLPipelineFeatureGenerator...
    Available Memory:                    5148.66 MB
    Train Data (Original)  Memory Usage: 6.86 MB (0.1% of available memory)
    Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
    Stage 1 Generators:
        Fitting AsTypeFeatureGenerator...
            Note: Converting 25 features to boolean dtype as they only contain 2 unique values.
    Stage 2 Generators:
        Fitting FillNaFeatureGenerator...
    Stage 3 Generators:
        Fitting IdentityFeatureGenerator...
    Stage 4 Generators:
        Fitting DropUniqueFeatureGenerator...
    Stage 5 Generators:
        Fitting DropDuplicatesFeatureGenerator...
    Useless Original Features (Count: 1): ['FLAG_MOBIL']
        These features carry no predictive signal and should be manually investigated.
        This is typically a feature which has the same value for all rows.
        These features do not need to be present at inference time.
    Types of features in original data (raw dtype, special dtypes):
        ('float', []) : 30 | ['edu_type', 'occyp_type', 'gender_F', 'gender_M', 'car_N', ...]
        ('int', [])   :  3 | ['work_phone', 'phone', 'email']
    Types of features in processed data (raw dtype, special dtypes):
        ('float', [])     :  8 | ['edu_type', 'occyp_type', 'child_num', 'income_total', 'DAYS_BIRTH', ...]
        ('int', ['bool']) : 25 | ['gender_F', 'gender_M', 'car_N', 'car_Y', 'reality_N', ...]
    0.1s = Fit runtime
    33 features in original data used to generate 33 features in processed data.
    Train Data (Processed) Memory Usage: 2.25 MB (0.0% of available memory)
Data preprocessing and feature engineering runtime = 0.19s ...
AutoGluon will gauge predictive performance using evaluation metric: 'log_loss'
    This metric's sign has been flipped to adhere to being higher_is_better. The metric score can be multiplied by -1 to get the metric value.
    This metric expects predicted probabilities rather than predicted class labels, so you'll need to use predict_proba() instead of predict()
    To change this, specify the eval_metric parameter of Predictor()
use_bag_holdout=True, will use tuning_data as holdout (will not be used for early stopping).
Large model count detected (112 configs) ... Only displaying the first 3 models of each family. To see all, set `verbosity=3`.
User-specified model hyperparameters to be fit:
{
    'NN_TORCH': [{}, {'activation': 'elu', 'dropout_prob': 0.10077639529843717, 'hidden_size': 108, 'learning_rate': 0.002735937344002146, 'num_layers': 4, 'use_batchnorm': True, 'weight_decay': 1.356433327634438e-12, 'ag_args': {'name_suffix': '_r79', 'priority': -2}}, {'activation': 'elu', 'dropout_prob': 0.11897478034205347, 'hidden_size': 213, 'learning_rate': 0.0010474382260641949, 'num_layers': 4, 'use_batchnorm': False, 'weight_decay': 5.594471067786272e-10, 'ag_args': {'name_suffix': '_r22', 'priority': -7}}],
    'GBM': [{'extra_trees': True, 'ag_args': {'name_suffix': 'XT'}}, {}, {'learning_rate': 0.03, 'num_leaves': 128, 'feature_fraction': 0.9, 'min_data_in_leaf': 3, 'ag_args': {'name_suffix': 'Large', 'priority': 0, 'hyperparameter_tune_kwargs': None}}],
    'CAT': [{}, {'depth': 6, 'grow_policy': 'SymmetricTree', 'l2_leaf_reg': 2.1542798306067823, 'learning_rate': 0.06864209415792857, 'max_ctr_complexity': 4, 'one_hot_max_size': 10, 'ag_args': {'name_suffix': '_r177', 'priority': -1}}, {'depth': 8, 'grow_policy': 'Depthwise', 'l2_leaf_reg': 2.7997999596449104, 'learning_rate': 0.031375015734637225, 'max_ctr_complexity': 2, 'one_hot_max_size': 3, 'ag_args': {'name_suffix': '_r9', 'priority': -5}}],
    'XGB': [{}, {'colsample_bytree': 0.6917311125174739, 'enable_categorical': False, 'learning_rate': 0.018063876087523967, 'max_depth': 10, 'min_child_weight': 0.6028633586934382, 'ag_args': {'name_suffix': '_r33', 'priority': -8}}, {'colsample_bytree': 0.6628423832084077, 'enable_categorical': False, 'learning_rate': 0.08775715546881824, 'max_depth': 5, 'min_child_weight': 0.6294123374222513, 'ag_args': {'name_suffix': '_r89', 'priority': -16}}],
    'FASTAI': [{}, {'bs': 256, 'emb_drop': 0.5411770367537934, 'epochs': 43, 'layers': [800, 400], 'lr': 0.01519848858318159, 'ps': 0.23782946566604385, 'ag_args': {'name_suffix': '_r191', 'priority': -4}}, {'bs': 2048, 'emb_drop': 0.05070411322605811, 'epochs': 29, 'layers': [200, 100], 'lr': 0.08974235041576624, 'ps': 0.10393466140748028, 'ag_args': {'name_suffix': '_r102', 'priority': -11}}],
    'RF': [{'criterion': 'gini', 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],
    'XT': [{'criterion': 'gini', 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],
    'KNN': [{'weights': 'uniform', 'ag_args': {'name_suffix': 'Unif'}}, {'weights': 'distance', 'ag_args': {'name_suffix': 'Dist'}}],
}
AutoGluon will fit 2 stack levels (L1 to L2) ...
Fitting 110 L1 models, fit_strategy="sequential" ...
Fitting model: KNeighborsUnif_BAG_L1 ... Training model for up to 2399.27s of the 3599.79s of remaining time.
    -2.4262  = Validation score   (-log_loss)
    0.12s    = Training   runtime
    0.08s    = Validation runtime
Fitting model: KNeighborsDist_BAG_L1 ... Training model for up to 2398.82s of the 3599.34s of remaining time.
    -2.4431  = Validation score   (-log_loss)
    0.04s    = Training   runtime
    0.08s    = Validation runtime
Fitting model: NeuralNetFastAI_BAG_L1 ... Training model for up to 2398.47s of the 3598.99s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2.0 workers, per: cpus=4, gpus=0, memory=0.37%)
    -0.8011  = Validation score   (-log_loss)
    86.42s   = Training   runtime
    1.02s    = Validation runtime
Fitting model: LightGBMXT_BAG_L1 ... Training model for up to 2303.53s of the 3504.05s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (8 workers, per: cpus=1, gpus=0, memory=0.35%)
    -0.7725  = Validation score   (-log_loss)
    10.48s   = Training   runtime
    2.17s    = Validation runtime
Fitting model: LightGBM_BAG_L1 ... Training model for up to 2282.75s of the 3483.27s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (8 workers, per: cpus=1, gpus=0, memory=0.36%)
    -0.7655  = Validation score   (-log_loss)
    7.32s    = Training   runtime
    1.02s    = Validation runtime
Fitting model: RandomForestGini_BAG_L1 ... Training model for up to 2267.33s of the 3467.85s of remaining time.
    -0.7434  = Validation score   (-log_loss)
    2.07s    = Training   runtime
    0.39s    = Validation runtime
Fitting model: RandomForestEntr_BAG_L1 ... Training model for up to 2263.26s of the 3463.78s of remaining time.
    -0.7396  = Validation score   (-log_loss)
    2.31s    = Training   runtime
    3.34s    = Validation runtime
Fitting model: CatBoost_BAG_L1 ... Training model for up to 2256.21s of the 3456.73s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2.0 workers, per: cpus=4, gpus=0, memory=0.52%)
    -0.7751  = Validation score   (-log_loss)
    97.28s   = Training   runtime
    0.2s     = Validation runtime
Fitting model: ExtraTreesGini_BAG_L1 ... Training model for up to 2155.91s of the 3356.43s of remaining time.
    -0.7802  = Validation score   (-log_loss)
    1.54s    = Training   runtime
    0.56s    = Validation runtime
Fitting model: ExtraTreesEntr_BAG_L1 ... Training model for up to 2152.48s of the 3353.00s of remaining time.
    -0.7828  = Validation score   (-log_loss)
    1.42s    = Training   runtime
    0.51s    = Validation runtime
Fitting model: XGBoost_BAG_L1 ... Training model for up to 2144.57s of the 3345.09s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2.0 workers, per: cpus=4, gpus=0, memory=0.59%)
    -0.7668  = Validation score   (-log_loss)
    21.91s   = Training   runtime
    1.11s    = Validation runtime
Fitting model: NeuralNetTorch_BAG_L1 ... Training model for up to 2118.51s of the 3319.03s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (1 workers, per: cpus=8, gpus=0, memory=0.22%)
    -0.8113  = Validation score   (-log_loss)
    251.72s  = Training   runtime
    0.31s    = Validation runtime
Fitting model: LightGBMLarge_BAG_L1 ... Training model for up to 1863.68s of the 3064.20s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (8 workers, per: cpus=1, gpus=0, memory=0.73%)
    -0.7542  = Validation score   (-log_loss)
    9.23s    = Training   runtime
    1.39s    = Validation runtime
Fitting model: CatBoost_r177_BAG_L1 ... Training model for up to 1847.37s of the 3047.89s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2.0 workers, per: cpus=4, gpus=0, memory=0.45%)
    -0.7746  = Validation score   (-log_loss)
    63.28s   = Training   runtime
    0.15s    = Validation runtime
Fitting model: NeuralNetTorch_r79_BAG_L1 ... Training model for up to 1781.19s of the 2981.71s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (1 workers, per: cpus=8, gpus=0, memory=0.19%)
    -0.7953  = Validation score   (-log_loss)
    293.93s  = Training   runtime
    0.32s    = Validation runtime
Fitting model: LightGBM_r131_BAG_L1 ... Training model for up to 1484.24s of the 2684.76s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (8 workers, per: cpus=1, gpus=0, memory=0.44%)
    -0.7565  = Validation score   (-log_loss)
    23.01s   = Training   runtime
    6.31s    = Validation runtime
Fitting model: NeuralNetFastAI_r191_BAG_L1 ... Training model for up to 1446.16s of the 2646.68s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2.0 workers, per: cpus=4, gpus=0, memory=0.35%)
    -0.798   = Validation score   (-log_loss)
    153.76s  = Training   runtime
    1.06s    = Validation runtime
Fitting model: CatBoost_r9_BAG_L1 ... Training model for up to 1288.58s of the 2489.10s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2.0 workers, per: cpus=4, gpus=0, memory=1.22%)
    -0.7616  = Validation score   (-log_loss)
    164.84s  = Training   runtime
    0.51s    = Validation runtime
Fitting model: LightGBM_r96_BAG_L1 ... Training model for up to 1120.44s of the 2320.96s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (8 workers, per: cpus=1, gpus=0, memory=0.29%)
    -0.7789  = Validation score   (-log_loss)
    59.55s   = Training   runtime
    25.56s   = Validation runtime
Fitting model: NeuralNetTorch_r22_BAG_L1 ... Training model for up to 1022.29s of the 2222.81s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (1 workers, per: cpus=8, gpus=0, memory=0.20%)
    -0.8058  = Validation score   (-log_loss)
    349.2s   = Training   runtime
    0.3s     = Validation runtime
Fitting model: XGBoost_r33_BAG_L1 ... Training model for up to 670.00s of the 1870.52s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2.0 workers, per: cpus=4, gpus=0, memory=2.37%)
    -0.7541  = Validation score   (-log_loss)
    53.77s   = Training   runtime
    5.68s    = Validation runtime
Fitting model: ExtraTrees_r42_BAG_L1 ... Training model for up to 607.29s of the 1807.81s of remaining time.
    -0.7793  = Validation score   (-log_loss)
    2.61s    = Training   runtime
    0.46s    = Validation runtime
Fitting model: CatBoost_r137_BAG_L1 ... Training model for up to 603.09s of the 1803.61s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2.0 workers, per: cpus=4, gpus=0, memory=0.31%)
    -0.7803  = Validation score   (-log_loss)
    238.16s  = Training   runtime
    0.38s    = Validation runtime
Fitting model: NeuralNetFastAI_r102_BAG_L1 ... Training model for up to 361.91s of the 1562.43s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2.0 workers, per: cpus=4, gpus=0, memory=0.40%)
    -0.7958  = Validation score   (-log_loss)
    33.49s   = Training   runtime
    0.29s    = Validation runtime
Fitting model: CatBoost_r13_BAG_L1 ... Training model for up to 325.24s of the 1525.76s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2.0 workers, per: cpus=4, gpus=0, memory=1.51%)
    -0.7724  = Validation score   (-log_loss)
    253.21s  = Training   runtime
    0.32s    = Validation runtime
Fitting model: RandomForest_r195_BAG_L1 ... Training model for up to 68.68s of the 1269.20s of remaining time.
    -0.7592  = Validation score   (-log_loss)
    5.03s    = Training   runtime
    0.25s    = Validation runtime
Fitting model: LightGBM_r188_BAG_L1 ... Training model for up to 62.45s of the 1262.97s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (8 workers, per: cpus=1, gpus=0, memory=0.72%)
    -0.7681  = Validation score   (-log_loss)
    9.7s     = Training   runtime
    1.63s    = Validation runtime
Fitting model: NeuralNetFastAI_r145_BAG_L1 ... Training model for up to 46.45s of the 1246.97s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2.0 workers, per: cpus=4, gpus=0, memory=0.37%)
    -0.8079  = Validation score   (-log_loss)
    53.69s   = Training   runtime
    1.32s    = Validation runtime
Fitting model: WeightedEnsemble_L2 ... Training model for up to 360.00s of the 1189.04s of remaining time.
    Ensemble Weights: {'RandomForestEntr_BAG_L1': 0.545, 'XGBoost_r33_BAG_L1': 0.182, 'LightGBM_r131_BAG_L1': 0.136, 'RandomForestGini_BAG_L1': 0.091, 'NeuralNetTorch_r22_BAG_L1': 0.045}
    -0.7294  = Validation score   (-log_loss)
    1.07s    = Training   runtime
    0.0s     = Validation runtime
Fitting 108 L2 models, fit_strategy="sequential" ...
Fitting model: NeuralNetFastAI_BAG_L2 ... Training model for up to 1187.95s of the 1187.62s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2.0 workers, per: cpus=4, gpus=0, memory=1.64%)
    -0.725   = Validation score   (-log_loss)
    64.84s   = Training   runtime
    0.94s    = Validation runtime
Fitting model: LightGBMXT_BAG_L2 ... Training model for up to 1119.59s of the 1119.25s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (8 workers, per: cpus=1, gpus=0, memory=1.45%)
    -0.7236  = Validation score   (-log_loss)
    15.0s    = Training   runtime
    0.63s    = Validation runtime
Fitting model: LightGBM_BAG_L2 ... Training model for up to 1099.98s of the 1099.65s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (8 workers, per: cpus=1, gpus=0, memory=1.46%)
    -0.7241  = Validation score   (-log_loss)
    19.31s   = Training   runtime
    0.36s    = Validation runtime
Fitting model: RandomForestGini_BAG_L2 ... Training model for up to 1076.25s of the 1075.92s of remaining time.
    -0.7461  = Validation score   (-log_loss)
    9.01s    = Training   runtime
    0.22s    = Validation runtime
Fitting model: RandomForestEntr_BAG_L2 ... Training model for up to 1065.35s of the 1065.01s of remaining time.
    -0.7314  = Validation score   (-log_loss)
    11.5s    = Training   runtime
    0.22s    = Validation runtime
Fitting model: CatBoost_BAG_L2 ... Training model for up to 1052.02s of the 1051.68s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2.0 workers, per: cpus=4, gpus=0, memory=1.95%)
    -0.7243  = Validation score   (-log_loss)
    103.33s  = Training   runtime
    0.1s     = Validation runtime
Fitting model: ExtraTreesGini_BAG_L2 ... Training model for up to 945.95s of the 945.62s of remaining time.
    -0.7325  = Validation score   (-log_loss)
    1.95s    = Training   runtime
    0.32s    = Validation runtime
Fitting model: ExtraTreesEntr_BAG_L2 ... Training model for up to 941.86s of the 941.53s of remaining time.
    -0.7323  = Validation score   (-log_loss)
    2.0s     = Training   runtime
    0.28s    = Validation runtime
Fitting model: XGBoost_BAG_L2 ... Training model for up to 937.88s of the 937.54s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2.0 workers, per: cpus=4, gpus=0, memory=2.38%)
    -0.7239  = Validation score   (-log_loss)
    39.8s    = Training   runtime
    0.65s    = Validation runtime
Fitting model: NeuralNetTorch_BAG_L2 ... Training model for up to 894.90s of the 894.56s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (1 workers, per: cpus=8, gpus=0, memory=0.99%)
    -0.7266  = Validation score   (-log_loss)
    123.35s  = Training   runtime
    1.24s    = Validation runtime
Fitting model: LightGBMLarge_BAG_L2 ... Training model for up to 767.75s of the 767.41s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (8 workers, per: cpus=1, gpus=0, memory=2.81%)
    -0.7285  = Validation score   (-log_loss)
    62.95s   = Training   runtime
    0.41s    = Validation runtime
Fitting model: CatBoost_r177_BAG_L2 ... Training model for up to 700.47s of the 700.14s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2.0 workers, per: cpus=4, gpus=0, memory=1.99%)
    -0.7241  = Validation score   (-log_loss)
    84.97s   = Training   runtime
    0.09s    = Validation runtime
Fitting model: NeuralNetTorch_r79_BAG_L2 ... Training model for up to 612.85s of the 612.52s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (1 workers, per: cpus=8, gpus=0, memory=1.00%)
    -0.7241  = Validation score   (-log_loss)
    159.99s  = Training   runtime
    1.38s    = Validation runtime
Fitting model: LightGBM_r131_BAG_L2 ... Training model for up to 448.89s of the 448.55s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (8 workers, per: cpus=1, gpus=0, memory=1.81%)
    -0.7243  = Validation score   (-log_loss)
    42.78s   = Training   runtime
    1.19s    = Validation runtime
Fitting model: NeuralNetFastAI_r191_BAG_L2 ... Training model for up to 400.51s of the 400.17s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2.0 workers, per: cpus=4, gpus=0, memory=1.65%)
    -0.7288  = Validation score   (-log_loss)
    106.63s  = Training   runtime
    1.11s    = Validation runtime
Fitting model: CatBoost_r9_BAG_L2 ... Training model for up to 290.24s of the 289.91s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2.0 workers, per: cpus=4, gpus=0, memory=4.81%)
    -0.7243  = Validation score   (-log_loss)
    239.08s  = Training   runtime
    0.23s    = Validation runtime
Fitting model: LightGBM_r96_BAG_L2 ... Training model for up to 48.37s of the 48.04s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (8 workers, per: cpus=1, gpus=0, memory=1.37%)
    -0.7234  = Validation score   (-log_loss)
    17.5s    = Training   runtime
    1.25s    = Validation runtime
Fitting model: NeuralNetTorch_r22_BAG_L2 ... Training model for up to 25.29s of the 24.96s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (1 workers, per: cpus=8, gpus=0, memory=0.94%)
    Time limit exceeded... Skipping NeuralNetTorch_r22_BAG_L2.
Fitting model: XGBoost_r33_BAG_L2 ... Training model for up to 19.01s of the 18.68s of remaining time.
    Fitting 8 child models (S1F1 - S1F8) | Fitting with ParallelLocalFoldFittingStrategy (2.0 workers, per: cpus=4, gpus=0, memory=9.66%)
    -0.9506  = Validation score   (-log_loss)
    23.08s   = Training   runtime
    0.41s    = Validation runtime
Fitting model: WeightedEnsemble_L3 ... Training model for up to 360.00s of the -6.81s of remaining time.
    Ensemble Weights: {'XGBoost_BAG_L2': 0.348, 'NeuralNetFastAI_BAG_L2': 0.261, 'NeuralNetTorch_r79_BAG_L2': 0.261, 'RandomForestEntr_BAG_L2': 0.087, 'LightGBM_r96_BAG_L2': 0.043}
    -0.7216  = Validation score   (-log_loss)
    1.13s    = Training   runtime
    0.0s     = Validation runtime
AutoGluon training complete, total runtime = 3607.99s ... Best model: WeightedEnsemble_L3 | Estimated inference throughput: 223.0 rows/s (7938 batch size)
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("e:\0_Backup\14.Python\metacode_202412_study_creditmodeling\autogluon_2secondmodel")</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>&lt;autogluon.tabular.predictor.predictor.TabularPredictor at 0x2548a58e870&gt;</code></pre>
</div>
</div>
<ul>
<li>리더보드</li>
</ul>
<div id="c946e287" class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">predictor.leaderboard(pre_x_validate, extra_metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'balanced_accuracy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'f1_weighted'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'roc_auc_ovr_weighted'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">model</th>
<th data-quarto-table-cell-role="th">score_test</th>
<th data-quarto-table-cell-role="th">score_val</th>
<th data-quarto-table-cell-role="th">eval_metric</th>
<th data-quarto-table-cell-role="th">pred_time_test</th>
<th data-quarto-table-cell-role="th">pred_time_val</th>
<th data-quarto-table-cell-role="th">fit_time</th>
<th data-quarto-table-cell-role="th">pred_time_test_marginal</th>
<th data-quarto-table-cell-role="th">pred_time_val_marginal</th>
<th data-quarto-table-cell-role="th">fit_time_marginal</th>
<th data-quarto-table-cell-role="th">stack_level</th>
<th data-quarto-table-cell-role="th">can_infer</th>
<th data-quarto-table-cell-role="th">fit_order</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>WeightedEnsemble_L3</td>
<td>-0.721621</td>
<td>-0.721621</td>
<td>log_loss</td>
<td>66.038581</td>
<td>35.591943</td>
<td>2484.289781</td>
<td>0.013003</td>
<td>0.001998</td>
<td>1.126650</td>
<td>3</td>
<td>True</td>
<td>48</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>LightGBM_r96_BAG_L2</td>
<td>-0.723399</td>
<td>-0.723399</td>
<td>log_loss</td>
<td>60.437314</td>
<td>32.402319</td>
<td>2207.033812</td>
<td>1.693396</td>
<td>1.249881</td>
<td>17.496655</td>
<td>2</td>
<td>True</td>
<td>46</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>LightGBMXT_BAG_L2</td>
<td>-0.723595</td>
<td>-0.723595</td>
<td>log_loss</td>
<td>59.718009</td>
<td>31.786725</td>
<td>2204.540157</td>
<td>0.974091</td>
<td>0.634287</td>
<td>15.003000</td>
<td>2</td>
<td>True</td>
<td>31</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>XGBoost_BAG_L2</td>
<td>-0.723949</td>
<td>-0.723949</td>
<td>log_loss</td>
<td>59.537626</td>
<td>31.807227</td>
<td>2229.341661</td>
<td>0.793707</td>
<td>0.654789</td>
<td>39.804505</td>
<td>2</td>
<td>True</td>
<td>38</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>CatBoost_r177_BAG_L2</td>
<td>-0.724051</td>
<td>-0.724051</td>
<td>log_loss</td>
<td>59.057112</td>
<td>31.241331</td>
<td>2274.504236</td>
<td>0.313194</td>
<td>0.088893</td>
<td>84.967080</td>
<td>2</td>
<td>True</td>
<td>41</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>LightGBM_BAG_L2</td>
<td>-0.724066</td>
<td>-0.724066</td>
<td>log_loss</td>
<td>59.263655</td>
<td>31.515064</td>
<td>2208.849041</td>
<td>0.519737</td>
<td>0.362626</td>
<td>19.311885</td>
<td>2</td>
<td>True</td>
<td>32</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>NeuralNetTorch_r79_BAG_L2</td>
<td>-0.724087</td>
<td>-0.724087</td>
<td>log_loss</td>
<td>60.398604</td>
<td>32.529583</td>
<td>2349.523849</td>
<td>1.654686</td>
<td>1.377145</td>
<td>159.986692</td>
<td>2</td>
<td>True</td>
<td>42</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>CatBoost_BAG_L2</td>
<td>-0.724257</td>
<td>-0.724257</td>
<td>log_loss</td>
<td>59.122199</td>
<td>31.250390</td>
<td>2292.868759</td>
<td>0.378280</td>
<td>0.097952</td>
<td>103.331603</td>
<td>2</td>
<td>True</td>
<td>35</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>LightGBM_r131_BAG_L2</td>
<td>-0.724293</td>
<td>-0.724293</td>
<td>log_loss</td>
<td>60.727484</td>
<td>32.341873</td>
<td>2232.318439</td>
<td>1.983566</td>
<td>1.189435</td>
<td>42.781282</td>
<td>2</td>
<td>True</td>
<td>43</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>CatBoost_r9_BAG_L2</td>
<td>-0.724313</td>
<td>-0.724313</td>
<td>log_loss</td>
<td>59.698261</td>
<td>31.379199</td>
<td>2428.618669</td>
<td>0.954343</td>
<td>0.226760</td>
<td>239.081513</td>
<td>2</td>
<td>True</td>
<td>45</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>NeuralNetFastAI_BAG_L2</td>
<td>-0.724968</td>
<td>-0.724968</td>
<td>log_loss</td>
<td>60.431796</td>
<td>32.088797</td>
<td>2254.376706</td>
<td>1.687878</td>
<td>0.936359</td>
<td>64.839550</td>
<td>2</td>
<td>True</td>
<td>30</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>NeuralNetTorch_BAG_L2</td>
<td>-0.726645</td>
<td>-0.726645</td>
<td>log_loss</td>
<td>60.429449</td>
<td>32.390139</td>
<td>2312.890353</td>
<td>1.685530</td>
<td>1.237701</td>
<td>123.353197</td>
<td>2</td>
<td>True</td>
<td>39</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>LightGBMLarge_BAG_L2</td>
<td>-0.728510</td>
<td>-0.728510</td>
<td>log_loss</td>
<td>59.943033</td>
<td>31.565219</td>
<td>2252.492023</td>
<td>1.199115</td>
<td>0.412781</td>
<td>62.954867</td>
<td>2</td>
<td>True</td>
<td>40</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>NeuralNetFastAI_r191_BAG_L2</td>
<td>-0.728848</td>
<td>-0.728848</td>
<td>log_loss</td>
<td>60.845650</td>
<td>32.260897</td>
<td>2296.170694</td>
<td>2.101732</td>
<td>1.108459</td>
<td>106.633538</td>
<td>2</td>
<td>True</td>
<td>44</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>WeightedEnsemble_L2</td>
<td>-0.729363</td>
<td>-0.729363</td>
<td>log_loss</td>
<td>21.676457</td>
<td>16.020015</td>
<td>431.424106</td>
<td>0.025999</td>
<td>0.001998</td>
<td>1.068229</td>
<td>2</td>
<td>True</td>
<td>29</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>RandomForestEntr_BAG_L2</td>
<td>-0.731364</td>
<td>-0.731364</td>
<td>log_loss</td>
<td>60.195911</td>
<td>31.371770</td>
<td>2201.035728</td>
<td>1.451993</td>
<td>0.219332</td>
<td>11.498572</td>
<td>2</td>
<td>True</td>
<td>34</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>ExtraTreesEntr_BAG_L2</td>
<td>-0.732284</td>
<td>-0.732284</td>
<td>log_loss</td>
<td>61.272550</td>
<td>31.437372</td>
<td>2191.534572</td>
<td>2.528632</td>
<td>0.284934</td>
<td>1.997415</td>
<td>2</td>
<td>True</td>
<td>37</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>ExtraTreesGini_BAG_L2</td>
<td>-0.732482</td>
<td>-0.732482</td>
<td>log_loss</td>
<td>61.319811</td>
<td>31.474750</td>
<td>2191.488311</td>
<td>2.575893</td>
<td>0.322311</td>
<td>1.951155</td>
<td>2</td>
<td>True</td>
<td>36</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">18</td>
<td>RandomForestEntr_BAG_L1</td>
<td>-0.739567</td>
<td>-0.739567</td>
<td>log_loss</td>
<td>3.211556</td>
<td>3.338512</td>
<td>2.307917</td>
<td>3.211556</td>
<td>3.338512</td>
<td>2.307917</td>
<td>1</td>
<td>True</td>
<td>7</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">19</td>
<td>RandomForestGini_BAG_L1</td>
<td>-0.743406</td>
<td>-0.743406</td>
<td>log_loss</td>
<td>3.129520</td>
<td>0.386959</td>
<td>2.070676</td>
<td>3.129520</td>
<td>0.386959</td>
<td>2.070676</td>
<td>1</td>
<td>True</td>
<td>6</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">20</td>
<td>RandomForestGini_BAG_L2</td>
<td>-0.746055</td>
<td>-0.746055</td>
<td>log_loss</td>
<td>60.456664</td>
<td>31.374071</td>
<td>2198.547097</td>
<td>1.712746</td>
<td>0.221633</td>
<td>9.009941</td>
<td>2</td>
<td>True</td>
<td>33</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">21</td>
<td>XGBoost_r33_BAG_L1</td>
<td>-0.754110</td>
<td>-0.754110</td>
<td>log_loss</td>
<td>7.492479</td>
<td>5.680814</td>
<td>53.769325</td>
<td>7.492479</td>
<td>5.680814</td>
<td>53.769325</td>
<td>1</td>
<td>True</td>
<td>21</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">22</td>
<td>LightGBMLarge_BAG_L1</td>
<td>-0.754213</td>
<td>-0.754213</td>
<td>log_loss</td>
<td>2.008240</td>
<td>1.389452</td>
<td>9.230089</td>
<td>2.008240</td>
<td>1.389452</td>
<td>9.230089</td>
<td>1</td>
<td>True</td>
<td>13</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">23</td>
<td>LightGBM_r131_BAG_L1</td>
<td>-0.756506</td>
<td>-0.756506</td>
<td>log_loss</td>
<td>7.308746</td>
<td>6.312452</td>
<td>23.005960</td>
<td>7.308746</td>
<td>6.312452</td>
<td>23.005960</td>
<td>1</td>
<td>True</td>
<td>16</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">24</td>
<td>RandomForest_r195_BAG_L1</td>
<td>-0.759182</td>
<td>-0.759182</td>
<td>log_loss</td>
<td>2.094807</td>
<td>0.254650</td>
<td>5.030918</td>
<td>2.094807</td>
<td>0.254650</td>
<td>5.030918</td>
<td>1</td>
<td>True</td>
<td>26</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">25</td>
<td>CatBoost_r9_BAG_L1</td>
<td>-0.761596</td>
<td>-0.761596</td>
<td>log_loss</td>
<td>1.885603</td>
<td>0.509276</td>
<td>164.842572</td>
<td>1.885603</td>
<td>0.509276</td>
<td>164.842572</td>
<td>1</td>
<td>True</td>
<td>18</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">26</td>
<td>LightGBM_BAG_L1</td>
<td>-0.765499</td>
<td>-0.765499</td>
<td>log_loss</td>
<td>1.329988</td>
<td>1.015724</td>
<td>7.321401</td>
<td>1.329988</td>
<td>1.015724</td>
<td>7.321401</td>
<td>1</td>
<td>True</td>
<td>5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">27</td>
<td>XGBoost_BAG_L1</td>
<td>-0.766790</td>
<td>-0.766790</td>
<td>log_loss</td>
<td>1.154552</td>
<td>1.108733</td>
<td>21.912512</td>
<td>1.154552</td>
<td>1.108733</td>
<td>21.912512</td>
<td>1</td>
<td>True</td>
<td>11</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">28</td>
<td>LightGBM_r188_BAG_L1</td>
<td>-0.768142</td>
<td>-0.768142</td>
<td>log_loss</td>
<td>2.751938</td>
<td>1.632201</td>
<td>9.696105</td>
<td>2.751938</td>
<td>1.632201</td>
<td>9.696105</td>
<td>1</td>
<td>True</td>
<td>27</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">29</td>
<td>CatBoost_r13_BAG_L1</td>
<td>-0.772391</td>
<td>-0.772391</td>
<td>log_loss</td>
<td>2.387702</td>
<td>0.321269</td>
<td>253.209605</td>
<td>2.387702</td>
<td>0.321269</td>
<td>253.209605</td>
<td>1</td>
<td>True</td>
<td>25</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">30</td>
<td>LightGBMXT_BAG_L1</td>
<td>-0.772460</td>
<td>-0.772460</td>
<td>log_loss</td>
<td>2.659072</td>
<td>2.172474</td>
<td>10.480810</td>
<td>2.659072</td>
<td>2.172474</td>
<td>10.480810</td>
<td>1</td>
<td>True</td>
<td>4</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">31</td>
<td>CatBoost_r177_BAG_L1</td>
<td>-0.774637</td>
<td>-0.774637</td>
<td>log_loss</td>
<td>0.575816</td>
<td>0.149715</td>
<td>63.282011</td>
<td>0.575816</td>
<td>0.149715</td>
<td>63.282011</td>
<td>1</td>
<td>True</td>
<td>14</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">32</td>
<td>CatBoost_BAG_L1</td>
<td>-0.775142</td>
<td>-0.775142</td>
<td>log_loss</td>
<td>0.737181</td>
<td>0.202798</td>
<td>97.279686</td>
<td>0.737181</td>
<td>0.202798</td>
<td>97.279686</td>
<td>1</td>
<td>True</td>
<td>8</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">33</td>
<td>LightGBM_r96_BAG_L1</td>
<td>-0.778905</td>
<td>-0.778905</td>
<td>log_loss</td>
<td>27.299296</td>
<td>25.557928</td>
<td>59.550207</td>
<td>27.299296</td>
<td>25.557928</td>
<td>59.550207</td>
<td>1</td>
<td>True</td>
<td>19</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">34</td>
<td>ExtraTrees_r42_BAG_L1</td>
<td>-0.779346</td>
<td>-0.779346</td>
<td>log_loss</td>
<td>2.905398</td>
<td>0.455039</td>
<td>2.608203</td>
<td>2.905398</td>
<td>0.455039</td>
<td>2.608203</td>
<td>1</td>
<td>True</td>
<td>22</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">35</td>
<td>ExtraTreesGini_BAG_L1</td>
<td>-0.780239</td>
<td>-0.780239</td>
<td>log_loss</td>
<td>4.402335</td>
<td>0.555433</td>
<td>1.539585</td>
<td>4.402335</td>
<td>0.555433</td>
<td>1.539585</td>
<td>1</td>
<td>True</td>
<td>9</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">36</td>
<td>CatBoost_r137_BAG_L1</td>
<td>-0.780273</td>
<td>-0.780273</td>
<td>log_loss</td>
<td>1.036823</td>
<td>0.376350</td>
<td>238.156574</td>
<td>1.036823</td>
<td>0.376350</td>
<td>238.156574</td>
<td>1</td>
<td>True</td>
<td>23</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">37</td>
<td>ExtraTreesEntr_BAG_L1</td>
<td>-0.782794</td>
<td>-0.782794</td>
<td>log_loss</td>
<td>4.142951</td>
<td>0.514300</td>
<td>1.421637</td>
<td>4.142951</td>
<td>0.514300</td>
<td>1.421637</td>
<td>1</td>
<td>True</td>
<td>10</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">38</td>
<td>NeuralNetTorch_r79_BAG_L1</td>
<td>-0.795339</td>
<td>-0.795339</td>
<td>log_loss</td>
<td>0.421243</td>
<td>0.315833</td>
<td>293.931864</td>
<td>0.421243</td>
<td>0.315833</td>
<td>293.931864</td>
<td>1</td>
<td>True</td>
<td>15</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">39</td>
<td>NeuralNetFastAI_r102_BAG_L1</td>
<td>-0.795822</td>
<td>-0.795822</td>
<td>log_loss</td>
<td>0.691814</td>
<td>0.294400</td>
<td>33.487108</td>
<td>0.691814</td>
<td>0.294400</td>
<td>33.487108</td>
<td>1</td>
<td>True</td>
<td>24</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">40</td>
<td>NeuralNetFastAI_r191_BAG_L1</td>
<td>-0.797977</td>
<td>-0.797977</td>
<td>log_loss</td>
<td>2.015678</td>
<td>1.061679</td>
<td>153.761470</td>
<td>2.015678</td>
<td>1.061679</td>
<td>153.761470</td>
<td>1</td>
<td>True</td>
<td>17</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">41</td>
<td>NeuralNetFastAI_BAG_L1</td>
<td>-0.801051</td>
<td>-0.801051</td>
<td>log_loss</td>
<td>1.336139</td>
<td>1.015028</td>
<td>86.418419</td>
<td>1.336139</td>
<td>1.015028</td>
<td>86.418419</td>
<td>1</td>
<td>True</td>
<td>3</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">42</td>
<td>NeuralNetTorch_r22_BAG_L1</td>
<td>-0.805793</td>
<td>-0.805793</td>
<td>log_loss</td>
<td>0.508158</td>
<td>0.299280</td>
<td>349.202000</td>
<td>0.508158</td>
<td>0.299280</td>
<td>349.202000</td>
<td>1</td>
<td>True</td>
<td>20</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">43</td>
<td>NeuralNetFastAI_r145_BAG_L1</td>
<td>-0.807897</td>
<td>-0.807897</td>
<td>log_loss</td>
<td>1.738020</td>
<td>1.318004</td>
<td>53.690834</td>
<td>1.738020</td>
<td>1.318004</td>
<td>53.690834</td>
<td>1</td>
<td>True</td>
<td>28</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">44</td>
<td>NeuralNetTorch_BAG_L1</td>
<td>-0.811305</td>
<td>-0.811305</td>
<td>log_loss</td>
<td>0.536539</td>
<td>0.309353</td>
<td>251.715736</td>
<td>0.536539</td>
<td>0.309353</td>
<td>251.715736</td>
<td>1</td>
<td>True</td>
<td>12</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">45</td>
<td>XGBoost_r33_BAG_L2</td>
<td>-0.950595</td>
<td>-0.950595</td>
<td>log_loss</td>
<td>59.534849</td>
<td>31.566392</td>
<td>2212.616866</td>
<td>0.790931</td>
<td>0.413954</td>
<td>23.079710</td>
<td>2</td>
<td>True</td>
<td>47</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">46</td>
<td>KNeighborsUnif_BAG_L1</td>
<td>-2.426187</td>
<td>-2.426187</td>
<td>log_loss</td>
<td>0.120591</td>
<td>0.082648</td>
<td>0.120874</td>
<td>0.120591</td>
<td>0.082648</td>
<td>0.120874</td>
<td>1</td>
<td>True</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">47</td>
<td>KNeighborsDist_BAG_L1</td>
<td>-2.443102</td>
<td>-2.443102</td>
<td>log_loss</td>
<td>0.161030</td>
<td>0.080063</td>
<td>0.043268</td>
<td>0.161030</td>
<td>0.080063</td>
<td>0.043268</td>
<td>1</td>
<td>True</td>
<td>2</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="제출용-csv파일-생성-및-제출하기" class="level2">
<h2 class="anchored" data-anchor-id="제출용-csv파일-생성-및-제출하기">제출용 CSV파일 생성 및 제출하기</h2>
<ul>
<li>제출결과
<ul>
<li>Public점수 : 0.7384256792</li>
<li>Private점수 : 0.7185042016</li>
</ul></li>
</ul>
<div id="770926b7" class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 필요한 데이터 불러오기</span></span>
<span id="cb49-2">pre_df_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM test_pre"</span>)</span>
<span id="cb49-3">df_sample_submission <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM sample_submission'</span>)</span>
<span id="cb49-4"></span>
<span id="cb49-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 예측 및 제출 데이터 생성</span></span>
<span id="cb49-6">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor.predict_proba(pre_df_test)</span>
<span id="cb49-7">df_sample_submission.iloc[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_pred</span></code></pre></div>
</div>
<div id="bcb0080e" class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 저장 및 값 확인</span></span>
<span id="cb50-2">df_sample_submission.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'submission_pkb.csv'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb50-3">df_sample_submission.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">index</th>
<th data-quarto-table-cell-role="th">0</th>
<th data-quarto-table-cell-role="th">1</th>
<th data-quarto-table-cell-role="th">2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>26457</td>
<td>0.047518</td>
<td>0.103970</td>
<td>0.848513</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>26458</td>
<td>0.126270</td>
<td>0.316703</td>
<td>0.557027</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>26459</td>
<td>0.084927</td>
<td>0.117985</td>
<td>0.797088</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>26460</td>
<td>0.091055</td>
<td>0.101548</td>
<td>0.807397</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>26461</td>
<td>0.083222</td>
<td>0.160538</td>
<td>0.756240</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
</section>
<section id="향후-추가해보기" class="level1">
<h1>향후 추가해보기</h1>
<ul>
<li>cuml을 활용한 SHAP Kernel Explainer 활용
<ul>
<li>cuml 설치(Docker활용)
<ul>
<li>https://docs.rapids.ai/install/#selector ```shell docker run –gpus all –pull always –rm -it<br>
–shm-size=1g –ulimit memlock=-1 –ulimit stack=67108864<br>
nvcr.io/nvidia/rapidsai/base:24.12-cuda12.0-py3.12</li>
</ul></li>
</ul></li>
<li>파생변수 생성</li>
</ul>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>Autogluon</category>
  <category>CUDA</category>
  <category>EDA</category>
  <category>SHAP</category>
  <category>202412Study_DataAnalysis</category>
  <guid>https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250202/</guid>
  <pubDate>Sun, 02 Feb 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[DA스터디/6주차] optuna, Autogluon</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250126/</link>
  <description><![CDATA[ 






<p>금융권 데이터를 활용한 분석 스터디 - 6주차</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>아래의 목적/이유로 참가한 스터디에 대한 기록
<ul>
<li>SQLD취득 후 장기 미사용 &amp; GPT를 통한 SQL사용 등으로 많이 잊은 SQL을 복기</li>
<li>기존에 사용해 본 Optuna가 아닌 Autogluon이 커리큘럼에 있어 익혀보고자 함</li>
<li>기존에 관심있던 XAI(설명가능한 AI)를 익히고자 함</li>
</ul></li>
<li>6주차 요약
<ul>
<li>모델별 주요 하이퍼 파라미터</li>
<li>optuna</li>
<li>Autogluon</li>
</ul></li>
</ul>
</section>
<section id="주차-과제-내용정리" class="level1">
<h1>5주차 과제 내용정리</h1>
<ul>
<li>SHAP Force plot 여러개 비교 = Row(표본)별 비교</li>
</ul>
</section>
<section id="추가multi-label에-대한-catboost실습" class="level1">
<h1>(추가)Multi label에 대한 Catboost실습</h1>
<div id="4c707081" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># importing Libraries</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> catboost <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CatBoostClassifier</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score, classification_report</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ipywidgets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> widgets</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> display</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> joblib</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_iris</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span></code></pre></div>
</div>
<div id="9eb347b9" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the Iris dataset</span></span>
<span id="cb2-2">iris_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_iris()</span>
<span id="cb2-3">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iris_df.data</span>
<span id="cb2-4">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iris_df.target</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Split the data into training and testing sets</span></span>
<span id="cb2-7">X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a figure with specified dimensions (8x4)</span></span>
<span id="cb2-10">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a countplot to display the distribution of target classes (y_train)</span></span>
<span id="cb2-13">sns.countplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_train)</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the title, x-axis label, and y-axis label for the plot</span></span>
<span id="cb2-16">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Distribution of Target Classes'</span>)</span>
<span id="cb2-17">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Class'</span>)</span>
<span id="cb2-18">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the plot</span></span>
<span id="cb2-21">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250126/index_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="567f18e0" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 설정 및 학습</span></span>
<span id="cb3-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CatBoostClassifier(</span>
<span id="cb3-3">    iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, depth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,</span>
<span id="cb3-4">   loss_function<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MultiClass'</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb3-5">model.fit(X_train, y_train)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make predictions on the test set</span></span>
<span id="cb3-8">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(X_test)</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Evaluate the model</span></span>
<span id="cb3-11">accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred)</span>
<span id="cb3-12">report <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classification_report(y_test, y_pred)</span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># printing metrics</span></span>
<span id="cb3-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Classification Report:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, report)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy: 1.0
Classification Report:
               precision    recall  f1-score   support

           0       1.00      1.00      1.00        10
           1       1.00      1.00      1.00         9
           2       1.00      1.00      1.00        11

    accuracy                           1.00        30
   macro avg       1.00      1.00      1.00        30
weighted avg       1.00      1.00      1.00        30
</code></pre>
</div>
</div>
</section>
<section id="추가vs-code-팝업이-떠서-찾아보는-tensorboard" class="level1">
<h1>(추가)VS CODE 팝업이 떠서 찾아보는 Tensorboard</h1>
<ul>
<li>Catboost는 지원하지 않아 타 모델로 향후 실험</li>
</ul>
<div id="99dbcdf3" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># TensorBoard 로그를 저장할 디렉토리 설정</span></span>
<span id="cb5-4">log_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logs/fit"</span></span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SummaryWriter 설정</span></span>
<span id="cb5-7">tensorboard_callback <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.callbacks.TensorBoard(log_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>log_dir, histogram_freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-8"></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 학습 시 callback 추가</span></span>
<span id="cb5-10">model.fit(X_train, y_train, callbacks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[tensorboard_callback])</span></code></pre></div>
</div>
<div id="0a202d44" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>tensorboard <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>logdir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>logs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>fit</span></code></pre></div>
</div>
</section>
<section id="주차-수업정리" class="level1">
<h1>6주차 수업정리</h1>
<section id="하이퍼-파라미터" class="level2">
<h2 class="anchored" data-anchor-id="하이퍼-파라미터">하이퍼 파라미터</h2>
<ul>
<li>하이퍼 파라미터 튜닝 : 모델의 초기 설정값을 최적의 값으로 구하는 것</li>
</ul>
<section id="하이퍼-파라미터---rfrandom-forest-bagging" class="level3">
<h3 class="anchored" data-anchor-id="하이퍼-파라미터---rfrandom-forest-bagging">하이퍼 파라미터 - RF(Random Forest, Bagging)</h3>
<ul>
<li>주요 설정값
<ul>
<li><code>n_estimators</code> : 트리의 수 (Default=100)
<ul>
<li>증가할수록 계산비용 &amp; 성능 증가 (일정수준부터는 크게 상승하지 않음)
<ul>
<li>↔︎ 감소할수록 계산비용 감소. 그러나 과소적합 발생할 가능성</li>
</ul></li>
<li>(경험적으로)천 단위에서 마감하는 것이 좋음(만 단위에서 유의미한 성능향상 X)</li>
</ul></li>
<li><code>max_depth</code> : 트리의 최대 깊이 (Default=None)
<ul>
<li>증가할수록 모델의 복잡도 &amp; 과적합가능성 증대(복잡한 패턴을 익힐 수 있음)
<ul>
<li>↔︎ 감소할수록 과소적합 발생할 수 있음</li>
</ul></li>
</ul></li>
<li><code>min_samples_split</code> : 노드를 분할하기 위한 최소 샘플 수 (Default=2)
<ul>
<li>증가할수록 과적합 방지 &amp; 성능 감소
<ul>
<li>↔︎ 감소할수록 과적합 위험이 커짐(트리가 얕아짐짐)</li>
</ul></li>
</ul></li>
<li><code>min_samples_leaf</code> : 분할이 모두 끝난 노드(리프노드)의 최소 샘플 크기 (Default=1)
<ul>
<li>증가할수록 과적합 방지 &amp; 성능 감소
<ul>
<li>↔︎ 감소할수록 과적합 위험이 커짐</li>
</ul></li>
</ul></li>
<li><code>max_features</code> : 각 트리를 학습할 때 사용할 feature의 비율 (Default=1.0)
<ul>
<li>증가할수록 성능/계산비용용 향상 &amp; 과적합 확률 증가</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="하이퍼-파라미터---xgbxgboost-boosting" class="level3">
<h3 class="anchored" data-anchor-id="하이퍼-파라미터---xgbxgboost-boosting">하이퍼 파라미터 - XGB(XGBoost, Boosting)</h3>
<ul>
<li>주요 설정값
<ul>
<li><code>n_estimators</code> : 부스팅 단계의 수 (Default=100)
<ul>
<li>RF와 뜻은 다르지만 양상은 비슷함
<ul>
<li>클수록 계산비용/성능 향상(↔︎과소적합). 천단위 마감</li>
</ul></li>
</ul></li>
<li><code>max_depth</code> : 트리의 최대 깊이 (Default=6)
<ul>
<li>증가할수록 과적합 위험 증대</li>
</ul></li>
<li><code>Learning_rate(eta)</code> : 부스팅 단계에서 학습률을 조절 (Default=0.3)
<ul>
<li>배깅이 아닌 부스팅이므로, 학습률 개념이 있음</li>
<li>증가할수록 학습속도가 빨라지고, 초반 데이터에 가중치(+최적해를 놓칠 위험 있음)
<ul>
<li>↔︎ 낮을수록 느리지만 최적해에 안정적으로 수렴</li>
</ul></li>
</ul></li>
<li><code>subsample</code> : 각 단계에서 사용할 데이터 샘플[row]의 비율 (Default=1.0)
<ul>
<li>증가할수록 과적합방지 &amp; 성능적 단점</li>
</ul></li>
<li><code>colsample_bytree</code> : 각 트리를 학습할 때 사용할 feature[column]의 비율 (Default=1.0)
<ul>
<li>증가할수록 성능/비용 증가 &amp; 과적합 위험</li>
</ul></li>
<li>gamma : 노드 분할시 필요한 최소 손실 감소량 (Default=0)
<ul>
<li>0인 경우, Loss감소가 없더라도 성능에 부정적이지 않는다면 분할</li>
<li>증가할수록 노드 분할을 엄격히 수행(과적합 방지, 성능 하향)</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="하이퍼-파라미터---lgbmlight-gbm" class="level3">
<h3 class="anchored" data-anchor-id="하이퍼-파라미터---lgbmlight-gbm">하이퍼 파라미터 - LGBM(Light GBM)</h3>
<ul>
<li>주요 설정값
<ul>
<li>타 모델과 유사
<ul>
<li><code>n_estimators</code>[Default=100], <code>learning_rate</code>[Default=0.1], <code>subsample</code>(bagging_fraction, bagging) [Default=1.0],</li>
<li>Feature_fraction(<code>colsample_bytree</code>)[Default=1.0], <code>max_depth</code>[Default=-1]</li>
</ul></li>
<li>Num_leaves : 하나의 트리가 가질 수 있는 최대의 (분할이 끝난)리프 노드 수(Default=31)
<ul>
<li>값이 증가할수록 트리가 복잡 &amp; 과적합 &amp; 메모리 사용 증가</li>
</ul></li>
<li>Min_data_in_leaf(min_child_samples) : 리프 노드의 최소 샘플 수 (Default=20)</li>
</ul></li>
</ul>
</section>
<section id="하이퍼-파라미터---catboost" class="level3">
<h3 class="anchored" data-anchor-id="하이퍼-파라미터---catboost">하이퍼 파라미터 - Catboost</h3>
<ul>
<li>주요 설정값
<ul>
<li>타 모델과 유사
<ul>
<li>n_estimators[Default=100], learning_rate[Default=0.03], subsample[Default=None], Feature_fraction[Default=None]</li>
</ul></li>
<li><code>Depth</code> : 트리의 최대 깂이 (Default=-1)</li>
<li><code>Bagging_temperature</code> : 샘플링의 무작위성을 제어 (Default=1.0)
<ul>
<li>높을수록 샘플링이 다양해지며 일반화 성능 향상 (속도 느려짐)</li>
</ul></li>
<li><code>L2_leaf_reg</code> : 리프 노드의 가중치에 부여하는 패널티의 정도 (Default=3)
<ul>
<li>클수록 과적합 방지</li>
</ul></li>
</ul></li>
</ul>
</section>
</section>
<section id="optuna" class="level2">
<h2 class="anchored" data-anchor-id="optuna">optuna</h2>
<section id="optuna란" class="level3">
<h3 class="anchored" data-anchor-id="optuna란">optuna란</h3>
<ul>
<li>기존의 Tuning Tools
<ul>
<li>Grid Search : 오래걸리지만 Grid에 적절한 값이 없으면 최적값을 찾지 못함</li>
<li>Random Search : 위의 Grid Search 문제를 해결해도 최적값을 꼭 찾지 못함</li>
</ul></li>
<li>optuna vs hyperopt
<ul>
<li>25년 1월 기준, github star 기준으로 optuna 11.3k &gt; hyperopt 7.3k</li>
</ul></li>
<li>optuna
<ul>
<li>정의한 목적함수를 기반으로 최적화를 쉽게 진행
<ul>
<li>베이지안 최적화와 유사한 TPE알고리즘을 사용한 탐색을 지행(그 외의 다양한 전략도 커스터마이징 가능)</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="optuna-구성요소와-작동방식" class="level3">
<h3 class="anchored" data-anchor-id="optuna-구성요소와-작동방식">optuna 구성요소와 작동방식</h3>
<ul>
<li>구성요소
<ul>
<li>Study : 최적화 과정 전체를 관리. 각 하이퍼 파라미터 탐색(Trial)의 결과를 저장</li>
<li>Search Space : 하이퍼 파라미터의 범위 지정</li>
<li>Objective function : 목적함수. 모델을 학습시키고 평가지표를 반환</li>
<li>Trial : 하이퍼파라미터의 조합을 나타내는 단위 (1번의 Trial로 목적함수를 실행)</li>
</ul></li>
<li>작동방식
<ul>
<li>Search Space(탐색공간)에서 int/float/categorical 등을 정의</li>
<li>Objective function(목적함수)를 실행해 모델학습하고 성능지표 반환</li>
<li>정의된 조합을 효율적으로 선택해, 반복적으로(Trial) 성능 개선</li>
<li>최적의 하이퍼파라미터와 정보를 Study객체에 저장</li>
</ul></li>
<li>참고
<ul>
<li>Search Space에서 정의한 범위에서 조합하므로, 그 밖의 범위에서 최적해가 있으면 찾을 수 없음</li>
</ul></li>
</ul>
</section>
</section>
<section id="optuna-실습" class="level2">
<h2 class="anchored" data-anchor-id="optuna-실습">optuna 실습</h2>
<section id="데이터-로딩" class="level3">
<h3 class="anchored" data-anchor-id="데이터-로딩">데이터 로딩</h3>
<div id="e39f0450" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, roc_auc_score, log_loss</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> xgboost <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> xgb</span>
<span id="cb7-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb7-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb7-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb7-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb7-8"></span>
<span id="cb7-9">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data_preprocessed.csv"</span>)</span></code></pre></div>
</div>
</section>
<section id="lgbm-vanila모델" class="level3">
<h3 class="anchored" data-anchor-id="lgbm-vanila모델">LGBM Vanila모델</h3>
<div id="41a19793" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> lightgbm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LGBMClassifier</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, roc_auc_score</span>
<span id="cb8-3"></span>
<span id="cb8-4">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>])</span>
<span id="cb8-5">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>]</span>
<span id="cb8-6">X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Full Model</span></span>
<span id="cb8-9">full_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LGBMClassifier(class_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"balanced"</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb8-10">full_model.fit(X_train, y_train)</span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Full Pred</span></span>
<span id="cb8-13">y_pred_full <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> full_model.predict(X_test)</span>
<span id="cb8-14">y_proba_full <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> full_model.predict_proba(X_test)</span>
<span id="cb8-15"></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Full Results</span></span>
<span id="cb8-17">accuracy_full <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred_full)</span>
<span id="cb8-18">auc_full <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roc_auc_score(y_test, y_proba_full[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb8-19">cf_full <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_test, y_pred_full)</span>
<span id="cb8-20"></span>
<span id="cb8-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'정확도 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(accuracy_full,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb8-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'AUC : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(auc_full,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb8-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''Vanilla LGBM의 CF :</span></span>
<span id="cb8-24"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cf_full<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>정확도 : 0.703
AUC : 0.7578
Vanilla LGBM의 CF :
[[39914 16640]
 [ 1629  3320]]</code></pre>
</div>
</div>
</section>
<section id="lgbm-with-optuna" class="level3">
<h3 class="anchored" data-anchor-id="lgbm-with-optuna">LGBM with optuna</h3>
<ul>
<li>최적의 하이퍼파라미터 조합 찾기</li>
</ul>
<div id="6be8bc0c" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> optuna</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> lightgbm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LGBMClassifier, early_stopping</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터 분할</span></span>
<span id="cb10-5">X_train, X_val, y_train, y_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X_train, y_train, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span></code></pre></div>
</div>
<div id="4ccd9dd6" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 목적 함수 정의</span></span>
<span id="cb11-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> objective(trial):</span>
<span id="cb11-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LGBMClassifier 하이퍼파라미터 설정</span></span>
<span id="cb11-4">    param <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb11-5">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'learning_rate'</span>: trial.suggest_float(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'learning_rate'</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, log <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default = 0.1</span></span>
<span id="cb11-6">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_leaves'</span>: trial.suggest_int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_leaves'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default = 31</span></span>
<span id="cb11-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'max_depth': trial.suggest_int('max_depth', -1, 50), # default = -1</span></span>
<span id="cb11-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n_estimators'</span> : trial.suggest_int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n_estimators'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default = 100</span></span>
<span id="cb11-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'subsample'</span>: trial.suggest_float(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'subsample'</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default = 1.0</span></span>
<span id="cb11-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_child_samples'</span> : trial.suggest_int(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_data_in_leaf'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default = 20</span></span>
<span id="cb11-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'colsample_bytree'</span>: trial.suggest_float(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'colsample_bytree'</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default = 1.0</span></span>
<span id="cb11-12">    }</span>
<span id="cb11-13"></span>
<span id="cb11-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LGBMClassifier 모델 생성 및 학습</span></span>
<span id="cb11-15">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LGBMClassifier(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>param, n_jobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb11-16">                           class_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'balanced'</span>,</span>
<span id="cb11-17">                           random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>,</span>
<span id="cb11-18">                          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  device_type='gpu', colab환경에서 정상적으로 gpu가 활용이 안되네요...이거 해결만 온종일 할 거 같아서 일단 cpu기준으로 학습합니다.</span></span>
<span id="cb11-19">                          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  https://stackoverflow.com/questions/75981883/can-not-use-lightgbm-gpu-in-colab-lightgbmerror-no-opencl-device-found</span></span>
<span id="cb11-20">                           )</span>
<span id="cb11-21">    model.fit(X_train, y_train,</span>
<span id="cb11-22">              eval_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[(X_val, y_val)],</span>
<span id="cb11-23">              eval_metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auc'</span>,</span>
<span id="cb11-24">              callbacks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[early_stopping(stopping_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)]</span>
<span id="cb11-25">    )</span>
<span id="cb11-26"></span>
<span id="cb11-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 검증 데이터에 대한 예측</span></span>
<span id="cb11-28">    proba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(X_val)</span>
<span id="cb11-29"></span>
<span id="cb11-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 정확도 계산</span></span>
<span id="cb11-31">    roc_auc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roc_auc_score(y_val, proba)</span>
<span id="cb11-32"></span>
<span id="cb11-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> roc_auc</span>
<span id="cb11-34"></span>
<span id="cb11-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optuna 튜닝 실행</span></span>
<span id="cb11-36">study <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optuna.create_study(direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'maximize'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 높아질수록 좋은 roc_auc_score에 대해 maximize</span></span>
<span id="cb11-37">study.optimize(objective, n_trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span></code></pre></div>
</div>
<div id="9ef20e0d" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 최적 파라미터 출력</span></span>
<span id="cb12-2">best_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> study.best_trial.params</span>
<span id="cb12-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(best_params)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'learning_rate': 0.02642230824686883, 'num_leaves': 34, 'n_estimators': 864, 'subsample': 0.8342595493628282, 'min_data_in_leaf': 60, 'colsample_bytree': 0.8360285193709883}</code></pre>
</div>
</div>
<ul>
<li>찾은 조합을 활용한 final model</li>
</ul>
<div id="55b5a6aa" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb14-2"></span>
<span id="cb14-3">final_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LGBMClassifier(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>best_params,</span>
<span id="cb14-4">                             n_jobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb14-5">                             class_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'balanced'</span>,</span>
<span id="cb14-6">                             random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>,)</span>
<span id="cb14-7">final_model.fit(X_train, y_train)</span>
<span id="cb14-8"></span>
<span id="cb14-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optuna Pred</span></span>
<span id="cb14-10">y_pred_final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> final_model.predict(X_test)</span>
<span id="cb14-11">y_proba_final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> final_model.predict_proba(X_test)</span>
<span id="cb14-12"></span>
<span id="cb14-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optuna Results</span></span>
<span id="cb14-14">accuracy_final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred_final)</span>
<span id="cb14-15">auc_final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roc_auc_score(y_test, y_proba_final[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb14-16">cf_final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_test, y_pred_final)</span>
<span id="cb14-17"></span>
<span id="cb14-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'정확도 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(accuracy_final,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb14-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'AUC : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(auc_final,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb14-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''Optuna LGBM의 CF :</span></span>
<span id="cb14-21"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cf_final<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[LightGBM] [Warning] min_data_in_leaf is set=60, min_child_samples=20 will be ignored. Current value: min_data_in_leaf=60
[LightGBM] [Warning] min_data_in_leaf is set=60, min_child_samples=20 will be ignored. Current value: min_data_in_leaf=60
정확도 : 0.7229
AUC : 0.7602
Optuna LGBM의 CF :
[[41245 15309]
 [ 1735  3214]]</code></pre>
</div>
</div>
</section>
<section id="lgbm-결과비교-vanila모델-vs-optuna" class="level3">
<h3 class="anchored" data-anchor-id="lgbm-결과비교-vanila모델-vs-optuna">LGBM 결과비교 (vanila모델 vs optuna)</h3>
<ul>
<li>LGBM Vanila모델
<ul>
<li>정확도 : 0.703</li>
<li>AUC : 0.7578</li>
<li>Vanilla LGBM의 CF : [[39914 16640] [ 1629 3320]]</li>
</ul></li>
<li>LGBM with optuna
<ul>
<li>정확도 : 0.7229</li>
<li>AUC : 0.7602</li>
<li>Optuna LGBM의 CF : [[41245 15309] [ 1735 3214]]</li>
</ul></li>
</ul>
</section>
</section>
<section id="autogluon" class="level2">
<h2 class="anchored" data-anchor-id="autogluon">Autogluon</h2>
<section id="autogluon이란" class="level3">
<h3 class="anchored" data-anchor-id="autogluon이란">Autogluon이란</h3>
<ul>
<li>Autogluon : optuna와 비슷한 방식으로 최적화하며, 최소한의 코드</li>
</ul>
</section>
<section id="autogluon구성요소와-설정값" class="level3">
<h3 class="anchored" data-anchor-id="autogluon구성요소와-설정값">Autogluon구성요소와 설정값</h3>
<ul>
<li>구성요소
<ul>
<li><code>TablePredictor</code> : (분류/회귀에 사용) Tabular데이터 처리</li>
<li><code>TimeSeriesPredictor</code> : 시계열 데이터 예측</li>
<li><code>TextPredictor</code> : (연관성 분석 등) 자연어 처리</li>
<li><code>ImagePredictor</code> : 이미지 처리</li>
</ul></li>
<li>설정값
<ul>
<li><code>Time_limit</code> : 학습 제한시간(Default=None)</li>
<li><code>Presets</code> : 사전 설정된 학습 전략 (best/high/good/medium quality. medium이 기본값)</li>
<li><code>hyperparameters</code> : (dict) 사용할 모델의 하이퍼파라미터들</li>
<li><code>Auto_stack</code> : 배깅 및 스택 앙상블링을 자동으로 활용할지 여부(Default=False)
<ul>
<li>True(더 오래/정확히 학습)인 경우, <code>num_bag_fold</code> &amp; <code>num_stack_levels</code> 자동 설정
<ul>
<li><code>num_bag_fold</code> : 배깅에 사용되는 폴드 수. 성능을 높이고 싶다면 5~10 사이를 권장(10이하의 값을 가짐)</li>
<li><code>num_stack_levels</code> : 스택에 사용되는 스태킹 레벨 수. 성능을 높이고 싶다면 2~3 사이를 권장(3이하의 값을 가짐)</li>
</ul></li>
</ul></li>
</ul></li>
<li>Leader board</li>
</ul>
</section>
</section>
<section id="autogluon실습" class="level2">
<h2 class="anchored" data-anchor-id="autogluon실습">Autogluon실습</h2>
<section id="하단-코드의-실행내역-이해하기" class="level3">
<h3 class="anchored" data-anchor-id="하단-코드의-실행내역-이해하기">하단 코드의 실행내역 이해하기</h3>
<ul>
<li>실행내역 중 일부만 발췌함</li>
</ul>
<pre><code># 0,1로 추정되는 값 bool 변환
Stage 1 Generators:
    Fitting AsTypeFeatureGenerator...
        Note: Converting 48 features to boolean dtype as they only contain 2 unique values.

# Null값 처리
Stage 2 Generators:
    Fitting FillNaFeatureGenerator...

# 그대로 사용할 값 처리(변환X)
Stage 3 Generators:
    Fitting IdentityFeatureGenerator...

# Unique값 처리
Stage 4 Generators:
    Fitting DropUniqueFeatureGenerator...

# 중복값 처리
Stage 5 Generators:
    Fitting DropDuplicatesFeatureGenerator...

# Feature 처리(앞서 전처리한 데이터이기는 하나, autogluon이 판단하여 추가 처리)
Unused Original Features (Count: 4): ['FLAG_DOCUMENT_4', 'FLAG_DOCUMENT_7', 'FLAG_DOCUMENT_10', 'FLAG_DOCUMENT_12']
    These features were not used to generate any of the output features. Add a feature generator compatible with these features to utilize them.
    Features can also be unused if they carry very little information, such as being categorical but having almost entirely unique values or being duplicates of other features.
    These features do not need to be present at inference time.
    ('int', []) : 4 | ['FLAG_DOCUMENT_4', 'FLAG_DOCUMENT_7', 'FLAG_DOCUMENT_10', 'FLAG_DOCUMENT_12']

# 사용할 모델
User-specified model hyperparameters to be fit:
{
    'NN_TORCH': [{}],
    'GBM': [{'extra_trees': True, 'ag_args': {'name_suffix': 'XT'}}, {}, {'learning_rate': 0.03, 'num_leaves': 128, 'feature_fraction': 0.9, 'min_data_in_leaf': 3, 'ag_args': {'name_suffix': 'Large', 'priority': 0, 'hyperparameter_tune_kwargs': None}}],
    'CAT': [{}],
    'XGB': [{}],
    'FASTAI': [{}],
    'RF': [{'criterion': 'gini', 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],
    'XT': [{'criterion': 'gini', 'ag_args': {'name_suffix': 'Gini', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'entropy', 'ag_args': {'name_suffix': 'Entr', 'problem_types': ['binary', 'multiclass']}}, {'criterion': 'squared_error', 'ag_args': {'name_suffix': 'MSE', 'problem_types': ['regression', 'quantile']}}],
    'KNN': [{'weights': 'uniform', 'ag_args': {'name_suffix': 'Unif'}}, {'weights': 'distance', 'ag_args': {'name_suffix': 'Dist'}}],
}

# sequential하게 trial 진행
Fitting 13 L1 models, fit_strategy="sequential" ...
Fitting model: KNeighborsUnif ... Training model for up to 3595.93s of the 3595.92s of remaining time.
    0.5271   = Validation score   (roc_auc)
    1.62s    = Training   runtime
    50.83s   = Validation runtime
Fitting model: KNeighborsDist ... Training model for up to 3543.23s of the 3543.23s of remaining time.
    0.5298   = Validation score   (roc_auc)
    0.63s    = Training   runtime
    49.39s   = Validation runtime
...

# 실행시간 및 best model
AutoGluon training complete, total runtime = 1561.52s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 4907.4 rows/s (24601 batch size)</code></pre>
<div id="36c13813" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> autogluon.tabular <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TabularPredictor</span>
<span id="cb17-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb17-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> roc_auc_score</span>
<span id="cb17-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb17-5"></span>
<span id="cb17-6">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'autogluon_results'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 저장할 경로로</span></span>
<span id="cb17-7"></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터 분할 (이전 코드에서 X_train, y_train, X_val, y_val, X_test, y_test를 준비했다고 가정)</span></span>
<span id="cb17-9"></span>
<span id="cb17-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터프레임으로 변환</span></span>
<span id="cb17-11">train_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train</span>
<span id="cb17-12">train_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train</span>
<span id="cb17-13"></span>
<span id="cb17-14">val_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_val</span>
<span id="cb17-15">val_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_val</span>
<span id="cb17-16"></span>
<span id="cb17-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AutoGluon 학습</span></span>
<span id="cb17-18">predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TabularPredictor(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>, eval_metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'roc_auc'</span>, verbosity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>path)</span>
<span id="cb17-19">predictor.fit(train_data, tuning_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>val_data, time_limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3600</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시간 제한 설정 (1시간)</span></span></code></pre></div>
</div>
<div id="1a0754be" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 예측 및 평가</span></span>
<span id="cb18-2">test_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_test</span>
<span id="cb18-3">test_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_test</span>
<span id="cb18-4"></span>
<span id="cb18-5">y_pred_proba_ag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor.predict_proba(test_data)</span>
<span id="cb18-6">y_pred_ag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor.predict(test_data)</span>
<span id="cb18-7"></span>
<span id="cb18-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optuna Results</span></span>
<span id="cb18-9">accuracy_ag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred_ag)</span>
<span id="cb18-10">auc_ag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roc_auc_score(y_test, y_pred_proba_ag.iloc[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb18-11">cf_ag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_test, y_pred_ag)</span>
<span id="cb18-12"></span>
<span id="cb18-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'정확도 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(accuracy_ag,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb18-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'AUC : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(auc_ag,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb18-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''autogluon LGBM의 CF :</span></span>
<span id="cb18-16"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cf_ag<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>정확도 : 0.9199
AUC : 0.761
autogluon LGBM의 CF : 
[[56492    62]
 [ 4864    85]]</code></pre>
</div>
</div>
</section>
<section id="결과-비교하기-optuna-vs-autogluon" class="level3">
<h3 class="anchored" data-anchor-id="결과-비교하기-optuna-vs-autogluon">결과 비교하기 (optuna vs autogluon)</h3>
<ul>
<li>LGBM with optuna
<ul>
<li>정확도 : 0.7229</li>
<li>AUC : 0.7602</li>
<li>Optuna LGBM의 CF : [[41245 15309] [ 1735 3214]]</li>
</ul></li>
<li>Autogluon
<ul>
<li>정확도 : 0.9199</li>
<li>AUC : 0.761</li>
<li>autogluon LGBM의 CF : [[56492 62] [ 4864 85]]</li>
</ul></li>
</ul>
</section>
<section id="autogluon-leaderboard" class="level3">
<h3 class="anchored" data-anchor-id="autogluon-leaderboard">Autogluon leaderboard</h3>
<ul>
<li>Leaderboard : Autogluon이 학습했던 모델들의 Score확인 가능
<ul>
<li>각 모델의 score나 time 등을 확인 가능</li>
</ul></li>
</ul>
<div id="dfc43063" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 최적 모델 요약 출력</span></span>
<span id="cb20-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(predictor.leaderboard())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                  model  score_val eval_metric  pred_time_val    fit_time  \
0   WeightedEnsemble_L2   0.754022     roc_auc       5.013031  663.924621   
1              CatBoost   0.753185     roc_auc       0.050006  108.363011   
2              LightGBM   0.750591     roc_auc       0.188981   20.328846   
3               XGBoost   0.749953     roc_auc       0.238468   74.874593   
4            LightGBMXT   0.749184     roc_auc       0.669894   49.791667   
5         LightGBMLarge   0.748378     roc_auc       0.653803   39.147023   
6        NeuralNetTorch   0.740312     roc_auc       0.203650  140.524567   
7       NeuralNetFastAI   0.737314     roc_auc       0.325043  136.662297   
8      RandomForestEntr   0.731284     roc_auc       1.649255  304.078007   
9        ExtraTreesEntr   0.722843     roc_auc       1.512995  135.927222   
10       ExtraTreesGini   0.722248     roc_auc       1.357874  120.171119   
11     RandomForestGini   0.720812     roc_auc       2.502675  288.912408   
12       KNeighborsDist   0.529842     roc_auc      49.391568    0.634750   
13       KNeighborsUnif   0.527099     roc_auc      50.827020    1.620968   

    pred_time_val_marginal  fit_time_marginal  stack_level  can_infer  \
0                 0.005133           1.482976            2       True   
1                 0.050006         108.363011            1       True   
2                 0.188981          20.328846            1       True   
3                 0.238468          74.874593            1       True   
4                 0.669894          49.791667            1       True   
5                 0.653803          39.147023            1       True   
6                 0.203650         140.524567            1       True   
7                 0.325043         136.662297            1       True   
8                 1.649255         304.078007            1       True   
9                 1.512995         135.927222            1       True   
10                1.357874         120.171119            1       True   
11                2.502675         288.912408            1       True   
12               49.391568           0.634750            1       True   
13               50.827020           1.620968            1       True   

    fit_order  
0          14  
1           7  
2           4  
3          11  
4           3  
5          13  
6          12  
7          10  
8           6  
9           9  
10          8  
11          5  
12          2  
13          1  </code></pre>
</div>
</div>
</section>
</section>
<section id="paramater를-직접-지정하기" class="level2">
<h2 class="anchored" data-anchor-id="paramater를-직접-지정하기">paramater를 직접 지정하기</h2>
<ul>
<li>Autogluon은 이렇게 기본으로 사용해도 훌륭한 성능을 보여줍니다. 자동으로 파라미터를 지정하고, 앙상블까지 해주죠.</li>
<li>이런 베이스 모델을 생성한 뒤에는, 쓸모 없거나 너무 무거운 모델은 제거하고 다시 학습시킬 수도 있습니다.</li>
<li>LGBM, XGB, CAT 세 개가 성능도 괜찮고 학습시간도 짧네요. 이거 세 개만 써봅시다.</li>
<li>위에서 Optuna에서 찾은 파라미터를 여기서 사용하실 수도 있겠죠?</li>
</ul>
<section id="autogluon-하이퍼파라미터-설정" class="level3">
<h3 class="anchored" data-anchor-id="autogluon-하이퍼파라미터-설정">Autogluon 하이퍼파라미터 설정</h3>
<ul>
<li>베이스 모델을 생성한 뒤, 쓸모 없거나 너무 무거운 모델을 제거하고 학습 가능(Leaderboard로 확인)</li>
<li>위의 Leaderboard 결과에서, LGBM/XGB/CAT을 가지고 하이퍼파라미터를 설정</li>
</ul>
<div id="d133882c" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> autogluon.tabular <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TabularPredictor</span>
<span id="cb22-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb22-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> roc_auc_score</span>
<span id="cb22-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb22-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb22-6"></span>
<span id="cb22-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> autogluon.tabular <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TabularPredictor</span>
<span id="cb22-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb22-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> roc_auc_score</span>
<span id="cb22-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb22-11"></span>
<span id="cb22-12">path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'drive/MyDrive/Metacode/Week6/selected_model'</span></span>
<span id="cb22-13">os.makedirs(path, exist_ok<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb22-14"></span>
<span id="cb22-15">train_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train</span>
<span id="cb22-16">train_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train</span>
<span id="cb22-17"></span>
<span id="cb22-18">val_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_val</span>
<span id="cb22-19">val_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_val</span>
<span id="cb22-20"></span>
<span id="cb22-21">scale_pos_weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y_train[y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y_train[y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 불균형 데이터 가중치 설정</span></span>
<span id="cb22-22"></span>
<span id="cb22-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델별 하이퍼파라미터 지정</span></span>
<span id="cb22-24">custom_hyperparameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb22-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GBM'</span>: {</span>
<span id="cb22-26">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'learning_rate'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02642230824686883</span>,</span>
<span id="cb22-27">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num_leaves'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">34</span>,</span>
<span id="cb22-28">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n_estimators'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">864</span>,</span>
<span id="cb22-29">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'subsample'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8342595493628282</span>,</span>
<span id="cb22-30">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min_data_in_leaf'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>,</span>
<span id="cb22-31">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'colsample_bytree'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8360285193709883</span>,</span>
<span id="cb22-32">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n_jobs'</span>:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb22-33">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'class_weight'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'balanced'</span></span>
<span id="cb22-34">    },</span>
<span id="cb22-35">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CAT'</span>: {</span>
<span id="cb22-36">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scale_pos_weight'</span>: scale_pos_weight</span>
<span id="cb22-37">    },</span>
<span id="cb22-38">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'XGB'</span>: {</span>
<span id="cb22-39">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'scale_pos_weight'</span>: scale_pos_weight</span>
<span id="cb22-40">    }</span>
<span id="cb22-41">}</span>
<span id="cb22-42"></span>
<span id="cb22-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AutoGluon 학습</span></span>
<span id="cb22-44">predictor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TabularPredictor(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>, eval_metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'roc_auc'</span>, verbosity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>path)</span>
<span id="cb22-45">predictor.fit(</span>
<span id="cb22-46">    train_data,</span>
<span id="cb22-47">    tuning_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>val_data,</span>
<span id="cb22-48">    time_limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3600</span>,</span>
<span id="cb22-49">    hyperparameters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>custom_hyperparameters</span>
<span id="cb22-50">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Warning: path already exists! This predictor may overwrite an existing predictor! path="drive/MyDrive/Metacode/Week6/selected_model"
Verbosity: 2 (Standard Logging)
=================== System Info ===================
AutoGluon Version:  1.2
Python Version:     3.11.11
Operating System:   Linux
Platform Machine:   x86_64
Platform Version:   #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:05:47 UTC 2024
CPU Count:          2
Memory Avail:       8.70 GB / 12.67 GB (68.6%)
Disk Space Avail:   0.50 GB / 15.00 GB (3.3%)
    WARNING: Available disk space is low and there is a risk that AutoGluon will run out of disk during fit, causing an exception. 
    We recommend a minimum available disk space of 10 GB, and large datasets may require more.
===================================================
No presets specified! To achieve strong results with AutoGluon, it is recommended to use the available presets. Defaulting to `'medium'`...
    Recommended Presets (For more details refer to https://auto.gluon.ai/stable/tutorials/tabular/tabular-essentials.html#presets):
    presets='experimental' : New in v1.2: Pre-trained foundation model + parallel fits. The absolute best accuracy without consideration for inference speed. Does not support GPU.
    presets='best'         : Maximize accuracy. Recommended for most users. Use in competitions and benchmarks.
    presets='high'         : Strong accuracy with fast inference speed.
    presets='good'         : Good accuracy with very fast inference speed.
    presets='medium'       : Fast training time, ideal for initial prototyping.
Beginning AutoGluon training ... Time limit = 3600s
AutoGluon will save models to "/content/drive/MyDrive/Metacode/Week6/selected_model"
Train Data Rows:    246008
Train Data Columns: 131
Tuning Data Rows:    24601
Tuning Data Columns: 131
Label Column:       target
AutoGluon infers your prediction problem is: 'binary' (because only two unique label-values observed).
    2 unique label values:  [0, 1]
    If 'binary' is not the correct problem_type, please manually specify the problem_type parameter during Predictor init (You may specify problem_type as one of: ['binary', 'multiclass', 'regression', 'quantile'])
Problem Type:       binary
Preprocessing data ...
Selected class &lt;--&gt; label mapping:  class 1 = 1, class 0 = 0
Using Feature Generators to preprocess the data ...
Fitting AutoMLPipelineFeatureGenerator...
    Available Memory:                    8776.27 MB
    Train Data (Original)  Memory Usage: 270.46 MB (3.1% of available memory)
    Inferring data type of each feature based on column values. Set feature_metadata_in to manually specify special dtypes of the features.
    Stage 1 Generators:
        Fitting AsTypeFeatureGenerator...
            Note: Converting 48 features to boolean dtype as they only contain 2 unique values.
    Stage 2 Generators:
        Fitting FillNaFeatureGenerator...
    Stage 3 Generators:
        Fitting IdentityFeatureGenerator...
    Stage 4 Generators:
        Fitting DropUniqueFeatureGenerator...
    Stage 5 Generators:
        Fitting DropDuplicatesFeatureGenerator...
    Unused Original Features (Count: 6): ['FLAG_DOCUMENT_4', 'FLAG_DOCUMENT_7', 'FLAG_DOCUMENT_10', 'FLAG_DOCUMENT_12', 'FLAG_DOCUMENT_17', 'CODE_GENDER_XNA']
        These features were not used to generate any of the output features. Add a feature generator compatible with these features to utilize them.
        Features can also be unused if they carry very little information, such as being categorical but having almost entirely unique values or being duplicates of other features.
        These features do not need to be present at inference time.
        ('float', []) : 1 | ['CODE_GENDER_XNA']
        ('int', [])   : 5 | ['FLAG_DOCUMENT_4', 'FLAG_DOCUMENT_7', 'FLAG_DOCUMENT_10', 'FLAG_DOCUMENT_12', 'FLAG_DOCUMENT_17']
    Types of features in original data (raw dtype, special dtypes):
        ('float', []) : 88 | ['AMT_INCOME_TOTAL', 'AMT_CREDIT', 'AMT_ANNUITY', 'AMT_GOODS_PRICE', 'REGION_POPULATION_RELATIVE', ...]
        ('int', [])   : 37 | ['SK_ID_CURR', 'CNT_CHILDREN', 'DAYS_BIRTH', 'DAYS_ID_PUBLISH', 'FLAG_MOBIL', ...]
    Types of features in processed data (raw dtype, special dtypes):
        ('float', [])     : 69 | ['AMT_INCOME_TOTAL', 'AMT_CREDIT', 'AMT_ANNUITY', 'AMT_GOODS_PRICE', 'REGION_POPULATION_RELATIVE', ...]
        ('int', [])       : 14 | ['SK_ID_CURR', 'CNT_CHILDREN', 'DAYS_BIRTH', 'DAYS_ID_PUBLISH', 'HOUR_APPR_PROCESS_START', ...]
        ('int', ['bool']) : 42 | ['FLAG_MOBIL', 'FLAG_EMP_PHONE', 'FLAG_WORK_PHONE', 'FLAG_CONT_MOBILE', 'FLAG_PHONE', ...]
    4.1s = Fit runtime
    125 features in original data used to generate 125 features in processed data.
    Train Data (Processed) Memory Usage: 182.20 MB (2.1% of available memory)
Data preprocessing and feature engineering runtime = 4.62s ...
AutoGluon will gauge predictive performance using evaluation metric: 'roc_auc'
    This metric expects predicted probabilities rather than predicted class labels, so you'll need to use predict_proba() instead of predict()
    To change this, specify the eval_metric parameter of Predictor()
User-specified model hyperparameters to be fit:
{
    'GBM': [{'learning_rate': 0.02642230824686883, 'num_leaves': 34, 'n_estimators': 864, 'subsample': 0.8342595493628282, 'min_data_in_leaf': 60, 'colsample_bytree': 0.8360285193709883, 'n_jobs': -1, 'class_weight': 'balanced'}],
    'CAT': [{'scale_pos_weight': 11.377138257194607}],
    'XGB': [{'scale_pos_weight': 11.377138257194607}],
}
Fitting 3 L1 models, fit_strategy="sequential" ...
Fitting model: LightGBM ... Training model for up to 3595.38s of the 3595.38s of remaining time.
/usr/local/lib/python3.11/dist-packages/lightgbm/engine.py:204: UserWarning: Found `n_estimators` in params. Will use it instead of argument
  _log_warning(f"Found `{alias}` in params. Will use it instead of argument")
    0.8437   = Validation score   (roc_auc)
    93.76s   = Training   runtime
    2.52s    = Validation runtime
Fitting model: CatBoost ... Training model for up to 3498.78s of the 3498.77s of remaining time.
    0.9877   = Validation score   (roc_auc)
    1941.71s     = Training   runtime
    0.38s    = Validation runtime
Fitting model: XGBoost ... Training model for up to 1556.46s of the 1556.46s of remaining time.
    0.9982   = Validation score   (roc_auc)
    1556.76s     = Training   runtime
    11.44s   = Validation runtime
Fitting model: WeightedEnsemble_L2 ... Training model for up to 360.00s of the -11.97s of remaining time.
    Ensemble Weights: {'XGBoost': 1.0}
    0.9982   = Validation score   (roc_auc)
    0.35s    = Training   runtime
    0.0s     = Validation runtime
AutoGluon training complete, total runtime = 3614.24s ... Best model: WeightedEnsemble_L2 | Estimated inference throughput: 2149.4 rows/s (24601 batch size)
TabularPredictor saved. To load, use: predictor = TabularPredictor.load("/content/drive/MyDrive/Metacode/Week6/selected_model")</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>&lt;autogluon.tabular.predictor.predictor.TabularPredictor at 0x7d2f359dd250&gt;</code></pre>
</div>
</div>
<div id="58b942ee" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 예측 및 평가</span></span>
<span id="cb25-2">test_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_test</span>
<span id="cb25-3">test_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'target'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_test</span>
<span id="cb25-4"></span>
<span id="cb25-5">y_pred_proba_ag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor.predict_proba(test_data)</span>
<span id="cb25-6">y_pred_ag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictor.predict(test_data)</span>
<span id="cb25-7"></span>
<span id="cb25-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># optuna Results</span></span>
<span id="cb25-9">accuracy_ag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred_ag)</span>
<span id="cb25-10">auc_ag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roc_auc_score(y_test, y_pred_proba_ag.iloc[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb25-11">cf_ag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_test, y_pred_ag)</span>
<span id="cb25-12"></span>
<span id="cb25-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'정확도 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(accuracy_ag,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb25-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'AUC : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(auc_ag,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb25-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'''autogluon CF :</span></span>
<span id="cb25-16"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cf_ag<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>정확도 : 0.8675
AUC : 0.7107
autogluon CF :
[[51892  4662]
 [ 3486  1463]]</code></pre>
</div>
</div>
<div id="8025e543" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">predictor.leaderboard()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div id="df-eba142b3-b498-4a64-8ebc-c1b7d97a7dec" class="colab-df-container">
    <div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">model</th>
<th data-quarto-table-cell-role="th">score_val</th>
<th data-quarto-table-cell-role="th">eval_metric</th>
<th data-quarto-table-cell-role="th">pred_time_val</th>
<th data-quarto-table-cell-role="th">fit_time</th>
<th data-quarto-table-cell-role="th">pred_time_val_marginal</th>
<th data-quarto-table-cell-role="th">fit_time_marginal</th>
<th data-quarto-table-cell-role="th">stack_level</th>
<th data-quarto-table-cell-role="th">can_infer</th>
<th data-quarto-table-cell-role="th">fit_order</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>XGBoost</td>
<td>0.998176</td>
<td>roc_auc</td>
<td>11.441149</td>
<td>1556.763843</td>
<td>11.441149</td>
<td>1556.763843</td>
<td>1</td>
<td>True</td>
<td>3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>WeightedEnsemble_L2</td>
<td>0.998176</td>
<td>roc_auc</td>
<td>11.445685</td>
<td>1557.111241</td>
<td>0.004536</td>
<td>0.347398</td>
<td>2</td>
<td>True</td>
<td>4</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>CatBoost</td>
<td>0.987722</td>
<td>roc_auc</td>
<td>0.384950</td>
<td>1941.707015</td>
<td>0.384950</td>
<td>1941.707015</td>
<td>1</td>
<td>True</td>
<td>2</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>LightGBM</td>
<td>0.843690</td>
<td>roc_auc</td>
<td>2.519189</td>
<td>93.759019</td>
<td>2.519189</td>
<td>93.759019</td>
<td>1</td>
<td>True</td>
<td>1</td>
</tr>
</tbody>
</table>

</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-eba142b3-b498-4a64-8ebc-c1b7d97a7dec')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-eba142b3-b498-4a64-8ebc-c1b7d97a7dec button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-eba142b3-b498-4a64-8ebc-c1b7d97a7dec');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-fac15474-9891-44c0-bbd3-e266e669a597">
  <button class="colab-df-quickchart" onclick="quickchart('df-fac15474-9891-44c0-bbd3-e266e669a597')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-fac15474-9891-44c0-bbd3-e266e669a597 button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>

    </div>
  </div>
</div>
</div>
</section>
<section id="결과-비교하기-optuna-vs-autogluon-1" class="level3">
<h3 class="anchored" data-anchor-id="결과-비교하기-optuna-vs-autogluon-1">결과 비교하기 (optuna vs autogluon)</h3>
<ul>
<li>Autogluon기본
<ul>
<li>정확도 : 0.9199</li>
<li>AUC : 0.761</li>
<li>autogluon LGBM의 CF : [[56492 62] [ 4864 85]]</li>
</ul></li>
<li>Autogluon 일부 모델만 추려낸 것 (낮아짐)
<ul>
<li>정확도 : 0.8675</li>
<li>AUC : 0.7107</li>
<li>autogluon CF : [[51892 4662] [ 3486 1463]]</li>
</ul></li>
</ul>
</section>
<section id="기타" class="level3">
<h3 class="anchored" data-anchor-id="기타">기타</h3>
<ul>
<li>다른 AutoML로 pycaret도 있으나, Autogluon이 더 좋음
<ul>
<li>코드 한줄정도로 구현이 가능하지만, Autogluon성능이 더 좋았음</li>
</ul></li>
<li>실무적으로는, <strong>medium quality세팅으로 리더보드를 보면서, feature engineering(파생변수 생성 등)을 진행하게 됨</strong>
<ul>
<li>성능의 영향은 데이터(GIGO). 하이퍼파라미터 튜닝 등 보다는 <strong>데이터에 집중</strong></li>
<li>EDA를 하다보면, 추가 할법한 (파생)변수가 보이기도 함</li>
<li>SHAP를 확인하다보면 넣으면 좋을 것 같은 변수가 보이기도 함</li>
</ul></li>
</ul>
</section>
</section>
</section>
<section id="cuml-도커에서-설치하기" class="level1">
<h1>cuML 도커에서 설치하기</h1>
<ul>
<li>https://rapids.ai/#quick-start</li>
</ul>
</section>
<section id="과제-최종과제-준비하기" class="level1">
<h1>과제 : 최종과제 준비하기</h1>
<ul>
<li>구성 샘플
<ul>
<li>과제 목표</li>
<li>학습데이터</li>
<li>EDA</li>
<li>SHAP</li>
<li>학습모델</li>
<li>메트릭</li>
<li>리더보드</li>
<li>appendix(hyper)</li>
</ul></li>
<li>인당 15분 발표 + 5분 질문</li>
<li>데이콘에 결과 제출해보기 (+private score공유)</li>
<li>데이콘 우승자 발표 참고하면 좋음</li>
</ul>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>optuna</category>
  <category>Autogluon</category>
  <category>202412Study_DataAnalysis</category>
  <guid>https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250126/</guid>
  <pubDate>Sun, 26 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[DA스터디/5주차/과제] SHAP시각화 &amp; 변수 설명</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250121/</link>
  <description><![CDATA[ 






<p>금융권 데이터를 활용한 분석 스터디 - 5주차</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>아래의 목적/이유로 참가한 스터디에 대한 기록
<ul>
<li>SQLD취득 후 장기 미사용 &amp; GPT를 통한 SQL사용 등으로 많이 잊은 SQL을 복기</li>
<li>기존에 사용해 본 Optuna가 아닌 Autogluon이 커리큘럼에 있어 익혀보고자 함</li>
<li>기존에 관심있던 XAI(설명가능한 AI)를 익히고자 함</li>
</ul></li>
<li>5주차 과제 진행
<ul>
<li>지난 과제의 모델에 대해 SHAP로 Feature importance구하기</li>
<li>Feature Selection 후 재학습해보기</li>
<li>재학습한 모델에 대해 SHAP 시각화 &amp; 변수 설명해보기</li>
</ul></li>
</ul>
</section>
<section id="주차-과제" class="level1">
<h1>5주차 과제</h1>
<section id="과제-설명" class="level2">
<h2 class="anchored" data-anchor-id="과제-설명">과제 설명</h2>
<ul>
<li>과제 : 월간 데이콘 신용카드 사용자 연체 예측 AI 경진대회
<ul>
<li>https://dacon.io/competitions/official/235713/overview/description</li>
</ul></li>
<li>아래 내용 진행해보기
<ul>
<li>지난 과제에서 학습시켜 본 모델에 대해, SHAP를 통해 FI구하기</li>
<li>Feature Selection 후 재학습해보기</li>
<li>재학습한 모델에 대해 SHAP의 다양한 시각화 적용 &amp; 변수의 설명력 구해보기</li>
</ul></li>
</ul>
</section>
<section id="전처리-해둔-데이터-읽고-데이터셋-나누기" class="level2">
<h2 class="anchored" data-anchor-id="전처리-해둔-데이터-읽고-데이터셋-나누기">전처리 해둔 데이터 읽고 데이터셋 나누기</h2>
<div id="6a35545a" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pkb_sqlite3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DB_sqlite3</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-4"></span>
<span id="cb1-5">db_controller <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DB_sqlite3(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dacon_creditcard_overdue.db'</span>)</span>
<span id="cb1-6">df_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM train'</span>)</span>
<span id="cb1-7">df_train_pre <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM train_pre'</span>)</span>
<span id="cb1-8">df_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM test_pre'</span>)</span>
<span id="cb1-9">df_sample_submission <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM sample_submission'</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11">train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_train_pre, df_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>]], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-12">x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_test.copy()</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># index컬럼 삭제</span></span>
<span id="cb1-15">train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>])</span>
<span id="cb1-16">x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_test.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>])</span>
<span id="cb1-17"></span>
<span id="cb1-18">x_train, x_validate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(train, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, stratify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>])</span></code></pre></div>
</div>
</section>
<section id="shap로-feature-importance-구하기" class="level2">
<h2 class="anchored" data-anchor-id="shap로-feature-importance-구하기">SHAP로 Feature Importance 구하기</h2>
<ul>
<li>SHAP를 위한 모델 학습</li>
</ul>
<div id="6e429f09" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.over_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ADASYN</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> lightgbm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LGBMClassifier, early_stopping</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> classification_report, accuracy_score, confusion_matrix, log_loss</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> shap</span>
<span id="cb2-5"></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> model_practice_with_LGBMClassifier(X_train, y_train, X_validate, y_validate):</span>
<span id="cb2-8">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LGBMClassifier(class_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"balanced"</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb2-9">    model.fit(X_train, </span>
<span id="cb2-10">            y_train,</span>
<span id="cb2-11">            eval_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[(X_validate, y_validate)],</span>
<span id="cb2-12">            eval_metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logloss'</span>,callbacks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[early_stopping(stopping_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)],</span>
<span id="cb2-13">            )</span>
<span id="cb2-14"></span>
<span id="cb2-15">    y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(X_validate)</span>
<span id="cb2-16">    y_proba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_proba(X_validate)</span>
<span id="cb2-17"></span>
<span id="cb2-18">    accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_validate, y_pred)</span>
<span id="cb2-19">    logloss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_loss(y_validate, y_proba)</span>
<span id="cb2-20">    cf_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_validate, y_pred)</span>
<span id="cb2-21">    classify_report <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classification_report(y_validate, y_pred)</span>
<span id="cb2-22"></span>
<span id="cb2-23">    result_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>:model,</span>
<span id="cb2-24">                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_pred'</span>:y_pred,</span>
<span id="cb2-25">                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_proba'</span>:y_proba,</span>
<span id="cb2-26">                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>:accuracy,</span>
<span id="cb2-27">                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logloss'</span>:logloss,</span>
<span id="cb2-28">                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cf_matrix'</span>:cf_matrix,</span>
<span id="cb2-29">                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classify_report'</span>:classify_report</span>
<span id="cb2-30">                   }</span>
<span id="cb2-31">    </span>
<span id="cb2-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result_dict</span>
<span id="cb2-33"></span>
<span id="cb2-34"></span>
<span id="cb2-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 오버샘플링</span></span>
<span id="cb2-36">ADASYN_sampler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ADASYN(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb2-37">X_train, y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ADASYN_sampler.fit_resample(x_train.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), x_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"credit"</span>])</span>
<span id="cb2-38">X_validate, y_validate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ADASYN_sampler.fit_resample(x_validate.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), x_validate[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"credit"</span>])</span>
<span id="cb2-39"></span>
<span id="cb2-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델학습</span></span>
<span id="cb2-41">result_default <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_practice_with_LGBMClassifier(X_train, y_train, X_validate, y_validate)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001646 seconds.
You can set `force_row_wise=true` to remove the overhead.
And if memory is not enough, you can set `force_col_wise=true`.
[LightGBM] [Info] Total Bins 7336
[LightGBM] [Info] Number of data points in the train set: 35665, number of used features: 33
[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Start training from score -1.098612
[LightGBM] [Info] Start training from score -1.098612
[LightGBM] [Info] Start training from score -1.098612
Training until validation scores don't improve for 10 rounds
Did not meet early stopping. Best iteration is:
[95]    valid_0's multi_logloss: 0.749591</code></pre>
</div>
</div>
<ul>
<li>SHAP Feature Importance : SHAP 절대값의 평균
<ul>
<li>각 feature에 대해 절대값의 평균을 구함</li>
<li>axis 설명
<ul>
<li>axis 0 : row (각 샘플)</li>
<li>axis 1 : feature</li>
<li>axis 2 : class (출력값, 위 모델에서의 credit)</li>
</ul></li>
<li><code>np.mean(np.abs(shap_values_train), axis=(0, 2))</code>
<ul>
<li>row와 class를 따라 계산해, feature importance를 계산</li>
</ul></li>
</ul></li>
</ul>
<div id="ab9135d8" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explainer를 활용한 SHAP 계산</span></span>
<span id="cb4-4">explainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shap.TreeExplainer(result_default[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>])</span>
<span id="cb4-5">shap_values_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> explainer.shap_values(X_train)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 SHAP값의 절대값의 평균으로 Feature Importance 구하기</span></span>
<span id="cb4-8">shap_values_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(shap_values_train), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (35,) 크기</span></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""SHAP value의 Shape              : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>shap_values_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">SHAP Feature Importance의 Shape : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>shap_values_mean<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>SHAP value의 Shape              : (35665, 35, 3)
SHAP Feature Importance의 Shape : (35,)</code></pre>
</div>
</div>
<ul>
<li>데이터프레임 &amp; 오름차순 표기</li>
</ul>
<div id="ed66e9ac" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb6-2"></span>
<span id="cb6-3">feature_importance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb6-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Feature'</span>: [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>columns[i]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(shap_values_mean.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])],</span>
<span id="cb6-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Importance'</span>: shap_values_mean</span>
<span id="cb6-6">}).sort_values(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Importance'</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb6-7"></span>
<span id="cb6-8">feature_importance</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Feature</th>
<th data-quarto-table-cell-role="th">Importance</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">34</td>
<td>begin_month</td>
<td>0.208791</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">12</td>
<td>income_type_Working</td>
<td>0.182263</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>gender_F</td>
<td>0.169896</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">0</td>
<td>edu_type</td>
<td>0.160190</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>car_N</td>
<td>0.154671</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">6</td>
<td>reality_N</td>
<td>0.153865</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>family_type_Married</td>
<td>0.110945</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">25</td>
<td>child_num</td>
<td>0.083134</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>income_type_Commercial associate</td>
<td>0.074013</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>income_type_Pensioner</td>
<td>0.069626</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">27</td>
<td>DAYS_BIRTH</td>
<td>0.060860</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">26</td>
<td>income_total</td>
<td>0.043608</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">13</td>
<td>family_type_Civil marriage</td>
<td>0.039357</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">24</td>
<td>index</td>
<td>0.038752</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">28</td>
<td>DAYS_EMPLOYED</td>
<td>0.034525</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">33</td>
<td>family_size</td>
<td>0.033940</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">19</td>
<td>house_type_House / apartment</td>
<td>0.033131</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">16</td>
<td>family_type_Single / not married</td>
<td>0.028371</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1</td>
<td>occyp_type</td>
<td>0.023017</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">10</td>
<td>income_type_State servant</td>
<td>0.014559</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">3</td>
<td>gender_M</td>
<td>0.013786</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">31</td>
<td>phone</td>
<td>0.011512</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5</td>
<td>car_Y</td>
<td>0.011273</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">32</td>
<td>email</td>
<td>0.010337</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">7</td>
<td>reality_Y</td>
<td>0.010111</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>family_type_Separated</td>
<td>0.010072</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">17</td>
<td>family_type_Widow</td>
<td>0.006757</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">22</td>
<td>house_type_Rented apartment</td>
<td>0.006367</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">20</td>
<td>house_type_Municipal apartment</td>
<td>0.004178</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">30</td>
<td>work_phone</td>
<td>0.003070</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">23</td>
<td>house_type_With parents</td>
<td>0.003047</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">21</td>
<td>house_type_Office apartment</td>
<td>0.001704</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">18</td>
<td>house_type_Co-op apartment</td>
<td>0.000524</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>income_type_Student</td>
<td>0.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">29</td>
<td>FLAG_MOBIL</td>
<td>0.000000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="feature-selection-후-재학습" class="level2">
<h2 class="anchored" data-anchor-id="feature-selection-후-재학습">Feature Selection 후 재학습</h2>
<div id="308e8da8" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0보다 큰 Feature Select</span></span>
<span id="cb7-2">list_selected_feature <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> feature_importance[feature_importance[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Importance'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Feature'</span>].tolist()</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feature Selection 적용한 데이터셋</span></span>
<span id="cb7-5">X_train_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train.loc[:, list_selected_feature]</span>
<span id="cb7-6">X_validate_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_validate.loc[:, list_selected_feature]</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델학습</span></span>
<span id="cb7-9">result_feature_selected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_practice_with_LGBMClassifier(X_train_filtered, y_train, X_validate_filtered, y_validate)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001743 seconds.
You can set `force_row_wise=true` to remove the overhead.
And if memory is not enough, you can set `force_col_wise=true`.
[LightGBM] [Info] Total Bins 7336
[LightGBM] [Info] Number of data points in the train set: 35665, number of used features: 33
[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Start training from score -1.098612
[LightGBM] [Info] Start training from score -1.098612
[LightGBM] [Info] Start training from score -1.098612
Training until validation scores don't improve for 10 rounds
Did not meet early stopping. Best iteration is:
[95]    valid_0's multi_logloss: 0.749591</code></pre>
</div>
</div>
</section>
<section id="재학습한-모델에-대해-shap의-다양한-시각화-적용-변수의-설명력-구해보기" class="level2">
<h2 class="anchored" data-anchor-id="재학습한-모델에-대해-shap의-다양한-시각화-적용-변수의-설명력-구해보기">재학습한 모델에 대해 SHAP의 다양한 시각화 적용 &amp; 변수의 설명력 구해보기</h2>
<ul>
<li>재학습한 모델에 대한 SHAP계산</li>
</ul>
<div id="b588ecf9" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Explainer를 활용한 SHAP 계산</span></span>
<span id="cb9-4">explainer_featured <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shap.TreeExplainer(result_feature_selected[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>])</span>
<span id="cb9-5">shap_values_train_featured <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> explainer_featured.shap_values(X_train_filtered)</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 SHAP값의 절대값의 평균으로 Feature Importance 구하기</span></span>
<span id="cb9-8">shap_values_mean_featured <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(shap_values_train_featured), axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (35,) 크기</span></span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""SHAP value의 Shape              : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>shap_values_train_featured<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">SHAP Feature Importance의 Shape : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>shap_values_mean_featured<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>SHAP value의 Shape              : (35665, 33, 3)
SHAP Feature Importance의 Shape : (33,)</code></pre>
</div>
</div>
<section id="shap-summary-plot" class="level3">
<h3 class="anchored" data-anchor-id="shap-summary-plot">SHAP Summary plot</h3>
<ul>
<li>Class 0 : 신용도가 높음
<ul>
<li>일해서 돈을 버는 사람일수록(income_type_Working높음) / 증가</li>
<li>결혼하지 않은 사람일수록(family_type_Married) / 증가</li>
<li>신용카드 발급이 오래된 사람일수록(begin_month) / 증가
<ul>
<li>데이터수집일을 기준으로 0부터 역으로 센 음수변수(값이 작을수록 오래됨)</li>
</ul></li>
<li>income_total…?</li>
</ul></li>
</ul>
<div id="836c7d49" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">shap.summary_plot(shap_values_train_featured[:, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], </span>
<span id="cb11-2">                  X_train_filtered, </span>
<span id="cb11-3">                  feature_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>X_train_filtered.columns,)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250121/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>Class 2 : 신용도가 낮음
<ul>
<li>신용카드 발급이 오래된 사람일수록(begin_month) / 증가
<ul>
<li>데이터수집일을 기준으로 0부터 역으로 센 음수변수(값이 작을수록 오래됨)</li>
</ul></li>
</ul></li>
</ul>
<div id="cee1b6aa" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">shap.summary_plot(shap_values_train_featured[:, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], </span>
<span id="cb12-2">                  X_train_filtered, </span>
<span id="cb12-3">                  feature_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>X_train_filtered.columns,)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250121/index_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="shap-feature-importance-plot" class="level3">
<h3 class="anchored" data-anchor-id="shap-feature-importance-plot">SHAP Feature Importance plot</h3>
<ul>
<li>Class 0 : 신용도가 높음
<ul>
<li>income_type_Working / 영향력이 큼</li>
</ul></li>
</ul>
<div id="351b2ce7" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">shap.summary_plot(shap_values_train_featured[:, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb13-2">                  X_train_filtered,</span>
<span id="cb13-3">                  plot_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250121/index_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>Class 2 : 신용도가 낮음
<ul>
<li>성별, 교육수준, 신용카드 발급기간, 자동차 및 부동산 소유 여부의 영향력 큼</li>
</ul></li>
</ul>
<div id="f1e40d20" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">shap.summary_plot(shap_values_train_featured[:, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb14-2">                  X_train_filtered,</span>
<span id="cb14-3">                  plot_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250121/index_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="shap-depenence-plot" class="level3">
<h3 class="anchored" data-anchor-id="shap-depenence-plot">SHAP Depenence plot</h3>
<ul>
<li>Feature importance에서 특정 경향이 강했던 변수 위주의 확인(Class 0 : 신용도가 높음)
<ul>
<li>income_type_Working : 전 구간에서 양의 영향을 끼침</li>
</ul></li>
</ul>
<div id="b71dc247" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb15-2"></span>
<span id="cb15-3">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb15-4">shap.dependence_plot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"income_type_Working"</span>, </span>
<span id="cb15-5">                     shap_values_train_featured[:, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], </span>
<span id="cb15-6">                     X_train_filtered, </span>
<span id="cb15-7">                     interaction_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250121/index_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>Feature importance에서 특정 경향이 강했던 변수 위주의 확인(Class 2 : 신용도가 낮음)
<ul>
<li>gender_F : 전 구간에서 음의 영향을 끼침</li>
</ul></li>
</ul>
<div id="2334a5f3" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb16-2"></span>
<span id="cb16-3">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb16-4">shap.dependence_plot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gender_F"</span>, </span>
<span id="cb16-5">                     shap_values_train_featured[:, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], </span>
<span id="cb16-6">                     X_train_filtered, </span>
<span id="cb16-7">                     interaction_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250121/index_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>edu_type : 1을 임계점으로하여, 낮은 경우 양의 영향 / 높은 경우 음의 영향</li>
</ul>
<div id="98584e56" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb17-2">shap.dependence_plot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"edu_type"</span>, </span>
<span id="cb17-3">                     shap_values_train_featured[:, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], </span>
<span id="cb17-4">                     X_train_filtered, </span>
<span id="cb17-5">                     interaction_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250121/index_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>begin_month : 약 1.2를 임계점으로하며, 이보다 높은 경우 음의 영향</li>
</ul>
<div id="1f8155f5" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb18-2">shap.dependence_plot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"begin_month"</span>, </span>
<span id="cb18-3">                     shap_values_train_featured[:, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], </span>
<span id="cb18-4">                     X_train_filtered, </span>
<span id="cb18-5">                     interaction_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250121/index_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="shap-force-plot" class="level3">
<h3 class="anchored" data-anchor-id="shap-force-plot">SHAP Force plot</h3>
<ul>
<li>샘플로 1가지만 실습
<ul>
<li>0번(사람)에 대해, 모델이 예측값을 산출할 때
<ul>
<li>income_type_Working이 음의 영향을 줌(0일수록 높은 신용도)</li>
<li>컬럼에 index가 있던 것을 발견함. 데이터 전처리로직에서 index컬럼삭제해도록 반영해 둠</li>
</ul></li>
</ul></li>
</ul>
<div id="b3f53843" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">class_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># credit 0, 1, 2 중 택1</span></span>
<span id="cb19-2">row_number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 확인해보고 싶은 데이터 row</span></span>
<span id="cb19-3"></span>
<span id="cb19-4">shap.force_plot(explainer_featured.expected_value[class_label], </span>
<span id="cb19-5">                shap_values_train_featured[row_number, :, class_label], </span>
<span id="cb19-6">                X_train_filtered.iloc[row_number, :],</span>
<span id="cb19-7">                matplotlib<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250121/index_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>


</section>
</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>Metric</category>
  <category>XAI</category>
  <category>ExplainableAI</category>
  <category>SHAP</category>
  <category>202412Study_DataAnalysis</category>
  <guid>https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250121/</guid>
  <pubDate>Tue, 21 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[DA스터디/5주차] 평가Metric, XAI, SHAP</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250119/</link>
  <description><![CDATA[ 






<p>금융권 데이터를 활용한 분석 스터디 - 5주차</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>아래의 목적/이유로 참가한 스터디에 대한 기록
<ul>
<li>SQLD취득 후 장기 미사용 &amp; GPT를 통한 SQL사용 등으로 많이 잊은 SQL을 복기</li>
<li>기존에 사용해 본 Optuna가 아닌 Autogluon이 커리큘럼에 있어 익혀보고자 함</li>
<li>기존에 관심있던 XAI(설명가능한 AI)를 익히고자 함</li>
</ul></li>
<li>5주차 요약
<ul>
<li>모델을 평가하기 위한 평가Metric
<ul>
<li>분류 : Accuraccy, F1-score, AUC-ROC, Log loss 등</li>
<li>회귀 : MSE, RMSE, MAE, MAPE 등</li>
</ul></li>
<li>SHAP(Shaply Value)를 통한 모델(변수) 설명</li>
</ul></li>
</ul>
</section>
<section id="주차-과제-내용정리" class="level1">
<h1>4주차 과제 내용정리</h1>
<ul>
<li>모델별로 각자 잘 푸는 문제가 다름을 인지하자
<ul>
<li>Random Forest가 오래된 모델이지만, 성능이 좋은편임</li>
</ul></li>
</ul>
</section>
<section id="주차-수업정리" class="level1">
<h1>5주차 수업정리</h1>
<section id="metric" class="level2">
<h2 class="anchored" data-anchor-id="metric">Metric</h2>
<ul>
<li>Metric : 모델을 평가하기 위해 사용하는 수치 지표</li>
</ul>
<section id="분류-문제-metric" class="level3">
<h3 class="anchored" data-anchor-id="분류-문제-metric">분류 문제 Metric</h3>
<ul>
<li><code>Accuracy</code> : 전체 예측 중 옳게 예측한 비율
<ul>
<li>해석이 용이함. <strong>불균형 데이터에서 과대평가 문제</strong>가 있음</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BTP%20+%20TN%7D%7BTP%20+%20TN%20+%20FP%20+%20FN%7D"></li>
</ul></li>
<li><code>F1-score</code> : Precision과 Recall의 조화평균
<ul>
<li><strong>TP중심(TP Oriented)이고 직관적이지 못한 단점</strong></li>
<li><strong>불균형 데이터의 Accuracy의 과대평가를 피할 수 있는 장점</strong></li>
<li><img src="https://latex.codecogs.com/png.latex?F1%20%5Ctext%7B%20Score%7D%20=%202%20%5Ctimes%20%5Cleft(%20%5Cfrac%7B%5Ctext%7BPrecision%7D%20%5Ctimes%20%5Ctext%7BRecall%7D%7D%7B%5Ctext%7BPrecision%7D%20+%20%5Ctext%7BRecall%7D%7D%20%5Cright)"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPrecision%7D%20=%20%5Cfrac%7BTP%7D%7BTP%20+%20FP%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BRecall%7D%20=%20%5Cfrac%7BTP%7D%7BTP%20+%20FN%7D"></li>
</ul></li>
<li><code>AUC-ROC</code> : ROC커브의 하단 면적
<ul>
<li>전반적인 분류 성능평가에 용이 (상대적으로)불균형데이터에서도 유용</li>
<li>ROC커브에 대한 설명이 필요하여 직관적이지 못함</li>
</ul></li>
<li><code>Log loss</code> : Loss의 로그값으로, 0 이상이며 낮을수록 높은 신뢰도
<ul>
<li>다른 Metric과 달리 예측 확률의 신뢰도에 대한 평가
<ul>
<li>예측이 얼마나 적중했는지를 보는 <code>다른 Metric</code> <strong>vs</strong> 예측확률이 얼마나 믿을만한지 보는 <code>Log loss</code></li>
<li>분류 결과만으로 평가하는 <code>다른 Metric</code> <strong>vs</strong> 확률까지 반영하는 <code>Log loss</code></li>
<li>틀린 확률이 극단적인 경우 큰 패널티 부여
<ul>
<li>예를 들어, 모델이 확인을 가지고 1일 확률 99%로 예측했으나 0인 경우 Log loss값 커짐</li>
<li>이러한 특성으로 모델의 잘못된 예측을 방지하는데 유용</li>
</ul></li>
</ul></li>
<li>다른 metric과 달리 다중분류에서도 사용 가능
<ul>
<li>class불균형 영향을 받으므로 가중치 조절 필요</li>
</ul></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BLog%20Loss%7D%20=%20-%5Cfrac%7B1%7D%7BN%7D%20%5Csum_%7Bi=1%7D%5E%7BN%7D%20%5Cleft%5B%20y_i%20%5Clog(p_i)%20+%20(1%20-%20y_i)%20%5Clog(1%20-%20p_i)%20%5Cright%5D"></li>
</ul></li>
</ul>
</section>
<section id="다중-분류-문제-metric" class="level3">
<h3 class="anchored" data-anchor-id="다중-분류-문제-metric">다중 분류 문제 Metric</h3>
<ul>
<li><code>Overall Accuracy</code> : 전반적인 정확도(전체 예측 중 올바른 예측 비율)
<ul>
<li>불균형데이터에서는 부적합</li>
<li>3*3 Matrix기준으로 대각선이 정답이며, 이 대각선이 하단의 <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BNumber%20of%20Correct%20Predictions%7D">에 해당</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BOverall%20Accuracy%7D%20=%20%5Cfrac%7B%5Ctext%7BNumber%20of%20Correct%20Predictions%7D%7D%7B%5Ctext%7BNumber%20of%20Total%20Predictions%7D%7D"></li>
</ul></li>
<li><code>Macro Precision/Recall/F1-Score</code> : 각 class(y)별로 Precision/Recall/F1-Score를 계산한 후 평균
<ul>
<li><strong>숫자가 많은 class를 잘맞추는게 중요한게 아니라, 중요도를 균등하게 반영, 전반적인 예측을 중요시</strong></li>
<li><strong>위와 같은 이유로 불균형에 취약함</strong></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BMacro%20Precision,%20Recall,%20F1-Score%7D%20=%20-%5Cfrac%7B1%7D%7BM%7D%20%5Csum_%7Bi=1%7D%5E%7BM%7D%20%5Cleft%5B%20%5Ctext%7BPrecision,%20Recall,%20F1-Score%7D%20%5Cright%5D_i"></li>
</ul></li>
<li><code>Micro Precision/Recall/F1-Score</code> : 각 class(y)에 대해 맞게 예측한 수(TP)/ 모든 class(y)에 대해 예측한 수
<ul>
<li><strong>(단순평균이 아니므로)상대적으로 불균형에 강함, 거시적으로 보기는 어려움</strong></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BMicro%20Precision%7D%20=%20%5Cfrac%7B%5Csum_%7Bi=1%7D%5E%7BM%7D%20%5Cleft%5B%20TP%20%5Cright%5D_i%7D%7B%5Csum_%7Bi=1%7D%5E%7BM%7D%20%5Cleft%5B%20TP%20+%20FP%20%5Cright%5D_i%7D"></li>
</ul></li>
<li><strong>다중분류문제의 경우, 보통 <code>Macro</code>와 <code>Micro</code>를 함께 병기하여 사용</strong>
<ul>
<li>불균형한 경우, 한가지만 보면 문제될 수 있음</li>
</ul></li>
</ul>
</section>
<section id="회귀-문제-metric" class="level3">
<h3 class="anchored" data-anchor-id="회귀-문제-metric">회귀 문제 Metric</h3>
<ul>
<li><code>RMSE(평균제곱오차)</code>, <code>MSE(평균제곱근오차)</code>
<ul>
<li>제곱을 취하므로 <strong>상대적으로 이상치에 민감</strong> (이상치에 따라 크게 오차값이 튄다)</li>
<li>RMSE로 단위를 통일하여 사용하는 경우 많음 *(단<strong>위가 통일되어 scale왜곡이 되지 않음</strong>)</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BMSE%7D%20=%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20%5Cleft(%20y_i%20-%20%5Chat%7By%7D_i%20%5Cright)%5E2"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BRMSE%7D%20=%20%5Csqrt%7B%5Ctext%7BMSE%7D%7D"></li>
</ul></li>
<li><code>MAE(평균절대오차)</code>, <code>MAPE(평균절대비오차, Percentage error)</code>
<ul>
<li>절대값으로 계산하므로 SE(제곱오차)보다 <strong>이상치에 덜 민감</strong> (수학적으로는 깔끔하지 않음)</li>
<li>MAPE는 <strong>백분율로 나타내기에 (예측하고자 하는 값이 일반적 범우에 있는 경우)해석이 용이함</strong>
<ul>
<li>분류문제 대비, 회귀문제 Metric은 설명이 어려움(모델의 scale이나 분산등을 설명해야 함)</li>
<li>y로 나누기 때문에, y가 0에 가까워질수록 값이 튀는 문제(<strong>MAPE는 이 문제로 사용하기 어려움</strong>)</li>
</ul></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BMAE%7D%20=%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20%5Cleft%7C%20y_i%20-%20%5Chat%7By%7D_i%20%5Cright%7C"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BMAPE%7D%20=%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20%5Cleft%7C%20%5Cfrac%7By_i%20-%20%5Chat%7By%7D_i%7D%7By_i%7D%20%5Cright%7C%20%5Ctimes%20100"></li>
</ul></li>
</ul>
</section>
<section id="metric-선정시-고려사항" class="level3">
<h3 class="anchored" data-anchor-id="metric-선정시-고려사항">Metric 선정시 고려사항</h3>
<ul>
<li>Metric 선정시 고려사항
<ul>
<li>문제 유형</li>
<li>데이터의 특성(불균형도, 이상치의 비중, 스케일 차이)</li>
<li>모델의 목표, 비즈니스 맥락</li>
<li>비교 가능성</li>
<li>결과 해석 및 소통 용이성</li>
</ul></li>
</ul>
</section>
<section id="metric-선정관련-참고사항" class="level3">
<h3 class="anchored" data-anchor-id="metric-선정관련-참고사항">Metric 선정관련 참고사항</h3>
<ul>
<li>과제의 성격에 맞는 Metric의 설정이 중요함
<ul>
<li>물동량 예측문제라면, Under estimate가 더 치명적임
<ul>
<li>Over estimate : 차를 더 부르고 끝</li>
<li>Under estimate : 급하게 차를 불러야 하므로 비용이 더 큼</li>
</ul></li>
<li>위와 같은 상황에서 Pinball loss라는 것을 사용하기도 함
<ul>
<li>Pinball loss : 과소예측과 과대예측에 대해 각각 다른 가중치를 부여</li>
<li>분위수(τ) 0.5(균형)을 기준으로, τ&lt;0.5는 과대예측에 큰 패널티, τ&gt;0.5는 과소예측에 큰 패널티</li>
<li>재고관리, 금융리스크모델링 등에서 활용</li>
</ul></li>
</ul></li>
<li><strong>학습하기 위한 Main metric과, 소통을 위한 Sub metric을 함께 설정</strong></li>
</ul>
</section>
</section>
<section id="xai" class="level2">
<h2 class="anchored" data-anchor-id="xai">XAI</h2>
<section id="xai와-금융데이터" class="level3">
<h3 class="anchored" data-anchor-id="xai와-금융데이터">XAI와 금융데이터</h3>
<ul>
<li><code>XAI(Explainable AI)</code> : 기존의 Black box였던 모델 부분을 설명하는 방법론들을 통칭</li>
<li>(예시로 이해하는) XAI가 금융 데이터 분석에서 중요한 이유(예시)
<ul>
<li>편향탐지 : AI기반 대출 승인 모델을 돌렸는데 특정 인종(흑인 등)이 거절되는 경우를 탐지
<ul>
<li>Feature importance는 영향도를 보여줄 뿐, 어떤 방향으로 작용할지 확인이 어려움</li>
<li>XAI로 미리 확인하여, 흑인이면 대출을 안해준다는 사실을 알았다면 문제를 방지할 수 있었음</li>
<li><strong>XAI로 어떤 변수가 얼마나 어떻게 중요한지 설명/적용하는 것과, 단순히 변수가 중요하다는 것은 다름</strong></li>
</ul></li>
<li>비즈니스 의사결정 지원 : 변수가 어떻게 작용하는지 이해하여 사기 탐지 모델을 적용
<ul>
<li>모델링하여 단순히 Batch를 태우기도 하지만, <strong>분석과제로 인사이트를 얻고 커뮤니케이션을 할 수 있음</strong></li>
</ul></li>
<li>데이터 처리 신뢰성 확보 및 손실 최소화
<ul>
<li>모델 오류가 발생하기 전에, XAI를 통해 도메인 지식에서 어긋나는 변수나 과대대표되는 변수를 확인</li>
<li>단위가 큰 금융 데이터에게는 특히 중요한 작업</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="shap-xai-with-shap" class="level3">
<h3 class="anchored" data-anchor-id="shap-xai-with-shap">SHAP (XAI with SHAP)</h3>
<ul>
<li><code>SHAP</code> : <strong>변수가 예측에 기여하는 정도를 계산</strong> (Shapley Value에 기반하여 설명)
<ul>
<li>계산방식
<ul>
<li>모든 가능한 Feature 조합을 생성한 뒤</li>
<li>각 조합에서 특정 Feature가 추가되었을 때 예측값의 변화를 계산</li>
<li>기여도 계산 후 평균을 내는 방식으로 최종 산출</li>
</ul></li>
</ul></li>
<li>SHAP의 해석
<ul>
<li>해당 변수가 추가되었을 때 예측 값 변화의 평균이므로, <strong>회귀계수와는 다름</strong>
<ul>
<li>변수만큼 증가하는 회귀계수 <strong>vs</strong> 변수의 단위만큼 증가하는 Shapley value</li>
</ul></li>
<li>Shapley value는 <strong>단위의 영향을 받는 값</strong>
<ul>
<li>파산확률 추론 분류모델 예시로 이해하기
<ul>
<li>변수 A의 Shapley value가 0.1 → 변수 A의 추가로 파산 확률이 10%p 증가</li>
<li>변수 B의 Shapley value가 -0.2 → 변수 B의 추가로 파산 확률이 20%p 감소</li>
</ul></li>
<li>대출한도 추론 회귀모델 예시로 이해하기
<ul>
<li>변수 C의 Shapley value가 2백만 → 변수 C가 고객의 대출 한도를 2백만원만큼 감소시키는데 기여함</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="shap의-해석분해" class="level3">
<h3 class="anchored" data-anchor-id="shap의-해석분해">SHAP의 해석분해</h3>
<ul>
<li>SHAP의 해석분해 (해석분해 : 모델의 예측 값을 구성 요소(특성)별로 분리하여 설명)
<ul>
<li>$예측값 = SHAP기준값 + _{i=1}^{n} (_i) $
<ul>
<li>예측값 = SHAP기준값 + SHAP값 전체의 합</li>
<li>SHAP 기준값 : 모델이 아무런 정보가 없을 때의 예측값
<ul>
<li>회귀문제 : 모든 데이터의 평균 / 분류문제 : 전체 데이터 확률 평균의 로그 오즈(에 근사한 값)</li>
</ul></li>
<li>기준값에서 시작해, 각 변수의 Shapley value를 더해 예측값을 나타냄</li>
</ul></li>
<li>SHAP는 각각의 예측(Row)에 종속적 (100명을 예측한다면 변수별로 100개의 SHAP)</li>
<li>절대값의 평균 = SHAP을 통해 구한 Feature importance
<ul>
<li>여러가지 방법으로 Global / Local하게 해석 가능</li>
</ul></li>
<li>요약
<ul>
<li>SHAP은 row단위의 값이며, 평균냈을 때 feature importance, 변수 유무에 따른 값의 변화를 나타냄</li>
<li>예를 들어, MxN개의 관측값이 있는 표라면, MxN개의 Shapley value가 나옴
<ul>
<li>컬럼단위로 절대값의 평균을 내면, 해당 컬럼의 feature importance</li>
<li>ROW단위로 더해 SHAP기준값까지 더해주면 예측값이 됨</li>
</ul></li>
</ul></li>
</ul></li>
<li>추가사항
<ul>
<li>SHAP은 트리모델과 달리 feature importance의 일관성이 있음
<ul>
<li>트리모델은 feature importance가 변수의 추가/삭제에 따라 크게 바뀜
<ul>
<li>트리모델이 feature importance구하는 방법이, 변수가 분기에서 얼마나 사용되고, 많은 데이터를 나눌 수 있는지이기 때문</li>
</ul></li>
<li>SHAP은 변수의 예측력 차이이므로 크게 달라지지 않음(일관성있음)</li>
</ul></li>
<li>SHAP는 각 변수의 설명력을 나타냄</li>
</ul></li>
</ul>
</section>
<section id="shap의-global-해석-column" class="level3">
<h3 class="anchored" data-anchor-id="shap의-global-해석-column">SHAP의 Global 해석 (Column)</h3>
<ul>
<li><code>SHAP Summary Plot</code>
<ul>
<li><strong>Top변수들(SHAP 절대값의 합 Top)</strong>의 SHAP value를 시각화한 것</li>
<li>SHAP Summary Plot샘플을 통한 이해<br> <img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250119/index_files/figure-html/b3f42cb3-1-Note_week5_1.jpg" class="img-fluid" alt="Note_week5_1.jpg">
<ul>
<li>색이 푸를수록 값이 낮고 / 붉을수록 값이 높음</li>
<li>EXT_SOURCE_3 변수 : 모델에 추가될 때, 값이 낮을수록 모델OUTPUT증가(X축)</li>
<li>AMT_CREDIT 변수 : 모델에 추가될 때, 값이 높을수록 모델OUTPUT증가(X축)</li>
<li>EXT_SOURCE_3 변수처럼 색이 일관될수록, 변수의 영향도 일관된 방향으로 작동</li>
</ul></li>
</ul></li>
<li><code>SHAP Feature Importance Plot</code>
<ul>
<li><strong>SHAP 절대값의 평균</strong>을 시각화한 것(Feature Importance를 SHAP으로 나타낸 것)
<ul>
<li><code>SHAP Summary Plot</code>에서 일관되지 못한 변수였다면, 상위에 나타나지 않음</li>
</ul></li>
<li>절대적인 크기를 구하기 위해 <strong>방향성을 삭제했다는 한계</strong></li>
<li>SHAP Feature Importance Plot샘플<br> <img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250119/index_files/figure-html/b3f42cb3-2-Note_week5_2.jpg" class="img-fluid" alt="Note_week5_2.jpg"></li>
</ul></li>
<li><code>SHAP Dependence Plot</code>
<ul>
<li><strong>Row별 SHAP value와 변수값</strong>을 시각화한 것</li>
<li>SHAP Dependence Plot샘플을 통한 이해<br> <img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250119/index_files/figure-html/b3f42cb3-3-Note_week5_3.jpg" class="img-fluid" alt="Note_week5_3.jpg">
<ul>
<li>AMD_GOODS_PRICE변수는, 값이 증가할수록 예측(y)에 양의 영향을 끼침
<ul>
<li>5만~15만쯤에 위치한 ’임계값’부터 방향이 바뀜</li>
<li>만약 이 변수에 대해 조치(행동)한다면 이 값(threshold, 임계값)을 참고해야 함</li>
</ul></li>
</ul></li>
<li>SHAP Dependence Plot샘플을 통한 이해2<br> <img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250119/index_files/figure-html/b3f42cb3-4-Note_week5_4.jpg" class="img-fluid" alt="Note_week5_4.jpg">
<ul>
<li>AMT_CREDIT변수는, 값이 작을때는 음의 영향
<ul>
<li>5만~25만의 임계점부터 양의 방향으로 바뀜</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="shap의-local-해석-row" class="level3">
<h3 class="anchored" data-anchor-id="shap의-local-해석-row">SHAP의 Local 해석 (Row)</h3>
<ul>
<li><code>SHAP Force Plot</code>
<ul>
<li>특정 데이터 하나(row)에서, 각 변수가 끼치는 영향을 1차원 평면에 정렬하여 시각화한 것</li>
<li>`SHAP Force Plot샘플을 통한 이해<br> <img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250119/index_files/figure-html/b3f42cb3-5-Note_week5_5.jpg" class="img-fluid" alt="Note_week5_5.jpg">
<ul>
<li>Base value를 기준으로 파란색은 부정적 / 빨간색은 긍정적 영향을 끼친 변수</li>
<li>전체적으로 파란색이 더 많아, Base value에 비해 예측(y)값이 줄어든 것 (로그오즈 기준)</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="feature-selection-with-shap" class="level3">
<h3 class="anchored" data-anchor-id="feature-selection-with-shap">Feature Selection with SHAP</h3>
<ul>
<li>Feature Selection with SHAP
<ul>
<li>각 feature의 절대값의 평균을 기반으로 계산
<ul>
<li>값이 클수록 중요한 기여</li>
</ul></li>
<li>분할 횟수나 분산 감소를 기준으로 계산되는 트리모델의 Feature importance과 다른 점
<ul>
<li>SHAP Feature importance는 실제 y와 연관성이 명확히 보이고 설명하기 쉬움
<ul>
<li>SHAP값의 합 = 모델의 예측값 이기 때문.</li>
</ul></li>
</ul></li>
<li><strong>뚜렷한 방향성을 갖거나, 변수유무에 따른 변동폭이 클수록 Feature importance 증가</strong></li>
</ul></li>
</ul>
</section>
<section id="참고사항" class="level3">
<h3 class="anchored" data-anchor-id="참고사항">참고사항</h3>
<ul>
<li>SHAP가 가장 많이 사용되고 직관적이며, 다른 XAI로는 LIME 등도 있음</li>
<li>SHAP은 변수의 관계(a변수 증가시 어느정도 y증가)를 직관적으로 설명 가능
<ul>
<li>분할 횟수나 분산 감소로 계산되는 트리모델의 Feature importance로는 단위통일 등 되어있지 않고 해석이 어려움</li>
</ul></li>
<li>분류문제의 SHAP는 로그오즈 형태로 나오지만, 회귀문제의 SHAP는 숫자로 나옴</li>
<li>SHAP Dependence Plot을 통해, 현재까지 몰랐던 모델의 input/output 사이의 작용을 알게됨
<ul>
<li>모델이 어떻게 반영해왔는지에 대한 경향을 알 수 있음</li>
<li>XAI시각화를 통해, 모델링으로 해결할만한 과제가 아님을 인지하게되어 추가로 DA적인 분석 등 조치가능</li>
</ul></li>
</ul>
</section>
</section>
<section id="week4-보완-xgboost의-rf-w-gpu" class="level2">
<h2 class="anchored" data-anchor-id="week4-보완-xgboost의-rf-w-gpu">Week4 보완 : XGBoost의 RF w/ GPU</h2>
<ul>
<li>XGBoost와 SKlearn은 목적함수에 차이가 있어, 독립적 트리 기반의 모델인 RF에서 성능차이가 있을 수 있음
<ul>
<li>목적함수의 차이
<ul>
<li>XGBoost : (목적합수의 정확한 값 대신) 2차 근사 (1차gradient미분, 2차hessian미분). 근사는 계산량을 줄이는데 효과적</li>
<li>SKlearn : 목적함수의 정확한 실제값 (정확한 손실함수 값)</li>
</ul></li>
<li>SKlearn은 분할기준을 정확히 최적화하지만, XGBoost는 근사 최적화여서 개별 트리 성능이 저하될 수 있음</li>
</ul></li>
<li>XGBoost는 중복샘플링을 수행하지 않음(subsample시 replacement를 수행하지 않음, 각 트리가 고유한 서브셋을 사용함)
<ul>
<li>중복샘플링은 각 트리가 원본데이터와 다른 구조/분포를 갖게 해 각 트리의 독립성, 다양성이 높아져 일반화 성능이 높아짐(Bagging에 적합)</li>
<li>Boosting은 순차적 학습이므로, 중복허용시 특정 샘플이 과도하게 중복되거나 포함되지 않아 안정성이 낮아짐</li>
<li><strong>위의 이유로 XGBoost와 SKlearn은 다르게 학습되며, XGBoost의 RF는 XGB알고리즘에 따라 성능상의 Penalty가 있음</strong></li>
</ul></li>
</ul>
<section id="더미데이터를-활용한-비교-실습xgboost-vs-sklearn" class="level3">
<h3 class="anchored" data-anchor-id="더미데이터를-활용한-비교-실습xgboost-vs-sklearn">더미데이터를 활용한 비교 실습(XGBoost vs Sklearn)</h3>
<div id="d61329d2" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> make_classification</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomForestClassifier</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> xgboost <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> xgb</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dummy 분류데이터 생성</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Generate a large synthetic dataset</span></span>
<span id="cb1-13">X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_classification(n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>, n_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, n_informative<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>,</span>
<span id="cb1-14">                           n_redundant<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, n_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Split into train and test sets</span></span>
<span id="cb1-17">X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span></code></pre></div>
</div>
<div id="9091c637" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(X.shape)</span>
<span id="cb2-2">pd.DataFrame(y_test).value_counts()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(100000, 100)</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>0
0    10039
1     9961
Name: count, dtype: int64</code></pre>
</div>
</div>
<div id="05e6f263" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 공통 하이퍼파라미터 설정 (설정 후 Sklearn과 XGBoost에서 사용)</span></span>
<span id="cb5-2">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb5-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "n_estimators": 100,      # 트리 개수</span></span>
<span id="cb5-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "max_depth": 10,          # 최대 깊이</span></span>
<span id="cb5-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"random_state"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>,         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 재현성을 위한 random state</span></span>
<span id="cb5-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_jobs"</span>: <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 사용하는 Thread수, -1은 최대한 사용</span></span>
<span id="cb5-7">}</span></code></pre></div>
</div>
<div id="ac525c63" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train sklearn Random Forest</span></span>
<span id="cb6-2">sklearn_rf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomForestClassifier(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>params)</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## fit</span></span>
<span id="cb6-5">sklearn_fit_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb6-6">sklearn_rf.fit(X_train, y_train)</span>
<span id="cb6-7">sklearn_fit_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> sklearn_fit_start</span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## predict</span></span>
<span id="cb6-10">sklearn_predict_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb6-11">sklearn_rf_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sklearn_rf.predict(X_test)</span>
<span id="cb6-12">sklearn_predict_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> sklearn_predict_start</span>
<span id="cb6-13"></span>
<span id="cb6-14">sklearn_rf_accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, sklearn_rf_preds)</span></code></pre></div>
</div>
<div id="d68503e1" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train XGBoost Random Forest</span></span>
<span id="cb7-2">xgb_rf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xgb.XGBRFClassifier(</span>
<span id="cb7-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># n_estimators=params["n_estimators"],</span></span>
<span id="cb7-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># max_depth=params["max_depth"],</span></span>
<span id="cb7-5">    random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"random_state"</span>],</span>
<span id="cb7-6">    verbosity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb7-7">    n_jobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_jobs"</span>],</span>
<span id="cb7-8">    tree_method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gpu_hist'</span>,      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># GPU 사용</span></span>
<span id="cb7-9">    subsample<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 샘플 사용</span></span>
<span id="cb7-10">    colsample_bynode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 피처 사용</span></span>
<span id="cb7-11">)</span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## fit</span></span>
<span id="cb7-14">xgb_fit_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb7-15">xgb_rf.fit(X_train, y_train)</span>
<span id="cb7-16">xgb_fit_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xgb_fit_start</span>
<span id="cb7-17"></span>
<span id="cb7-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## predict</span></span>
<span id="cb7-19">xgb_predict_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb7-20">xgb_rf_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xgb_rf.predict(X_test)</span>
<span id="cb7-21">xgb_predict_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xgb_predict_start</span>
<span id="cb7-22"></span>
<span id="cb7-23">xgb_rf_accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, xgb_rf_preds)</span></code></pre></div>
</div>
<div id="f22e8157" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Summarize results</span></span>
<span id="cb8-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Sklearn Random Forest Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sklearn_rf_accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb8-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Sklearn Random Forest Fit Time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sklearn_fit_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds'</span>)</span>
<span id="cb8-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Sklearn Random Forest Predict Time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sklearn_predict_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds'</span>)</span>
<span id="cb8-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'XGBoost Random Forest Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>xgb_rf_accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb8-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'XGBoost Random Forest Fit Time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>xgb_fit_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds'</span>)</span>
<span id="cb8-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'XGBoost Random Forest Predict Time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>xgb_predict_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sklearn Random Forest Accuracy: 0.9443
Sklearn Random Forest Fit Time: 16.6355 seconds
Sklearn Random Forest Predict Time: 0.0863 seconds

XGBoost Random Forest Accuracy: 0.7635
XGBoost Random Forest Fit Time: 1.3666 seconds
XGBoost Random Forest Predict Time: 0.0480 seconds</code></pre>
</div>
</div>
</section>
<section id="실습데이터를-활용한-비교-실습xgboost-vs-sklearn" class="level3">
<h3 class="anchored" data-anchor-id="실습데이터를-활용한-비교-실습xgboost-vs-sklearn">실습데이터를 활용한 비교 실습(XGBoost vs Sklearn)</h3>
<div id="4d8e1ec5" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb10-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, roc_auc_score</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data split</span></span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 전처리해둔 데이터 로딩</span></span>
<span id="cb10-8">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data_preprocessed.csv"</span>)</span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 데이터셋 나누기</span></span>
<span id="cb10-11">train , test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(data, test_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, random_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, stratify <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>])</span>
<span id="cb10-12"></span>
<span id="cb10-13">X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-14">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>]</span>
<span id="cb10-15">X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-16">y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>]</span></code></pre></div>
</div>
<div id="b53db9d9" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train sklearn Random Forest</span></span>
<span id="cb11-2">sklearn_rf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomForestClassifier(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>params)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## fit</span></span>
<span id="cb11-5">sklearn_fit_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb11-6">sklearn_rf.fit(X_train, y_train)</span>
<span id="cb11-7">sklearn_fit_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> sklearn_fit_start</span>
<span id="cb11-8"></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## predict</span></span>
<span id="cb11-10">sklearn_predict_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb11-11">sklearn_rf_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sklearn_rf.predict(X_test)</span>
<span id="cb11-12">sklearn_predict_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> sklearn_predict_start</span>
<span id="cb11-13"></span>
<span id="cb11-14">sklearn_rf_accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, sklearn_rf_preds)</span></code></pre></div>
</div>
<div id="8af39683" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train XGBoost Random Forest</span></span>
<span id="cb12-2">xgb_rf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xgb.XGBRFClassifier(</span>
<span id="cb12-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># n_estimators=params["n_estimators"],</span></span>
<span id="cb12-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># max_depth=params["max_depth"],</span></span>
<span id="cb12-5">    random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"random_state"</span>],</span>
<span id="cb12-6">    verbosity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb12-7">    n_jobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_jobs"</span>],</span>
<span id="cb12-8">    tree_method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gpu_hist'</span>,      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># GPU 사용</span></span>
<span id="cb12-9">    subsample<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>,               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 샘플 사용</span></span>
<span id="cb12-10">    colsample_bynode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 피처 사용</span></span>
<span id="cb12-11">)</span>
<span id="cb12-12"></span>
<span id="cb12-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## fit</span></span>
<span id="cb12-14">xgb_fit_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb12-15">xgb_rf.fit(X_train, y_train)</span>
<span id="cb12-16">xgb_fit_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xgb_fit_start</span>
<span id="cb12-17"></span>
<span id="cb12-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## predict</span></span>
<span id="cb12-19">xgb_predict_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb12-20">xgb_rf_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xgb_rf.predict(X_test)</span>
<span id="cb12-21">xgb_predict_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xgb_predict_start</span>
<span id="cb12-22"></span>
<span id="cb12-23">xgb_rf_accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, xgb_rf_preds)</span></code></pre></div>
</div>
<div id="d431fe47" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Summarize results</span></span>
<span id="cb13-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Sklearn REAL DATA Random Forest Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sklearn_rf_accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb13-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Sklearn REAL DATA Random Forest Fit Time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sklearn_fit_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds'</span>)</span>
<span id="cb13-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Sklearn REAL DATA Random Forest Predict Time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sklearn_predict_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds'</span>)</span>
<span id="cb13-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'XGBoost REAL DATA Random Forest Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>xgb_rf_accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb13-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'XGBoost REAL DATA Random Forest Fit Time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>xgb_fit_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds'</span>)</span>
<span id="cb13-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'XGBoost REAL DATA Random Forest Predict Time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>xgb_predict_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> seconds'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sklearn REAL DATA Random Forest Accuracy: 0.9193
Sklearn REAL DATA Random Forest Fit Time: 24.7601 seconds
Sklearn REAL DATA Random Forest Predict Time: 0.2899 seconds

XGBoost REAL DATA Random Forest Accuracy: 0.9176
XGBoost REAL DATA Random Forest Fit Time: 2.6202 seconds
XGBoost REAL DATA Random Forest Predict Time: 0.0680 seconds</code></pre>
</div>
</div>
</section>
</section>
<section id="metrics" class="level2">
<h2 class="anchored" data-anchor-id="metrics">Metrics</h2>
<section id="분류-metrics" class="level3">
<h3 class="anchored" data-anchor-id="분류-metrics">분류 Metrics</h3>
<div id="4db65884" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score, f1_score</span>
<span id="cb15-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate example data</span></span>
<span id="cb15-5">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For reproducibility</span></span>
<span id="cb15-6">n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of samples</span></span>
<span id="cb15-7"></span>
<span id="cb15-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True labels and predictions</span></span>
<span id="cb15-9">y_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Balanced true labels</span></span>
<span id="cb15-10">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predictions with different distribution</span></span>
<span id="cb15-11"></span>
<span id="cb15-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate metrics</span></span>
<span id="cb15-13">accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_true, y_pred)</span>
<span id="cb15-14">f1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f1_score(y_true, y_pred)</span>
<span id="cb15-15"></span>
<span id="cb15-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display results</span></span>
<span id="cb15-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"F1 Score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>f1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy: 0.5050
F1 Score: 0.4660</code></pre>
</div>
</div>
<div id="a5bfd197" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> roc_auc_score, log_loss</span>
<span id="cb17-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate example data</span></span>
<span id="cb17-5">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb17-6">n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb17-7"></span>
<span id="cb17-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True labels and predicted probabilities</span></span>
<span id="cb17-9">y_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Balanced true labels</span></span>
<span id="cb17-10">y_pred_proba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predicted probabilities</span></span>
<span id="cb17-11"></span>
<span id="cb17-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate AUC-ROC</span></span>
<span id="cb17-13">auc_roc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roc_auc_score(y_true, y_pred_proba)</span>
<span id="cb17-14"></span>
<span id="cb17-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate Log Loss</span></span>
<span id="cb17-16">log_loss_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_loss(y_true, y_pred_proba)</span>
<span id="cb17-17"></span>
<span id="cb17-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display results</span></span>
<span id="cb17-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"AUC-ROC: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>auc_roc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb17-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Log Loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>log_loss_value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>AUC-ROC: 0.5060
Log Loss: 0.9939</code></pre>
</div>
</div>
<div id="527bab03" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">y_pred_proba[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([0.18513293, 0.54190095, 0.87294584, 0.73222489, 0.80656115,
       0.65878337, 0.69227656, 0.84919565, 0.24966801, 0.48942496])</code></pre>
</div>
</div>
<div id="1269ae7e" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> roc_curve</span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate ROC curve</span></span>
<span id="cb21-4">fpr, tpr, thresholds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roc_curve(y_true, y_pred_proba)</span>
<span id="cb21-5">auc_roc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roc_auc_score(y_true, y_pred_proba)</span>
<span id="cb21-6"></span>
<span id="cb21-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot ROC curve</span></span>
<span id="cb21-8">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb21-9">plt.plot(fpr, tpr, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"AUC-ROC = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>auc_roc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb21-10">plt.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'k--'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Guess"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dashed diagonal</span></span>
<span id="cb21-11">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"False Positive Rate"</span>)</span>
<span id="cb21-12">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"True Positive Rate"</span>)</span>
<span id="cb21-13">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ROC Curve"</span>)</span>
<span id="cb21-14">plt.legend(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lower right"</span>)</span>
<span id="cb21-15">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb21-16">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250119/index_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="다중분류-metrics-multi-label" class="level3">
<h3 class="anchored" data-anchor-id="다중분류-metrics-multi-label">다중분류 Metrics (Multi Label)</h3>
<div id="50ca263a" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score, precision_score, recall_score, f1_score</span>
<span id="cb22-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example data: true labels and predicted labels</span></span>
<span id="cb22-5">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb22-6">n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb22-7">n_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of classes</span></span>
<span id="cb22-8"></span>
<span id="cb22-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate true labels and predictions</span></span>
<span id="cb22-10">y_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n_classes, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True labels</span></span>
<span id="cb22-11">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n_classes, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predicted labels</span></span></code></pre></div>
</div>
<div id="44e968c2" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Overall Accuracy</span></span>
<span id="cb23-2">overall_accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_true, y_pred)</span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Macro Precision, Recall, F1-Score</span></span>
<span id="cb23-5">macro_precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_score(y_true, y_pred, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'macro'</span>)</span>
<span id="cb23-6">macro_recall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> recall_score(y_true, y_pred, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'macro'</span>)</span>
<span id="cb23-7">macro_f1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f1_score(y_true, y_pred, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'macro'</span>)</span>
<span id="cb23-8"></span>
<span id="cb23-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Micro Precision, Recall, F1-Score</span></span>
<span id="cb23-10">micro_precision <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> precision_score(y_true, y_pred, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'micro'</span>)</span>
<span id="cb23-11">micro_recall <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> recall_score(y_true, y_pred, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'micro'</span>)</span>
<span id="cb23-12">micro_f1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f1_score(y_true, y_pred, average<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'micro'</span>)</span>
<span id="cb23-13"></span>
<span id="cb23-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display results</span></span>
<span id="cb23-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Overall Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>overall_accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb23-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Macro Precision: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>macro_precision<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb23-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Macro Recall: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>macro_recall<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb23-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Macro F1-Score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>macro_f1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb23-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Micro Precision: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>micro_precision<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb23-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Micro Recall: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>micro_recall<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb23-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Micro F1-Score: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>micro_f1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Overall Accuracy: 0.2400
Macro Precision: 0.2445
Macro Recall: 0.2402
Macro F1-Score: 0.2405
Micro Precision: 0.2400
Micro Recall: 0.2400
Micro F1-Score: 0.2400</code></pre>
</div>
</div>
<div id="b72c4ee4" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> confusion_matrix, ConfusionMatrixDisplay</span>
<span id="cb25-2"></span>
<span id="cb25-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute the confusion matrix</span></span>
<span id="cb25-4">cm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_true, y_pred)</span>
<span id="cb25-5"></span>
<span id="cb25-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the confusion matrix</span></span>
<span id="cb25-7">disp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConfusionMatrixDisplay(confusion_matrix<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cm, display_labels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Class </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_classes)])</span>
<span id="cb25-8">disp.plot(cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.Blues)</span>
<span id="cb25-9">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Confusion Matrix"</span>)</span>
<span id="cb25-10">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250119/index_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="회귀-metrics" class="level3">
<h3 class="anchored" data-anchor-id="회귀-metrics">회귀 Metrics</h3>
<div id="dc41941e" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mean_squared_error, mean_absolute_error, root_mean_squared_error, mean_absolute_percentage_error</span>
<span id="cb26-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate example data</span></span>
<span id="cb26-5">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb26-6">n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb26-7"></span>
<span id="cb26-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True values (y) and predicted values (y_hat)</span></span>
<span id="cb26-9">y_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># True values</span></span>
<span id="cb26-10">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_true <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predicted values with noise</span></span>
<span id="cb26-11"></span>
<span id="cb26-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate MSE and RMSE</span></span>
<span id="cb26-13">mse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mean_squared_error(y_true, y_pred)</span>
<span id="cb26-14">rmse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> root_mean_squared_error(y_true, y_pred)</span>
<span id="cb26-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rmse = np.sqrt(mse)</span></span>
<span id="cb26-16"></span>
<span id="cb26-17"></span>
<span id="cb26-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate MAE and MAPE</span></span>
<span id="cb26-19">mae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mean_absolute_error(y_true, y_pred)</span>
<span id="cb26-20">mape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mean_absolute_percentage_error(y_true, y_pred)</span>
<span id="cb26-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mape = np.mean(np.abs((y_true - y_pred) / y_true)) * 100</span></span>
<span id="cb26-22"></span>
<span id="cb26-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display results</span></span>
<span id="cb26-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MSE: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mse<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"RMSE: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>rmse<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-26"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MAE: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mae<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb26-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MAPE: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>MSE: 98.6791
RMSE: 9.9337
MAE: 7.8999
MAPE: 0.0046%</code></pre>
</div>
</div>
<ul>
<li>MAPE값이 튀는 경우에 대한 샘플Case (y가 0에 가까울 때)
<ul>
<li>이런 문제가 있을 때는 사용할 수 없고, 설명력을 갖지 못함을 유의</li>
<li>예를 들어, 주기적으로 0이 발생하는 택배물동량의 경우도 사용할 수 없음</li>
</ul></li>
</ul>
<div id="6eabdc3a" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example of small true value causing high MAPE</span></span>
<span id="cb28-2">y_true_example <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Small true value included</span></span>
<span id="cb28-3">y_pred_example <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Predicted values</span></span>
<span id="cb28-4"></span>
<span id="cb28-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate MAPE</span></span>
<span id="cb28-6">mape_example <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>((y_true_example <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> y_pred_example) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> y_true_example)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb28-7"></span>
<span id="cb28-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"True values: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_true_example<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Predicted values: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_pred_example<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"MAPE: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mape_example<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>True values: [1.e-02 5.e+01 1.e+02]
Predicted values: [5.0e-02 5.5e+01 9.0e+01]
MAPE: 140.0000%</code></pre>
</div>
</div>
</section>
</section>
<section id="xai-with-shap" class="level2">
<h2 class="anchored" data-anchor-id="xai-with-shap">XAI With SHAP</h2>
<ul>
<li>SHAP 설치</li>
</ul>
<div id="b0677651" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install SHAP</span></code></pre></div>
</div>
<section id="트리기반-모델로-shap-실습하기" class="level3">
<h3 class="anchored" data-anchor-id="트리기반-모델로-shap-실습하기">트리기반 모델로 SHAP 실습하기</h3>
<ul>
<li>실습을 위한 모델 설정</li>
</ul>
<div id="189e558b" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> shap</span>
<span id="cb31-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> lightgbm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> lgb</span>
<span id="cb31-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb31-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb31-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score</span>
<span id="cb31-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb31-7"></span>
<span id="cb31-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터 로딩 및 나누기</span></span>
<span id="cb31-9">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data_preprocessed.csv'</span>)</span>
<span id="cb31-10"></span>
<span id="cb31-11">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>])</span>
<span id="cb31-12">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>]</span>
<span id="cb31-13">X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb31-14"></span>
<span id="cb31-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train a LightGBM classifier</span></span>
<span id="cb31-16">lgb_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lgb.LGBMClassifier(</span>
<span id="cb31-17">    objective<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"binary"</span>,</span>
<span id="cb31-18">    random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>,</span>
<span id="cb31-19">)</span>
<span id="cb31-20"></span>
<span id="cb31-21">lgb_model.fit(</span>
<span id="cb31-22">    X_train,</span>
<span id="cb31-23">    y_train,</span>
<span id="cb31-24">    eval_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[(X_test, y_test)],</span>
<span id="cb31-25">    eval_metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logloss"</span>,</span>
<span id="cb31-26">    callbacks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[lgb.early_stopping(stopping_rounds<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)],</span>
<span id="cb31-27">)</span>
<span id="cb31-28"></span>
<span id="cb31-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Evaluate the model</span></span>
<span id="cb31-30">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lgb_model.predict(X_test)</span>
<span id="cb31-31">accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred)</span>
<span id="cb31-32"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Number of positive: 19876, number of negative: 226132
[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.018294 seconds.
You can set `force_row_wise=true` to remove the overhead.
And if memory is not enough, you can set `force_col_wise=true`.
[LightGBM] [Info] Total Bins 11686
[LightGBM] [Info] Number of data points in the train set: 246008, number of used features: 125
[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.080794 -&gt; initscore=-2.431606
[LightGBM] [Info] Start training from score -2.431606
Training until validation scores don't improve for 10 rounds
Did not meet early stopping. Best iteration is:
[100]   valid_0's binary_logloss: 0.24629
Accuracy: 0.9198</code></pre>
</div>
</div>
<ul>
<li>TreeExplainer 설정 및 SHAP value 확인
<ul>
<li>train에 대해서도, test에 대해서도 SHAP value확인가능
<ul>
<li>다만, 기본적으로 test데이터는 unseen이어야 하므로 train에 대해서 본다</li>
</ul></li>
</ul></li>
</ul>
<div id="8e1d49ce" class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate SHAP values</span></span>
<span id="cb33-2">explainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shap.TreeExplainer(lgb_model)</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 트레인 셋에서의 SHAP value</span></span>
<span id="cb33-5">shap_values_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> explainer.shap_values(X_train)</span>
<span id="cb33-6"></span>
<span id="cb33-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 테스트 셋에서의 SHAP value</span></span>
<span id="cb33-8">shap_values_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> explainer.shap_values(X_test)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>c:\Users\kibok\AppData\Local\Programs\Python\Python312\Lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')
c:\Users\kibok\AppData\Local\Programs\Python\Python312\Lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')</code></pre>
</div>
</div>
<ul>
<li>SHAP value 확인하기</li>
</ul>
<div id="946fdc18" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">df_shap_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(shap_values_train, columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train.columns)</span>
<span id="cb35-2">df_shap_test  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(shap_values_test, columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_test.columns)</span>
<span id="cb35-3"></span>
<span id="cb35-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""* 값의 shape 확인하기</span></span>
<span id="cb35-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  X_train           : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb35-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  shap_values_train : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>shap_values_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span>
<span id="cb35-7"></span>
<span id="cb35-8">df_shap_train.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* 값의 shape 확인하기
  X_train           : (246008, 131)
  shap_values_train : (246008, 131)</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">SK_ID_CURR</th>
<th data-quarto-table-cell-role="th">CNT_CHILDREN</th>
<th data-quarto-table-cell-role="th">AMT_INCOME_TOTAL</th>
<th data-quarto-table-cell-role="th">AMT_CREDIT</th>
<th data-quarto-table-cell-role="th">AMT_ANNUITY</th>
<th data-quarto-table-cell-role="th">AMT_GOODS_PRICE</th>
<th data-quarto-table-cell-role="th">REGION_POPULATION_RELATIVE</th>
<th data-quarto-table-cell-role="th">DAYS_BIRTH</th>
<th data-quarto-table-cell-role="th">DAYS_EMPLOYED</th>
<th data-quarto-table-cell-role="th">DAYS_REGISTRATION</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">FLAG_OWN_CAR_Y</th>
<th data-quarto-table-cell-role="th">FLAG_OWN_REALTY_N</th>
<th data-quarto-table-cell-role="th">FLAG_OWN_REALTY_Y</th>
<th data-quarto-table-cell-role="th">HOUSETYPE_MODE_block of flats</th>
<th data-quarto-table-cell-role="th">HOUSETYPE_MODE_specific housing</th>
<th data-quarto-table-cell-role="th">HOUSETYPE_MODE_terraced house</th>
<th data-quarto-table-cell-role="th">HOUSETYPE_MODE_nan</th>
<th data-quarto-table-cell-role="th">EMERGENCYSTATE_MODE_No</th>
<th data-quarto-table-cell-role="th">EMERGENCYSTATE_MODE_Yes</th>
<th data-quarto-table-cell-role="th">EMERGENCYSTATE_MODE_nan</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0.001434</td>
<td>-0.000103</td>
<td>-0.002647</td>
<td>0.040973</td>
<td>-0.134860</td>
<td>-0.037693</td>
<td>-0.008186</td>
<td>-0.036237</td>
<td>0.046080</td>
<td>-0.005266</td>
<td>...</td>
<td>0.0</td>
<td>-0.001680</td>
<td>0.000372</td>
<td>0.007599</td>
<td>-0.000594</td>
<td>-0.000023</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.000039</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0.035705</td>
<td>0.000411</td>
<td>-0.002086</td>
<td>-0.239073</td>
<td>-0.055616</td>
<td>0.194492</td>
<td>-0.003785</td>
<td>0.052061</td>
<td>0.060291</td>
<td>0.004833</td>
<td>...</td>
<td>0.0</td>
<td>0.000848</td>
<td>-0.000106</td>
<td>-0.000023</td>
<td>-0.000032</td>
<td>-0.000005</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>-0.000012</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0.003548</td>
<td>-0.000015</td>
<td>-0.001610</td>
<td>0.109762</td>
<td>-0.025149</td>
<td>-0.002882</td>
<td>0.113585</td>
<td>0.014116</td>
<td>-0.008174</td>
<td>0.003287</td>
<td>...</td>
<td>0.0</td>
<td>0.000834</td>
<td>-0.000061</td>
<td>0.001993</td>
<td>-0.000078</td>
<td>-0.000005</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.000370</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0.000996</td>
<td>-0.000067</td>
<td>0.003211</td>
<td>0.106862</td>
<td>0.091010</td>
<td>-0.258358</td>
<td>0.018849</td>
<td>-0.011067</td>
<td>-0.080588</td>
<td>-0.009850</td>
<td>...</td>
<td>0.0</td>
<td>0.000839</td>
<td>-0.000180</td>
<td>0.001513</td>
<td>-0.000029</td>
<td>0.003533</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>-0.000012</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0.001159</td>
<td>0.000270</td>
<td>-0.002707</td>
<td>0.005237</td>
<td>-0.021219</td>
<td>-0.062577</td>
<td>0.005898</td>
<td>0.041537</td>
<td>-0.065084</td>
<td>-0.003805</td>
<td>...</td>
<td>0.0</td>
<td>0.000812</td>
<td>-0.000052</td>
<td>0.001695</td>
<td>-0.000027</td>
<td>-0.000005</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.000019</td>
</tr>
</tbody>
</table>

<p>5 rows × 131 columns</p>
</div>
</div>
</div>
<ul>
<li>Base value(기준값), 특정 row의 SHAP value구하기</li>
</ul>
<div id="48d7986b" class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get base value</span></span>
<span id="cb37-2">base_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> explainer.expected_value  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For the positive class (1)</span></span>
<span id="cb37-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Base value (expected value): </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>base_value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb37-4"></span>
<span id="cb37-5"></span>
<span id="cb37-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select a specific row and feature</span></span>
<span id="cb37-7">row_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Index of the row</span></span>
<span id="cb37-8">feature_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EXT_SOURCE_3"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Name of the specific feature</span></span>
<span id="cb37-9"></span>
<span id="cb37-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Get SHAP value for the selected feature and row</span></span>
<span id="cb37-11">specific_shap_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shap_values_train[row_index, X_train.columns.get_loc(feature_name)]</span>
<span id="cb37-12"></span>
<span id="cb37-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Print results</span></span>
<span id="cb37-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"SHAP value for row </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row_index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, feature '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>feature_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">': </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>specific_shap_value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Base value (expected value): -2.7856
SHAP value for row 10, feature 'EXT_SOURCE_3': 1.5446</code></pre>
</div>
</div>
<ul>
<li>SHAP value와 Base value의 합이 예측값과 근사함을 보여주는 예제</li>
</ul>
<div id="4444fd7e" class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb39-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb39-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> shap</span>
<span id="cb39-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> lightgbm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> lgb</span>
<span id="cb39-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb39-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mean_squared_error</span>
<span id="cb39-7"></span>
<span id="cb39-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 사용자 데이터 예제 (사용자 데이터를 여기에서 불러옵니다)</span></span>
<span id="cb39-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 예: 데이터프레임 `data`가 존재한다고 가정합니다</span></span>
<span id="cb39-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data = pd.read_csv("your_data.csv")</span></span>
<span id="cb39-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X = data.drop("target", axis=1)</span></span>
<span id="cb39-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y = data["target"]</span></span>
<span id="cb39-13"></span>
<span id="cb39-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 예제 데이터 생성 (사용자 데이터를 여기에 적용하세요)</span></span>
<span id="cb39-15">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb39-16">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb39-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>: np.random.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>),</span>
<span id="cb39-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>: np.random.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>),</span>
<span id="cb39-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature3"</span>: np.random.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb39-20">})</span>
<span id="cb39-21">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> X[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> X[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature3"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb39-22"></span>
<span id="cb39-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터 분리</span></span>
<span id="cb39-24">X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb39-25"></span>
<span id="cb39-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 학습</span></span>
<span id="cb39-27">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lgb.LGBMRegressor(silent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb39-28">model.fit(X_train, y_train)</span>
<span id="cb39-29"></span>
<span id="cb39-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SHAP value의 합과 base value를 더한 값 계산</span></span>
<span id="cb39-31">explainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shap.TreeExplainer(model)</span>
<span id="cb39-32">shap_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> explainer.shap_values(X_test)</span>
<span id="cb39-33">shap_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(shap_values, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> explainer.expected_value</span>
<span id="cb39-34"></span>
<span id="cb39-35"></span>
<span id="cb39-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 예측값</span></span>
<span id="cb39-37">predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(X_test)</span>
<span id="cb39-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 각 변수별 SHAP 값, 예측값, SHAP 합, Expected Value를 포함한 데이터프레임 생성</span></span>
<span id="cb39-39">df_shap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(shap_values, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>X_test.columns)</span>
<span id="cb39-40"></span>
<span id="cb39-41">df_shap[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Expected Value"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> explainer.expected_value</span>
<span id="cb39-42">df_shap[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SHAP Sum"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shap_sum</span>
<span id="cb39-43">df_shap[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prediction"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> predictions</span></code></pre></div>
</div>
<div id="b3a27363" class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># feature1, feature2, feature3 : 변수 3종</span></span>
<span id="cb40-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Expected Value : Base Value</span></span>
<span id="cb40-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SHAP Sum : 위 4가지 값의 합</span></span>
<span id="cb40-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prediction : 예측값</span></span>
<span id="cb40-5">df_shap.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">feature1</th>
<th data-quarto-table-cell-role="th">feature2</th>
<th data-quarto-table-cell-role="th">feature3</th>
<th data-quarto-table-cell-role="th">Expected Value</th>
<th data-quarto-table-cell-role="th">SHAP Sum</th>
<th data-quarto-table-cell-role="th">Prediction</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>-1.116524</td>
<td>0.727300</td>
<td>-0.301556</td>
<td>2.953377</td>
<td>2.262596</td>
<td>2.262596</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1.175684</td>
<td>-0.358968</td>
<td>-0.228965</td>
<td>2.953377</td>
<td>3.541127</td>
<td>3.541127</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>1.059330</td>
<td>0.362629</td>
<td>0.215773</td>
<td>2.953377</td>
<td>4.591108</td>
<td>4.591108</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0.430526</td>
<td>-0.687566</td>
<td>0.238544</td>
<td>2.953377</td>
<td>2.934881</td>
<td>2.934881</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>-0.660002</td>
<td>-0.460247</td>
<td>-0.347192</td>
<td>2.953377</td>
<td>1.485935</td>
<td>1.485935</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="12816996" class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 검증: 두 값의 차이가 거의 0인지 확인</span></span>
<span id="cb41-2">difference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(df_shap[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prediction"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df_shap[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SHAP Sum"</span>])</span>
<span id="cb41-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Difference Mean: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>difference<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mean()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, Max Difference: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>difference<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Difference Mean: 1.5931700403370996e-15, Max Difference: 4.440892098500626e-15</code></pre>
</div>
</div>
</section>
<section id="shap시각화" class="level3">
<h3 class="anchored" data-anchor-id="shap시각화">SHAP시각화</h3>
<ul>
<li>대표적으로 많이 사용되는 3가지 예시
<ul>
<li>Summary Plot, Feature Importance Plot, Dependence Plot</li>
<li>SHAP를 Global하게 해석(컬럼 기준)</li>
</ul></li>
</ul>
<section id="shap-global해석-shap-summary-plotviolin-plot" class="level4">
<h4 class="anchored" data-anchor-id="shap-global해석-shap-summary-plotviolin-plot">SHAP Global해석 : SHAP Summary Plot(Violin Plot)</h4>
<ul>
<li>아래 그래프에서의 높이(너비) : 점의 수가 많고 적음을 알 수 있음</li>
</ul>
<div id="bdca55bd" class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize SHAP summary plot for the positive class</span></span>
<span id="cb43-2">shap.summary_plot(shap_values_train, X_train, feature_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>X.columns)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250119/index_files/figure-html/cell-29-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="shap-global해석-shap-feature-importance-plotbar-plot" class="level4">
<h4 class="anchored" data-anchor-id="shap-global해석-shap-feature-importance-plotbar-plot">SHAP Global해석 : SHAP Feature Importance Plot(Bar Plot)</h4>
<ul>
<li>절대값이므로 방향성이 제거됨</li>
<li>위의 Summary Plot보다는 청중을 이해시키기 쉬움</li>
</ul>
<div id="418e8af1" class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">shap.summary_plot(shap_values_train,</span>
<span id="cb44-2">                  X_train,</span>
<span id="cb44-3">                  plot_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bar'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250119/index_files/figure-html/cell-30-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="shap-global해석-shap-dependence-plotscatter-plot" class="level4">
<h4 class="anchored" data-anchor-id="shap-global해석-shap-dependence-plotscatter-plot">SHAP Global해석 : SHAP Dependence Plot(Scatter Plot)</h4>
<ul>
<li>임계점을 확인하여 변수에 조치 등을 취할 수 있음</li>
</ul>
<div id="034dcdbd" class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AMT_GOODS_PRICE의 TAGRGET에 끼치는 영향</span></span>
<span id="cb45-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 해석 예시 : 하단 그래프는 5만(0.5)을 기점으로 음의 영향이 있다</span></span>
<span id="cb45-3"></span>
<span id="cb45-4">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb45-5">shap.dependence_plot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AMT_GOODS_PRICE"</span>, shap_values_train, X_train, interaction_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250119/index_files/figure-html/cell-31-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="b79f4252" class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># AMT_CREDIT이 TAGRGET에 끼치는 영향</span></span>
<span id="cb46-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 해석예시 : 5만(0.5)~25만(2.5)까지 양의 영향을 끼친다</span></span>
<span id="cb46-3"></span>
<span id="cb46-4">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb46-5">shap.dependence_plot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AMT_CREDIT"</span>, shap_values_train, X_train, interaction_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250119/index_files/figure-html/cell-32-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="shap-local해석-shap-force-plot" class="level4">
<h4 class="anchored" data-anchor-id="shap-local해석-shap-force-plot">SHAP Local해석 : SHAP Force Plot</h4>
<ul>
<li>특정 row에서의 각 변수가 미치는 영향을 시각화</li>
</ul>
<div id="d3c655eb" class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>jupyter labextension install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>jupyter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>widgets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>jupyterlab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>manager</span>
<span id="cb47-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Colab으로 실행시에만 위의 코드 실행</span></span></code></pre></div>
</div>
<div id="7cd9731f" class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1">shap.force_plot(explainer.expected_value, shap_values_train[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :], X_train.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :],     matplotlib<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250119/index_files/figure-html/cell-34-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="shap-feature-importance구하기-feature-selection" class="level3">
<h3 class="anchored" data-anchor-id="shap-feature-importance구하기-feature-selection">SHAP Feature Importance구하기 &amp; Feature Selection</h3>
<ul>
<li><code>Feature Selection</code> : 사용하지 않을 변수를 제외해, 메모리와 학습시간 등을 절약
<ul>
<li>Feature Selection은 트리기반의 부스팅/배깅모델에서는 성능이 좋아지는 경우가 많지 않음
<ul>
<li>떨어지는 경우가 많으며, <strong>데이터 많이 넣는 쪽이 오히려 성능이 좋기도 함</strong> (Trade-off)</li>
<li>그러나, 메모리 등 <strong>리소스적인 한계로 활용하게 될 가능성이 큼</strong>(+학습시간 줄이기 등)</li>
</ul></li>
</ul></li>
</ul>
<div id="c9eee333" class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train데이터의 Feature Importance(절대값의 평균)</span></span>
<span id="cb49-2">shap_fi_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_shap_train.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : np.mean(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(x)), axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).sort_values()[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb49-3"></span>
<span id="cb49-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feature Importance가 0인 값을 제외</span></span>
<span id="cb49-5">selected_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shap_fi_train[shap_fi_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].index.tolist()</span>
<span id="cb49-6"></span>
<span id="cb49-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feature Importance가 0이상인 값</span></span>
<span id="cb49-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"* 전체 feature의 수 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(shap_fi_train)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb49-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"* 추려진 feature의 수 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(selected_features)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb49-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"* 추려진 feature 목록</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, selected_features)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* 전체 feature의 수 : 131
* 추려진 feature의 수 : 109
* 추려진 feature 목록
 ['EXT_SOURCE_3', 'EXT_SOURCE_2', 'AMT_GOODS_PRICE', 'EXT_SOURCE_1', 'AMT_CREDIT', 'DAYS_EMPLOYED', 'NAME_EDUCATION_TYPE_Encoded', 'AMT_ANNUITY', 'DAYS_BIRTH', 'CODE_GENDER_F', 'DAYS_ID_PUBLISH', 'OWN_CAR_AGE', 'FLAG_OWN_CAR_N', 'CODE_GENDER_M', 'NAME_CONTRACT_TYPE_Cash loans', 'NAME_FAMILY_STATUS', 'FLAG_DOCUMENT_3', 'ORGANIZATION_TYPE', 'DAYS_LAST_PHONE_CHANGE', 'REGION_RATING_CLIENT_W_CITY', 'DEF_30_CNT_SOCIAL_CIRCLE', 'NAME_INCOME_TYPE', 'FLAG_WORK_PHONE', 'AMT_REQ_CREDIT_BUREAU_QRT', 'OCCUPATION_TYPE', 'AMT_REQ_CREDIT_BUREAU_YEAR', 'REGION_POPULATION_RELATIVE', 'DAYS_REGISTRATION', 'REG_CITY_NOT_LIVE_CITY', 'FLOORSMAX_AVG', 'DEF_60_CNT_SOCIAL_CIRCLE', 'AMT_INCOME_TOTAL', 'TOTALAREA_MODE', 'WEEKDAY_APPR_PROCESS_START', 'APARTMENTS_MEDI', 'AMT_REQ_CREDIT_BUREAU_DAY', 'OBS_60_CNT_SOCIAL_CIRCLE', 'HOUR_APPR_PROCESS_START', 'FLAG_PHONE', 'AMT_REQ_CREDIT_BUREAU_HOUR', 'APARTMENTS_AVG', 'SK_ID_CURR', 'FLAG_DOCUMENT_16', 'YEARS_BEGINEXPLUATATION_MEDI', 'APARTMENTS_MODE', 'ENTRANCES_MEDI', 'FLAG_DOCUMENT_18', 'YEARS_BEGINEXPLUATATION_MODE', 'NAME_HOUSING_TYPE', 'LIVINGAREA_AVG', 'LIVINGAPARTMENTS_AVG', 'LANDAREA_MEDI', 'ELEVATORS_MODE', 'YEARS_BEGINEXPLUATATION_AVG', 'COMMONAREA_MEDI', 'WALLSMATERIAL_MODE', 'ELEVATORS_AVG', 'FLAG_OWN_REALTY_N', 'NONLIVINGAREA_MEDI', 'BASEMENTAREA_AVG', 'FLOORSMIN_MODE', 'OBS_30_CNT_SOCIAL_CIRCLE', 'COMMONAREA_AVG', 'LANDAREA_AVG', 'YEARS_BUILD_MODE', 'FLOORSMAX_MEDI', 'COMMONAREA_MODE', 'FLOORSMAX_MODE', 'LIVINGAREA_MEDI', 'LIVINGAPARTMENTS_MODE', 'ENTRANCES_MODE', 'FLOORSMIN_AVG', 'NONLIVINGAPARTMENTS_AVG', 'HOUSETYPE_MODE_block of flats', 'BASEMENTAREA_MODE', 'YEARS_BUILD_MEDI', 'FLAG_DOCUMENT_13', 'LANDAREA_MODE', 'CNT_FAM_MEMBERS', 'REG_REGION_NOT_WORK_REGION', 'LIVINGAREA_MODE', 'NAME_TYPE_SUITE', 'AMT_REQ_CREDIT_BUREAU_MON', 'REG_CITY_NOT_WORK_CITY', 'NONLIVINGAPARTMENTS_MEDI', 'FLAG_DOCUMENT_14', 'ENTRANCES_AVG', 'AMT_REQ_CREDIT_BUREAU_WEEK', 'NONLIVINGAREA_MODE', 'BASEMENTAREA_MEDI', 'NONLIVINGAREA_AVG', 'FLOORSMIN_MEDI', 'REG_REGION_NOT_LIVE_REGION', 'FLAG_DOCUMENT_5', 'NONLIVINGAPARTMENTS_MODE', 'YEARS_BUILD_AVG', 'FLAG_OWN_REALTY_Y', 'CNT_CHILDREN', 'FONDKAPREMONT_MODE', 'LIVE_REGION_NOT_WORK_REGION', 'FLAG_EMAIL', 'LIVINGAPARTMENTS_MEDI', 'REGION_RATING_CLIENT', 'FLAG_DOCUMENT_8', 'HOUSETYPE_MODE_specific housing', 'LIVE_CITY_NOT_WORK_CITY', 'EMERGENCYSTATE_MODE_nan', 'FLAG_DOCUMENT_6', 'HOUSETYPE_MODE_terraced house']</code></pre>
</div>
</div>
<ul>
<li>SHAP으로 Feature Selection한 뒤의 결과 비교
<ul>
<li>아래 모델/데이터를 기준으로, 성능에서 크게 차이나지 않음</li>
</ul></li>
</ul>
<div id="05abffc8" class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> lightgbm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LGBMClassifier</span>
<span id="cb51-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, roc_auc_score</span>
<span id="cb51-3"></span>
<span id="cb51-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 변수 데이터</span></span>
<span id="cb51-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"전체 데이터로 학습"</span>)</span>
<span id="cb51-6"></span>
<span id="cb51-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Full Model</span></span>
<span id="cb51-8">full_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LGBMClassifier(class_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"balanced"</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb51-9">full_model.fit(X_train, y_train)</span>
<span id="cb51-10"></span>
<span id="cb51-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Full Pred</span></span>
<span id="cb51-12">y_pred_full <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> full_model.predict(X_test)</span>
<span id="cb51-13">y_proba_full <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> full_model.predict_proba(X_test)</span>
<span id="cb51-14"></span>
<span id="cb51-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Full Results</span></span>
<span id="cb51-16">accuracy_full <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred_full)</span>
<span id="cb51-17">auc_full <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roc_auc_score(y_test, y_proba_full[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb51-18">cf_full <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_test, y_pred_full)</span>
<span id="cb51-19"></span>
<span id="cb51-20"></span>
<span id="cb51-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feature selection된 데이터</span></span>
<span id="cb51-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Feature selection된 데이터로 학습"</span>)</span>
<span id="cb51-23"></span>
<span id="cb51-24">X_train_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train.loc[:, selected_features]</span>
<span id="cb51-25">X_test_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_test.loc[:, selected_features]</span>
<span id="cb51-26"></span>
<span id="cb51-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Filtered Model</span></span>
<span id="cb51-28">filtered_model  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LGBMClassifier(class_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"balanced"</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb51-29">filtered_model.fit(X_train_filtered, y_train)</span>
<span id="cb51-30"></span>
<span id="cb51-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Filtered Pred</span></span>
<span id="cb51-32">y_pred_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> filtered_model.predict(X_test_filtered)</span>
<span id="cb51-33">y_proba_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> filtered_model.predict_proba(X_test_filtered)</span>
<span id="cb51-34"></span>
<span id="cb51-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Filtered Results</span></span>
<span id="cb51-36">accuracy_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred_filtered)</span>
<span id="cb51-37">auc_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roc_auc_score(y_test, y_proba_filtered[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb51-38">cf_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_test, y_pred_filtered)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>전체 데이터로 학습
[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Number of positive: 19876, number of negative: 226132
[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.020035 seconds.
You can set `force_row_wise=true` to remove the overhead.
And if memory is not enough, you can set `force_col_wise=true`.
[LightGBM] [Info] Total Bins 11686
[LightGBM] [Info] Number of data points in the train set: 246008, number of used features: 125
[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -&gt; initscore=0.000000
[LightGBM] [Info] Start training from score 0.000000

Feature selection된 데이터로 학습
[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Number of positive: 19876, number of negative: 226132
[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.017355 seconds.
You can set `force_row_wise=true` to remove the overhead.
And if memory is not enough, you can set `force_col_wise=true`.
[LightGBM] [Info] Total Bins 11610
[LightGBM] [Info] Number of data points in the train set: 246008, number of used features: 109
[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -&gt; initscore=0.000000
[LightGBM] [Info] Start training from score 0.000000</code></pre>
</div>
</div>
<div id="f0858b01" class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'모든 변수를 사용한 정확도 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(accuracy_full,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb53-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'무의미한 변수를 삭제한 정확도 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(accuracy_filtered,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb53-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(cf_full)</span>
<span id="cb53-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb53-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'모든 변수를 사용한 AUC : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(auc_full,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb53-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'무의미한 변수를 삭제한 AUC : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(auc_filtered,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb53-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(cf_filtered)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>모든 변수를 사용한 정확도 : 0.703
무의미한 변수를 삭제한 정확도 : 0.7028
[[39914 16640]
 [ 1629  3320]]
----------------------------------------------------------------------------------------------------
모든 변수를 사용한 AUC : 0.7578
무의미한 변수를 삭제한 AUC : 0.7577
[[39908 16646]
 [ 1634  3315]]</code></pre>
</div>
</div>
</section>
</section>
<section id="기타-참고사항" class="level2">
<h2 class="anchored" data-anchor-id="기타-참고사항">기타 참고사항</h2>
<ul>
<li>실제로는 모델학습이 끝난 후에도, <code>feature importance구하기-무의미한 변수 제거하기-(파생변수생성)-모델학습</code>의 반복적 수행
<ul>
<li>처음에는 간단히 베이스모델을 만들어, SHAP로 1차로 무의미한 변수를 걸러냄</li>
<li>베스트 모델을 추려낸 후, 오래걸리는 파라미터 튜닝을 퇴근시간 등 활용해 처리</li>
</ul></li>
<li>현업케이스 참고
<ul>
<li>카드사 내부적으로 마케팅을 위해 이탈고객, 휴면예정고객 등에 대한 분석(산출)을 DA에게 의뢰
<ul>
<li>혜택을 줄여 Mass마케팅 or 예상되는 이탈고객에게 Target마케팅</li>
<li>위를 위한 모델을 만들어달라는 의뢰를 받아, 데이터마트 생성과 모델링 등을 수행</li>
<li>중간에 프로모션을 해보며 개선한 뒤, 최종적으로 이탈가능성이 높은 고객을 추려 현업(마케팅)에서 계획 수립</li>
<li>지속하게되는 경우, ’Batch개발’을 통해 <code>데이터마트(Input데이터)-모델Output의 데이터마트 저장-현업에서 활용</code>을 자동화</li>
<li>Batch로 운영되는 모델은 주기적으로 고도화되기도 함(모델의 Metric이 아닌, 현업에서 보는 안정성관련 모니터링 지표 등을 확인)</li>
</ul></li>
<li>고객센터에서 통화내용의 Speech-to-text로 토픽모델링을 활용해, 고객이 하고픈 말이 어떤 것인지 찾아내는 NLP과제도 있음</li>
</ul></li>
<li>Case별 Metric을 선택할 시각 키우는 방법
<ul>
<li>다양한 대회(공모전)의 케이스를 참고 (주로 쓰이는 것이 몇가지 있다)</li>
<li>논문 참고하기(성능을 표기한 Metric참고)
<ul>
<li>SQuAD(LLM을 평가하는 문제지 같은 것)에 대한 성능표기나, SOTA 등 참고</li>
<li>NLP newsletter(요즘 핫한 NLP모델 논문을 매주 보내주는 글)
<ul>
<li>CAG(↔︎RAG) : 처리용량이 커졌으므로, 검색이 아니라 데이터를 캐시에 모두 넣고 실행
<ul>
<li>런타임 오류 감소 등 의외로 성능이 좋았음</li>
</ul></li>
</ul></li>
</ul></li>
<li>Metric을 정하는 것은 지속하다보면 익숙해질 수 있는 부분</li>
</ul></li>
<li>Metric에서 보통 제공하지 않는 Pinball loss등이 필요한 경우
<ul>
<li>모델학습이 loss를 줄이는 방향이라는 관점에서 맞춰주는 것이 좋음</li>
<li>없으면 커스텀함수로 만들어서 맞추는 편(다만 크게 차이가 나지는 않는다)</li>
<li>Loss함수를 일치시켜서 얻는 이득이 큰 편(일부라도 성능올리기 위해 하이퍼파라미터 튜닝 등을 한다는 관점에서 볼 때)</li>
</ul></li>
</ul>
</section>
<section id="과제" class="level2">
<h2 class="anchored" data-anchor-id="과제">과제</h2>
<ul>
<li>지난 주에 모델 학습을 시켜본 뒤 모델에 대해 SHAP을 통해 FI를 구해보세요.</li>
<li>Feature Selection을 진행 한 뒤 재학습을 진행해 보세요.</li>
<li>재학습한 모델에 대해 SHAP의 다양한 시각화를 통해 변수들의 설명력을 구해보세요.</li>
</ul>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>Metric</category>
  <category>XAI</category>
  <category>ExplainableAI</category>
  <category>SHAP</category>
  <category>202412Study_DataAnalysis</category>
  <guid>https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250119/</guid>
  <pubDate>Sun, 19 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[DA스터디/4주차/과제] 불균형데이터 처리(오버샘플링, 가중치 조절 등)</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250114/</link>
  <description><![CDATA[ 






<p>금융권 데이터를 활용한 분석 스터디 - 4주차</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>아래의 목적/이유로 참가한 스터디에 대한 기록
<ul>
<li>SQLD취득 후 장기 미사용 &amp; GPT를 통한 SQL사용 등으로 많이 잊은 SQL을 복기</li>
<li>기존에 사용해 본 Optuna가 아닌 Autogluon이 커리큘럼에 있어 익혀보고자 함</li>
<li>기존에 관심있던 XAI(설명가능한 AI)를 익히고자 함</li>
</ul></li>
<li>4주차 과제 진행
<ul>
<li>지정과제에 대한 EDA, 전처리, 데이터마트(CSV파일)만들기
<ul>
<li>데이터마트는 sqlite3으로 DB형태로 만듦</li>
</ul></li>
<li>변수에 대한 설명 확인</li>
<li>수치/명목형 변수로 나누어 EDA 및 전처리 진행</li>
<li>향후 Test데이터 등에도 사용하기 위해 전처리 함수로 정리</li>
</ul></li>
</ul>
</section>
<section id="주차-과제" class="level1">
<h1>4주차 과제</h1>
<section id="과제-설명" class="level2">
<h2 class="anchored" data-anchor-id="과제-설명">과제 설명</h2>
<ul>
<li>과제 : 월간 데이콘 신용카드 사용자 연체 예측 AI 경진대회
<ul>
<li>https://dacon.io/competitions/official/235713/overview/description</li>
</ul></li>
<li>아래 내용 진행해보기
<ul>
<li>불균형데이터에 대해 다양한 불균형처리기법 사용해보기</li>
<li>최종 모델 결정해보기</li>
</ul></li>
</ul>
</section>
<section id="전처리-해둔-데이터-읽고-데이터셋-나누기" class="level2">
<h2 class="anchored" data-anchor-id="전처리-해둔-데이터-읽고-데이터셋-나누기">전처리 해둔 데이터 읽고 데이터셋 나누기</h2>
<div id="520312cf" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pkb_sqlite3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DB_sqlite3</span>
<span id="cb1-2"></span>
<span id="cb1-3">db_controller <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DB_sqlite3(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dacon_creditcard_overdue.db'</span>)</span>
<span id="cb1-4">df_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM train'</span>)</span>
<span id="cb1-5">df_train_pre <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM train_pre'</span>)</span>
<span id="cb1-6">df_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM test_pre'</span>)</span>
<span id="cb1-7">df_sample_submission <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM sample_submission'</span>)</span></code></pre></div>
</div>
<div id="647a7171" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-3"></span>
<span id="cb2-4">train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_train_pre, df_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>]], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-5">x_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_test.copy()</span>
<span id="cb2-6"></span>
<span id="cb2-7">x_train, x_validate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(train, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, stratify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>])</span></code></pre></div>
</div>
</section>
<section id="불균형데이터-처리실습" class="level2">
<h2 class="anchored" data-anchor-id="불균형데이터-처리실습">불균형데이터 처리실습</h2>
<section id="undersampling---rus" class="level3">
<h3 class="anchored" data-anchor-id="undersampling---rus">Undersampling - RUS</h3>
<div id="c31af497" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.under_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomUnderSampler</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># RandomUnderSampler 적용</span></span>
<span id="cb3-6">rus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomUnderSampler(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb3-7">X_rus, y_rus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rus.fit_resample(x_train.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>]), x_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>])</span></code></pre></div>
</div>
<div id="e0b9fbc7" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""* 적용 전 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* 적용 후 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X_rus<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* 적용 전 (18519, 35)
* 적용 후 (6765, 35)</code></pre>
</div>
</div>
</section>
<section id="undersampling---enn" class="level3">
<h3 class="anchored" data-anchor-id="undersampling---enn">Undersampling - ENN</h3>
<div id="2249b869" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.under_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> EditedNearestNeighbours</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ENN 적용</span></span>
<span id="cb6-4">enn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EditedNearestNeighbours()</span>
<span id="cb6-5">X_enn, y_enn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> enn.fit_resample(x_train.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>]), x_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>])</span></code></pre></div>
</div>
<div id="bfaf4f75" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""* 적용 전 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb7-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* 적용 후 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X_enn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* 적용 전 (18519, 35)
* 적용 후 (5712, 35)</code></pre>
</div>
</div>
</section>
<section id="undersampling---tomek-links" class="level3">
<h3 class="anchored" data-anchor-id="undersampling---tomek-links">Undersampling - Tomek Links</h3>
<div id="807af710" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.under_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TomekLinks</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tomek Links 적용</span></span>
<span id="cb9-4">tomek <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TomekLinks()</span>
<span id="cb9-5">X_tomek, y_tomek <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tomek.fit_resample(x_train.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>]), x_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>])</span></code></pre></div>
</div>
<div id="011f13a9" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""* 적용 전 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* 적용 후 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X_tomek<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* 적용 전 (18519, 35)
* 적용 후 (14117, 35)</code></pre>
</div>
</div>
</section>
<section id="oversampling---ros" class="level3">
<h3 class="anchored" data-anchor-id="oversampling---ros">Oversampling - ROS</h3>
<div id="cac4fb33" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.over_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomOverSampler</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Random Oversampling 적용</span></span>
<span id="cb12-4">ros <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomOverSampler(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb12-5">X_ros, y_ros <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ros.fit_resample(x_train.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>]), x_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>])</span></code></pre></div>
</div>
<div id="a3f1863c" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""* 적용 전 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* 적용 후 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X_ros<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* 적용 전 (18519, 35)
* 적용 후 (35631, 35)</code></pre>
</div>
</div>
</section>
<section id="oversampling---smote" class="level3">
<h3 class="anchored" data-anchor-id="oversampling---smote">Oversampling - SMOTE</h3>
<div id="b55f9a2a" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.over_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SMOTE</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SMOTE Oversampling</span></span>
<span id="cb15-4">smote <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SMOTE(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb15-5">X_smote, y_smote <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smote.fit_resample(x_train.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>]), x_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>])</span></code></pre></div>
</div>
<div id="fab72240" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""* 적용 전 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* 적용 후 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X_smote<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* 적용 전 (18519, 35)
* 적용 후 (35631, 35)</code></pre>
</div>
</div>
</section>
<section id="oversampling---adasyn" class="level3">
<h3 class="anchored" data-anchor-id="oversampling---adasyn">Oversampling - ADASYN</h3>
<div id="3c4152e7" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.over_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ADASYN</span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ADASYN Oversampling</span></span>
<span id="cb18-4">adasyn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ADASYN(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb18-5">X_adasyn, y_adasyn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> adasyn.fit_resample(x_train.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>]), x_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>])</span></code></pre></div>
</div>
<div id="6833a079" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""* 적용 전 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb19-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* 적용 후 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X_adasyn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* 적용 전 (18519, 35)
* 적용 후 (35665, 35)</code></pre>
</div>
</div>
</section>
<section id="hybrid-method---smoteenn" class="level3">
<h3 class="anchored" data-anchor-id="hybrid-method---smoteenn">Hybrid Method - SMOTEENN</h3>
<div id="fac9045b" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.combine <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SMOTEENN</span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SMOTEENN Oversampling</span></span>
<span id="cb21-4">smoteenn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SMOTEENN(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb21-5">X_smoteenn, y_smoteenn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smoteenn.fit_resample(x_train.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>]), x_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>])</span></code></pre></div>
</div>
<div id="d8ed70c6" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""* 적용 전 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* 적용 후 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X_smoteenn<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* 적용 전 (18519, 35)
* 적용 후 (10892, 35)</code></pre>
</div>
</div>
</section>
<section id="hybrid-method---smotetomek" class="level3">
<h3 class="anchored" data-anchor-id="hybrid-method---smotetomek">Hybrid Method - SMOTETomek</h3>
<div id="05814cc7" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.combine <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SMOTETomek</span>
<span id="cb24-2"></span>
<span id="cb24-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SMOTETomek Oversampling</span></span>
<span id="cb24-4">smotetomek <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SMOTETomek(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb24-5">X_smotetomek, y_smotetomek <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smotetomek.fit_resample(x_train.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>]), x_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>])</span></code></pre></div>
</div>
<div id="e0fe52d7" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""* 적용 전 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb25-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* 적용 후 </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>X_smotetomek<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* 적용 전 (18519, 35)
* 적용 후 (31997, 35)</code></pre>
</div>
</div>
</section>
</section>
<section id="lightgbm활용한-불균형처리별-성능비교" class="level2">
<h2 class="anchored" data-anchor-id="lightgbm활용한-불균형처리별-성능비교">LightGBM활용한 불균형처리별 성능비교</h2>
<ul>
<li>수업 중 가장 빠른 모델이었던 LightGBM을 활용해서 비교</li>
</ul>
<div id="85a402e1" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> lightgbm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LGBMClassifier</span>
<span id="cb27-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score, confusion_matrix, log_loss</span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> compute_for_samplers(train, test, sampler, return_metric_only<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb27-5">  </span>
<span id="cb27-6">  X_sampled, y_sampled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sampler.fit_resample(train.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"credit"</span>])</span>
<span id="cb27-7">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LGBMClassifier(random_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb27-8">  model.fit(X_sampled, y_sampled)</span>
<span id="cb27-9">  y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(test.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb27-10">  y_proba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_proba(test.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb27-11">  y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>]</span>
<span id="cb27-12"></span>
<span id="cb27-13">  accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred)</span>
<span id="cb27-14">  logloss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_loss(y_test, y_proba)</span>
<span id="cb27-15">  cf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_test, y_pred)</span>
<span id="cb27-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> return_metric_only:</span>
<span id="cb27-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> accuracy, cf, auc</span>
<span id="cb27-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb27-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc'</span>:accuracy,</span>
<span id="cb27-20">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logloss'</span>:logloss,</span>
<span id="cb27-21">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cf'</span>:cf,</span>
<span id="cb27-22">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X_sampled'</span> : X_sampled,</span>
<span id="cb27-23">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_sampled'</span> : y_sampled,</span>
<span id="cb27-24">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span> : model,</span>
<span id="cb27-25">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_pred'</span> : y_pred,</span>
<span id="cb27-26">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_proba'</span> : y_proba}</span></code></pre></div>
</div>
<div id="73f148b6" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.under_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomUnderSampler, EditedNearestNeighbours, TomekLinks</span>
<span id="cb28-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.over_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomOverSampler, SMOTE, ADASYN</span>
<span id="cb28-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.combine <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SMOTEENN, SMOTETomek</span>
<span id="cb28-4"></span>
<span id="cb28-5">sampler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RUS'</span>:RandomUnderSampler(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb28-6">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ENN'</span>:EditedNearestNeighbours(),</span>
<span id="cb28-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TOMEKLINKS'</span>:TomekLinks(),</span>
<span id="cb28-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ROS'</span>:RandomOverSampler(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb28-9">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SMOTE'</span>:SMOTE(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb28-10">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ADASYN'</span>:ADASYN(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb28-11">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SMOTEENN'</span>:SMOTEENN(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb28-12">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SMOTETomek'</span>:SMOTETomek(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)}</span>
<span id="cb28-13">sampler_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span></code></pre></div>
</div>
<div id="279b6d4e" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_sampler <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sampler:</span>
<span id="cb29-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each_sampler<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb29-3">    sampler_result[each_sampler] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_for_samplers(x_train, </span>
<span id="cb29-4">                                                        x_validate, </span>
<span id="cb29-5">                                                        sampler[each_sampler]</span>
<span id="cb29-6">                                                        )</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
RUS
[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000342 seconds.
You can set `force_row_wise=true` to remove the overhead.
And if memory is not enough, you can set `force_col_wise=true`.
[LightGBM] [Info] Total Bins 1262
[LightGBM] [Info] Number of data points in the train set: 6765, number of used features: 33
[LightGBM] [Info] Start training from score -1.098612
[LightGBM] [Info] Start training from score -1.098612
[LightGBM] [Info] Start training from score -1.098612

ENN
[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000558 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1252
[LightGBM] [Info] Number of data points in the train set: 5712, number of used features: 33
[LightGBM] [Info] Start training from score -0.929419
[LightGBM] [Info] Start training from score -4.607273
[LightGBM] [Info] Start training from score -0.518794

TOMEKLINKS
[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000485 seconds.
You can set `force_row_wise=true` to remove the overhead.
And if memory is not enough, you can set `force_col_wise=true`.
[LightGBM] [Info] Total Bins 1303
[LightGBM] [Info] Number of data points in the train set: 14117, number of used features: 33
[LightGBM] [Info] Start training from score -1.834230
[LightGBM] [Info] Start training from score -1.759900
[LightGBM] [Info] Start training from score -0.403166

ROS
[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001523 seconds.
You can set `force_row_wise=true` to remove the overhead.
And if memory is not enough, you can set `force_col_wise=true`.
[LightGBM] [Info] Total Bins 1340
[LightGBM] [Info] Number of data points in the train set: 35631, number of used features: 33
[LightGBM] [Info] Start training from score -1.098612
[LightGBM] [Info] Start training from score -1.098612
[LightGBM] [Info] Start training from score -1.098612

SMOTE
[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003803 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 7329
[LightGBM] [Info] Number of data points in the train set: 35631, number of used features: 33
[LightGBM] [Info] Start training from score -1.098612
[LightGBM] [Info] Start training from score -1.098612
[LightGBM] [Info] Start training from score -1.098612

ADASYN
[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001861 seconds.
You can set `force_row_wise=true` to remove the overhead.
And if memory is not enough, you can set `force_col_wise=true`.
[LightGBM] [Info] Total Bins 7336
[LightGBM] [Info] Number of data points in the train set: 35665, number of used features: 33
[LightGBM] [Info] Start training from score -1.073800
[LightGBM] [Info] Start training from score -1.123079
[LightGBM] [Info] Start training from score -1.099566

SMOTEENN
[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001258 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 6992
[LightGBM] [Info] Number of data points in the train set: 10892, number of used features: 33
[LightGBM] [Info] Start training from score -0.680013
[LightGBM] [Info] Start training from score -0.892431
[LightGBM] [Info] Start training from score -2.480144

SMOTETomek
[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.001626 seconds.
You can set `force_row_wise=true` to remove the overhead.
And if memory is not enough, you can set `force_col_wise=true`.
[LightGBM] [Info] Total Bins 7273
[LightGBM] [Info] Number of data points in the train set: 31997, number of used features: 33
[LightGBM] [Info] Start training from score -1.086003
[LightGBM] [Info] Start training from score -1.080280
[LightGBM] [Info] Start training from score -1.130299</code></pre>
</div>
</div>
<div id="943a24d9" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(sampler_result)</span>
<span id="cb31-2">df.loc[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logloss'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cf'</span>]].transpose().sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logloss'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">acc</th>
<th data-quarto-table-cell-role="th">logloss</th>
<th data-quarto-table-cell-role="th">cf</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">ADASYN</td>
<td>0.692618</td>
<td>0.789301</td>
<td>[[12, 139, 816], [7, 456, 1417], [7, 54, 5030]]</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">SMOTE</td>
<td>0.69287</td>
<td>0.793357</td>
<td>[[5, 137, 825], [3, 455, 1422], [4, 47, 5040]]</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">SMOTETomek</td>
<td>0.691358</td>
<td>0.797204</td>
<td>[[10, 141, 816], [13, 449, 1418], [4, 58, 5029]]</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">TOMEKLINKS</td>
<td>0.692996</td>
<td>0.808826</td>
<td>[[36, 119, 812], [24, 405, 1451], [14, 17, 5060]]</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ROS</td>
<td>0.612875</td>
<td>0.930659</td>
<td>[[281, 202, 484], [190, 780, 910], [737, 550, ...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">RUS</td>
<td>0.504661</td>
<td>1.011385</td>
<td>[[378, 255, 334], [412, 834, 634], [1293, 1004...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">SMOTEENN</td>
<td>0.325397</td>
<td>1.237064</td>
<td>[[387, 426, 154], [558, 1002, 320], [1889, 200...</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENN</td>
<td>0.589317</td>
<td>2.293334</td>
<td>[[357, 0, 610], [633, 2, 1245], [772, 0, 4319]]</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<ul>
<li>Under/Over/Hybrid Sampling별로 1가지씩 해보는 것으로 결정
<ul>
<li>TOMEKLINKS</li>
<li>ADASYN</li>
<li>SMOTETomek</li>
</ul></li>
</ul>
</section>
<section id="모델-성능비교-및-선택" class="level2">
<h2 class="anchored" data-anchor-id="모델-성능비교-및-선택">모델 성능비교 및 선택</h2>
<ul>
<li>전처리한 기본 데이터를 기준으로 모델 비교 해보기(Weight 미적용)</li>
</ul>
<div id="d1d8218c" class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.under_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TomekLinks</span>
<span id="cb32-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.over_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ADASYN</span>
<span id="cb32-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.combine <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SMOTETomek</span>
<span id="cb32-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomForestClassifier, ExtraTreesClassifier</span>
<span id="cb32-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> lightgbm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LGBMClassifier</span>
<span id="cb32-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> xgboost <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> XGBClassifier</span>
<span id="cb32-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> catboost <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CatBoostClassifier</span>
<span id="cb32-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> classification_report</span>
<span id="cb32-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb32-10"></span>
<span id="cb32-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 리스트</span></span>
<span id="cb32-12">models <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb32-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Forest"</span>: RandomForestClassifier(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb32-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LightGBM"</span>: LGBMClassifier(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb32-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XGBoost"</span>: XGBClassifier(eval_metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logloss"</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb32-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CatBoost"</span>: CatBoostClassifier(verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb32-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extra Trees"</span>: ExtraTreesClassifier(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb32-18">}</span>
<span id="cb32-19"></span>
<span id="cb32-20">rsts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb32-21"></span>
<span id="cb32-22">sampler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TOMEKLINKS'</span>:TomekLinks(),</span>
<span id="cb32-23">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ADASYN'</span>:ADASYN(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb32-24">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SMOTETomek'</span>:SMOTETomek(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)}</span>
<span id="cb32-25"></span>
<span id="cb32-26"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_sample_type <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sampler:</span>
<span id="cb32-27">    X_train, y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sampler[each_sample_type].fit_resample(x_train.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), x_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"credit"</span>])</span>
<span id="cb32-28">    X_test, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sampler[each_sample_type].fit_resample(x_validate.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), x_validate[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"credit"</span>])</span>
<span id="cb32-29"></span>
<span id="cb32-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 학습 및 평가</span></span>
<span id="cb32-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> name, model <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> models.items():</span>
<span id="cb32-32">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> + </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each_sample_type<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb32-33">        start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb32-34">        model.fit(X_train, y_train)</span>
<span id="cb32-35">        y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(X_test)</span>
<span id="cb32-36">        y_proba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_proba(X_test)</span>
<span id="cb32-37">        accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred)</span>
<span id="cb32-38">        logloss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_loss(y_test, y_proba)</span>
<span id="cb32-39">        cf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_test, y_pred)</span>
<span id="cb32-40">        rsts[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> + </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each_sample_type<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc'</span>:accuracy,</span>
<span id="cb32-41">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logloss'</span>:logloss,</span>
<span id="cb32-42">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cf'</span>:cf,</span>
<span id="cb32-43">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span> : model,</span>
<span id="cb32-44">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_pred'</span> : y_pred,</span>
<span id="cb32-45">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_proba'</span> : y_proba,</span>
<span id="cb32-46">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span> : time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start,</span>
<span id="cb32-47">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classification_report'</span>:classification_report(y_test, y_pred)}</span>
<span id="cb32-48">        </span>
<span id="cb32-49">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""* logloss : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>logloss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Random Forest + TOMEKLINKS
* logloss : 0.7620037176688708

LightGBM + TOMEKLINKS
[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000823 seconds.
You can set `force_row_wise=true` to remove the overhead.
And if memory is not enough, you can set `force_col_wise=true`.
[LightGBM] [Info] Total Bins 1303
[LightGBM] [Info] Number of data points in the train set: 14117, number of used features: 33
[LightGBM] [Info] Start training from score -1.834230
[LightGBM] [Info] Start training from score -1.759900
[LightGBM] [Info] Start training from score -0.403166
* logloss : 0.7692630280717329

XGBoost + TOMEKLINKS
* logloss : 0.7849133307714561

CatBoost + TOMEKLINKS
* logloss : 0.7740753039975535

Extra Trees + TOMEKLINKS
* logloss : 0.8551848758758333

Random Forest + ADASYN
* logloss : 0.7478335144023597

LightGBM + ADASYN
[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003083 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 7336
[LightGBM] [Info] Number of data points in the train set: 35665, number of used features: 33
[LightGBM] [Info] Start training from score -1.073800
[LightGBM] [Info] Start training from score -1.123079
[LightGBM] [Info] Start training from score -1.099566
* logloss : 0.747220175202705

XGBoost + ADASYN
* logloss : 0.7657405243628196

CatBoost + ADASYN
* logloss : 0.7674443572640199

Extra Trees + ADASYN
* logloss : 0.8141975026995196

Random Forest + SMOTETomek
* logloss : 0.7699790781735832

LightGBM + SMOTETomek
[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003627 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 7273
[LightGBM] [Info] Number of data points in the train set: 31997, number of used features: 33
[LightGBM] [Info] Start training from score -1.086003
[LightGBM] [Info] Start training from score -1.080280
[LightGBM] [Info] Start training from score -1.130299
* logloss : 0.7650168946174349

XGBoost + SMOTETomek
* logloss : 0.7927170149729137

CatBoost + SMOTETomek
* logloss : 0.7819625428548069

Extra Trees + SMOTETomek
* logloss : 0.8334713382827283</code></pre>
</div>
</div>
<div id="de056773" class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">df_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(rsts).loc[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logloss'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cf'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>],:]</span>
<span id="cb34-2">df_results.transpose().sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logloss'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">acc</th>
<th data-quarto-table-cell-role="th">logloss</th>
<th data-quarto-table-cell-role="th">cf</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">\nLightGBM + ADASYN</td>
<td>0.637518</td>
<td>0.74722</td>
<td>[[3159, 1178, 872], [1976, 1551, 1451], [7, 54...</td>
<td>0.650462</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">\nRandom Forest + ADASYN</td>
<td>0.64354</td>
<td>0.747834</td>
<td>[[3166, 1339, 704], [1861, 1966, 1151], [126, ...</td>
<td>9.090805</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">\nRandom Forest + TOMEKLINKS</td>
<td>0.717713</td>
<td>0.762004</td>
<td>[[138, 120, 709], [29, 278, 662], [79, 60, 3802]]</td>
<td>2.631492</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">\nLightGBM + SMOTETomek</td>
<td>0.623706</td>
<td>0.765017</td>
<td>[[2341, 1148, 754], [1543, 1491, 1199], [4, 41...</td>
<td>0.58901</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">\nXGBoost + ADASYN</td>
<td>0.630384</td>
<td>0.765741</td>
<td>[[2817, 1532, 860], [1738, 1868, 1372], [21, 1...</td>
<td>0.861137</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">\nCatBoost + ADASYN</td>
<td>0.635293</td>
<td>0.767444</td>
<td>[[2834, 1522, 853], [1671, 1919, 1388], [18, 1...</td>
<td>17.005267</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">\nLightGBM + TOMEKLINKS</td>
<td>0.711247</td>
<td>0.769263</td>
<td>[[36, 119, 812], [18, 228, 723], [11, 14, 3916]]</td>
<td>0.349786</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">\nRandom Forest + SMOTETomek</td>
<td>0.629805</td>
<td>0.769979</td>
<td>[[2352, 1274, 617], [1454, 1832, 947], [98, 22...</td>
<td>7.562343</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">\nCatBoost + TOMEKLINKS</td>
<td>0.709035</td>
<td>0.774075</td>
<td>[[57, 116, 794], [34, 232, 703], [23, 40, 3878]]</td>
<td>6.656712</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">\nCatBoost + SMOTETomek</td>
<td>0.622261</td>
<td>0.781963</td>
<td>[[2110, 1413, 720], [1313, 1784, 1136], [20, 1...</td>
<td>15.503353</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">\nXGBoost + TOMEKLINKS</td>
<td>0.708014</td>
<td>0.784913</td>
<td>[[84, 118, 765], [43, 232, 694], [46, 50, 3845]]</td>
<td>0.490033</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">\nXGBoost + SMOTETomek</td>
<td>0.611508</td>
<td>0.792717</td>
<td>[[2037, 1496, 710], [1360, 1726, 1147], [31, 9...</td>
<td>1.109563</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">\nExtra Trees + ADASYN</td>
<td>0.623511</td>
<td>0.814198</td>
<td>[[3054, 1437, 718], [1802, 2039, 1137], [197, ...</td>
<td>5.692895</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">\nExtra Trees + SMOTETomek</td>
<td>0.618891</td>
<td>0.833471</td>
<td>[[2352, 1304, 587], [1388, 1887, 958], [152, 3...</td>
<td>5.461775</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">\nExtra Trees + TOMEKLINKS</td>
<td>0.691339</td>
<td>0.855185</td>
<td>[[225, 105, 637], [65, 244, 660], [167, 180, 3...</td>
<td>2.29099</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<ul>
<li>logloss와 time을 기준으로 아래 2가지 조합 선정
<ul>
<li>LightGBM + ADASYN</li>
<li>Random Forest + TOMEKLINKS</li>
</ul></li>
</ul>
</section>
<section id="불균형-처리-모델선택-case별-비교" class="level2">
<h2 class="anchored" data-anchor-id="불균형-처리-모델선택-case별-비교">불균형 처리 + 모델선택 Case별 비교</h2>
<section id="앞서-테스트를-통해-구한-조합에-대해-테스트" class="level3">
<h3 class="anchored" data-anchor-id="앞서-테스트를-통해-구한-조합에-대해-테스트">앞서 테스트를 통해 구한 조합에 대해 테스트</h3>
<ul>
<li>아래 조합으로 테스트
<ul>
<li>LightGBM (Weighted)</li>
<li>LightGBM + ADASYN</li>
<li>Random Forest (Weighted)</li>
<li>Random Forest + TOMEKLINKS</li>
</ul></li>
</ul>
<div id="268aa11b" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.under_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TomekLinks</span>
<span id="cb35-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.over_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ADASYN</span>
<span id="cb35-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.combine <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SMOTETomek</span>
<span id="cb35-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomForestClassifier</span>
<span id="cb35-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> lightgbm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LGBMClassifier</span>
<span id="cb35-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> classification_report</span>
<span id="cb35-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb35-8"></span>
<span id="cb35-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 리스트</span></span>
<span id="cb35-10">models <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb35-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Forest"</span>: RandomForestClassifier(class_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"balanced"</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb35-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LightGBM"</span>: LGBMClassifier(class_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"balanced"</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb35-13">}</span>
<span id="cb35-14"></span>
<span id="cb35-15">rsts_weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb35-16"></span>
<span id="cb35-17">sampler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TOMEKLINKS'</span>:TomekLinks(),</span>
<span id="cb35-18">           <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ADASYN'</span>:ADASYN(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb35-19">           }</span>
<span id="cb35-20"></span>
<span id="cb35-21"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_sample_type <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> sampler:</span>
<span id="cb35-22">    X_train, y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sampler[each_sample_type].fit_resample(x_train.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), x_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"credit"</span>])</span>
<span id="cb35-23">    X_test, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sampler[each_sample_type].fit_resample(x_validate.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), x_validate[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"credit"</span>])</span>
<span id="cb35-24"></span>
<span id="cb35-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 학습 및 평가</span></span>
<span id="cb35-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> name, model <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> models.items():</span>
<span id="cb35-27">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> + </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each_sample_type<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb35-28">        start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb35-29">        model.fit(X_train, y_train)</span>
<span id="cb35-30">        y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(X_test)</span>
<span id="cb35-31">        y_proba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_proba(X_test)</span>
<span id="cb35-32">        accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred)</span>
<span id="cb35-33">        logloss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_loss(y_test, y_proba)</span>
<span id="cb35-34">        cf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_test, y_pred)</span>
<span id="cb35-35">        rsts_weight[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> + </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each_sample_type<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc'</span>:accuracy,</span>
<span id="cb35-36">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logloss'</span>:logloss,</span>
<span id="cb35-37">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cf'</span>:cf,</span>
<span id="cb35-38">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span> : model,</span>
<span id="cb35-39">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_pred'</span> : y_pred,</span>
<span id="cb35-40">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_proba'</span> : y_proba,</span>
<span id="cb35-41">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span> : time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start,</span>
<span id="cb35-42">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classification_report'</span>:classification_report(y_test, y_pred)}</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Random Forest + TOMEKLINKS

LightGBM + TOMEKLINKS
[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001311 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 1303
[LightGBM] [Info] Number of data points in the train set: 14117, number of used features: 33
[LightGBM] [Info] Start training from score -1.098612
[LightGBM] [Info] Start training from score -1.098612
[LightGBM] [Info] Start training from score -1.098612

Random Forest + ADASYN

LightGBM + ADASYN
[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004629 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 7336
[LightGBM] [Info] Number of data points in the train set: 35665, number of used features: 33
[LightGBM] [Info] Start training from score -1.098612
[LightGBM] [Info] Start training from score -1.098612
[LightGBM] [Info] Start training from score -1.098612</code></pre>
</div>
</div>
<div id="9e539840" class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">df_results_weight <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(rsts_weight).loc[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logloss'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cf'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>],:]</span>
<span id="cb37-2">df_results_weight.transpose().sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logloss'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">acc</th>
<th data-quarto-table-cell-role="th">logloss</th>
<th data-quarto-table-cell-role="th">cf</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">LightGBM + ADASYN</td>
<td>0.633198</td>
<td>0.750138</td>
<td>[[3019, 1317, 873], [1902, 1624, 1452], [6, 54...</td>
<td>1.112855</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Random Forest + TOMEKLINKS</td>
<td>0.717543</td>
<td>0.751406</td>
<td>[[134, 110, 723], [31, 260, 678], [68, 50, 3823]]</td>
<td>2.637113</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Random Forest + ADASYN</td>
<td>0.6421</td>
<td>0.757042</td>
<td>[[3172, 1311, 726], [1891, 1940, 1147], [127, ...</td>
<td>9.652027</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">LightGBM + TOMEKLINKS</td>
<td>0.602008</td>
<td>0.92511</td>
<td>[[305, 189, 473], [122, 377, 470], [658, 427, ...</td>
<td>0.504209</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="추가-테스트" class="level3">
<h3 class="anchored" data-anchor-id="추가-테스트">추가 테스트</h3>
<ul>
<li>이진분류가 아닌 경우에 대해 한번 해보고 싶어서 적용
<ul>
<li>Catboost (Weighted)</li>
<li>XGBoost (Weighted)</li>
</ul></li>
</ul>
<div id="eba08dc8" class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 클래스 비율 계산</span></span>
<span id="cb38-2">class_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>].value_counts()</span>
<span id="cb38-3">class_weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {cls: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(class_counts) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> count <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> cls, count <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> class_counts.items()}</span>
<span id="cb38-4">class_weights</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{2.0: 1.0, 1.0: 2.707317073170732, 0.0: 5.266962305986696}</code></pre>
</div>
</div>
<div id="1ff5c535" class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> xgboost <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> XGBClassifier</span>
<span id="cb40-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> catboost <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CatBoostClassifier</span>
<span id="cb40-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> classification_report</span>
<span id="cb40-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb40-5"></span>
<span id="cb40-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 리스트</span></span>
<span id="cb40-7">models <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb40-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># XGBoost : eval_metric="mlogloss</span></span>
<span id="cb40-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XGBoost"</span>: XGBClassifier(eval_metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mlogloss"</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb40-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CatBoost : {0.0: 1.0, 1.0: 2.707317073170732, 2.0: 5.266962305986696}로 설정</span></span>
<span id="cb40-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CatBoost"</span>: CatBoostClassifier(class_weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.707317073170732</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.266962305986696</span>]</span>
<span id="cb40-12">                                   , verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb40-13">}</span>
<span id="cb40-14"></span>
<span id="cb40-15">X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb40-16">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>]</span>
<span id="cb40-17">X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_validate.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb40-18">y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_validate[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>]</span>
<span id="cb40-19">rsts_additional <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb40-20"></span>
<span id="cb40-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 학습 및 평가</span></span>
<span id="cb40-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> name, model <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> models.items():</span>
<span id="cb40-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb40-24">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb40-25">    model.fit(X_train, y_train)</span>
<span id="cb40-26">    y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(X_test)</span>
<span id="cb40-27">    y_proba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_proba(X_test)</span>
<span id="cb40-28">    accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred)</span>
<span id="cb40-29">    logloss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_loss(y_test, y_proba)</span>
<span id="cb40-30">    cf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_test, y_pred)</span>
<span id="cb40-31">    rsts_additional[name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc'</span>:accuracy,</span>
<span id="cb40-32">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logloss'</span>:logloss,</span>
<span id="cb40-33">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cf'</span>:cf,</span>
<span id="cb40-34">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span> : model,</span>
<span id="cb40-35">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_pred'</span> : y_pred,</span>
<span id="cb40-36">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_proba'</span> : y_proba,</span>
<span id="cb40-37">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span> : time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start,</span>
<span id="cb40-38">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'classification_report'</span>:classification_report(y_test, y_pred, zero_division<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb40-39">                  }</span>
<span id="cb40-40">    </span>
<span id="cb40-41">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""* logloss : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>logloss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
XGBoost
* logloss : 0.7854300507522355

CatBoost
* logloss : 0.8862784774127822</code></pre>
</div>
</div>
<div id="599eb4cf" class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">df_results_additional <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(rsts_additional).loc[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logloss'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cf'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>],:]</span>
<span id="cb42-2">df_results_additional.transpose().sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logloss'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">acc</th>
<th data-quarto-table-cell-role="th">logloss</th>
<th data-quarto-table-cell-role="th">cf</th>
<th data-quarto-table-cell-role="th">time</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">XGBoost</td>
<td>0.696019</td>
<td>0.78543</td>
<td>[[56, 142, 769], [20, 524, 1336], [26, 120, 49...</td>
<td>1.066831</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">CatBoost</td>
<td>0.693122</td>
<td>0.886278</td>
<td>[[0, 134, 833], [0, 444, 1436], [0, 33, 5058]]</td>
<td>10.805283</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>


</section>
</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>Under-sampling</category>
  <category>Over-sampling</category>
  <category>Hybrid-sampling</category>
  <category>Model selection</category>
  <category>202412Study_DataAnalysis</category>
  <guid>https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250114/</guid>
  <pubDate>Tue, 14 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[DA스터디/4주차] 불균형데이터 처리, 파생변수, 모델선택</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250112/</link>
  <description><![CDATA[ 






<p>금융권 데이터를 활용한 분석 스터디 - 4주차</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>아래의 목적/이유로 참가한 스터디에 대한 기록
<ul>
<li>SQLD취득 후 장기 미사용 &amp; GPT를 통한 SQL사용 등으로 많이 잊은 SQL을 복기</li>
<li>기존에 사용해 본 Optuna가 아닌 Autogluon이 커리큘럼에 있어 익혀보고자 함</li>
<li>기존에 관심있던 XAI(설명가능한 AI)를 익히고자 함</li>
</ul></li>
<li>4주차 요약
<ul>
<li>불균형 처리기법 - Under/Over/Hybrid Sampling</li>
<li>파생변수</li>
<li>모델선택(불균형처리, 가중치조절 등)</li>
</ul></li>
</ul>
</section>
<section id="주차-과제-내용정리" class="level1">
<h1>3주차 과제 내용정리</h1>
<ul>
<li>Skew한 데이터는 mean보다는 median으로 대체하는 것이 효과가 좋을 때가 많았음
<ul>
<li>구체적인 사유가 확인되었다기보다는 실험적인 부분</li>
</ul></li>
<li>데이터의 의미가 없는 경우, Drop하여 메모리 절약하는 것이 나음</li>
<li>Encoder의 저장과 <code>inverse_transform</code>(숫자로 변환된 범주형변수의 원래값 반환)</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">le <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LabelEncoder()</span>
<span id="cb1-2">le.fit_transform(column)</span>
<span id="cb1-3">le.inverse_transform([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span></code></pre></div>
</section>
<section id="주차-수업정리" class="level1">
<h1>4주차 수업정리</h1>
<section id="불균형-데이터-처리" class="level2">
<h2 class="anchored" data-anchor-id="불균형-데이터-처리">불균형 데이터 처리</h2>
<ul>
<li>불균형이 많은 금융데이터의 경우, 단순히 하나의 값만 예측해내더라도 accuracy는 99%가 될 수 있음
<ul>
<li>하지만 목표는 1%의 사기/이상 데이터를 찾아내는 것임</li>
<li>이러한 문제를 막기위해 불균형 데이터의 처리가 필요함</li>
</ul></li>
<li>불균형데이터의 처리 방법
<ul>
<li>데이터 수준 방법(학습전 데이터 처리)
<ul>
<li>Under-Sampling : RUS, Tomek Links, ENN 등</li>
<li>Over-Sampling : SMOTE, ADASYN 등</li>
<li>Hybrid Method : SMOTETomek(SMOTE-Tomek), SMOTEENN(SMOTE-ENN)</li>
</ul></li>
<li>알고리즘 수준 방법(학습시 가중치 조정)
<ul>
<li>가중치 조정</li>
</ul></li>
</ul></li>
</ul>
<section id="불균형-데이터-처리데이터수준---under-sampling" class="level3">
<h3 class="anchored" data-anchor-id="불균형-데이터-처리데이터수준---under-sampling">불균형 데이터 처리(데이터수준) - Under-Sampling</h3>
<ul>
<li><code>Under-Sampling</code> : 수가 더 많은 class의 값을 <strong>줄이는 것</strong></li>
<li>Under-Sampling 종류
<ul>
<li><code>RUS(Random Under Sampling)</code> : 랜덤하게 제거
<ul>
<li>데이터가 커지면 알고리즘적 방법 적용이 어려워,1차적으로 많이 사용됨</li>
<li>파이썬에서도 빠르게 가능하며, SQL에서는 더 빠르게 가능(ORDER BY RAND() LIMIT)</li>
</ul></li>
<li><code>ENN(Edited Nearest Neighbors)</code> : KNN알고리즘 기반의 노이즈 제거
<ul>
<li>근접한 N개의 class분포 내에서, 해당 class와 다른 값을 제거</li>
<li>데이터의 분포가 정돈되는 효과</li>
<li>정확한 비율을 설정할수는 없음</li>
</ul></li>
<li><code>Tomeklinks</code> : class의 경계를 기반으로 노이즈 제거
<ul>
<li>클러스터링 한 2개의 그룹에서, 알고리즘으로 경계를 찾아서, 많은 쪽의 class를 제거</li>
<li>경계선 구분이 명확해지는 효과</li>
</ul></li>
</ul></li>
<li>Under-Sampling 방법별 결과 비교
<ul>
<li>RUS : 수가 많은 class 임의 제거</li>
<li>ENN : 오분류로 추정되는 값 제거 (예:주황색 그룹 안의 파란점 제거)</li>
<li>Tomeklinks : 경계선에 있는 값 제거 (경계를 찾아낸 후, 경계에서 많은 점을 제거)</li>
<li><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250112/index_files/figure-html/7a91c2bf-1-Note_week4_1.jpg" class="img-fluid figure-img"></p>
<figcaption>Note_week4_1.jpg</figcaption>
</figure>
</div></li>
</ul></li>
</ul>
</section>
<section id="불균형-데이터-처리데이터수준---over-sampling" class="level3">
<h3 class="anchored" data-anchor-id="불균형-데이터-처리데이터수준---over-sampling">불균형 데이터 처리(데이터수준) - Over-Sampling</h3>
<ul>
<li><code>Over-Sampling</code> : 수가 적은 class의 값 <strong>늘리는 것</strong>
<ul>
<li>아래의 사유들로, 잘 쓰이지 않음
<ul>
<li>전반적으로 과적합 위험이 있으며, 삭제가 아닌 생성으로 시간이 오래 걸림</li>
</ul></li>
</ul></li>
<li>Over-Sampling 종류
<ul>
<li><code>ROS(Random Over Sampling)</code> : (RUS와 같이) 랜덤하게 제거
<ul>
<li>실제로 쓰이지는 않으며, 빠르지만 <strong>과적합의 위험</strong></li>
</ul></li>
<li><code>SMOTE</code> : KNN알고리즘 기반, 인접한 이웃과의 선형보간을 통한 데이터 생성
<ul>
<li>기존 데이터의 단순 재생산이 아니므로 (상대적으로) 과적합 위험 적음</li>
</ul></li>
<li><code>ADASYN</code> : SMOTE의 개량형. 학습이 어려운 샘플(분류상 경계에 있는)에 더 많은 데이터를 생성
<ul>
<li>(Tomeklink와 유사하게)경계 근처의 데이터에 더 많은 샘플을 생성
<ul>
<li>SMOTE에 Weight를 추가한 개념(구분이 어려운 경계 근처 샘플에 Weight를 더 줌)</li>
</ul></li>
<li>경계 구분이 어려울 때 이점. 그러나 특정 데이터에 과적합될 위험</li>
</ul></li>
</ul></li>
<li>Over-Sampling 방법별 결과 비교
<ul>
<li>ROS : 수가 적은 CLASS 임의 추가</li>
<li>SMOTE : (ROS와 달리)기존 분포를 어느정보 반영하여 추가 (SMOTE알고리즘 활용)</li>
<li>ADASYN : 경계선에 걸친 값 위주로 값 추가 (ADASYN알고리즘 활용)</li>
<li><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250112/index_files/figure-html/7a91c2bf-2-Note_week4_2.jpg" class="img-fluid figure-img"></p>
<figcaption>Note_week4_2.jpg</figcaption>
</figure>
</div></li>
</ul></li>
</ul>
</section>
<section id="불균형-데이터-처리데이터수준---hybrid-method" class="level3">
<h3 class="anchored" data-anchor-id="불균형-데이터-처리데이터수준---hybrid-method">불균형 데이터 처리(데이터수준) - Hybrid Method</h3>
<ul>
<li><code>Hybrid Method</code> : Over와 Under Sampling을 합친 Combined Method</li>
<li>Hybrid Method의 종류
<ul>
<li><code>SMOTETomeks</code> : SMOTE로 소수 클래스 증강 후, Tomeklinks로 제거
<ul>
<li>경계가 뚜렷하지 않은 경우에 적합</li>
<li>SMOTE + Tomeklinks</li>
</ul></li>
<li><code>SMOTEEN</code> : SMOTE로 소수 클래스 증강 후, ENN으로 제거
<ul>
<li>경계 근처에 노이즈가 많은 경우 적합</li>
<li>SMOTE + ENN</li>
</ul></li>
</ul></li>
<li>ADASYN이 아닌, SMOTE로 먼저 보강하는 이유
<ul>
<li>(ADASYN에 비해) SMOTE가 간단히/직관적으로 데이터를 증강해 안정적</li>
<li>소수 클래스에 대한 균일한 보강으로(ADASYN은 경계값 위주), 일관적인 성능 발휘
<ul>
<li>Test데이터의 적중이 목표이므로 Train과적합이 ADASYN보다 SMOTE가 덜함</li>
</ul></li>
<li>오래/넓게 쓰여왔던 방법론으로, 선호도가 높음</li>
</ul></li>
<li>Hybrid Method 방법별 결과 비교
<ul>
<li>SMOTETomeks : 제거된 값이 주로 경계에 모여있음</li>
<li>SMOTEEN : 제거된 값이 경계 이외에도, 노이즈들에 해당</li>
<li>추가를 의미하는 파란점은 유사하고[SMOTE공통사용]. 삭제를 의미하는 빨간점은 분포가 다름<br> <img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250112/index_files/figure-html/7a91c2bf-3-Note_week4_3.jpg" class="img-fluid" alt="Note_week4_3.jpg"></li>
</ul></li>
</ul>
</section>
<section id="불균형-데이터-처리알고리즘-수준---가중치-조절" class="level3">
<h3 class="anchored" data-anchor-id="불균형-데이터-처리알고리즘-수준---가중치-조절">불균형 데이터 처리(알고리즘 수준) - 가중치 조절</h3>
<ul>
<li><code>가중치 조절</code> : 데이터 수정시가 아닌, 알고리즘 학습시에 가중치를 조절
<ul>
<li>데이터 수준에서의 처리(Oversampling 등)는 시간이 오래걸리므로 학습시 처리하자는 관점</li>
<li>데이터 처리를 하지 않아도 된다는 장점이 있어, 실제로 많이 사용</li>
<li>가중치는 분석가의 직감이 아닌, 데이터의 비중을 참고하여 반영(a가 b보다 10배많다면 b에 가중치 10 부여)</li>
<li>불균형이 극단적인 경우, 데이터 처리(Oversampling 등)로 비율을 맞춘 후 가중치부여</li>
</ul></li>
<li>Logloss 예시
<ul>
<li><img src="https://latex.codecogs.com/png.latex?y_i">와 <img src="https://latex.codecogs.com/png.latex?(1%20-%20y_i)"> 앞에 가중치를 두고, 더 중요한 부분에 가중치를 높게 설정</li>
<li><strong>조정 전 Logloss</strong> <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BLogLoss%7D%20=%20-%5Cfrac%7B1%7D%7BN%7D%20%5Csum_%7Bi=1%7D%5E%7BN%7D%20%5Cleft%5B%20y_i%20%5Clog(%5Chat%7By%7D_i)%20+%20(1%20-%20y_i)%20%5Clog(1%20-%20%5Chat%7By%7D_i)%20%5Cright%5D"></li>
<li><strong>조정 후 Logloss</strong> : Class가중치(Class weight)인 <img src="https://latex.codecogs.com/png.latex?w0">, <img src="https://latex.codecogs.com/png.latex?w1">을 추가 <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BWeighted%20LogLoss%7D%20=%20-%5Cfrac%7B1%7D%7BN%7D%20%5Csum_%7Bi=1%7D%5E%7BN%7D%20%5Cleft%5B%20%5Comega_1%20%5Ccdot%20y_i%20%5Ccdot%20%5Clog(%5Chat%7By%7D_i)%20+%20%5Comega_0%20%5Ccdot%20(1%20-%20y_i)%20%5Ccdot%20%5Clog(1%20-%20%5Chat%7By%7D_i)%20%5Cright%5D"></li>
<li>1일 때 <img src="https://latex.codecogs.com/png.latex?w1">, 0일 때 <img src="https://latex.codecogs.com/png.latex?w0">을 곱해 가중치를 부여했음</li>
</ul></li>
</ul>
</section>
</section>
<section id="파생변수" class="level2">
<h2 class="anchored" data-anchor-id="파생변수">파생변수</h2>
<ul>
<li><code>파생변수</code> : 기존 데이터에서 새로운 정보를 추출하여 생성한 변수
<ul>
<li><strong>EDA 후 파생변수 생성이 필요하다고 판단</strong>될 때, <strong>데이터 전처리를 완료</strong>한 후 진행
<ul>
<li>전처리전 파생변수를 만들면, 전처리할 양도 많아지고 오래걸리게 됨</li>
</ul></li>
<li>전처리시 진행했던 변환, 인코딩, 군집화도 파생변수의 일종</li>
<li><strong>도메인 지식이 매우 중요함함</strong></li>
</ul></li>
<li>파생변수의 유형
<ul>
<li><code>집계 관련 변수</code> : 추가적인 집계가 필요하다면, SQL 등을 통해 생성 가능
<ul>
<li>특정 집단/기간 등을 기준으로 추가할 수 있음</li>
<li>연령별 평균 교통비 등의 변수. 보통 SQL에서 처리하여 가져옴</li>
</ul></li>
<li><code>날짜 관련 변수</code> : 시간/요일/휴일/공휴일 등을 추가
<ul>
<li>요일, 휴일 등의 경우 도움이 될 수 있음
<ul>
<li>예를 들어, 물동량 예측시 요일의존도가 높은데, 날짜기반으로 전주대비 물동량 차이 등을 파생변수로</li>
<li></li>
</ul></li>
</ul></li>
<li><code>상호작용 변수</code> : 변수간의 상호작용 가능 &amp; 본인의 도메인지식이 충분한 경우, SQL 등으로 생성가능
<ul>
<li>Polynomial Interation(오래된 통계모델링 코드 등에서 보임)
<ul>
<li>변수 간 상호작용에서 발생하는 비선형적 관계를 설명하기 위해, 기존 변수들의 곱을 변수로 추가한 것. 기존 통계적 모델링에서 활용됨</li>
<li>차원의 저주에 쉽게 빠지는 단점과, 트리기반 모델에서 자체적으로 비선형관계를 처리하는 등(다중공선성 문제에서 자유롭다) ML로 넘어오며 <strong>이제는 거의 사용되지 않음</strong>
<ul>
<li>트리 기반 모델이 Best가 되며 다중공선성은 덜 고려해도되지 않나 하는 경향이 있음</li>
</ul></li>
<li><code>sklearn.preprocessing</code>으로 가능</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="모델-선택" class="level2">
<h2 class="anchored" data-anchor-id="모델-선택">모델 선택</h2>
<ul>
<li><p>모델 선택 : 유형에 따라 적절한 모델을 선택해야 함.</p>
<ul>
<li>베이스라인 모델로 Regression 등을 먼저 돌려보기도 함
<ul>
<li>Regression모델이 계수로 나와 해석이 쉽고 보고하기 좋음, 다만 성능이 좋지 않음</li>
</ul></li>
</ul></li>
<li><p>모델 선택 유형</p>
<ul>
<li><code>문제 유형에 따른 분류</code> : 회귀 or 분류
<ul>
<li><code>회귀</code> : 선형 회귀 등 <code>Regressor</code>로 끝나는 모델</li>
<li><code>분류</code> : 로지스틱 회귀 등 <code>Classifier</code>로 끝나는 모델</li>
</ul></li>
<li><code>데이터 특성에 따른 분류</code> :
<ul>
<li>데이터 크기 : 데이터가 클수록 계산효율이 좋은 모델
<ul>
<li>큰 데이터에 약한 SVM모델 vs 상대적으로 나은 트리 기반 모델</li>
</ul></li>
<li>데이터 형태 : 데이터에 선형성이 없는 경우, Linear모델 지양
<ul>
<li>반대라면 빠르게 결과를 볼 수 있는 선형 모델 사용</li>
</ul></li>
</ul></li>
<li><code>해석 가능성에 따른 분류</code> : 통계적 회귀모델 vs 트리기반 모델 vs SVM/DNN
<ul>
<li>통계적 회귀모델 : 가장 해석이 쉬움</li>
<li>트리기반 모델 : feature importance 반환으로 어느정도 해석 가능</li>
<li>SVN/DNN 모델 : 해석이 거의 불가한 Black box</li>
</ul></li>
</ul></li>
<li><p>모델별 장단점</p>
<table class="caption-top table">
<colgroup>
<col style="width: 14%">
<col style="width: 26%">
<col style="width: 25%">
<col style="width: 32%">
</colgroup>
<thead>
<tr class="header">
<th>구분</th>
<th>선형/로지스틱 회귀</th>
<th>SVM</th>
<th>트리 기반 모델</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>해석 가능성</td>
<td>높음</td>
<td>매우 낮음</td>
<td>낮음</td>
</tr>
<tr class="even">
<td>데이터 크기</td>
<td>소규모에서 효과적</td>
<td>소규모에서 효과적</td>
<td>대규모 데이터 처리 가능</td>
</tr>
<tr class="odd">
<td>데이터 전처리</td>
<td>고차원에서 매우 비효율적<br>다중공선성 등 취약</td>
<td>고차원 데이터에서 효율적<br>많은 컬럼에 강해 SOTA였음<br>많은 행은 어려움</td>
<td>상대적으로 고차원에서 나쁘지 않음</td>
</tr>
<tr class="even">
<td>정확 / 이상치</td>
<td>취약</td>
<td>취약</td>
<td>강건<br>(노드가 나뉘므로)</td>
</tr>
<tr class="odd">
<td>학습 속도</td>
<td>빠름</td>
<td>데이터 크기가 클수록 급격하게 느림</td>
<td>보통</td>
</tr>
</tbody>
</table></li>
<li><p>트리기반 모델 장단점 비교</p>
<ul>
<li><p>LightGBM이 가장 빠르고, 이후는 병렬학습인 Bagging모델이 다음으로 빠름</p>
<table class="caption-top table">
<colgroup>
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 16%">
</colgroup>
<thead>
<tr class="header">
<th>구분</th>
<th>Random Forest</th>
<th>XGBoost</th>
<th>LightGBM</th>
<th>CATBOOST</th>
<th>Extra Trees</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>학습방식</td>
<td>Bagging<br>(다수 트리의 평균)</td>
<td>Boosting<br>(순차적트리학습)</td>
<td>Boosting<br>(순차적트리학습)</td>
<td>Boosting<br>(순차적트리학습)</td>
<td>Bagging<br>(다수 트리의 평균)</td>
</tr>
<tr class="even">
<td>속도</td>
<td>빠름</td>
<td>상대적으로 느림</td>
<td>가장 빠름</td>
<td>중간</td>
<td>빠름</td>
</tr>
<tr class="odd">
<td>특성중요도</td>
<td>제공</td>
<td>제공</td>
<td>제공</td>
<td>제공</td>
<td>제공</td>
</tr>
<tr class="even">
<td>장점</td>
<td>가장 간단</td>
<td>(충분한 시간/리소스 있다면)성능이 뛰어감</td>
<td>가장 빠름/ 대규모 데이터처리에 능함</td>
<td>범주형 변수처리 특화. 자동처리 가능</td>
<td>RF에서 더 랜덤성을 강화하여 강건한 모델 생성</td>
</tr>
<tr class="odd">
<td>단점</td>
<td>가장 간단</td>
<td>느리고 메모리소모 많음</td>
<td>메모리사용량 높음</td>
<td>일부 설정에서 느림</td>
<td>RF보다 성능 떨어지는 경우가 많음</td>
</tr>
</tbody>
</table></li>
</ul></li>
<li><p>배깅(Bagging)과 부스팅(Boosting)</p>
<ul>
<li><p>보통은 부스팅이 이기는 경우가 많으며, 분산이 높고 불안정한 경우 배깅이 이기기도 함</p>
<table class="caption-top table">
<colgroup>
<col style="width: 33%">
<col style="width: 33%">
<col style="width: 33%">
</colgroup>
<thead>
<tr class="header">
<th>구분</th>
<th>배깅(Bagging)</th>
<th>부스팅(Boosting)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>개요</td>
<td><strong>여러 약한 모델의 결과</strong>를 결합<br>→하나의 결과</td>
<td><strong>이전 약한 모델의 틀린 결과</strong>를 개선하며<br>→순차적 학습</td>
</tr>
<tr class="even">
<td>학습방식</td>
<td>원본 데이터에서 <strong>여러 하위집합(Bag)</strong> 생성하고,<br>개별 Bag에 대해 <strong>약한 모델이 병렬적으로 학습</strong>됨</td>
<td>원본 데이터에서 <strong>하위 집합</strong>을 생성하고,기본 모델을 생성<br>해당 <strong>기본모델로 예측 후</strong> 틀린 예측에 더 높은 가중치를 부여하며 <strong>점차 개선</strong></td>
</tr>
<tr class="odd">
<td>특징</td>
<td>모델의 분산을 줄이고 <strong>과적합을 피하는데</strong> 도움<br>특히 <strong>분산을 줄이는데 중점</strong></td>
<td>모델의 분산을 줄이고 <strong>어려운 문제를 푸는데</strong> 도움<br>특히 <strong>편향을 줄이는데 중점</strong></td>
</tr>
<tr class="even">
<td>사용처</td>
<td>분류기가 불안정하고 분산이 높을 때 유용</td>
<td>모델의 안정성보다 문제 난이도가 어려울 때 유용</td>
</tr>
</tbody>
</table></li>
</ul></li>
<li><p>배깅(Bagging)과 부스팅(Boosting)의 작동방식 차이<br> <img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250112/index_files/figure-html/8d5bf56c-1-Note_week4_4.jpg" class="img-fluid" alt="Note_week4_4.jpg"></p></li>
</ul>
</section>
<section id="불균형데이터imbalnced-data-처리-실습-샘플데이터" class="level2">
<h2 class="anchored" data-anchor-id="불균형데이터imbalnced-data-처리-실습-샘플데이터">불균형데이터(Imbalnced Data) 처리 실습 (샘플데이터)</h2>
<div id="fa69b800" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 샘플데이터 생성 : 3개 클래스의 2차원 데이터 생성 (더 겹치도록 분산 조정함)</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Counter</span>
<span id="cb2-8"></span>
<span id="cb2-9">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb2-10">class_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.multivariate_normal([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>], [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span>
<span id="cb2-11">class_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.multivariate_normal([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>], [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>)</span>
<span id="cb2-12">class_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.multivariate_normal([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>], [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb2-13"></span>
<span id="cb2-14">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vstack([class_0, class_1, class_2])</span>
<span id="cb2-15">labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb2-16"></span>
<span id="cb2-17">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(data, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>])</span>
<span id="cb2-18">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> labels</span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 원본 클래스 분포</span></span>
<span id="cb2-21">original_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Counter(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>])</span>
<span id="cb2-22">original_counts</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Counter({0: 300, 1: 150, 2: 50})</code></pre>
</div>
</div>
<section id="undersampling---rus" class="level3">
<h3 class="anchored" data-anchor-id="undersampling---rus">Undersampling - RUS</h3>
<div id="62f90ffb" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.under_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomUnderSampler</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># RUS 적용</span></span>
<span id="cb4-4">rus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomUnderSampler(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb4-5">X_rus, y_rus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rus.fit_resample(df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>]], df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>])</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># RUS 제거된 데이터 계산</span></span>
<span id="cb4-8">rus_removed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.merge(pd.DataFrame(X_rus, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>]), how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outer"</span>, indicator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-9">rus_removed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rus_removed[rus_removed[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_merge"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left_only"</span>]</span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 시각화</span></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plt.figure(figsize=(3, 3))</span></span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 원본 데이터</span></span>
<span id="cb4-15">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> target_class <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> original_counts.keys():</span>
<span id="cb4-17">    subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target_class]</span>
<span id="cb4-18">    plt.scatter(subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Class </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_class<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb4-19">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original Data"</span>)</span>
<span id="cb4-20">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 1"</span>)</span>
<span id="cb4-21">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 2"</span>)</span>
<span id="cb4-22">plt.legend()</span>
<span id="cb4-23">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-24"></span>
<span id="cb4-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># RUS 데이터</span></span>
<span id="cb4-26">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-27"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> target_class <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> np.unique(y_rus):</span>
<span id="cb4-28">    subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(X_rus, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>])[y_rus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target_class]</span>
<span id="cb4-29">    plt.scatter(subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Class </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_class<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb4-30">plt.scatter(rus_removed[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], rus_removed[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Removed by RUS"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb4-31">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RUS (Random Under Sampling)"</span>)</span>
<span id="cb4-32">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 1"</span>)</span>
<span id="cb4-33">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 2"</span>)</span>
<span id="cb4-34">plt.legend()</span>
<span id="cb4-35">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250112/index_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="undersampling---enn" class="level3">
<h3 class="anchored" data-anchor-id="undersampling---enn">Undersampling - ENN</h3>
<div id="2e3a74d9" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.under_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> EditedNearestNeighbours</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ENN 적용</span></span>
<span id="cb5-4">enn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EditedNearestNeighbours()</span>
<span id="cb5-5">X_enn, y_enn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> enn.fit_resample(df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>]], df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>])</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 제거된 데이터 계산</span></span>
<span id="cb5-8">enn_removed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.merge(pd.DataFrame(X_enn, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>]), how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outer"</span>, indicator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-9">enn_removed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> enn_removed[enn_removed[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_merge"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left_only"</span>]</span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 원본 데이터</span></span>
<span id="cb5-12">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> target_class <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> original_counts.keys():</span>
<span id="cb5-14">    subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target_class]</span>
<span id="cb5-15">    plt.scatter(subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Class </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_class<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb5-16">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original Data"</span>)</span>
<span id="cb5-17">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 1"</span>)</span>
<span id="cb5-18">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 2"</span>)</span>
<span id="cb5-19">plt.legend()</span>
<span id="cb5-20">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-21"></span>
<span id="cb5-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ENN 데이터</span></span>
<span id="cb5-23">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> target_class <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> np.unique(y_enn):</span>
<span id="cb5-25">    subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(X_enn, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>])[y_enn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target_class]</span>
<span id="cb5-26">    plt.scatter(subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Class </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_class<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb5-27">plt.scatter(enn_removed[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], enn_removed[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Removed by ENN"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb5-28">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ENN (Edited Nearest Neighbours)"</span>)</span>
<span id="cb5-29">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 1"</span>)</span>
<span id="cb5-30">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 2"</span>)</span>
<span id="cb5-31">plt.legend()</span>
<span id="cb5-32">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb5-33"></span>
<span id="cb5-34">plt.tight_layout()</span>
<span id="cb5-35">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250112/index_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="undersampling---tomek-links" class="level3">
<h3 class="anchored" data-anchor-id="undersampling---tomek-links">Undersampling - Tomek Links</h3>
<div id="58d3b208" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.under_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TomekLinks</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tomek Links 적용</span></span>
<span id="cb6-4">tomek <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TomekLinks()</span>
<span id="cb6-5">X_tomek, y_tomek <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tomek.fit_resample(df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>]], df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>])</span>
<span id="cb6-6"></span>
<span id="cb6-7">tomek_removed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.merge(pd.DataFrame(X_tomek, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>]), how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outer"</span>, indicator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-8">tomek_removed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tomek_removed[tomek_removed[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_merge"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left_only"</span>]</span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 원본 데이터</span></span>
<span id="cb6-11">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> target_class <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> original_counts.keys():</span>
<span id="cb6-13">    subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target_class]</span>
<span id="cb6-14">    plt.scatter(subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Class </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_class<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb6-15">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original Data"</span>)</span>
<span id="cb6-16">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 1"</span>)</span>
<span id="cb6-17">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 2"</span>)</span>
<span id="cb6-18">plt.legend()</span>
<span id="cb6-19">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-20"></span>
<span id="cb6-21"></span>
<span id="cb6-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tomek Links 데이터</span></span>
<span id="cb6-23">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> target_class <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> np.unique(y_tomek):</span>
<span id="cb6-25">    subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(X_tomek, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>])[y_tomek <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target_class]</span>
<span id="cb6-26">    plt.scatter(subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Class </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_class<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb6-27">plt.scatter(tomek_removed[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], tomek_removed[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Removed by Tomek Links"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb6-28">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tomek Links"</span>)</span>
<span id="cb6-29">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 1"</span>)</span>
<span id="cb6-30">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 2"</span>)</span>
<span id="cb6-31">plt.legend()</span>
<span id="cb6-32">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-33"></span>
<span id="cb6-34">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250112/index_files/figure-html/cell-5-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="oversampling---ros" class="level3">
<h3 class="anchored" data-anchor-id="oversampling---ros">Oversampling - ROS</h3>
<div id="640484d5" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.over_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomOverSampler</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Original class distribution</span></span>
<span id="cb7-4">original_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Counter(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>])</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Random Oversampling</span></span>
<span id="cb7-7">ros <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomOverSampler(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb7-8">X_ros, y_ros <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ros.fit_resample(df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>]], df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>])</span>
<span id="cb7-9">ros_added <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(X_ros, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>]).iloc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df):]</span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualization for Random Oversampling</span></span>
<span id="cb7-12">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> target_class <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> original_counts.keys():</span>
<span id="cb7-14">    subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target_class]</span>
<span id="cb7-15">    plt.scatter(subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Class </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_class<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb7-16">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original Data"</span>)</span>
<span id="cb7-17">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 1"</span>)</span>
<span id="cb7-18">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 2"</span>)</span>
<span id="cb7-19">plt.legend()</span>
<span id="cb7-20">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-21"></span>
<span id="cb7-22">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-23"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> target_class <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> np.unique(y_ros):</span>
<span id="cb7-24">    subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(X_ros, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>])[y_ros <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target_class]</span>
<span id="cb7-25">    plt.scatter(subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Class </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_class<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb7-26">plt.scatter(ros_added[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], ros_added[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Added by Random Oversampling"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb7-27">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Oversampling"</span>)</span>
<span id="cb7-28">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 1"</span>)</span>
<span id="cb7-29">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 2"</span>)</span>
<span id="cb7-30">plt.legend()</span>
<span id="cb7-31">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-32"></span>
<span id="cb7-33">plt.tight_layout()</span>
<span id="cb7-34">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250112/index_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="oversampling---smote" class="level3">
<h3 class="anchored" data-anchor-id="oversampling---smote">Oversampling - SMOTE</h3>
<div id="c1b31d92" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.over_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SMOTE</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SMOTE Oversampling</span></span>
<span id="cb8-4">smote <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SMOTE(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb8-5">X_smote, y_smote <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smote.fit_resample(df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>]], df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>])</span>
<span id="cb8-6">smote_added <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(X_smote, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>]).iloc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df):]</span>
<span id="cb8-7"></span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualization for SMOTE</span></span>
<span id="cb8-10">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> target_class <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> original_counts.keys():</span>
<span id="cb8-12">    subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target_class]</span>
<span id="cb8-13">    plt.scatter(subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Class </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_class<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb8-14">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original Data"</span>)</span>
<span id="cb8-15">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 1"</span>)</span>
<span id="cb8-16">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 2"</span>)</span>
<span id="cb8-17">plt.legend()</span>
<span id="cb8-18">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-19"></span>
<span id="cb8-20">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-21"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> target_class <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> np.unique(y_smote):</span>
<span id="cb8-22">    subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(X_smote, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>])[y_smote <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target_class]</span>
<span id="cb8-23">    plt.scatter(subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Class </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_class<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb8-24">plt.scatter(smote_added[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], smote_added[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Added by SMOTE"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb8-25">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SMOTE Oversampling"</span>)</span>
<span id="cb8-26">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 1"</span>)</span>
<span id="cb8-27">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 2"</span>)</span>
<span id="cb8-28">plt.legend()</span>
<span id="cb8-29">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-30"></span>
<span id="cb8-31">plt.tight_layout()</span>
<span id="cb8-32">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250112/index_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="oversampling---adasyn" class="level3">
<h3 class="anchored" data-anchor-id="oversampling---adasyn">Oversampling - ADASYN</h3>
<div id="620743b2" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.over_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ADASYN</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ADASYN Oversampling</span></span>
<span id="cb9-4">adasyn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ADASYN(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb9-5">X_adasyn, y_adasyn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> adasyn.fit_resample(df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>]], df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>])</span>
<span id="cb9-6">adasyn_added <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(X_adasyn, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>]).iloc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df):]</span>
<span id="cb9-7"></span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualization for ADASYN</span></span>
<span id="cb9-10">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> target_class <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> original_counts.keys():</span>
<span id="cb9-12">    subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target_class]</span>
<span id="cb9-13">    plt.scatter(subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Class </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_class<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb9-14">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original Data"</span>)</span>
<span id="cb9-15">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 1"</span>)</span>
<span id="cb9-16">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 2"</span>)</span>
<span id="cb9-17">plt.legend()</span>
<span id="cb9-18">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-19"></span>
<span id="cb9-20">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb9-21"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> target_class <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> np.unique(y_adasyn):</span>
<span id="cb9-22">    subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(X_adasyn, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>])[y_adasyn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target_class]</span>
<span id="cb9-23">    plt.scatter(subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Class </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_class<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb9-24">plt.scatter(adasyn_added[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], adasyn_added[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Added by ADASYN"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb9-25">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ADASYN Oversampling"</span>)</span>
<span id="cb9-26">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 1"</span>)</span>
<span id="cb9-27">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 2"</span>)</span>
<span id="cb9-28">plt.legend()</span>
<span id="cb9-29">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-30"></span>
<span id="cb9-31">plt.tight_layout()</span>
<span id="cb9-32">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250112/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="hybrid-method---smoteenn" class="level3">
<h3 class="anchored" data-anchor-id="hybrid-method---smoteenn">Hybrid Method - SMOTEENN</h3>
<div id="b28060a0" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.combine <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SMOTEENN</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Original class distribution</span></span>
<span id="cb10-4">original_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Counter(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>])</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SMOTEENN Oversampling</span></span>
<span id="cb10-7">smoteenn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SMOTEENN(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb10-8">X_smoteenn, y_smoteenn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smoteenn.fit_resample(df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>]], df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>])</span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify added and deleted data for SMOTEENN</span></span>
<span id="cb10-11">smoteenn_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(X_smoteenn, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>])</span>
<span id="cb10-12">smoteenn_deleted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>]].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).isin(smoteenn_all.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb10-13">smoteenn_added <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smoteenn_all[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>smoteenn_all.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).isin(df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>]].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb10-14"></span>
<span id="cb10-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualization function</span></span>
<span id="cb10-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> visualize(title, original_df, processed_df, added_df, deleted_df):</span>
<span id="cb10-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Original data</span></span>
<span id="cb10-18">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb10-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> target_class <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> original_counts.keys():</span>
<span id="cb10-20">        subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> original_df[original_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target_class]</span>
<span id="cb10-21">        plt.scatter(subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Class </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_class<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb10-22">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Original Data"</span>)</span>
<span id="cb10-23">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 1"</span>)</span>
<span id="cb10-24">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 2"</span>)</span>
<span id="cb10-25">    plt.legend()</span>
<span id="cb10-26">    plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-27"></span>
<span id="cb10-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Processed data</span></span>
<span id="cb10-29">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb10-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> target_class <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> np.unique(processed_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>]):</span>
<span id="cb10-31">        subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> processed_df[processed_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target_class]</span>
<span id="cb10-32">        plt.scatter(subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], subset[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Class </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_class<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb10-33">    plt.scatter(added_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], added_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"blue"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Added Samples"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb10-34">    plt.scatter(deleted_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>], deleted_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Deleted Samples"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb10-35">    plt.title(title)</span>
<span id="cb10-36">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 1"</span>)</span>
<span id="cb10-37">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Feature 2"</span>)</span>
<span id="cb10-38">    plt.legend()</span>
<span id="cb10-39">    plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-40"></span>
<span id="cb10-41">    plt.tight_layout()</span>
<span id="cb10-42">    plt.show()</span>
<span id="cb10-43"></span>
<span id="cb10-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize SMOTEENN</span></span>
<span id="cb10-45">visualize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SMOTEENN Oversampling"</span>, df, smoteenn_all.assign(TARGET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_smoteenn), smoteenn_added, smoteenn_deleted)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250112/index_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="hybrid-method---smotetomek" class="level3">
<h3 class="anchored" data-anchor-id="hybrid-method---smotetomek">Hybrid Method - SMOTETomek</h3>
<div id="ad292dd5" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.combine <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SMOTETomek</span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SMOTETomek Oversampling</span></span>
<span id="cb11-4">smotetomek <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SMOTETomek(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb11-5">X_smotetomek, y_smotetomek <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smotetomek.fit_resample(df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>]], df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>])</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Identify added and deleted data for SMOTETomek</span></span>
<span id="cb11-8">smotetomek_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(X_smotetomek, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>])</span>
<span id="cb11-9">smotetomek_deleted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>]].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).isin(smotetomek_all.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb11-10">smotetomek_added <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smotetomek_all[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>smotetomek_all.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).isin(df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature2"</span>]].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))]</span>
<span id="cb11-11"></span>
<span id="cb11-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Visualize SMOTETomek</span></span>
<span id="cb11-13">visualize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SMOTETomek Oversampling"</span>, df, smotetomek_all.assign(TARGET<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_smotetomek), smotetomek_added, smotetomek_deleted)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250112/index_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="불균형-데이터-처리방법별-성능비교-실습" class="level2">
<h2 class="anchored" data-anchor-id="불균형-데이터-처리방법별-성능비교-실습">불균형 데이터 처리방법별 성능비교 실습</h2>
<section id="데이터-로딩-및-traintest-나누기" class="level3">
<h3 class="anchored" data-anchor-id="데이터-로딩-및-traintest-나누기">데이터 로딩 및 train/test 나누기</h3>
<div id="b19e4225" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data split</span></span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb12-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, roc_auc_score</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 지난수업에서 전처리한 csv파일 로딩</span></span>
<span id="cb12-6">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data_preprocessed.csv'</span>)</span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Train/Test셋 데이터 분할 (stratify : y비율을 비슷하게 유지하는 층화추출출)</span></span>
<span id="cb12-9">train , test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(data, test_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, random_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, stratify <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>])</span></code></pre></div>
</div>
</section>
<section id="성능비교-vanilla별도-처리하지-않음" class="level3">
<h3 class="anchored" data-anchor-id="성능비교-vanilla별도-처리하지-않음">성능비교 : Vanilla(별도 처리하지 않음)</h3>
<ul>
<li>RandomForestClassifier 활용</li>
<li>아래 코드에서 사용된 predict_proba() : predict가 확률계산 후 확률에 따라 속하는 y를 산출했다면, predict_proba는 확률까지만 계산
<ul>
<li>AUC를 계산하기 위해 사용함 (Imbalance data는 단순히 accuracy로 평가할 수 없음)</li>
<li>AUC/ROC 이해를 돕기위한 움직이는 그래프 자료 : https://angeloyeo.github.io/2020/08/05/ROC.html</li>
</ul></li>
</ul>
<div id="07ade28a" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">X_vanila <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-2">y_vanila <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>]</span></code></pre></div>
</div>
<div id="e560f10a" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomForestClassifier</span>
<span id="cb14-4"></span>
<span id="cb14-5">rf_vanila <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomForestClassifier(random_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb14-6">rf_vanila.fit(X_vanila, y_vanila)</span>
<span id="cb14-7"></span>
<span id="cb14-8">y_vanila_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rf_vanila.predict(test.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb14-9">y_vanila_proba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rf_vanila.predict_proba(test.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predict_proba : 0.5보다 높고 낮음까지 계산하지말고, 그전의 확률까지만계산</span></span>
<span id="cb14-10"></span>
<span id="cb14-11">y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: total: 32.3 s
Wall time: 1min 54s</code></pre>
</div>
</div>
<div id="91d564cc" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">vanila_accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_vanila_pred)</span>
<span id="cb16-2">vanila_cf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_test, y_vanila_pred)</span>
<span id="cb16-3">vanila_roc_auc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roc_auc_score(y_test, y_vanila_proba[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"* Vanila_accuracy : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vanila_accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"* Vanila_roc_auc</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vanila_roc_auc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"* Vanila_confusion materix :</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>vanila_cf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* Vanila_accuracy : 0.9193223204994797
* Vanila_roc_auc0.7084669152907
* Vanila_confusion materix :
 [[28266     3]
 [ 2478     5]]</code></pre>
</div>
</div>
</section>
<section id="심화-1-rapids" class="level3">
<h3 class="anchored" data-anchor-id="심화-1-rapids">심화 1 : Rapids</h3>
<ul>
<li><p>sklearn은 GPU미지원 시기에 개발되어, sklearn의 RandomForest는 GPU연산 미지원</p>
<ul>
<li>XGB나 LGBM은 지원 (XGB의 RandomForest는 지원원)</li>
</ul></li>
<li><p>GPU연산 미지원 라이브러리를 GPU연산 하고싶을 때, RAPIDS라이브러리의 <code>cuml</code> 사용 가능</p>
<ul>
<li>cuml은 이외에도 다양한 sklearn의 기능을 대체 가능</li>
</ul></li>
<li><p>RAPIDS 설치</p>
<ul>
<li><p>CUDA버전을 먼저 확인</p>
<pre><code>!nvcc --version</code></pre></li>
<li><p>공식git(설치법 등) : https://github.com/rapidsai/cuml?tab=readme-ov-file</p></li>
<li><p>the RAPIDS Release Selector : https://docs.rapids.ai/install/#selector</p>
<ul>
<li><p>환경에 맞춰 선택하면, 아래와 같이 Command가 생성됨</p>
<pre><code>  pip install \
      --extra-index-url=https://pypi.nvidia.com \
      "cudf-cu12==24.12.*" "dask-cudf-cu12==24.12.*" "cuml-cu12==24.12.*" \
      "cugraph-cu12==24.12.*" "nx-cugraph-cu12==24.12.*" "cuspatial-cu12==24.12.*" \
      "cuproj-cu12==24.12.*" "cuxfilter-cu12==24.12.*" "cucim-cu12==24.12.*" \
      "pylibraft-cu12==24.12.*" "raft-dask-cu12==24.12.*" "cuvs-cu12==24.12.*" \
      "nx-cugraph-cu12==24.12.*"</code></pre></li>
</ul></li>
</ul></li>
<li><p>RAPIDS <code>cuml</code> 사용 예시 ``` from cuml.ensemble import RandomForestClassifier as cuml_RandomForestClassifier</p>
<p>rf_vanila_rapid = cuml_RandomForestClassifier(random_state=42) rf_vanila_rapid.fit(X_vanila, y_vanila) y_vanila_rapid_pred = rf_vanila_rapid.predict(test.drop([‘TARGET’], axis = 1)) y_vanila_rapid_proba = rf_vanila_rapid.predict_proba(test.drop([‘TARGET’], axis = 1)) y_test = test[‘TARGET’] ```</p></li>
<li><p>CUDA버전확인 샘플</p></li>
</ul>
<div id="f94c3cc8" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CUDA버전확인 샘플</span></span>
<span id="cb20-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>nvcc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>version</span></code></pre></div>
</div>
<ul>
<li>cuml의 RandomForestClassifier 샘플</li>
</ul>
<div id="5d005700" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb21-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> cuml.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomForestClassifier <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> cuml_RandomForestClassifier</span>
<span id="cb21-3"></span>
<span id="cb21-4">rf_vanila_rapid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cuml_RandomForestClassifier(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb21-5">rf_vanila_rapid.fit(X_vanila, y_vanila)</span>
<span id="cb21-6">y_vanila_rapid_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rf_vanila_rapid.predict(test.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb21-7">y_vanila_rapid_proba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rf_vanila_rapid.predict_proba(test.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb21-8">y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>]</span></code></pre></div>
</div>
</section>
<section id="성능비교-rus" class="level3">
<h3 class="anchored" data-anchor-id="성능비교-rus">성능비교 : RUS</h3>
<ul>
<li><p>Wall time: 1min 54s → 16.2 s</p></li>
<li><p>Vanila_accuracy : 0.9193223204994797 → 0.694686524453694</p></li>
<li><p>Vanila_roc_auc0.7084669152907 → 0.7370645914878501</p></li>
<li><p>Vanila_confusion materix : [[28266 3] → [[19723 8546] [ 2478 5]] → [ 843 1640]]</p></li>
</ul>
<div id="75e2e131" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb22-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.under_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomUnderSampler</span>
<span id="cb22-3"></span>
<span id="cb22-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># RUS 적용</span></span>
<span id="cb22-5">rus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomUnderSampler(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb22-6">X_rus, y_rus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rus.fit_resample(train.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>])</span>
<span id="cb22-7">X_rus.shape</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: total: 156 ms
Wall time: 513 ms</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>(44684, 131)</code></pre>
</div>
</div>
<div id="5d1b93ee" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb25-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomForestClassifier</span>
<span id="cb25-3"></span>
<span id="cb25-4">rf_rus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomForestClassifier(random_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb25-5">rf_rus.fit(X_rus, y_rus)</span>
<span id="cb25-6">y_rus_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rf_rus.predict(test.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb25-7">y_rus_proba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rf_rus.predict_proba(test.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb25-8">y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: total: 4.41 s
Wall time: 16.2 s</code></pre>
</div>
</div>
<div id="ae890494" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">rus_accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_rus_pred)</span>
<span id="cb27-2">rus_cf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_test, y_rus_pred)</span>
<span id="cb27-3">rus_roc_auc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roc_auc_score(y_test, y_rus_proba[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb27-4"></span>
<span id="cb27-5">sampling_method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RUS'</span></span>
<span id="cb27-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"* </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sampling_method<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_accuracy : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>rus_accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb27-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"* </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sampling_method<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_roc_auc : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>rus_roc_auc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb27-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"*</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>sampling_method<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">_confusion materix :</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>rus_cf<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* RUS_accuracy : 0.694686524453694
* RUS_roc_auc : 0.7370645914878501
*RUS_confusion materix :
 [[19723  8546]
 [  843  1640]]</code></pre>
</div>
</div>
<ul>
<li>함수화 (이후부터 함수로 진행)</li>
</ul>
<div id="4c3747d9" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomForestClassifier</span>
<span id="cb29-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, roc_auc_score</span>
<span id="cb29-3"></span>
<span id="cb29-4"></span>
<span id="cb29-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> compute_for_samplers(train, test, sampler, return_metric_only<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb29-6">  X_sampled, y_sampled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sampler.fit_resample(train.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TARGET"</span>])</span>
<span id="cb29-7">  model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomForestClassifier(random_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb29-8">  model.fit(X_sampled, y_sampled)</span>
<span id="cb29-9">  y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(test.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb29-10">  y_proba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_proba(test.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb29-11">  y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>]</span>
<span id="cb29-12"></span>
<span id="cb29-13">  accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred)</span>
<span id="cb29-14">  auc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roc_auc_score(y_test, y_proba[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb29-15">  cf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_test, y_pred)</span>
<span id="cb29-16">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> return_metric_only:</span>
<span id="cb29-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> accuracy, cf, auc</span>
<span id="cb29-18">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb29-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc'</span>:accuracy,</span>
<span id="cb29-20">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auc'</span>:auc,</span>
<span id="cb29-21">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cf'</span>:cf,</span>
<span id="cb29-22">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X_sampled'</span> : X_sampled,</span>
<span id="cb29-23">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_sampled'</span> : y_sampled,</span>
<span id="cb29-24">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span> : model,</span>
<span id="cb29-25">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_pred'</span> : y_pred,</span>
<span id="cb29-26">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_proba'</span> : y_proba}</span></code></pre></div>
</div>
</section>
<section id="성능비교-enn" class="level3">
<h3 class="anchored" data-anchor-id="성능비교-enn">성능비교 : ENN</h3>
<ul>
<li><p>요약</p>
<ul>
<li>시간이 더 오래걸리고, 성능 도움도 되지 않았음</li>
<li>비율을 맞춰주는 알고리즘이 아니고, 연산시간이 길어짐</li>
</ul></li>
<li><p>Wall time: 1min 54s → 3min 37s</p></li>
<li><p>Vanila_accuracy : 0.9193223204994797 → 0.9192572840790842</p></li>
<li><p>Vanila_roc_auc : 0.7084669152907 → 0.7138916844382973</p></li>
<li><p>Vanila_confusion materix : [[28266 3] → [[28240 29] [ 2478 5]] → [ 2454 29]]</p></li>
</ul>
<div id="40651503" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb30-2"></span>
<span id="cb30-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.under_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> EditedNearestNeighbours</span>
<span id="cb30-4"></span>
<span id="cb30-5">enn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EditedNearestNeighbours()</span>
<span id="cb30-6">enn_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_for_samplers(train, test, enn)</span>
<span id="cb30-7"></span>
<span id="cb30-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(enn_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc'</span>])</span>
<span id="cb30-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(enn_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auc'</span>])</span>
<span id="cb30-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(enn_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cf'</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.9192572840790842
0.7138916844382973
[[28240    29]
 [ 2454    29]]
CPU times: total: 6min 13s
Wall time: 3min 37s</code></pre>
</div>
</div>
<ul>
<li>Imbalance를 적절히 제거했다면, y에 맞춰 2만여개의 데이터가 남아있어야 함</li>
<li>실제로는 22만개가 남아있는데, ENN은 비율을 맞추는 알고리즘이 아닌 이상한 것(노이즈)을 걸러내기 때문</li>
<li>k값을 늘릴수록 없애는 값이 늘어남(knn기반이므로로)</li>
</ul>
<div id="9de77cab" class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X_train 샘플 차이</span></span>
<span id="cb32-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""* ENN전 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb32-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* ENN후 : "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>enn_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X_sampled'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* ENN전 : (276759, 132)
* ENN후 : "(221430, 131)</code></pre>
</div>
</div>
<div id="384e0a15" class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y_train 값 분포</span></span>
<span id="cb34-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb34-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* ENN 전</span></span>
<span id="cb34-4"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb34-5"></span>
<span id="cb34-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* ENN 후</span></span>
<span id="cb34-7"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>enn_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_sampled'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value_counts()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
* ENN 전
TARGET
0    254417
1     22342
dtype: int64

* ENN 후
TARGET
0    199088
1     22342
Name: count, dtype: int64</code></pre>
</div>
</div>
</section>
<section id="성능비교-tomek-links" class="level3">
<h3 class="anchored" data-anchor-id="성능비교-tomek-links">성능비교 : Tomek-Links</h3>
<ul>
<li><p>요약</p>
<ul>
<li>오래 걸리고, 성능도 개선되지 않음</li>
</ul></li>
<li><p>Wall time: 1min 54s → 4min 8s</p></li>
<li><p>Vanila_accuracy : 0.9193223204994797 → 0.9194198751300728</p></li>
<li><p>Vanila_roc_auc : 0.7084669152907 → 0.7135753731337223</p></li>
<li><p>Vanila_confusion materix : [[28266 3] → [[28266 3] [ 2478 5]] → [ 2475 8]]</p></li>
</ul>
<div id="c8c9f507" class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb36-2"></span>
<span id="cb36-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.under_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TomekLinks</span>
<span id="cb36-4"></span>
<span id="cb36-5">tml <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TomekLinks()</span>
<span id="cb36-6">tml_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_for_samplers(train, test, tml)</span>
<span id="cb36-7"></span>
<span id="cb36-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tml_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc'</span>])</span>
<span id="cb36-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tml_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auc'</span>])</span>
<span id="cb36-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(tml_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cf'</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.9194198751300728
0.7135753731337223
[[28266     3]
 [ 2475     8]]
CPU times: total: 7min 37s
Wall time: 4min 8s</code></pre>
</div>
</div>
<div id="e0543c69" class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X_train 샘플 차이</span></span>
<span id="cb38-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""* TomekLinks 전 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb38-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* TomekLinks 후 : "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tml_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X_sampled'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* TomekLinks 전 : (276759, 132)
* TomekLinks 후 : "(266325, 131)</code></pre>
</div>
</div>
<div id="374f4030" class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y_train 값 분포</span></span>
<span id="cb40-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb40-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* TomekLinks 전</span></span>
<span id="cb40-4"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb40-5"></span>
<span id="cb40-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* TomekLinks 후</span></span>
<span id="cb40-7"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tml_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_sampled'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value_counts()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
* TomekLinks 전
TARGET
0    254417
1     22342
dtype: int64

* TomekLinks 후
TARGET
0    243983
1     22342
Name: count, dtype: int64</code></pre>
</div>
</div>
</section>
<section id="성능비교-ros" class="level3">
<h3 class="anchored" data-anchor-id="성능비교-ros">성능비교 : ROS</h3>
<ul>
<li><p>Wall time: 1min 54s → 3min 4s</p></li>
<li><p>Vanila_accuracy : 0.9193223204994797 → 0.919062174817898</p></li>
<li><p>Vanila_roc_auc : 0.7084669152907 → 0.7287776769542174</p></li>
<li><p>Vanila_confusion materix : [[28266 3] → [[28223 46] [ 2478 5]] → [ 2443 40]]</p></li>
</ul>
<div id="66cdba27" class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb42-2"></span>
<span id="cb42-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.over_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomOverSampler</span>
<span id="cb42-4"></span>
<span id="cb42-5">ros <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomOverSampler(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb42-6">ros_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_for_samplers(train, test, ros)</span>
<span id="cb42-7"></span>
<span id="cb42-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ros_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc'</span>])</span>
<span id="cb42-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ros_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auc'</span>])</span>
<span id="cb42-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ros_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cf'</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.919062174817898
0.7287776769542174
[[28223    46]
 [ 2443    40]]
CPU times: total: 1min 1s
Wall time: 3min 4s</code></pre>
</div>
</div>
<div id="743ee4e4" class="cell">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X_train 샘플 차이</span></span>
<span id="cb44-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""* ROS 전 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb44-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* ROS 후 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ros_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X_sampled'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* ROS 전 : (276759, 132)
* ROS 후 : (508834, 131)</code></pre>
</div>
</div>
<div id="6e334de3" class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y_train 값 분포</span></span>
<span id="cb46-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb46-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* ROS 전</span></span>
<span id="cb46-4"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb46-5"></span>
<span id="cb46-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* ROS 후</span></span>
<span id="cb46-7"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ros_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_sampled'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value_counts()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
* ROS 전
TARGET
0    254417
1     22342
dtype: int64

* ROS 후
TARGET
0    254417
1    254417
Name: count, dtype: int64</code></pre>
</div>
</div>
</section>
<section id="성능비교-smote" class="level3">
<h3 class="anchored" data-anchor-id="성능비교-smote">성능비교 : SMOTE</h3>
<ul>
<li><p>Wall time: 1min 54s → 3min 23s</p></li>
<li><p>Vanila_accuracy : 0.9193223204994797 → 0.9192572840790842</p></li>
<li><p>Vanila_roc_auc : 0.7084669152907 → 0.6958898421466617</p></li>
<li><p>Vanila_confusion materix : [[28266 3] → [[28268 1] [ 2478 5]] → [ 2482 1]]</p></li>
</ul>
<div id="4b801695" class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb48-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> imblearn.over_sampling <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SMOTE</span>
<span id="cb48-3"></span>
<span id="cb48-4">smote <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SMOTE(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb48-5">smote_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_for_samplers(train, test, smote)</span>
<span id="cb48-6"></span>
<span id="cb48-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(smote_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc'</span>])</span>
<span id="cb48-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(smote_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auc'</span>])</span>
<span id="cb48-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(smote_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cf'</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.9192572840790842
0.6958898421466617
[[28268     1]
 [ 2482     1]]
CPU times: total: 1min 16s
Wall time: 3min 23s</code></pre>
</div>
</div>
<div id="9cc7eede" class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X_train 샘플 차이</span></span>
<span id="cb50-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""* SMOTE 전 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb50-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* SMOTE 후 : "</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>smote_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X_sampled'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* SMOTE 전 : (276759, 132)
* SMOTE 후 : "(508834, 131)</code></pre>
</div>
</div>
<div id="9962612c" class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y_train 값 분포</span></span>
<span id="cb52-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb52-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* SMOTE 전</span></span>
<span id="cb52-4"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>size()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb52-5"></span>
<span id="cb52-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">* SMOTE 후</span></span>
<span id="cb52-7"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>smote_result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_sampled'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>value_counts()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
* SMOTE 전
TARGET
0    254417
1     22342
dtype: int64

* SMOTE 후
TARGET
0    254417
1    254417
Name: count, dtype: int64</code></pre>
</div>
</div>
</section>
<section id="성능비교-결과" class="level3">
<h3 class="anchored" data-anchor-id="성능비교-결과">성능비교 결과</h3>
<ul>
<li>imblearn의 성능개선에 비해 들어가는 노력(시간)이 큼</li>
<li>데이터 사이즈와 변수가 적었던 과거와 달리, 유의미한 결과를 내지 못하게 되었음</li>
<li>어느정도 비율을 맞추는데 사용되고, class weights를 통한 가중치 조절에 자리를 내어줌</li>
</ul>
<div id="9d7e05c1" class="cell">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이제 모델 성능 비교</span></span>
<span id="cb54-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 선형 회귀 vs SVR vs RFR</span></span>
<span id="cb54-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 로지스틱회귀 vs svc vs RFC</span></span>
<span id="cb54-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># RFC vs XGBC vs LGBMC vs CATBOOSTC vs EXTRATREEC</span></span></code></pre></div>
</div>
</section>
</section>
<section id="model별-성능-비교-실습" class="level2">
<h2 class="anchored" data-anchor-id="model별-성능-비교-실습">Model별 성능 비교 실습</h2>
<ul>
<li>SVM의 실행시간문제로 데이터 사이즈를 줄여서 실습</li>
</ul>
<section id="라이브러리-설치-및-데이터-분할" class="level3">
<h3 class="anchored" data-anchor-id="라이브러리-설치-및-데이터-분할">라이브러리 설치 및 데이터 분할</h3>
<div id="80263e3d" class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install catboost xgboost lightgbm</span>
<span id="cb55-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 라이브러리 설치</span></span></code></pre></div>
</div>
<div id="c7979b1f" class="cell">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomForestClassifier, ExtraTreesClassifier</span>
<span id="cb56-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.svm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SVC</span>
<span id="cb56-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> lightgbm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LGBMClassifier</span>
<span id="cb56-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> xgboost <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> XGBClassifier</span>
<span id="cb56-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> catboost <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> CatBoostClassifier</span>
<span id="cb56-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> make_classification</span>
<span id="cb56-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb56-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> classification_report</span>
<span id="cb56-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, roc_auc_score</span>
<span id="cb56-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb56-11"></span>
<span id="cb56-12">train_, _  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(train, random_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, test_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>)</span>
<span id="cb56-13">train_.info()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
Index: 27675 entries, 105024 to 224936
Columns: 132 entries, SK_ID_CURR to EMERGENCYSTATE_MODE_nan
dtypes: float64(89), int64(43)
memory usage: 28.1 MB</code></pre>
</div>
</div>
</section>
<section id="모델-성능-비교" class="level3">
<h3 class="anchored" data-anchor-id="모델-성능-비교">모델 성능 비교</h3>
<div id="9360b810" class="cell">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 모델 리스트</span></span>
<span id="cb58-2">models <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb58-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Forest"</span>: RandomForestClassifier(class_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"balanced"</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb58-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SVC"</span>: SVC(class_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"balanced"</span>, probability <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb58-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LightGBM"</span>: LGBMClassifier(class_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"balanced"</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb58-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XGBoost"</span>: XGBClassifier(scale_pos_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, eval_metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logloss"</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb58-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CatBoost"</span>: CatBoostClassifier(class_weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>], verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb58-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extra Trees"</span>: ExtraTreesClassifier(class_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"balanced"</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>),</span>
<span id="cb58-9">}</span>
<span id="cb58-10"></span>
<span id="cb58-11">X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb58-12">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>]</span>
<span id="cb58-13">X_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb58-14">y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>]</span>
<span id="cb58-15">rsts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb58-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 학습 및 평가</span></span>
<span id="cb58-17"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> name, model <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> models.items():</span>
<span id="cb58-18">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb58-19">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb58-20">    model.fit(X_train, y_train)</span>
<span id="cb58-21">    y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(X_test)</span>
<span id="cb58-22">    y_proba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict_proba(X_test)</span>
<span id="cb58-23">    accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred)</span>
<span id="cb58-24">    auc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roc_auc_score(y_test, y_proba[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb58-25">    cf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_test, y_pred)</span>
<span id="cb58-26">    rsts[name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc'</span>:accuracy,</span>
<span id="cb58-27">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auc'</span>:auc,</span>
<span id="cb58-28">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cf'</span>:cf,</span>
<span id="cb58-29">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span> : model,</span>
<span id="cb58-30">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_pred'</span> : y_pred,</span>
<span id="cb58-31">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_proba'</span> : y_proba,</span>
<span id="cb58-32">                  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span> : time.time() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start }</span>
<span id="cb58-33">    </span>
<span id="cb58-34">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb58-35"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>classification_report(y_test, y_pred)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>
Random Forest

              precision    recall  f1-score   support

           0       0.92      1.00      0.96     28269
           1       0.50      0.00      0.00      2483

    accuracy                           0.92     30752
   macro avg       0.71      0.50      0.48     30752
weighted avg       0.89      0.92      0.88     30752


SVC

              precision    recall  f1-score   support

           0       0.94      0.53      0.67     28269
           1       0.10      0.60      0.17      2483

    accuracy                           0.53     30752
   macro avg       0.52      0.56      0.42     30752
weighted avg       0.87      0.53      0.63     30752


LightGBM
[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Number of positive: 2199, number of negative: 25476
[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009680 seconds.
You can set `force_col_wise=true` to remove the overhead.
[LightGBM] [Info] Total Bins 10852
[LightGBM] [Info] Number of data points in the train set: 27675, number of used features: 120
[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -&gt; initscore=-0.000000
[LightGBM] [Info] Start training from score -0.000000

              precision    recall  f1-score   support

           0       0.95      0.80      0.87     28269
           1       0.19      0.52      0.28      2483

    accuracy                           0.78     30752
   macro avg       0.57      0.66      0.57     30752
weighted avg       0.89      0.78      0.82     30752


XGBoost

              precision    recall  f1-score   support

           0       0.94      0.89      0.91     28269
           1       0.21      0.33      0.26      2483

    accuracy                           0.85     30752
   macro avg       0.57      0.61      0.58     30752
weighted avg       0.88      0.85      0.86     30752


CatBoost

              precision    recall  f1-score   support

           0       0.94      0.88      0.91     28269
           1       0.22      0.38      0.28      2483

    accuracy                           0.84     30752
   macro avg       0.58      0.63      0.59     30752
weighted avg       0.88      0.84      0.86     30752


Extra Trees

              precision    recall  f1-score   support

           0       0.92      1.00      0.96     28269
           1       0.00      0.00      0.00      2483

    accuracy                           0.92     30752
   macro avg       0.46      0.50      0.48     30752
weighted avg       0.85      0.92      0.88     30752
</code></pre>
</div>
</div>
<div id="d856b66c" class="cell">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 파일로 저장</span></span>
<span id="cb60-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle</span>
<span id="cb60-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rsts.pkl'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb60-4">  pickle.dump(rsts, f)</span></code></pre></div>
</div>
<div id="c52ee11b" class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1">df_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(rsts).loc[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'acc'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auc'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cf'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>],:]</span>
<span id="cb61-2">df_results</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Random Forest</th>
<th data-quarto-table-cell-role="th">SVC</th>
<th data-quarto-table-cell-role="th">LightGBM</th>
<th data-quarto-table-cell-role="th">XGBoost</th>
<th data-quarto-table-cell-role="th">CatBoost</th>
<th data-quarto-table-cell-role="th">Extra Trees</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">acc</td>
<td>0.919257</td>
<td>0.531835</td>
<td>0.779429</td>
<td>0.846839</td>
<td>0.839588</td>
<td>0.91916</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">auc</td>
<td>0.707628</td>
<td>0.596337</td>
<td>0.736252</td>
<td>0.703948</td>
<td>0.735909</td>
<td>0.689785</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">cf</td>
<td>[[28266, 3], [2480, 3]]</td>
<td>[[14872, 13397], [1000, 1483]]</td>
<td>[[22670, 5599], [1184, 1299]]</td>
<td>[[25235, 3034], [1676, 807]]</td>
<td>[[24872, 3397], [1536, 947]]</td>
<td>[[28266, 3], [2483, 0]]</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">time</td>
<td>9.124638</td>
<td>762.844463</td>
<td>0.5796</td>
<td>0.665159</td>
<td>9.372309</td>
<td>5.709153</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<ul>
<li><strong>LGBM으로 Model selection</strong>
<ul>
<li>AUC기준 LGBM(0.736252), CatBoost(0.735909) 순으로 좋음</li>
<li>CF기준 LightGBM과 XGBoost는 Tradeoff가 있음
<ul>
<li>LightGBM과는 실제 1인 데이터를 잘 찾고(1299), XGBoost는 1이 아닌데 1로 분류하는 경우가 적다(3034)</li>
<li>과제의 성격에 따라 모델을 선택</li>
</ul></li>
<li>Time기준 LGBM과 XGBoost가 빠름</li>
<li><strong>현재 과제는 실제 1을 찾아내는 것이 중요하다는 관점으로, LGBM선택</strong></li>
</ul></li>
</ul>
</section>
</section>
<section id="model-selection-후-케이스별-비교" class="level2">
<h2 class="anchored" data-anchor-id="model-selection-후-케이스별-비교">Model selection 후 케이스별 비교</h2>
<ul>
<li><p>비교할 2가지 Case</p>
<ul>
<li><strong>LightGBM</strong> with RUS</li>
<li><strong>LightGBM</strong>(Weighted) with<strong>out</strong> RUS</li>
</ul></li>
<li><p>Weight에 대한 설정방법은 모델별로 다름</p>
<div class="sourceCode" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">  models <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb62-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Random Forest"</span>: RandomForestClassifier(class_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"balanced"</span>),</span>
<span id="cb62-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SVC"</span>: SVC(class_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"balanced"</span>, probability <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb62-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LightGBM"</span>: LGBMClassifier(class_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"balanced"</span>),</span>
<span id="cb62-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XGBoost"</span>: XGBClassifier(scale_pos_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, eval_metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logloss"</span>),</span>
<span id="cb62-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CatBoost"</span>: CatBoostClassifier(class_weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>], verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb62-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Extra Trees"</span>: ExtraTreesClassifier(class_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"balanced"</span>),</span>
<span id="cb62-8">  }</span></code></pre></div></li>
</ul>
<div id="0d316d40" class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base model with RUS</span></span>
<span id="cb63-2">X_train_rus, y_train_rus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_rus, y_rus</span>
<span id="cb63-3"></span>
<span id="cb63-4">rus_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LGBMClassifier(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>).fit(X_train_rus, y_train_rus)</span>
<span id="cb63-5">y_pred_rus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rus_model.predict(X_test)</span>
<span id="cb63-6">y_proba_rus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rus_model.predict_proba(X_test)</span>
<span id="cb63-7"></span>
<span id="cb63-8">accuracy_rus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred_rus)</span>
<span id="cb63-9">auc_rus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roc_auc_score(y_test, y_proba_rus[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb63-10">cf_rus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_test, y_pred_rus)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Number of positive: 22342, number of negative: 22342
[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.005589 seconds.
You can set `force_row_wise=true` to remove the overhead.
And if memory is not enough, you can set `force_col_wise=true`.
[LightGBM] [Info] Total Bins 11024
[LightGBM] [Info] Number of data points in the train set: 44684, number of used features: 121
[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -&gt; initscore=0.000000</code></pre>
</div>
</div>
<div id="7cba1fa1" class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Weight model without RUS</span></span>
<span id="cb65-2">weights_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LGBMClassifier(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, class_weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'balanced'</span>).fit(X_train, y_train)</span>
<span id="cb65-3">y_pred_weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights_model.predict(X_test)</span>
<span id="cb65-4">y_proba_weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights_model.predict_proba(X_test)</span>
<span id="cb65-5"></span>
<span id="cb65-6">accuracy_weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, y_pred_weights)</span>
<span id="cb65-7">auc_weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roc_auc_score(y_test, y_proba_weights[:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb65-8">cf_weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> confusion_matrix(y_test, y_pred_weights)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
[LightGBM] [Info] Number of positive: 2199, number of negative: 25476
[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.003091 seconds.
You can set `force_row_wise=true` to remove the overhead.
And if memory is not enough, you can set `force_col_wise=true`.
[LightGBM] [Info] Total Bins 10852
[LightGBM] [Info] Number of data points in the train set: 27675, number of used features: 120
[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -&gt; initscore=-0.000000
[LightGBM] [Info] Start training from score -0.000000</code></pre>
</div>
</div>
<div id="bc33f5c5" class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base model with RUS</span></span>
<span id="cb67-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'accuracy of LGBM with RUS : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(accuracy_rus,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb67-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'auc of LGBM with RUS : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(auc_rus,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb67-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb67-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CF of LGBM With RUS'</span>)</span>
<span id="cb67-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(cf_rus)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>accuracy of LGBM with RUS : 0.6924
auc of LGBM with RUS : 0.7565
----------------------------------------------------------------------------------------------------
CF of LGBM With RUS
[[19587  8682]
 [  777  1706]]</code></pre>
</div>
</div>
<div id="70d3b305" class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Weight model without RUS</span></span>
<span id="cb69-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'accuracy of LGBM with Class Weight : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(accuracy_weights,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb69-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'auc of LGBM with Class Weight : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(auc_weights,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb69-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb69-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CF of LGBM With Class Weight'</span>)</span>
<span id="cb69-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(cf_weights)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>accuracy of LGBM with Class Weight : 0.7794
auc of LGBM with Class Weight : 0.7363
----------------------------------------------------------------------------------------------------
CF of LGBM With Class Weight
[[22670  5599]
 [ 1184  1299]]</code></pre>
</div>
</div>
<ul>
<li>결과 비교 및 선택
<ul>
<li>Test데이터에 대해 강건(Robust)한 모델은, 데이터를 많이 본 모델</li>
<li>특히 장기적으로 쓴다면 더 많은 데이터를 본 강건한 모델이 더 유지하기 쉬움</li>
<li>위 기준으로는 후자의 모델(Weight model without RUS)을 선택</li>
</ul></li>
<li>참고
<ul>
<li>현재의 모델도 100% 완벽하다고는 볼 수 없으나, 연체 위험자 등을 찾아낼 수 있다는 점에서 의의</li>
<li>Hybrid method를 실제로 쓸 일은 잘 없음(SMOTE의 오버피팅 문제로)</li>
</ul></li>
</ul>
</section>
</section>
<section id="과제" class="level1">
<h1>과제</h1>
<ol type="1">
<li>Week3 과제에서 전처리 완료된 데이터를 가지고, Week4에 배운 다양한 불균형 처리 기법을 시험해보세요.</li>
<li>1)에서 결정된 불균형 처리 방법을 기준으로 최종 Model을 결정해 보세요.</li>
</ol>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>Under-sampling</category>
  <category>Over-sampling</category>
  <category>Hybrid-sampling</category>
  <category>Model selection</category>
  <category>202412Study_DataAnalysis</category>
  <guid>https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250112/</guid>
  <pubDate>Sun, 12 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[DA스터디/3주차/과제] EDA 및 전처리</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250107/</link>
  <description><![CDATA[ 






<p>금융권 데이터를 활용한 분석 스터디 - 3주차</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>아래의 목적/이유로 참가한 스터디에 대한 기록
<ul>
<li>SQLD취득 후 장기 미사용 &amp; GPT를 통한 SQL사용 등으로 많이 잊은 SQL을 복기</li>
<li>기존에 사용해 본 Optuna가 아닌 Autogluon이 커리큘럼에 있어 익혀보고자 함</li>
<li>기존에 관심있던 XAI(설명가능한 AI)를 익히고자 함</li>
</ul></li>
<li>3주차 과제 진행
<ul>
<li>지정과제에 대한 EDA, 전처리, 데이터마트(CSV파일)만들기
<ul>
<li>데이터마트는 sqlite3으로 DB형태로 만듦</li>
</ul></li>
<li>변수에 대한 설명 확인</li>
<li>수치/명목형 변수로 나누어 EDA 및 전처리 진행</li>
<li>향후 Test데이터 등에도 사용하기 위해 전처리 함수로 정리</li>
</ul></li>
</ul>
</section>
<section id="주차-과제" class="level1">
<h1>3주차 과제</h1>
<section id="과제-설명" class="level2">
<h2 class="anchored" data-anchor-id="과제-설명">과제 설명</h2>
<ul>
<li>과제 : 월간 데이콘 신용카드 사용자 연체 예측 AI 경진대회
<ul>
<li>https://dacon.io/competitions/official/235713/overview/description</li>
</ul></li>
<li>EDA, 전처리, 데이터마트(CSV파일 등)만들고, 그 과정이 담긴 ipynb제출</li>
</ul>
</section>
<section id="변수-설명-확인하기" class="level2">
<h2 class="anchored" data-anchor-id="변수-설명-확인하기">변수 설명 확인하기</h2>
<ul>
<li><a href="https://www.dacon.io/competitions/official/235713/talkboard/402821/?_gl=1%2a1qi5pgu%2a_gcl_au%2aMTY1MzAzMjUwMi4xNzMyNDU0MDQ2%2a_ga%2aNTU2Mjg0MDUwLjE3MjQxMzkwODk.%2a_ga_35PZM515YN%2aMTczNjI1MzI0NS4xOC4xLjE3MzYyNTMyNjQuNDEuMC4w">원본링크</a></li>
<li>변수별 설명
<ul>
<li>gender: 성별</li>
<li>car: 차량 소유 여부</li>
<li>reality: 부동산 소유 여부</li>
<li>child_num: 자녀 수</li>
<li>income_total: 연간 소득</li>
<li>income_type: 소득 분류
<ul>
<li>[‘Commercial associate’, ‘Working’, ‘State servant’, ‘Pensioner’, ‘Student’]</li>
</ul></li>
<li>edu_type: 교육 수준
<ul>
<li>[‘Higher education’ ,‘Secondary / secondary special’, ‘Incomplete higher’, ‘Lower secondary’, ‘Academic degree’]</li>
</ul></li>
<li>family_type: 결혼 여부
<ul>
<li>[‘Married’, ‘Civil marriage’, ‘Separated’, ‘Single / not married’, ‘Widow’]</li>
</ul></li>
<li>house_type: 생활 방식
<ul>
<li>[‘Municipal apartment’, ‘House / apartment’, ‘With parents’, ‘Co-op apartment’, ‘Rented apartment’, ‘Office apartment’]</li>
</ul></li>
<li>DAYS_BIRTH: 출생일
<ul>
<li>데이터 수집 당시 (0)부터 역으로 셈, 즉, -1은 데이터 수집일 하루 전에 태어났음을 의미</li>
</ul></li>
<li>DAYS_EMPLOYED: 업무 시작일
<ul>
<li>데이터 수집 당시 (0)부터 역으로 셈, 즉, -1은 데이터 수집일 하루 전부터 일을 시작함을 의미</li>
<li>양수 값은 고용되지 않은 상태를 의미함</li>
</ul></li>
<li>FLAG_MOBIL: 핸드폰 소유 여부</li>
<li>work_phone: 업무용 전화 소유 여부</li>
<li>phone: 전화 소유 여부</li>
<li>email: 이메일 소유 여부</li>
<li>occyp_type: 직업 유형<br>
</li>
<li>family_size: 가족 규모</li>
<li>begin_month: 신용카드 발급 월
<ul>
<li>데이터 수집 당시 (0)부터 역으로 셈, 즉, -1은 데이터 수집일 한 달 전에 신용카드를 발급함을 의미</li>
</ul></li>
<li><strong>credit</strong>: 사용자의 신용카드 대금 연체를 기준으로 한 신용도
<ul>
<li>낮을 수록 높은 신용의 신용카드 사용자를 의미함</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="데이터-읽고-기초적인-정보-확인하기" class="level2">
<h2 class="anchored" data-anchor-id="데이터-읽고-기초적인-정보-확인하기">데이터 읽고 기초적인 정보 확인하기</h2>
<ul>
<li>데이터 로딩하기</li>
</ul>
<div id="58b7fd70" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pkb_sqlite3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DB_sqlite3</span>
<span id="cb1-2"></span>
<span id="cb1-3">db_controller <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DB_sqlite3(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dacon_creditcard_overdue.db'</span>)</span>
<span id="cb1-4">df_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM train'</span>)</span>
<span id="cb1-5">df_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM test'</span>)</span>
<span id="cb1-6">df_sample_submission <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM sample_submission'</span>)</span></code></pre></div>
</div>
<div id="acdebd11" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터 형태(잘 로딩되었는지 확인)</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb2-4"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df_test<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(26457, 20)
(10000, 19)</code></pre>
</div>
</div>
<ul>
<li>describe()를 활용해 정보 확인하기
<ul>
<li>count값을 보면, occyp_type에만 Null(결측치)값이 있음
<ul>
<li>occyp_type : 결측치가 8천여개로 Drop이 아닌 대체 필요</li>
</ul></li>
<li>Unique값이 있는 컬럼들은 범주형 변수로 추측</li>
<li>count/unique/freq값을 보면, 데이터가 편향된 컬럼 있음
<ul>
<li>예를 들어, gender는 26,457 중 17,697로 약 65%로 F값이 많음(top)</li>
</ul></li>
<li>DAYS_BIRTH나 begin_month는 음수 변수로 로그변환 제외</li>
</ul></li>
</ul>
<div id="32691f73" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df_train.describe(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all'</span>).transpose().reset_index()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">index</th>
<th data-quarto-table-cell-role="th">count</th>
<th data-quarto-table-cell-role="th">unique</th>
<th data-quarto-table-cell-role="th">top</th>
<th data-quarto-table-cell-role="th">freq</th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">std</th>
<th data-quarto-table-cell-role="th">min</th>
<th data-quarto-table-cell-role="th">25%</th>
<th data-quarto-table-cell-role="th">50%</th>
<th data-quarto-table-cell-role="th">75%</th>
<th data-quarto-table-cell-role="th">max</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>index</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>13228.0</td>
<td>7637.622372</td>
<td>0.0</td>
<td>6614.0</td>
<td>13228.0</td>
<td>19842.0</td>
<td>26456.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>gender</td>
<td>26457</td>
<td>2</td>
<td>F</td>
<td>17697</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>car</td>
<td>26457</td>
<td>2</td>
<td>N</td>
<td>16410</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>reality</td>
<td>26457</td>
<td>2</td>
<td>Y</td>
<td>17830</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>child_num</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.428658</td>
<td>0.747326</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>19.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>income_total</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>187306.524493</td>
<td>101878.367995</td>
<td>27000.0</td>
<td>121500.0</td>
<td>157500.0</td>
<td>225000.0</td>
<td>1575000.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>income_type</td>
<td>26457</td>
<td>5</td>
<td>Working</td>
<td>13645</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>edu_type</td>
<td>26457</td>
<td>5</td>
<td>Secondary / secondary special</td>
<td>17995</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>family_type</td>
<td>26457</td>
<td>5</td>
<td>Married</td>
<td>18196</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>house_type</td>
<td>26457</td>
<td>6</td>
<td>House / apartment</td>
<td>23653</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>DAYS_BIRTH</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>-15958.053899</td>
<td>4201.589022</td>
<td>-25152.0</td>
<td>-19431.0</td>
<td>-15547.0</td>
<td>-12446.0</td>
<td>-7705.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>DAYS_EMPLOYED</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>59068.750728</td>
<td>137475.427503</td>
<td>-15713.0</td>
<td>-3153.0</td>
<td>-1539.0</td>
<td>-407.0</td>
<td>365243.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>FLAG_MOBIL</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>work_phone</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.224742</td>
<td>0.41742</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>phone</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.294251</td>
<td>0.455714</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>email</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.09128</td>
<td>0.288013</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>occyp_type</td>
<td>18286</td>
<td>18</td>
<td>Laborers</td>
<td>4512</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>family_size</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>2.196848</td>
<td>0.916717</td>
<td>1.0</td>
<td>2.0</td>
<td>2.0</td>
<td>3.0</td>
<td>20.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">18</td>
<td>begin_month</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>-26.123294</td>
<td>16.55955</td>
<td>-60.0</td>
<td>-39.0</td>
<td>-24.0</td>
<td>-12.0</td>
<td>0.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">19</td>
<td>credit</td>
<td>26457.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>1.51956</td>
<td>0.702283</td>
<td>0.0</td>
<td>1.0</td>
<td>2.0</td>
<td>2.0</td>
<td>2.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="018cdd7a" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터 나누기</span></span>
<span id="cb5-2">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>].copy()</span>
<span id="cb5-3">x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_train.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).copy()</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-6"><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>y_train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(26457, 19)
(26457,)</code></pre>
</div>
</div>
</section>
<section id="eda-수치형-변수-기초-통계량-확인" class="level2">
<h2 class="anchored" data-anchor-id="eda-수치형-변수-기초-통계량-확인">[EDA] 수치형 변수 : 기초 통계량 확인</h2>
<section id="왜도" class="level3">
<h3 class="anchored" data-anchor-id="왜도">왜도</h3>
<ul>
<li>왜도를 구해 표로 정리했으며, 시각화를 통해 추가 확인하기로 함</li>
</ul>
<div id="63333ced" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">x_numerical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.select_dtypes(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'float64'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int64'</span>])</span>
<span id="cb7-2">numeric_skew <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_numerical.skew().reset_index() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># skew() 함수로 왜도 구하기</span></span>
<span id="cb7-3">numeric_skew</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">index</th>
<th data-quarto-table-cell-role="th">0</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>index</td>
<td>0.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>child_num</td>
<td>2.852376</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>income_total</td>
<td>2.659271</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>DAYS_BIRTH</td>
<td>-0.185986</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>DAYS_EMPLOYED</td>
<td>1.777596</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>FLAG_MOBIL</td>
<td>0.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>work_phone</td>
<td>1.318953</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>phone</td>
<td>0.903042</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>email</td>
<td>2.838422</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>family_size</td>
<td>1.431759</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>begin_month</td>
<td>-0.290050</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="첨도" class="level3">
<h3 class="anchored" data-anchor-id="첨도">첨도</h3>
<ul>
<li>첨도를 구해 표로 정리했으며, 시각화를 통해 추가 확인하기로 함</li>
</ul>
<div id="16863eff" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">numeric_kurt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_numerical.kurtosis().reset_index()</span>
<span id="cb8-2">numeric_kurt</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">index</th>
<th data-quarto-table-cell-role="th">0</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>index</td>
<td>-1.200000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>child_num</td>
<td>29.172394</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>income_total</td>
<td>16.359621</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>DAYS_BIRTH</td>
<td>-1.046188</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>DAYS_EMPLOYED</td>
<td>1.161734</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>FLAG_MOBIL</td>
<td>0.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>work_phone</td>
<td>-0.260383</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>phone</td>
<td>-1.184604</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>email</td>
<td>6.057100</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>family_size</td>
<td>10.578051</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>begin_month</td>
<td>-1.041906</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="히스토그램-시각화" class="level3">
<h3 class="anchored" data-anchor-id="히스토그램-시각화">히스토그램 시각화</h3>
<ul>
<li>히스토그램으로 시각화했고, 일부 분포의 판단이 힘든 값에 대해서는 재조정하여 시각화</li>
<li>아래 변수들은 유무를 0,1로만 표현한 변수로, 추가적인 시각화에서 제외함
<ul>
<li>work_phone, phone, email</li>
</ul></li>
</ul>
<div id="1580340c" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 설정: 가로 그래프 개수</span></span>
<span id="cb9-5">cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb9-6">num_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_numerical.columns)</span>
<span id="cb9-7">rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.ceil(num_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cols)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 필요한 행(row) 수 계산</span></span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 서브플롯 생성</span></span>
<span id="cb9-10">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(rows, cols, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 figure 크기 조정</span></span>
<span id="cb9-11">axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes.flatten()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2D 배열을 1D로 변환하여 인덱싱 편리하게</span></span>
<span id="cb9-12"></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그래프 그리기</span></span>
<span id="cb9-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> var_idx, var_nm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(x_numerical.columns):</span>
<span id="cb9-15">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[var_idx]</span>
<span id="cb9-16">    ax.hist(x_numerical.iloc[:, var_idx], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>)</span>
<span id="cb9-17">    ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>var_nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb9-18"></span>
<span id="cb9-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 빈 서브플롯 숨기기</span></span>
<span id="cb9-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_vars, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(axes)):</span>
<span id="cb9-21">    axes[i].axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb9-22"></span>
<span id="cb9-23">plt.tight_layout()</span>
<span id="cb9-24">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250107/index_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>재조정하여 시각화한 내용을 기반으로, 아래와 같이 결정함
<ul>
<li>뚜렷하게 쏠림(높은 왜도)을 보이는 ’DAYS_EMPLOYED’에 대해 로그변환 진행</li>
<li>첨도가 3보다 낮은, ’DAYS_BIRTH’와 ’begin_month에 대해 표준화 진행</li>
</ul></li>
</ul>
<div id="333a9550" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 설정: 가로 그래프 개수와 세로 그래프 개수</span></span>
<span id="cb10-5">rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-6">cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 서브플롯 생성</span></span>
<span id="cb10-9">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(rows, cols, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 figure 크기 조정</span></span>
<span id="cb10-10">axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes.flatten()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2D 배열을 1D로 변환하여 인덱싱 편리하게</span></span>
<span id="cb10-11"></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그래프 그리기</span></span>
<span id="cb10-13">plot_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> var_idx, var_nm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(x_numerical.columns):</span>
<span id="cb10-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> var_nm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child_num'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_total'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family_size'</span>]:</span>
<span id="cb10-16">        ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[plot_count]</span>
<span id="cb10-17">        data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_numerical.iloc[:, var_idx]</span>
<span id="cb10-18"></span>
<span id="cb10-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이상치 제외를 위한 사분위수 계산</span></span>
<span id="cb10-20">        Q1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.percentile(data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb10-21">        Q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.percentile(data, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span>)</span>
<span id="cb10-22">        IQR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Q1</span>
<span id="cb10-23">        lower_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Q1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> IQR</span>
<span id="cb10-24">        upper_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> IQR</span>
<span id="cb10-25"></span>
<span id="cb10-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이상치를 제외한 데이터</span></span>
<span id="cb10-27">        filtered_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[(data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> lower_bound) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> upper_bound)]</span>
<span id="cb10-28"></span>
<span id="cb10-29">        ax.hist(filtered_data, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>)</span>
<span id="cb10-30">        ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>var_nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb10-31">        ax.set_xlim(filtered_data.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), filtered_data.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>())  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x축의 최소값과 최대값 설정</span></span>
<span id="cb10-32">        plot_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-33"></span>
<span id="cb10-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 빈 서브플롯 숨기기</span></span>
<span id="cb10-35"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(plot_count, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(axes)):</span>
<span id="cb10-36">    axes[i].axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb10-37"></span>
<span id="cb10-38">plt.tight_layout()</span>
<span id="cb10-39">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250107/index_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="이상치" class="level3">
<h3 class="anchored" data-anchor-id="이상치">이상치</h3>
<ul>
<li>전체 26,457 row중, 일부 이상치가 많아보이는 컬럼 있음
<ul>
<li>대상 : child_num, income_total, DAYS_EMPLOYED, work_phone, email, family_size</li>
</ul></li>
<li>변수 설명 내용 중 ’소유 여부’인 변수(work_phone, email)를 확인 결과, 0 &amp; 1만 있어 제외
<ul>
<li>남은 대상 : child_num, income_total, DAYS_EMPLOYED, family_size</li>
</ul></li>
<li>Box plot을 그려보았으나, 시각화만으로는 판단이 어려워 추가적으로 확인하기로 함</li>
</ul>
<div id="20b7a3ed" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 수업시간에 사용한 IQR기준 이상치함수 활용</span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> detect_outliers_fast(df):</span>
<span id="cb11-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate IQR without NaN values</span></span>
<span id="cb11-5">    Q1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'midpoint'</span>)</span>
<span id="cb11-6">    Q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>, interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'midpoint'</span>)</span>
<span id="cb11-7">    IQR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Q1</span>
<span id="cb11-8">    lower_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Q1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> IQR</span>
<span id="cb11-9">    upper_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> IQR</span>
<span id="cb11-10"></span>
<span id="cb11-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Vectorized outlier detection with NaN handling</span></span>
<span id="cb11-12">    outlier_flags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(</span>
<span id="cb11-13">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> col: <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>col.between(lower_bound[col.name], upper_bound[col.name]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> col.notna()</span>
<span id="cb11-14">    )</span>
<span id="cb11-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> outlier_flags</span>
<span id="cb11-16"></span>
<span id="cb11-17"></span>
<span id="cb11-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 구한 이상치가 0인 경우를 제외하고 표기</span></span>
<span id="cb11-19">x_outliers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> detect_outliers_fast(x_numerical)</span>
<span id="cb11-20">outliers_to_see <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_outliers.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()[x_outliers.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb11-21">outliers_to_see</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>child_num         369
income_total     1129
DAYS_EMPLOYED    5726
work_phone       5946
email            2415
family_size       350
dtype: int64</code></pre>
</div>
</div>
<div id="71ea2ee8" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb13-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb13-4"></span>
<span id="cb13-5"></span>
<span id="cb13-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 설정: 가로 그래프 개수</span></span>
<span id="cb13-7">cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb13-8">num_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(outliers_to_see.index)</span>
<span id="cb13-9">rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.ceil(num_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cols)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 필요한 행(row) 수 계산</span></span>
<span id="cb13-10"></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 서브플롯 생성</span></span>
<span id="cb13-12">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(rows, cols, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 figure 크기 조정</span></span>
<span id="cb13-13">axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes.flatten()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2D 배열을 1D로 변환하여 인덱싱 편리하게</span></span>
<span id="cb13-14"></span>
<span id="cb13-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그래프 그리기</span></span>
<span id="cb13-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> var_idx, var_nm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(outliers_to_see.index):</span>
<span id="cb13-17">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[var_idx]</span>
<span id="cb13-18">    sns.boxplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_numerical[var_nm], ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lightblue'</span>)</span>
<span id="cb13-19">    ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>var_nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb13-20">    ax.set_xlabel(var_nm)</span>
<span id="cb13-21"></span>
<span id="cb13-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 빈 서브플롯 숨기기</span></span>
<span id="cb13-23"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_vars, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(axes)):</span>
<span id="cb13-24">    axes[i].axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb13-25"></span>
<span id="cb13-26">plt.tight_layout()</span>
<span id="cb13-27">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250107/index_files/figure-html/cell-11-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>각 변수에 대해 확인한 결과 아래와 같으며, 제외할지 등에 대한 판단이 어려움
<ul>
<li>child_num : 자녀가 19명인 경우는 확실히 이상치라는 느낌이지만, 3명의 경우는 이상치로 보기 어려워 보임</li>
<li>family_size : 가족구성원이 5명인 경우도 이상치라고 해야할지 모호함</li>
<li>DAYS_EMPLOYED는 추가로 확인해보니 미취업여부를 나타내기 위한 양수인 365243 다음으로 큰 수가 -17.
<ul>
<li>불필요하게 큰 숫자로, 1로 대체</li>
</ul></li>
</ul></li>
<li>각 변수의 이상치에 대해, 값 Drop이 아닌 변환 진행</li>
</ul>
<div id="d95d9ab2" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> summarize_unique_outliers(x_numerical, x_outliers):</span>
<span id="cb14-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 각 컬럼별로 이상치의 고유값을 추출하여 딕셔너리로 저장</span></span>
<span id="cb14-3">    unique_outliers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_numerical[x_outliers].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> col: col.unique().tolist())</span>
<span id="cb14-4"></span>
<span id="cb14-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 딕셔너리 형태로 반환</span></span>
<span id="cb14-6">    unique_outliers_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unique_outliers.to_dict()</span>
<span id="cb14-7"></span>
<span id="cb14-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> unique_outliers_dict</span>
<span id="cb14-9"></span>
<span id="cb14-10"></span>
<span id="cb14-11">unique_outliers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summarize_unique_outliers(x_numerical, x_outliers)</span>
<span id="cb14-12"></span>
<span id="cb14-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""* 이상치로 판명된 Unique값 현황</span></span>
<span id="cb14-14"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">child_num : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>unique_outliers[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child_num'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-15"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">income_total : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>unique_outliers[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_total'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">DAYS_EMPLOYED : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>unique_outliers[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb14-17"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">family_size : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>unique_outliers[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family_size'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>* 이상치로 판명된 Unique값 현황
child_num : [nan, 3.0, 4.0, 5.0, 14.0, 19.0, 7.0]
income_total : [nan, 450000.0, 405000.0, 585000.0, 495000.0, 382500.0, 387000.0, 540000.0, 459000.0, 720000.0, 427500.0, 562500.0, 630000.0, 463500.0, 432000.0, 787500.0, 900000.0, 391500.0, 716323.5, 675000.0, 990000.0, 612000.0, 1575000.0, 652500.0, 945000.0, 418500.0, 634500.0, 423000.0, 742500.0, 517500.0, 560250.0, 810000.0, 445500.0, 616500.0, 765000.0, 396000.0, 472500.0, 594000.0, 468000.0, 661500.0, 441000.0, 494100.0, 531000.0, 607500.0, 414000.0, 697500.0, 1125000.0, 1350000.0]
DAYS_EMPLOYED : [nan, 365243.0, -9391.0, -9404.0, -12332.0, -8491.0, -9988.0, -11940.0, -7400.0, -10993.0, -9870.0, -8091.0, -9957.0, -7310.0, -11062.0, -7679.0, -7514.0, -8671.0, -10773.0, -8284.0, -10121.0, -7369.0, -12278.0, -7415.0, -7401.0, -10050.0, -8553.0, -7593.0, -11494.0, -9052.0, -9269.0, -7835.0, -9683.0, -9858.0, -7346.0, -10490.0, -9925.0, -9029.0, -7838.0, -7553.0, -7379.0, -8171.0, -8375.0, -7536.0, -10600.0, -7851.0, -9575.0, -9422.0, -9255.0, -8298.0, -8163.0, -7734.0, -12179.0, -13245.0, -8172.0, -8325.0, -9258.0, -8100.0, -10384.0, -10821.0, -8538.0, -8772.0, -9359.0, -15072.0, -7733.0, -7979.0, -7471.0, -11951.0, -8412.0, -7824.0, -11589.0, -10094.0, -10758.0, -12169.0, -7840.0, -8022.0, -9181.0, -8316.0, -10290.0, -9485.0, -7624.0, -9751.0, -10149.0, -8953.0, -11451.0, -9325.0, -10454.0, -9479.0, -11183.0, -7591.0, -10079.0, -9866.0, -8109.0, -8684.0, -7465.0, -11157.0, -11083.0, -15038.0, -8643.0, -7371.0, -8479.0, -8469.0, -11906.0, -8760.0, -12490.0, -10689.0, -12455.0, -7752.0, -8737.0, -8855.0, -10236.0, -7627.0, -8794.0, -9136.0, -8063.0, -12423.0, -10437.0, -13102.0, -7288.0, -7718.0, -12148.0, -7866.0, -7827.0, -9947.0, -7341.0, -7830.0, -14810.0, -7804.0, -12949.0, -14473.0, -7614.0, -8808.0, -8377.0, -9046.0, -8131.0, -9447.0, -7513.0, -7404.0, -12827.0, -8649.0, -8369.0, -9178.0, -8405.0, -12621.0, -10780.0, -8175.0, -9225.0, -11884.0, -10936.0, -9748.0, -9745.0, -7698.0, -8497.0, -7364.0, -8624.0, -8083.0, -10364.0, -12870.0, -11389.0, -8460.0, -10994.0, -11907.0, -8348.0, -8206.0, -7888.0, -13800.0, -7778.0, -8448.0, -8862.0, -8015.0, -9379.0, -7551.0, -8714.0, -8509.0, -9482.0, -9975.0, -7347.0, -8803.0, -7811.0, -7413.0, -8157.0, -10110.0, -8143.0, -13735.0, -9195.0, -7747.0, -11693.0, -8040.0, -8691.0, -9076.0, -8033.0, -8875.0, -12647.0, -10762.0, -7557.0, -8838.0, -15661.0, -11398.0, -8601.0, -11552.0, -8756.0, -7522.0, -7738.0, -11542.0, -8290.0, -9152.0, -8987.0, -9239.0, -8859.0, -8140.0, -7949.0, -7622.0, -15713.0, -9349.0, -7278.0, -7500.0, -9260.0, -9724.0, -8036.0, -14887.0, -8767.0, -8443.0, -7871.0, -7566.0, -13415.0, -14018.0, -8966.0, -9044.0, -9240.0, -7276.0, -9564.0, -8044.0, -7900.0, -7494.0, -9385.0, -8376.0, -14413.0, -8647.0, -7786.0, -8254.0, -12995.0, -7676.0, -8995.0, -9756.0, -10155.0, -9389.0, -9236.0, -8710.0, -9419.0, -9559.0, -10909.0, -8071.0, -7343.0, -9581.0, -11954.0, -10475.0, -10217.0, -9363.0, -8861.0, -7373.0, -9131.0, -10361.0, -7756.0, -9508.0, -10147.0, -8535.0, -8870.0, -8664.0, -7640.0, -8152.0, -11202.0, -9830.0, -14536.0, -7765.0, -8507.0, -9194.0, -9698.0, -8801.0, -9794.0, -10843.0, -9094.0, -11555.0, -8230.0, -8618.0, -12591.0, -7280.0, -9270.0, -10629.0, -7916.0, -7563.0, -7504.0, -8923.0, -12032.0, -11272.0, -11785.0, -10353.0, -8072.0, -9311.0, -8757.0, -8411.0, -10647.0, -8892.0, -11061.0, -14338.0, -9574.0, -8011.0, -10047.0, -10370.0, -9320.0, -7314.0, -10692.0, -7864.0, -11332.0, -9527.0, -10305.0, -13010.0, -10746.0, -7953.0, -12917.0, -7706.0, -10052.0, -9316.0, -7677.0, -11603.0, -8130.0, -10688.0, -8410.0, -11692.0, -7518.0, -14775.0, -8894.0, -10202.0, -12513.0, -8256.0, -10259.0, -8342.0, -11683.0, -8510.0, -8189.0, -7704.0, -10232.0, -8863.0, -12462.0, -10627.0, -12163.0, -9989.0, -10452.0, -7736.0, -11448.0, -8205.0, -12253.0, -8066.0, -10657.0, -9019.0, -10777.0]
family_size : [nan, 5.0, 6.0, 7.0, 15.0, 20.0, 9.0]</code></pre>
</div>
</div>
</section>
</section>
<section id="eda-범주형-변수-시각화-확인" class="level2">
<h2 class="anchored" data-anchor-id="eda-범주형-변수-시각화-확인">[EDA] 범주형 변수 : 시각화 확인</h2>
<ul>
<li>edu_type(교육 수준)은 순서가 중요한 변수이므로 Label Encoder로 우선순위를 지정하는 것을 고려</li>
<li>이외 변수는 모델의 혼동(상위관계 여부)을 방지하고자 One-hot인코딩 고려
<ul>
<li>대다수의 변수가 2~6개의 unique값을 가져 크게 어려움은 없을 것으로 보임</li>
<li>그러나 occyp_type(직업유형)의 경우는 값이 많은 관계로 좀 더 고민이 필요할 것으로 보임</li>
</ul></li>
<li>구간화는 도메인지식이 많지 않으므로 진행하지 않음</li>
</ul>
<div id="f9453645" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 범주형 변수 추리기</span></span>
<span id="cb16-2">x_categorical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.select_dtypes(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'object'</span>])</span>
<span id="cb16-3">x_categorical.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">gender</th>
<th data-quarto-table-cell-role="th">car</th>
<th data-quarto-table-cell-role="th">reality</th>
<th data-quarto-table-cell-role="th">income_type</th>
<th data-quarto-table-cell-role="th">edu_type</th>
<th data-quarto-table-cell-role="th">family_type</th>
<th data-quarto-table-cell-role="th">house_type</th>
<th data-quarto-table-cell-role="th">occyp_type</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>F</td>
<td>N</td>
<td>N</td>
<td>Commercial associate</td>
<td>Higher education</td>
<td>Married</td>
<td>Municipal apartment</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>F</td>
<td>N</td>
<td>Y</td>
<td>Commercial associate</td>
<td>Secondary / secondary special</td>
<td>Civil marriage</td>
<td>House / apartment</td>
<td>Laborers</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>M</td>
<td>Y</td>
<td>Y</td>
<td>Working</td>
<td>Higher education</td>
<td>Married</td>
<td>House / apartment</td>
<td>Managers</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>F</td>
<td>N</td>
<td>Y</td>
<td>Commercial associate</td>
<td>Secondary / secondary special</td>
<td>Married</td>
<td>House / apartment</td>
<td>Sales staff</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>F</td>
<td>Y</td>
<td>Y</td>
<td>State servant</td>
<td>Higher education</td>
<td>Married</td>
<td>House / apartment</td>
<td>Managers</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="167e1456" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb17-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb17-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb17-4"></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># credit 데이터 합치기</span></span>
<span id="cb17-6">combined_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_categorical.copy()</span>
<span id="cb17-7">combined_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_train.copy()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 동일한 인덱스를 기준으로 credit 추가</span></span>
<span id="cb17-8"></span>
<span id="cb17-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 범주형 변수 설정</span></span>
<span id="cb17-10">categorical_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gender'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'car'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reality'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_type'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edu_type'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family_type'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'house_type'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>]</span>
<span id="cb17-11">cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb17-12">num_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(categorical_columns)</span>
<span id="cb17-13">rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.ceil(num_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cols)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 필요한 행(row) 수 계산</span></span>
<span id="cb17-14"></span>
<span id="cb17-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 서브플롯 생성</span></span>
<span id="cb17-16">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(rows, cols, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 figure 크기 조정</span></span>
<span id="cb17-17">axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes.flatten()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2D 배열을 1D로 변환하여 인덱싱 편리하게</span></span>
<span id="cb17-18"></span>
<span id="cb17-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그래프 그리기</span></span>
<span id="cb17-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, var_nm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(categorical_columns):</span>
<span id="cb17-21">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[idx]</span>
<span id="cb17-22"></span>
<span id="cb17-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터 그룹화 및 스택 데이터 계산</span></span>
<span id="cb17-24">    stacked_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combined_data.groupby([var_nm, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>]).size().unstack(fill_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb17-25"></span>
<span id="cb17-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 각 카테고리의 막대 그래프 그리기</span></span>
<span id="cb17-27">    bottom_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(stacked_data))</span>
<span id="cb17-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> credit_value <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> stacked_data.columns:</span>
<span id="cb17-29">        ax.bar(stacked_data.index, stacked_data[credit_value], bottom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>bottom_values, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Credit </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>credit_value<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb17-30">        bottom_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> stacked_data[credit_value]</span>
<span id="cb17-31"></span>
<span id="cb17-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그래프 설정</span></span>
<span id="cb17-33">    ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Stacked Bar Plot of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>var_nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb17-34">    ax.set_xlabel(var_nm)</span>
<span id="cb17-35">    ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb17-36">    ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb17-37">    ax.legend(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Credit'</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper right'</span>)</span>
<span id="cb17-38"></span>
<span id="cb17-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 빈 서브플롯 숨기기</span></span>
<span id="cb17-40"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_vars, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(axes)):</span>
<span id="cb17-41">    axes[i].axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb17-42"></span>
<span id="cb17-43">plt.tight_layout()</span>
<span id="cb17-44">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250107/index_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>occyp_type(직업유형)
<ul>
<li>occyp_type의 경우는 앞서 확인했을 때, 유일하게 결측치가 있으면서 결측치가 많았음</li>
<li>따라서 삭제가 아닌 대체가 필요한데, 결측치의 처리를 위해 결측치가 가지는 의미나 맥락을 고민해봄
<ul>
<li>’무직’이라는 컬럼이 없는데, 결측치가 ’무직’을 의미하는 것은 아닐지 확인
<ul>
<li>DAYS_EMPLOYED변수가 양수인(직업이 없는) 경우를 제외해도, 여전히 Null값이 존재</li>
<li>무직이어서 Null인 값도 있지만, 무직이 아님에도 Null인 경우도 있음</li>
<li>Null값에 따른 평균/최대/최소 임금 등을 시각해보았으나 별도의 인사이트는 얻지 못함</li>
</ul></li>
</ul></li>
<li><strong>occyp_type(직업유형)의 결측치 중, DAYS_EMPLOYED변수가 양수인 경우는 ‘NoJob’, 이외는 ’Missing’으로 대체</strong>하기로 함
<ul>
<li>sklearn의 SimpleImputer라는 것도 있었으나, 최빈값 대체할 것은 아니므로 사용하지 않음</li>
</ul></li>
</ul></li>
</ul>
<div id="77f4b65e" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># occyp_type(직업유형)의 값 확인</span></span>
<span id="cb18-2">x_categorical.occyp_type.value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>occyp_type
Laborers                 4512
Core staff               2646
Sales staff              2539
Managers                 2167
Drivers                  1575
High skill tech staff    1040
Accountants               902
Medicine staff            864
Cooking staff             457
Security staff            424
Cleaning staff            403
Private service staff     243
Low-skill Laborers        127
Waiters/barmen staff      124
Secretaries                97
Realty agents              63
HR staff                   62
IT staff                   41
Name: count, dtype: int64</code></pre>
</div>
</div>
<div id="a8275572" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Null값에 따른 평균/최대/최소 임금 시각화. 별도의 인사이트는 얻지 못함</span></span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb20-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb20-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb20-6"></span>
<span id="cb20-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결측 여부 컬럼 추가</span></span>
<span id="cb20-8">x_train_temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train[(x_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">365243</span>)].copy()</span>
<span id="cb20-9">x_train_temp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type_isnull'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train_temp[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>].isnull()</span>
<span id="cb20-10"></span>
<span id="cb20-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그룹별 income_total의 평균, 최대, 최소 계산</span></span>
<span id="cb20-12">summary_stats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train_temp.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type_isnull'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_total'</span>].agg([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>]).reset_index()</span>
<span id="cb20-13">summary_stats.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'IsNull'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Max'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Min'</span>]</span>
<span id="cb20-14"></span>
<span id="cb20-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Boolean 값을 문자열로 변환</span></span>
<span id="cb20-16">summary_stats[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'IsNull'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> summary_stats[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'IsNull'</span>].astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>)</span>
<span id="cb20-17"></span>
<span id="cb20-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 서브플롯 생성</span></span>
<span id="cb20-19">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1행 2열의 서브플롯 생성</span></span>
<span id="cb20-20"></span>
<span id="cb20-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 왼쪽 플롯: 평균(Mean)</span></span>
<span id="cb20-22">sns.barplot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'IsNull'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean'</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>summary_stats, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>)</span>
<span id="cb20-23"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> summary_stats.iterrows():</span>
<span id="cb20-24">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].text(i, row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean'</span>], <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bottom'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb20-25">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Income Total - Mean by Null Status'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb20-26">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Occyp Type is Null'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb20-27">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean Income Total'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb20-28">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb20-29"></span>
<span id="cb20-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 오른쪽 플롯: 최대(Max)와 최소(Min)</span></span>
<span id="cb20-31">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(summary_stats[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'IsNull'</span>], summary_stats[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Max'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Max'</span>)</span>
<span id="cb20-32">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].plot(summary_stats[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'IsNull'</span>], summary_stats[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Min'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, marker<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Min'</span>)</span>
<span id="cb20-33"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> summary_stats.iterrows():</span>
<span id="cb20-34">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].text(i, row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Max'</span>], <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Max'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bottom'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb20-35">    axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].text(i, row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Min'</span>], <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Min'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb20-36">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Income Total - Max &amp; Min by Null Status'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb20-37">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Occyp Type is Null'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb20-38">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Income Total'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb20-39">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].legend(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Statistics'</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper right'</span>)</span>
<span id="cb20-40">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].grid(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>)</span>
<span id="cb20-41"></span>
<span id="cb20-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 레이아웃 조정 및 출력</span></span>
<span id="cb20-43">plt.tight_layout()</span>
<span id="cb20-44">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250107/index_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="y값-불균형도-확인" class="level2">
<h2 class="anchored" data-anchor-id="y값-불균형도-확인">y값 불균형도 확인</h2>
<ul>
<li>(변수 설명에 따르면)숫자가 낮을수록 신용도가 높은데, 신용도가 낮은 경우가 64%로 많은편임</li>
</ul>
<div id="c61225d3" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">y_train.value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>credit
2.0    16968
1.0     6267
0.0     3222
Name: count, dtype: int64</code></pre>
</div>
</div>
<div id="451b6ad2" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">y_train.value_counts(normalize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>credit
2.0    0.641343
1.0    0.236875
0.0    0.121783
Name: proportion, dtype: float64</code></pre>
</div>
</div>
</section>
<section id="전처리-결측이상치-처리-및-표준화정규화-등" class="level2">
<h2 class="anchored" data-anchor-id="전처리-결측이상치-처리-및-표준화정규화-등">[전처리] 결측/이상치 처리 및 표준화/정규화 등</h2>
<section id="결측치-대체-공통" class="level3">
<h3 class="anchored" data-anchor-id="결측치-대체-공통">결측치 대체 (공통)</h3>
<ul>
<li>모든(수치형/범주형) 변수를 통틀어 1개의 변수만 가지고 있던 결측치를 먼저 대체
<ul>
<li>범주형 변수 중 occyp_type(직업유형)의 결측치를 조건에 따라 ‘NoJob’ 또는 ’Missing’으로 대체</li>
<li>결측치 대체 후, Unique값 array 값이 아래와 같이 변경되었음</li>
</ul></li>
</ul>
<div id="a5059649" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결측치 대체 전</span></span>
<span id="cb25-2"></span>
<span id="cb25-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Unique data수 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_train.occyp_type.unique())<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb25-4">x_train.occyp_type.unique()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Unique data수 : 19</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>array([None, 'Laborers', 'Managers', 'Sales staff',
       'High skill tech staff', 'Core staff', 'Drivers', 'Medicine staff',
       'Accountants', 'Realty agents', 'Security staff', 'Cleaning staff',
       'Private service staff', 'Cooking staff', 'Secretaries',
       'HR staff', 'IT staff', 'Low-skill Laborers',
       'Waiters/barmen staff'], dtype=object)</code></pre>
</div>
</div>
<div id="c8e914f1" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결측치 대체 후</span></span>
<span id="cb28-2"></span>
<span id="cb28-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb28-4"></span>
<span id="cb28-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fill_occyp_type(row):</span>
<span id="cb28-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pd.isna(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>]):</span>
<span id="cb28-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb28-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NoJob'</span></span>
<span id="cb28-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb28-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Missing'</span></span>
<span id="cb28-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>]</span>
<span id="cb28-12"></span>
<span id="cb28-13">x_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(fill_occyp_type, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb28-14"></span>
<span id="cb28-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 변화 확인</span></span>
<span id="cb28-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Unique data수 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_train.occyp_type.unique())<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-17">x_train.occyp_type.unique()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Unique data수 : 20</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre><code>array(['Missing', 'Laborers', 'Managers', 'Sales staff',
       'High skill tech staff', 'Core staff', 'Drivers', 'Medicine staff',
       'Accountants', 'NoJob', 'Realty agents', 'Security staff',
       'Cleaning staff', 'Private service staff', 'Cooking staff',
       'Secretaries', 'HR staff', 'IT staff', 'Low-skill Laborers',
       'Waiters/barmen staff'], dtype=object)</code></pre>
</div>
</div>
<div id="477691b0" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 범주형, 수치형 변수로 나누어 작업</span></span>
<span id="cb31-2"></span>
<span id="cb31-3">x_categorical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.select_dtypes(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'object'</span>])</span>
<span id="cb31-4">x_numerical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.select_dtypes(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'float64'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int64'</span>])</span></code></pre></div>
</div>
</section>
<section id="수치형-변수-전처리" class="level3">
<h3 class="anchored" data-anchor-id="수치형-변수-전처리">수치형 변수 전처리</h3>
<ul>
<li>값이 0, 1로 유무만을 나타내는 변수는 처리하지 않음
<ul>
<li>대상 : FLAG_MOBIL, work_phone, phone, email</li>
</ul></li>
<li>값이 음수인 변수(역산하는 변수)는 아래와 같이 처리
<ul>
<li>대상 : DAYS_BIRTH, DAYS_EMPLOYED, begin_month</li>
<li>(공통) 표준화/정규화/로그변환 전, 최소값 조정 진행</li>
<li><strong>로그변환</strong> : <code>DAYS_EMPLOYED</code>
<ul>
<li>무직임을 표현하려면 양수이기만 하면 되므로, 기준의 365243을 1로 대체</li>
<li>IQR기준 이상치가 있는 것으로 판명되긴하나, 값이 많고 처리기준을 정하기 어려워, 양수를 1로 대체하여 숫자 범위를 한번 줄인 후, 로그변환 진행</li>
</ul></li>
<li><strong>표준화</strong> : <code>DAYS_BIRTH</code>, <code>begin_month</code>
<ul>
<li>IQR기준 이상치를 보지 못했으며, 첨도가 -1정도로 <strong>표준화</strong> 진행</li>
<li>향후 사용할 모델에 따라 변경할 수 있음</li>
<li>아래 기준은 GPT로 1차적으로 받아본 기준이며, 실제 진행 전에 좀 더 알아보고 결정
<ul>
<li>표준화 : 선형모델, SVM, KNN</li>
<li>정규화 : 거리기반 모델(클러스터링, KNN)</li>
</ul></li>
</ul></li>
</ul></li>
<li>이외의 변수는 정규화/표준화 중, 아래의 관점을 기준으로 <strong>정규화를 적용</strong>하기로 함
<ul>
<li>대상 : child_num, income_total, family_size</li>
<li>분포상 중심에서 떨어진 이상치를 보유하고있으며, 이상치 대체를 선행하기엔 영향을 알기 어려워 진행하지 않음</li>
<li>표준화는 이상치의 영향을 많이 받을 수 있다는 점에서 정규화로 선택함</li>
</ul></li>
</ul>
<div id="9aa5f62a" class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 수치형변수 현황 확인</span></span>
<span id="cb32-2">x_numerical.describe().transpose()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">count</th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">std</th>
<th data-quarto-table-cell-role="th">min</th>
<th data-quarto-table-cell-role="th">25%</th>
<th data-quarto-table-cell-role="th">50%</th>
<th data-quarto-table-cell-role="th">75%</th>
<th data-quarto-table-cell-role="th">max</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">index</td>
<td>26457.0</td>
<td>13228.000000</td>
<td>7637.622372</td>
<td>0.0</td>
<td>6614.0</td>
<td>13228.0</td>
<td>19842.0</td>
<td>26456.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">child_num</td>
<td>26457.0</td>
<td>0.428658</td>
<td>0.747326</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>19.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">income_total</td>
<td>26457.0</td>
<td>187306.524493</td>
<td>101878.367995</td>
<td>27000.0</td>
<td>121500.0</td>
<td>157500.0</td>
<td>225000.0</td>
<td>1575000.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DAYS_BIRTH</td>
<td>26457.0</td>
<td>-15958.053899</td>
<td>4201.589022</td>
<td>-25152.0</td>
<td>-19431.0</td>
<td>-15547.0</td>
<td>-12446.0</td>
<td>-7705.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">DAYS_EMPLOYED</td>
<td>26457.0</td>
<td>59068.750728</td>
<td>137475.427503</td>
<td>-15713.0</td>
<td>-3153.0</td>
<td>-1539.0</td>
<td>-407.0</td>
<td>365243.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">FLAG_MOBIL</td>
<td>26457.0</td>
<td>1.000000</td>
<td>0.000000</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">work_phone</td>
<td>26457.0</td>
<td>0.224742</td>
<td>0.417420</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">phone</td>
<td>26457.0</td>
<td>0.294251</td>
<td>0.455714</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">email</td>
<td>26457.0</td>
<td>0.091280</td>
<td>0.288013</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">family_size</td>
<td>26457.0</td>
<td>2.196848</td>
<td>0.916717</td>
<td>1.0</td>
<td>2.0</td>
<td>2.0</td>
<td>3.0</td>
<td>20.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">begin_month</td>
<td>26457.0</td>
<td>-26.123294</td>
<td>16.559550</td>
<td>-60.0</td>
<td>-39.0</td>
<td>-24.0</td>
<td>-12.0</td>
<td>0.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<section id="이상치-대체days_employed" class="level4">
<h4 class="anchored" data-anchor-id="이상치-대체days_employed">이상치 대체(DAYS_EMPLOYED)</h4>
<div id="119de0cf" class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이상치 대체 전</span></span>
<span id="cb33-2">x_numerical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>365243</code></pre>
</div>
</div>
<div id="6f3ceabb" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이상치 대체 후</span></span>
<span id="cb35-2"></span>
<span id="cb35-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DAYS_EMPLOYED : 365243를 1로 대체</span></span>
<span id="cb35-4">x_numerical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_numerical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">365243.0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> x)</span>
<span id="cb35-5"></span>
<span id="cb35-6">x_numerical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>1</code></pre>
</div>
</div>
</section>
<section id="최소값-조정음수변수들-days_birth-days_employed-begin_month" class="level4">
<h4 class="anchored" data-anchor-id="최소값-조정음수변수들-days_birth-days_employed-begin_month">최소값 조정(음수변수들 : DAYS_BIRTH, DAYS_EMPLOYED, begin_month)</h4>
<div id="a653540f" class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 최소값 변환 전</span></span>
<span id="cb37-2"> </span>
<span id="cb37-3">x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>]].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>DAYS_BIRTH      -25152.0
DAYS_EMPLOYED   -15713.0
begin_month        -60.0
dtype: float64</code></pre>
</div>
</div>
<div id="fe30fec2" class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 최소값 변환 후</span></span>
<span id="cb39-2"></span>
<span id="cb39-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># min() * -1  을 더하여 변환</span></span>
<span id="cb39-4">x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>]].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb39-5"></span>
<span id="cb39-6">x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>]].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>DAYS_BIRTH       0.0
DAYS_EMPLOYED    0.0
begin_month      0.0
dtype: float64</code></pre>
</div>
</div>
</section>
<section id="로그변환days_employed" class="level4">
<h4 class="anchored" data-anchor-id="로그변환days_employed">로그변환(‘DAYS_EMPLOYED’)</h4>
<div id="c11bbb0a" class="cell">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 로그변환 전</span></span>
<span id="cb41-2"></span>
<span id="cb41-3">x_numerical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>].head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>0    11004.0
1    14173.0
2    11279.0
3    13621.0
4    13608.0
Name: DAYS_EMPLOYED, dtype: float64</code></pre>
</div>
</div>
<div id="0af47af9" class="cell">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 로그변환 후</span></span>
<span id="cb43-2"></span>
<span id="cb43-3">x_numerical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_numerical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : np.log1p(x))</span>
<span id="cb43-4">x_numerical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>].head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>0    9.306105
1    9.559165
2    9.330787
3    9.519441
4    9.518487
Name: DAYS_EMPLOYED, dtype: float64</code></pre>
</div>
</div>
</section>
<section id="표준화-적용days_birth-begin_month" class="level4">
<h4 class="anchored" data-anchor-id="표준화-적용days_birth-begin_month">표준화 적용(‘DAYS_BIRTH’, ‘begin_month’)</h4>
<div id="6232ee76" class="cell">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 표준화 적용 전</span></span>
<span id="cb45-2"></span>
<span id="cb45-3">x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>]].head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">DAYS_BIRTH</th>
<th data-quarto-table-cell-role="th">begin_month</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>11253.0</td>
<td>54.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>13772.0</td>
<td>55.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>6065.0</td>
<td>38.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>10064.0</td>
<td>23.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>10115.0</td>
<td>34.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="a6a7af1a" class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 표준화 적용 후</span></span>
<span id="cb46-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StandardScaler</span>
<span id="cb46-3"></span>
<span id="cb46-4">std_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StandardScaler()</span>
<span id="cb46-5">x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> std_scaler.fit_transform(x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>]])</span>
<span id="cb46-6">x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>]].head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">DAYS_BIRTH</th>
<th data-quarto-table-cell-role="th">begin_month</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0.490075</td>
<td>1.215231</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1.089621</td>
<td>1.275620</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>-0.744719</td>
<td>0.249003</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0.207081</td>
<td>-0.656836</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0.219220</td>
<td>0.007446</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="정규화-적용child_num-income_total-family_size" class="level4">
<h4 class="anchored" data-anchor-id="정규화-적용child_num-income_total-family_size">정규화 적용(child_num, income_total, family_size)</h4>
<div id="40e749cf" class="cell">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 정규화 적용 전</span></span>
<span id="cb47-2"></span>
<span id="cb47-3">x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child_num'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_total'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family_size'</span>]].head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">child_num</th>
<th data-quarto-table-cell-role="th">income_total</th>
<th data-quarto-table-cell-role="th">family_size</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0</td>
<td>202500.0</td>
<td>2.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1</td>
<td>247500.0</td>
<td>3.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0</td>
<td>450000.0</td>
<td>2.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0</td>
<td>202500.0</td>
<td>2.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0</td>
<td>157500.0</td>
<td>2.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="25e83fe1" class="cell">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 정규화 적용 후</span></span>
<span id="cb48-2"></span>
<span id="cb48-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MinMaxScaler</span>
<span id="cb48-4"></span>
<span id="cb48-5">min_max_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MinMaxScaler()</span>
<span id="cb48-6">x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child_num'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_total'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family_size'</span>]]  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> min_max_scaler.fit_transform(x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child_num'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_total'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family_size'</span>]] )</span>
<span id="cb48-7">x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child_num'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_total'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family_size'</span>]].head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">child_num</th>
<th data-quarto-table-cell-role="th">income_total</th>
<th data-quarto-table-cell-role="th">family_size</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0.000000</td>
<td>0.113372</td>
<td>0.052632</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0.052632</td>
<td>0.142442</td>
<td>0.105263</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0.000000</td>
<td>0.273256</td>
<td>0.052632</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0.000000</td>
<td>0.113372</td>
<td>0.052632</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0.000000</td>
<td>0.084302</td>
<td>0.052632</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
</section>
<section id="범주형-변수-전처리" class="level3">
<h3 class="anchored" data-anchor-id="범주형-변수-전처리">범주형 변수 전처리</h3>
<ul>
<li>Ordinal변수에 대해서는 Label인코딩 적용
<ul>
<li>대상 : edu_type</li>
</ul></li>
<li>Unique값이 2~6개인 변수에 대해서는 One-hot Encoding 적용
<ul>
<li>대상 : ‘gender’, ‘car’, ‘reality’, ‘income_type’, ‘family_type’, ‘house_type’</li>
<li>22개 컬럼(변수) 추가될 것으로 예상</li>
</ul></li>
<li>Unique값이 20개인 변수에 대해서는, 아래의 방법을 적용
<ul>
<li>대상 : ‘occyp_type’</li>
<li>변수의 과도한 증가와, 상하관계 착각을 막기위해 다른 방법을 고민</li>
<li>Target인코딩이라는 것을 적용해보기로 함 (with LeaveOneOutEncoder)
<ul>
<li>향후 적용여부에 따라 모델성능이 저하되거나 유의미하지 않다면 변수 제외를 고려(계산복잡성 등을 고려함)</li>
</ul></li>
</ul></li>
</ul>
<div id="804293d7" class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">x_categorical.describe()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">gender</th>
<th data-quarto-table-cell-role="th">car</th>
<th data-quarto-table-cell-role="th">reality</th>
<th data-quarto-table-cell-role="th">income_type</th>
<th data-quarto-table-cell-role="th">edu_type</th>
<th data-quarto-table-cell-role="th">family_type</th>
<th data-quarto-table-cell-role="th">house_type</th>
<th data-quarto-table-cell-role="th">occyp_type</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">count</td>
<td>26457</td>
<td>26457</td>
<td>26457</td>
<td>26457</td>
<td>26457</td>
<td>26457</td>
<td>26457</td>
<td>26457</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">unique</td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>5</td>
<td>5</td>
<td>5</td>
<td>6</td>
<td>20</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">top</td>
<td>F</td>
<td>N</td>
<td>Y</td>
<td>Working</td>
<td>Secondary / secondary special</td>
<td>Married</td>
<td>House / apartment</td>
<td>Laborers</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">freq</td>
<td>17697</td>
<td>16410</td>
<td>17830</td>
<td>13645</td>
<td>17995</td>
<td>18196</td>
<td>23653</td>
<td>4512</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<section id="label인코딩-ordinal변수" class="level4">
<h4 class="anchored" data-anchor-id="label인코딩-ordinal변수">Label인코딩 : Ordinal변수</h4>
<div id="df1a3af9" class="cell">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Label인코딩 전</span></span>
<span id="cb50-2"></span>
<span id="cb50-3">x_categorical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edu_type'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array(['Higher education', 'Secondary / secondary special',
       'Incomplete higher', 'Lower secondary', 'Academic degree'],
      dtype=object)</code></pre>
</div>
</div>
<div id="bef8c0b9" class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Label인코딩 후 (Order값은 낮은 것부터 입력)</span></span>
<span id="cb52-2"></span>
<span id="cb52-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OrdinalEncoder</span>
<span id="cb52-4"></span>
<span id="cb52-5">order <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb52-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lower secondary'</span>,</span>
<span id="cb52-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Secondary / secondary special'</span>,</span>
<span id="cb52-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Incomplete higher'</span>,</span>
<span id="cb52-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Higher education'</span>,</span>
<span id="cb52-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Academic degree'</span></span>
<span id="cb52-11">]</span>
<span id="cb52-12"></span>
<span id="cb52-13">o_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OrdinalEncoder(categories<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[order])</span>
<span id="cb52-14">oe_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> o_encoder.fit_transform(x_categorical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edu_type'</span>]])</span>
<span id="cb52-15">x_categorical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edu_type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> oe_df.flatten()</span></code></pre></div>
</div>
<div id="fc91f1d2" class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1">x_categorical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edu_type'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([3., 1., 2., 0., 4.])</code></pre>
</div>
</div>
</section>
<section id="one-hot인코딩-unique값이-26개인-변수" class="level4">
<h4 class="anchored" data-anchor-id="one-hot인코딩-unique값이-26개인-변수">One-hot인코딩 : Unique값이 2~6개인 변수</h4>
<div id="aad51006" class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># One-hot인코딩 전</span></span>
<span id="cb55-2"></span>
<span id="cb55-3">x_categorical.columns</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Index(['gender', 'car', 'reality', 'income_type', 'edu_type', 'family_type',
       'house_type', 'occyp_type'],
      dtype='object')</code></pre>
</div>
</div>
<div id="a6e05cc0" class="cell">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># One-hot 인코딩 데이터프레임 생성</span></span>
<span id="cb57-2"></span>
<span id="cb57-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OneHotEncoder</span>
<span id="cb57-4"></span>
<span id="cb57-5">one_hot_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gender'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'car'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reality'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_type'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family_type'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'house_type'</span>]</span>
<span id="cb57-6"></span>
<span id="cb57-7">oh_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OneHotEncoder(sparse_output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb57-8">onehot_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> oh_encoder.fit_transform(x_categorical[one_hot_columns])</span>
<span id="cb57-9">encoded_col_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> oh_encoder.get_feature_names_out(input_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>one_hot_columns)</span>
<span id="cb57-10"></span>
<span id="cb57-11">df_onehot_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(onehot_encoded, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>encoded_col_names, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_categorical.index)</span>
<span id="cb57-12">df_onehot_encoded.columns</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Index(['gender_F', 'gender_M', 'car_N', 'car_Y', 'reality_N', 'reality_Y',
       'income_type_Commercial associate', 'income_type_Pensioner',
       'income_type_State servant', 'income_type_Student',
       'income_type_Working', 'family_type_Civil marriage',
       'family_type_Married', 'family_type_Separated',
       'family_type_Single / not married', 'family_type_Widow',
       'house_type_Co-op apartment', 'house_type_House / apartment',
       'house_type_Municipal apartment', 'house_type_Office apartment',
       'house_type_Rented apartment', 'house_type_With parents'],
      dtype='object')</code></pre>
</div>
</div>
<div id="21979b67" class="cell">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ont-hot인코딩 대상 컬럼 미리 Drop (별도로 생성한 인코딩된 데이터프레임을 다시 합칠 예정)</span></span>
<span id="cb59-2"></span>
<span id="cb59-3">x_categorical.drop(one_hot_columns, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb59-4">x_categorical.columns</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Index(['edu_type', 'occyp_type'], dtype='object')</code></pre>
</div>
</div>
<div id="cbfa26af" class="cell">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># One-hot인코딩 후</span></span>
<span id="cb61-2"></span>
<span id="cb61-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ont-hot인코딩된 데이터프레임 Concat</span></span>
<span id="cb61-4">x_categorical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([x_categorical, df_onehot_encoded], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb61-5"></span>
<span id="cb61-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Ont-hot인코딩된 최종컬럼 확인</span></span>
<span id="cb61-7">x_categorical.columns</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Index(['edu_type', 'occyp_type', 'gender_F', 'gender_M', 'car_N', 'car_Y',
       'reality_N', 'reality_Y', 'income_type_Commercial associate',
       'income_type_Pensioner', 'income_type_State servant',
       'income_type_Student', 'income_type_Working',
       'family_type_Civil marriage', 'family_type_Married',
       'family_type_Separated', 'family_type_Single / not married',
       'family_type_Widow', 'house_type_Co-op apartment',
       'house_type_House / apartment', 'house_type_Municipal apartment',
       'house_type_Office apartment', 'house_type_Rented apartment',
       'house_type_With parents'],
      dtype='object')</code></pre>
</div>
</div>
</section>
<section id="target인코딩-ordinal이-아니고-unique값이-많은-변수" class="level4">
<h4 class="anchored" data-anchor-id="target인코딩-ordinal이-아니고-unique값이-많은-변수">Target인코딩 : Ordinal이 아니고 Unique값이 많은 변수</h4>
<div id="43d20d07" class="cell">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Target인코딩 전</span></span>
<span id="cb63-2">x_categorical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>].<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;bound method Series.__len__ of 0               Missing
1              Laborers
2              Managers
3           Sales staff
4              Managers
              ...      
26452        Core staff
26453           Missing
26454        Core staff
26455          Laborers
26456    Security staff
Name: occyp_type, Length: 26457, dtype: object&gt;</code></pre>
</div>
</div>
<div id="7fa62d48" class="cell">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Target인코딩 후</span></span>
<span id="cb65-2"></span>
<span id="cb65-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> category_encoders <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ce</span>
<span id="cb65-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> joblib</span>
<span id="cb65-5"></span>
<span id="cb65-6">x_column <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span></span>
<span id="cb65-7"></span>
<span id="cb65-8">leave_one_out_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ce.LeaveOneOutEncoder(cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_column, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, return_df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb65-9">df_target_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> leave_one_out_encoder.fit_transform(x_categorical[x_column], y_train)</span>
<span id="cb65-10"></span>
<span id="cb65-11">joblib.dump(leave_one_out_encoder, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'encoder_leave_one_out.pkl'</span>)</span>
<span id="cb65-12"></span>
<span id="cb65-13">df_target_encoded[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>].<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;bound method Series.__len__ of 0        1.570514
1        1.621321
2        1.552459
3        1.461605
4        1.727354
           ...   
26452    1.405981
26453    1.556405
26454    1.389829
26455    1.376017
26456    1.597510
Name: occyp_type, Length: 26457, dtype: float64&gt;</code></pre>
</div>
</div>
<div id="3f199672" class="cell">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1">x_categorical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_target_encoded[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>]</span></code></pre></div>
</div>
</section>
</section>
</section>
<section id="전처리된-데이터-저장" class="level2">
<h2 class="anchored" data-anchor-id="전처리된-데이터-저장">전처리된 데이터 저장</h2>
<div id="20d860a3" class="cell">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 범주형/수치형 변수로 나누어 작업한 파일 합치기</span></span>
<span id="cb68-2">x_train_preprocessed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([x_categorical, x_numerical], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb68-3">x_train_preprocessed</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">edu_type</th>
<th data-quarto-table-cell-role="th">occyp_type</th>
<th data-quarto-table-cell-role="th">gender_F</th>
<th data-quarto-table-cell-role="th">gender_M</th>
<th data-quarto-table-cell-role="th">car_N</th>
<th data-quarto-table-cell-role="th">car_Y</th>
<th data-quarto-table-cell-role="th">reality_N</th>
<th data-quarto-table-cell-role="th">reality_Y</th>
<th data-quarto-table-cell-role="th">income_type_Commercial associate</th>
<th data-quarto-table-cell-role="th">income_type_Pensioner</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">child_num</th>
<th data-quarto-table-cell-role="th">income_total</th>
<th data-quarto-table-cell-role="th">DAYS_BIRTH</th>
<th data-quarto-table-cell-role="th">DAYS_EMPLOYED</th>
<th data-quarto-table-cell-role="th">FLAG_MOBIL</th>
<th data-quarto-table-cell-role="th">work_phone</th>
<th data-quarto-table-cell-role="th">phone</th>
<th data-quarto-table-cell-role="th">email</th>
<th data-quarto-table-cell-role="th">family_size</th>
<th data-quarto-table-cell-role="th">begin_month</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>3.0</td>
<td>1.570514</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>...</td>
<td>0.000000</td>
<td>0.113372</td>
<td>0.490075</td>
<td>9.306105</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.052632</td>
<td>1.215231</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1.0</td>
<td>1.621321</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.0</td>
<td>...</td>
<td>0.052632</td>
<td>0.142442</td>
<td>1.089621</td>
<td>9.559165</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0.105263</td>
<td>1.275620</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>3.0</td>
<td>1.552459</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>0.000000</td>
<td>0.273256</td>
<td>-0.744719</td>
<td>9.330787</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0.052632</td>
<td>0.249003</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>1.0</td>
<td>1.461605</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.0</td>
<td>...</td>
<td>0.000000</td>
<td>0.113372</td>
<td>0.207081</td>
<td>9.519441</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0.052632</td>
<td>-0.656836</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>3.0</td>
<td>1.727354</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>0.000000</td>
<td>0.084302</td>
<td>0.219220</td>
<td>9.518487</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.052632</td>
<td>0.007446</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">26452</td>
<td>1.0</td>
<td>1.405981</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>0.105263</td>
<td>0.127907</td>
<td>0.923252</td>
<td>9.527338</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.157895</td>
<td>1.456788</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">26453</td>
<td>3.0</td>
<td>1.556405</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>0.052632</td>
<td>0.098837</td>
<td>0.158765</td>
<td>9.490922</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.052632</td>
<td>-1.260729</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">26454</td>
<td>1.0</td>
<td>1.389829</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>0.000000</td>
<td>0.171512</td>
<td>1.398558</td>
<td>9.525078</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.052632</td>
<td>0.067835</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">26455</td>
<td>2.0</td>
<td>1.376017</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>0.000000</td>
<td>0.093023</td>
<td>1.383563</td>
<td>9.655475</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.000000</td>
<td>-1.985400</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">26456</td>
<td>1.0</td>
<td>1.597510</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>0.000000</td>
<td>0.034884</td>
<td>-0.859440</td>
<td>9.595671</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.052632</td>
<td>1.034063</td>
</tr>
</tbody>
</table>

<p>26457 rows × 35 columns</p>
</div>
</div>
</div>
<div id="94d7a981" class="cell">
<div class="sourceCode cell-code" id="cb69" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb69-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CSV저장</span></span>
<span id="cb69-2">x_train_preprocessed.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_preprocessed.csv'</span>)</span></code></pre></div>
</div>
<div id="b5d41d7f" class="cell">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DB저장</span></span>
<span id="cb70-2">db_controller.df_to_table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_pre'</span>, x_train_preprocessed)</span></code></pre></div>
</div>
<div id="2e2959ad" class="cell">
<div class="sourceCode cell-code" id="cb71" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb71-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DB저장된 내용 확인</span></span>
<span id="cb71-2">db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM train_pre"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">edu_type</th>
<th data-quarto-table-cell-role="th">occyp_type</th>
<th data-quarto-table-cell-role="th">gender_F</th>
<th data-quarto-table-cell-role="th">gender_M</th>
<th data-quarto-table-cell-role="th">car_N</th>
<th data-quarto-table-cell-role="th">car_Y</th>
<th data-quarto-table-cell-role="th">reality_N</th>
<th data-quarto-table-cell-role="th">reality_Y</th>
<th data-quarto-table-cell-role="th">income_type_Commercial associate</th>
<th data-quarto-table-cell-role="th">income_type_Pensioner</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">child_num</th>
<th data-quarto-table-cell-role="th">income_total</th>
<th data-quarto-table-cell-role="th">DAYS_BIRTH</th>
<th data-quarto-table-cell-role="th">DAYS_EMPLOYED</th>
<th data-quarto-table-cell-role="th">FLAG_MOBIL</th>
<th data-quarto-table-cell-role="th">work_phone</th>
<th data-quarto-table-cell-role="th">phone</th>
<th data-quarto-table-cell-role="th">email</th>
<th data-quarto-table-cell-role="th">family_size</th>
<th data-quarto-table-cell-role="th">begin_month</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>3.0</td>
<td>1.570514</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>...</td>
<td>0.000000</td>
<td>0.113372</td>
<td>0.490075</td>
<td>9.306105</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.052632</td>
<td>1.215231</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1.0</td>
<td>1.621321</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.0</td>
<td>...</td>
<td>0.052632</td>
<td>0.142442</td>
<td>1.089621</td>
<td>9.559165</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0.105263</td>
<td>1.275620</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>3.0</td>
<td>1.552459</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>0.000000</td>
<td>0.273256</td>
<td>-0.744719</td>
<td>9.330787</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0.052632</td>
<td>0.249003</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>1.0</td>
<td>1.461605</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.0</td>
<td>...</td>
<td>0.000000</td>
<td>0.113372</td>
<td>0.207081</td>
<td>9.519441</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0.052632</td>
<td>-0.656836</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>3.0</td>
<td>1.727354</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>0.000000</td>
<td>0.084302</td>
<td>0.219220</td>
<td>9.518487</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.052632</td>
<td>0.007446</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">26452</td>
<td>1.0</td>
<td>1.405981</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>0.105263</td>
<td>0.127907</td>
<td>0.923252</td>
<td>9.527338</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.157895</td>
<td>1.456788</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">26453</td>
<td>3.0</td>
<td>1.556405</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>0.052632</td>
<td>0.098837</td>
<td>0.158765</td>
<td>9.490922</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.052632</td>
<td>-1.260729</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">26454</td>
<td>1.0</td>
<td>1.389829</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>0.000000</td>
<td>0.171512</td>
<td>1.398558</td>
<td>9.525078</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.052632</td>
<td>0.067835</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">26455</td>
<td>2.0</td>
<td>1.376017</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>0.000000</td>
<td>0.093023</td>
<td>1.383563</td>
<td>9.655475</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.000000</td>
<td>-1.985400</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">26456</td>
<td>1.0</td>
<td>1.597510</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>0.000000</td>
<td>0.034884</td>
<td>-0.859440</td>
<td>9.595671</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.052632</td>
<td>1.034063</td>
</tr>
</tbody>
</table>

<p>26457 rows × 35 columns</p>
</div>
</div>
</div>
</section>
<section id="향후-test데이터셋에-쓰기위한-전처리-코드-정리" class="level2">
<h2 class="anchored" data-anchor-id="향후-test데이터셋에-쓰기위한-전처리-코드-정리">향후 Test데이터셋에 쓰기위한 전처리 코드 정리</h2>
<div id="b981f1f4" class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb72-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb72-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataFrame</span>
<span id="cb72-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MinMaxScaler, StandardScaler, OrdinalEncoder, OneHotEncoder</span>
<span id="cb72-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> category_encoders <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ce</span>
<span id="cb72-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> joblib</span>
<span id="cb72-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pkb_sqlite3 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DB_sqlite3</span>
<span id="cb72-8"></span>
<span id="cb72-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> preprocess_x_data(train_or_test:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, dataset:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[DataFrame], output_name:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb72-10"></span>
<span id="cb72-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 파라메터 검증 및 데이터셋 복사</span></span>
<span id="cb72-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> train_or_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>:</span>
<span id="cb72-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb72-14">            x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].copy()</span>
<span id="cb72-15">            y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].copy()</span>
<span id="cb72-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb72-17">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train인 경우 x,y 데이터가 필요합니다'</span></span>
<span id="cb72-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> train_or_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>:</span>
<span id="cb72-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb72-20">            x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].copy()</span>
<span id="cb72-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb72-22">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test인 경우 x 데이터만 필요합니다'</span></span>
<span id="cb72-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb72-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train 또는 test만 입력 가능합니다'</span></span>
<span id="cb72-25"></span>
<span id="cb72-26">    </span>
<span id="cb72-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (공통)결측치 대체 : occyp_type</span></span>
<span id="cb72-28">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fill_occyp_type(row):</span>
<span id="cb72-29">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pd.isna(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>]):</span>
<span id="cb72-30">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb72-31">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NoJob'</span></span>
<span id="cb72-32">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb72-33">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Missing'</span></span>
<span id="cb72-34">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>]</span>
<span id="cb72-35"></span>
<span id="cb72-36">    x_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(fill_occyp_type, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb72-37"></span>
<span id="cb72-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 범주형/수치형 변수로 분할하여 작업</span></span>
<span id="cb72-39">    x_numerical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.select_dtypes(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'float64'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int64'</span>])</span>
<span id="cb72-40">    x_categorical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_train.select_dtypes(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'object'</span>])</span>
<span id="cb72-41"></span>
<span id="cb72-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (수치형변수 전처리) 이상치 대체   *** 주의 : 표준화 전에 수행되어야 함</span></span>
<span id="cb72-43">    x_numerical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_numerical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">365243.0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> x)</span>
<span id="cb72-44"></span>
<span id="cb72-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (수치형변수 전처리) 최소값 조정</span></span>
<span id="cb72-46">    x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>]].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb72-47"></span>
<span id="cb72-48">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (수치형변수 전처리) 로그변환</span></span>
<span id="cb72-49">    x_numerical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_numerical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : np.log1p(x))</span>
<span id="cb72-50"></span>
<span id="cb72-51">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (수치형변수 전처리) 표준화</span></span>
<span id="cb72-52">    std_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StandardScaler()</span>
<span id="cb72-53">    x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> std_scaler.fit_transform(x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_BIRTH'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'begin_month'</span>]])</span>
<span id="cb72-54"></span>
<span id="cb72-55">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (수치형변수 전처리) 정규화</span></span>
<span id="cb72-56">    min_max_scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MinMaxScaler()</span>
<span id="cb72-57">    x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child_num'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_total'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family_size'</span>]]  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> min_max_scaler.fit_transform(x_numerical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'child_num'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_total'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family_size'</span>]] )</span>
<span id="cb72-58"></span>
<span id="cb72-59">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (범주형변수 전처리) Label인코딩 (Ordinal변수)</span></span>
<span id="cb72-60">    order <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb72-61">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lower secondary'</span>,</span>
<span id="cb72-62">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Secondary / secondary special'</span>,</span>
<span id="cb72-63">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Incomplete higher'</span>,</span>
<span id="cb72-64">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Higher education'</span>,</span>
<span id="cb72-65">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Academic degree'</span></span>
<span id="cb72-66">    ]</span>
<span id="cb72-67"></span>
<span id="cb72-68">    o_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OrdinalEncoder(categories<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[order])</span>
<span id="cb72-69">    oe_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> o_encoder.fit_transform(x_categorical[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edu_type'</span>]])</span>
<span id="cb72-70">    x_categorical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'edu_type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> oe_df.flatten()</span>
<span id="cb72-71"></span>
<span id="cb72-72">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (범주형변수 전처리) One-hot인코딩 (Unique값 6개 이하)</span></span>
<span id="cb72-73"></span>
<span id="cb72-74">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## One-hot 인코딩 데이터프레임 생성</span></span>
<span id="cb72-75">    one_hot_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gender'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'car'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reality'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'income_type'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'family_type'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'house_type'</span>]</span>
<span id="cb72-76"></span>
<span id="cb72-77">    oh_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OneHotEncoder(sparse_output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb72-78">    onehot_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> oh_encoder.fit_transform(x_categorical[one_hot_columns])</span>
<span id="cb72-79">    encoded_col_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> oh_encoder.get_feature_names_out(input_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>one_hot_columns)</span>
<span id="cb72-80"></span>
<span id="cb72-81">    df_onehot_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(onehot_encoded, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>encoded_col_names, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_categorical.index)</span>
<span id="cb72-82"></span>
<span id="cb72-83">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Ont-hot인코딩 대상 컬럼 미리 Drop (별도로 생성한 인코딩된 데이터프레임을 다시 합칠 예정)</span></span>
<span id="cb72-84">    x_categorical.drop(one_hot_columns, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb72-85"></span>
<span id="cb72-86">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Ont-hot인코딩된 데이터프레임 Concat</span></span>
<span id="cb72-87">    x_categorical <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([x_categorical, df_onehot_encoded], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb72-88"></span>
<span id="cb72-89">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (범주형변수 전처리) Target인코딩 (Ordinal이 아니면서 Unique값이 많은 경우)</span></span>
<span id="cb72-90">    x_column <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span></span>
<span id="cb72-91">                                </span>
<span id="cb72-92">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 파일로 저장해둔 인코더가 있으면 로딩, 아니면 생성</span></span>
<span id="cb72-93">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> os.path.isfile(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'encoder_leave_one_out.pkl'</span>):</span>
<span id="cb72-94">        leave_one_out_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> joblib.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'encoder_leave_one_out.pkl'</span>)</span>
<span id="cb72-95">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb72-96">        leave_one_out_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ce.LeaveOneOutEncoder(cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_column, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, return_df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb72-97"></span>
<span id="cb72-98">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 인코딩된 데이터 생성 및 인코더 업데이트</span></span>
<span id="cb72-99">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> train_or_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>:</span>
<span id="cb72-100">        df_target_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> leave_one_out_encoder.fit_transform(x_categorical[x_column], y_train)</span>
<span id="cb72-101">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> train_or_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>:</span>
<span id="cb72-102">        df_target_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> leave_one_out_encoder.transform(x_categorical[x_column])</span>
<span id="cb72-103">    joblib.dump(leave_one_out_encoder, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'encoder_leave_one_out.pkl'</span>)</span>
<span id="cb72-104"></span>
<span id="cb72-105">    x_categorical[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_target_encoded[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'occyp_type'</span>]</span>
<span id="cb72-106">    </span>
<span id="cb72-107"></span>
<span id="cb72-108">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 나누어 작업한 수치형/범주형 변수 합치고 저장</span></span>
<span id="cb72-109">    x_train_preprocessed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([x_categorical, x_numerical], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb72-110"></span>
<span id="cb72-111">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## CSV저장 </span></span>
<span id="cb72-112">    x_train_preprocessed.to_csv(output_name[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_file_name'</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'train_preprocessed.csv'</span></span>
<span id="cb72-113"></span>
<span id="cb72-114">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## DB저장 (아래 함수는 이미 테이블이 있는 경우 덮어씀)</span></span>
<span id="cb72-115">    db_controller.df_to_table(output_name[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'db_table_name'</span>], x_train_preprocessed) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'train_pre'</span></span>
<span id="cb72-116"></span>
<span id="cb72-117">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'작업이 완료되었습니다'</span></span>
<span id="cb72-118"></span>
<span id="cb72-119"></span>
<span id="cb72-120"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DB로딩 및 데이터 가져오기</span></span>
<span id="cb72-121">db_controller <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DB_sqlite3(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dacon_creditcard_overdue.db'</span>)</span>
<span id="cb72-122">df_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM train'</span>)</span>
<span id="cb72-123">df_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM test'</span>)</span>
<span id="cb72-124">df_sample_submission <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM sample_submission'</span>)</span></code></pre></div>
</div>
<div id="b1b63821" class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train 데이터 전처리</span></span>
<span id="cb73-2">y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_train[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>].copy()</span>
<span id="cb73-3">x_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_train.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'credit'</span>,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).copy()</span>
<span id="cb73-4"></span>
<span id="cb73-5">preprocess_x_data(train_or_test<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train'</span>, </span>
<span id="cb73-6">                  dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[x_train, y_train], </span>
<span id="cb73-7">                  output_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_file_name'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_preprocessed.csv'</span>, </span>
<span id="cb73-8">                               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'db_table_name'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_pre'</span>}</span>
<span id="cb73-9">                  )</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'작업이 완료되었습니다'</code></pre>
</div>
</div>
<div id="49912dc1" class="cell">
<div class="sourceCode cell-code" id="cb75" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb75-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전처리된 데이터 확인</span></span>
<span id="cb75-2">db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM train_pre"</span>).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">edu_type</th>
<th data-quarto-table-cell-role="th">occyp_type</th>
<th data-quarto-table-cell-role="th">gender_F</th>
<th data-quarto-table-cell-role="th">gender_M</th>
<th data-quarto-table-cell-role="th">car_N</th>
<th data-quarto-table-cell-role="th">car_Y</th>
<th data-quarto-table-cell-role="th">reality_N</th>
<th data-quarto-table-cell-role="th">reality_Y</th>
<th data-quarto-table-cell-role="th">income_type_Commercial associate</th>
<th data-quarto-table-cell-role="th">income_type_Pensioner</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">child_num</th>
<th data-quarto-table-cell-role="th">income_total</th>
<th data-quarto-table-cell-role="th">DAYS_BIRTH</th>
<th data-quarto-table-cell-role="th">DAYS_EMPLOYED</th>
<th data-quarto-table-cell-role="th">FLAG_MOBIL</th>
<th data-quarto-table-cell-role="th">work_phone</th>
<th data-quarto-table-cell-role="th">phone</th>
<th data-quarto-table-cell-role="th">email</th>
<th data-quarto-table-cell-role="th">family_size</th>
<th data-quarto-table-cell-role="th">begin_month</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>3.0</td>
<td>1.477037</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>...</td>
<td>0.000000</td>
<td>0.113372</td>
<td>0.556662</td>
<td>11004.0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.052632</td>
<td>1.215231</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1.0</td>
<td>1.417380</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.0</td>
<td>...</td>
<td>0.052632</td>
<td>0.142442</td>
<td>0.870181</td>
<td>14173.0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0.105263</td>
<td>1.275620</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>3.0</td>
<td>1.452349</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>...</td>
<td>0.000000</td>
<td>0.273256</td>
<td>-0.402621</td>
<td>11279.0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0.052632</td>
<td>0.249003</td>
</tr>
</tbody>
</table>

<p>3 rows × 35 columns</p>
</div>
</div>
</div>
<div id="2930c4e1" class="cell">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># test 데이터 전처리</span></span>
<span id="cb76-2">df_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM test'</span>)</span>
<span id="cb76-3"></span>
<span id="cb76-4">preprocess_x_data(train_or_test<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test'</span>, </span>
<span id="cb76-5">                  dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[df_test], </span>
<span id="cb76-6">                  output_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'csv_file_name'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_preprocessed.csv'</span>, </span>
<span id="cb76-7">                               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'db_table_name'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_pre'</span>}</span>
<span id="cb76-8">                  )</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'작업이 완료되었습니다'</code></pre>
</div>
</div>
<div id="2a47510d" class="cell">
<div class="sourceCode cell-code" id="cb78" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb78-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전처리된 데이터 확인</span></span>
<span id="cb78-2">db_controller.search_db_show_df(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM test_pre"</span>).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">edu_type</th>
<th data-quarto-table-cell-role="th">occyp_type</th>
<th data-quarto-table-cell-role="th">gender_F</th>
<th data-quarto-table-cell-role="th">gender_M</th>
<th data-quarto-table-cell-role="th">car_N</th>
<th data-quarto-table-cell-role="th">car_Y</th>
<th data-quarto-table-cell-role="th">reality_N</th>
<th data-quarto-table-cell-role="th">reality_Y</th>
<th data-quarto-table-cell-role="th">income_type_Commercial associate</th>
<th data-quarto-table-cell-role="th">income_type_Pensioner</th>
<th data-quarto-table-cell-role="th">income_type_State servant</th>
<th data-quarto-table-cell-role="th">income_type_Student</th>
<th data-quarto-table-cell-role="th">income_type_Working</th>
<th data-quarto-table-cell-role="th">family_type_Civil marriage</th>
<th data-quarto-table-cell-role="th">family_type_Married</th>
<th data-quarto-table-cell-role="th">family_type_Separated</th>
<th data-quarto-table-cell-role="th">family_type_Single / not married</th>
<th data-quarto-table-cell-role="th">family_type_Widow</th>
<th data-quarto-table-cell-role="th">house_type_Co-op apartment</th>
<th data-quarto-table-cell-role="th">house_type_House / apartment</th>
<th data-quarto-table-cell-role="th">house_type_Municipal apartment</th>
<th data-quarto-table-cell-role="th">house_type_Office apartment</th>
<th data-quarto-table-cell-role="th">house_type_Rented apartment</th>
<th data-quarto-table-cell-role="th">house_type_With parents</th>
<th data-quarto-table-cell-role="th">index</th>
<th data-quarto-table-cell-role="th">child_num</th>
<th data-quarto-table-cell-role="th">income_total</th>
<th data-quarto-table-cell-role="th">DAYS_BIRTH</th>
<th data-quarto-table-cell-role="th">DAYS_EMPLOYED</th>
<th data-quarto-table-cell-role="th">FLAG_MOBIL</th>
<th data-quarto-table-cell-role="th">work_phone</th>
<th data-quarto-table-cell-role="th">phone</th>
<th data-quarto-table-cell-role="th">email</th>
<th data-quarto-table-cell-role="th">family_size</th>
<th data-quarto-table-cell-role="th">begin_month</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1.0</td>
<td>1.514196</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>26457</td>
<td>-0.596243</td>
<td>-0.714468</td>
<td>0.179018</td>
<td>15662.0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>-0.225667</td>
<td>0.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>3.0</td>
<td>1.502646</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>26458</td>
<td>-0.596243</td>
<td>-0.492869</td>
<td>0.350337</td>
<td>6990.0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>-0.225667</td>
<td>0.400000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>1.0</td>
<td>1.500443</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>26459</td>
<td>-0.596243</td>
<td>-1.139229</td>
<td>0.524543</td>
<td>15444.0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>-0.225667</td>
<td>0.333333</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="c41678fa" class="cell">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DB연결해제</span></span>
<span id="cb79-2">db_controller.close()</span></code></pre></div>
</div>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>EDA</category>
  <category>Preprocessing</category>
  <category>202412Study_DataAnalysis</category>
  <guid>https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250107/</guid>
  <pubDate>Tue, 07 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[DA스터디/3주차] EDA 및 전처리 이론(+금융데이터 특징)</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250105/</link>
  <description><![CDATA[ 






<p>금융권 데이터를 활용한 분석 스터디 - 3주차</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>아래의 목적/이유로 참가한 스터디에 대한 기록
<ul>
<li>SQLD취득 후 장기 미사용 &amp; GPT를 통한 SQL사용 등으로 많이 잊은 SQL을 복기</li>
<li>기존에 사용해 본 Optuna가 아닌 Autogluon이 커리큘럼에 있어 익혀보고자 함</li>
<li>기존에 관심있던 XAI(설명가능한 AI)를 익히고자 함</li>
</ul></li>
<li>3주차 요약
<ul>
<li>금융데이터의 특징 및 케이스</li>
<li>EDA : 통계적 수치 확인과 시각화</li>
<li>전처리 : 결측치/이상치 처리, 표준화, 정규화, 인코딩 등</li>
</ul></li>
<li>참고사항 : 전부 보여야하는 데이터 외에는 head로 일부데이터만 표시</li>
</ul>
</section>
<section id="주차-수업정리" class="level1">
<h1>3주차 수업정리</h1>
<section id="금융데이터" class="level2">
<h2 class="anchored" data-anchor-id="금융데이터">금융데이터</h2>
<section id="금융데이터의-특징" class="level3">
<h3 class="anchored" data-anchor-id="금융데이터의-특징">금융데이터의 특징</h3>
<ul>
<li>정형성 : tabular데이터 형태로 적재, 최근 비정형 데이터 증가 추세
<ul>
<li>별도의 스키마에 저장되어 있음</li>
</ul></li>
<li>대규모 : 일 단위 적재데이터의 단위가 페타 바이트에 육박
<ul>
<li>Trino나 Presto등 대규모 처리 특화언어를 사용하게 됨</li>
</ul></li>
<li>민감성 : 금융 당국의 규제, 보안에 대한 높은 수준요구
<ul>
<li>데이터별 접근권한, 모든 조회기록 로그 등</li>
</ul></li>
<li>폐쇄성 : 폐쇠망에서 처리되는 경우가 많음. AWS 등을 사용해도 Grey zone형태로 구축
<ul>
<li>외부와 내부 폐쇄망 사이의 grey zone을 정보보호 및 IT인력이 관리</li>
</ul></li>
<li>불균형성 : Target(Y)의 정보가 불균형</li>
</ul>
</section>
<section id="금융데이터-분야의-과제" class="level3">
<h3 class="anchored" data-anchor-id="금융데이터-분야의-과제">금융데이터 분야의 과제</h3>
<ul>
<li>최근 채용공고 기반의 금융데이터 관련 과제
<ul>
<li>고객 행동 분석 및 예측
<ul>
<li>카드추천알고리즘, 이탈예측, 고객 클러스터링 등</li>
</ul></li>
<li>리스크 관리 및 신용평가
<ul>
<li>대출 상환 가능성 예측, 이상거래 탐지 등</li>
</ul></li>
<li>데이터 기반 마케팅 최적화</li>
<li>비정형 데이터 분석
<ul>
<li>콜센터상담 피드백분석, SNS데이터 감성분석 등</li>
</ul></li>
</ul></li>
<li>실무케이스 예시(회사별로 다름)
<ul>
<li>협업Case : PM급 메인리더와 팀원의 협업
<ul>
<li>리더가 데이터마트 설계, 팀원이 데이터마트 구축/완성</li>
<li>모델링 작업, 앙상블 등의 베스트모델이나 기법을 각자 다른 방향으로 진행해봄</li>
</ul></li>
<li>개인작업Case
<ul>
<li>퀀트같은 경우는 개인별로 시장 데이터 등을 분석하여 각자 전략구축</li>
</ul></li>
</ul></li>
</ul>
</section>
</section>
<section id="eda-이론" class="level2">
<h2 class="anchored" data-anchor-id="eda-이론">EDA 이론</h2>
<ul>
<li>EDA : 데이터가 어떻게 생겼는지, 통계적 수치의 확인 및 시각화 진행
<ul>
<li>평균/중앙값</li>
<li>최대/최소값</li>
<li>사분위수</li>
<li>왜도/첨도</li>
<li>이상/결측치</li>
<li>불균형도</li>
<li>상관계수</li>
<li>최빈값</li>
<li>카테고리 개수, 카테고리별 개수</li>
</ul></li>
<li>데이터에 따른 시각화 기법
<ul>
<li>Bar plot : 범주형 변수</li>
<li>Histogram : 연속형 변수 분포, 불균형도/왜도 분포, Y값의 분포</li>
<li>Line plot : 시계열 데이터의 분포, 시계열성 확인</li>
<li>Box plot : 이상치 확인, 일반적인 변수의 분포</li>
<li>Heatmap : Y와의 상관계수, 다중공선성 확인
<ul>
<li>다중공선성은, 회귀분석에서의 기본가정인 독립 변수는 서로 독립적이어야 한다는 가정을 지킬 수 있는지 등을 확인하여 분석결과의 신뢰도를 높이고자 확인</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="전처리-이론" class="level2">
<h2 class="anchored" data-anchor-id="전처리-이론">전처리 이론</h2>
<ul>
<li>전처리 종류
<ul>
<li>결측/이상값 처리</li>
<li>표준화(Standardization)</li>
<li>정규화(Normalization)</li>
<li>변환(Transformation)</li>
<li>인코딩</li>
<li>구간화(Binning)</li>
</ul></li>
</ul>
<section id="결측이상값-처리" class="level3">
<h3 class="anchored" data-anchor-id="결측이상값-처리">결측/이상값 처리</h3>
<ul>
<li>결측이 많지않다면 삭제할 수도 있으나, 일반적으로는 대체를 활용
<ul>
<li>Mean/Median Imputation: 수치형 변수 대체시 주로 사용
<ul>
<li>평균/중앙값 중 어느 것을 쓸지는 데이터의 분포를 보고 결정</li>
</ul></li>
<li>Mode Imputation: 범주형 변수 대체시 주로 사용</li>
<li>Zero Imputation : 0으로 대체(또는 -999처럼 특정값 사용)</li>
<li>Interpolation(보간법) : 시계열 데이터에서 전후 데이터를 활용
<ul>
<li>KNN이나 ML활용도 가능하지만 잘 사용되지 않았으나, AutoML의 발전으로 활용성이 높아짐
<ul>
<li>y를 예측하기 위해, x를 또 예측한다는 점에서 비효율적이었으나, AutoML 등의 발전으로 효율성이 높아짐</li>
</ul></li>
</ul></li>
</ul></li>
<li>이상값은 수가 적거나 예측에 해가 되는 경우가 많아 종종 삭제함
<ul>
<li>유효성 검증이 되지 않아 생년월일 1800년대, 200살로 나오는 경우 등</li>
<li><strong>이상값이 유의미한 인사이트를 제공하는 경우</strong>도 있음
<ul>
<li>이상값을 결측값으로 대체한 뒤, is_outlier같은 추가변수 만들어줌</li>
<li>변환을 통해 값의 분산을 줄이기도 함</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="표준화정규화" class="level3">
<h3 class="anchored" data-anchor-id="표준화정규화">표준화/정규화</h3>
<ul>
<li>표준화 vs 정규화
<ul>
<li>표준화 : 데이터를 평균 0, 표준편차 1의 정규분포로 수정</li>
<li>정규화 : 0~1 또는 -1~1의 분포로 수정</li>
</ul></li>
<li>특성의 크기(Scale)의 차이로 인한 편향을 막기위해 사용
<ul>
<li>AI학습에서 Loss를 줄일 때, 변수 간의 Scale이 다르면 loss 및 학습에 영향이 생겨 성능저하가 일어날 수 있음</li>
</ul></li>
<li><strong>트리 기반의 알고리즘을 제외한 거의 대부분은 표준화/정규화 필요</strong></li>
<li>전통적으로 ML분야에서는 표준화를 선호하는 경향이 강함
<ul>
<li>When in doubt, just standardize the data, it shouldn’t hurt</li>
</ul></li>
</ul>
</section>
<section id="변환" class="level3">
<h3 class="anchored" data-anchor-id="변환">변환</h3>
<ul>
<li>로그 변환, 로트 변환, Box-cox변환 등이 있음
<ul>
<li>Box-cox변환은, λ로 로그/제곱근 변환 등을 하나의 수식으로 표현가능한 ’일반화’된 변환 방법</li>
</ul></li>
<li>예를 들어, 왜도가 큰 경우 변환을 통해 낮추면 성능향상에 도움
<ul>
<li><strong>양의 왜도</strong>(오른쪽으로 치우짐)의 경우 변환을 통해 그 정도를 낮춤</li>
<li><strong>음의 왜도</strong>인 경우, 적당히 큰 값에서 데이터를 빼준 뒤 다시 변환
<ul>
<li>단순 로그변환시 더 커지므로, 적당히 큰 값(Min/Max)을 빼줌</li>
</ul></li>
<li><strong>데이터범위가 너무 넓은 경우, 루트 변환</strong>으로 분산을 줄여줌</li>
<li>캐글의 타이타닉 문제에서, y의 로그변환만 해도 정확도가 3%정도 오르는 케이스도 있음</li>
<li>ML은 통계학의 변환이라는 관점에서, 통계학은 정규성을 가정하는 경우가 많아 적절한 변환은 성능에 도움되는 경우가 많음</li>
</ul></li>
</ul>
</section>
<section id="인코딩" class="level3">
<h3 class="anchored" data-anchor-id="인코딩">인코딩</h3>
<ul>
<li>수치형이 아닌 변수를 수치로 변환
<ul>
<li>One-hot Encoding : 범주형 변수의 Unique값을 변수(컬럼)로 변환
<ul>
<li>Sparcity증가의 문제(데이터 Loss는 없지만 학습이 오래걸림)</li>
</ul></li>
<li>Label Encoding : 범주형 변수의 값을 숫자로 변환
<ul>
<li>상하관계가 없는 데이터를 있다고 착각할 수 있음(상하관계없는 데이터에 1~3 부여 후 3이 높다고 판단할 수 있음)</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="구간화" class="level3">
<h3 class="anchored" data-anchor-id="구간화">구간화</h3>
<ul>
<li>수치형 변수를 구간으로 나누고, 범주화</li>
<li>장점 : 일반적으로 모델의 복잡도와, 이상값의 영향을 줄이는 효과</li>
<li>단점 : 구간 경계의 값은 해석의 손해가 있음
<ul>
<li>구간의 크기/개수 설정은 초모수(하이퍼파라미터)이므로, 성능에 영향이 크므로 자주 사용되지는 않음(도메인 지식 필요)</li>
</ul></li>
</ul>
</section>
</section>
<section id="기초통계-등-확인하기" class="level2">
<h2 class="anchored" data-anchor-id="기초통계-등-확인하기">기초통계 등 확인하기</h2>
<section id="데이터패키지-로딩-및-자료형-등-확인" class="level3">
<h3 class="anchored" data-anchor-id="데이터패키지-로딩-및-자료형-등-확인">데이터/패키지 로딩 및 자료형 등 확인</h3>
<div id="22aa3fef" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span></code></pre></div>
</div>
<div id="3b743a2d" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pandas설정</span></span>
<span id="cb2-2">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터 로딩</span></span>
<span id="cb2-5">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'application_train.csv'</span>)</span>
<span id="cb2-6">data.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">SK_ID_CURR</th>
<th data-quarto-table-cell-role="th">TARGET</th>
<th data-quarto-table-cell-role="th">NAME_CONTRACT_TYPE</th>
<th data-quarto-table-cell-role="th">CODE_GENDER</th>
<th data-quarto-table-cell-role="th">FLAG_OWN_CAR</th>
<th data-quarto-table-cell-role="th">FLAG_OWN_REALTY</th>
<th data-quarto-table-cell-role="th">CNT_CHILDREN</th>
<th data-quarto-table-cell-role="th">AMT_INCOME_TOTAL</th>
<th data-quarto-table-cell-role="th">AMT_CREDIT</th>
<th data-quarto-table-cell-role="th">AMT_ANNUITY</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_18</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_19</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_20</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_21</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_HOUR</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_DAY</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_WEEK</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_MON</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_QRT</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_YEAR</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>100002</td>
<td>1</td>
<td>Cash loans</td>
<td>M</td>
<td>N</td>
<td>Y</td>
<td>0</td>
<td>202500.0</td>
<td>406597.5</td>
<td>24700.5</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>100003</td>
<td>0</td>
<td>Cash loans</td>
<td>F</td>
<td>N</td>
<td>N</td>
<td>0</td>
<td>270000.0</td>
<td>1293502.5</td>
<td>35698.5</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>100004</td>
<td>0</td>
<td>Revolving loans</td>
<td>M</td>
<td>Y</td>
<td>Y</td>
<td>0</td>
<td>67500.0</td>
<td>135000.0</td>
<td>6750.0</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>100006</td>
<td>0</td>
<td>Cash loans</td>
<td>F</td>
<td>N</td>
<td>Y</td>
<td>0</td>
<td>135000.0</td>
<td>312682.5</td>
<td>29686.5</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>100007</td>
<td>0</td>
<td>Cash loans</td>
<td>M</td>
<td>N</td>
<td>Y</td>
<td>0</td>
<td>121500.0</td>
<td>513000.0</td>
<td>21865.5</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
</tr>
</tbody>
</table>

<p>5 rows × 122 columns</p>
</div>
</div>
</div>
<div id="4b5fdb26" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">data.info()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 307511 entries, 0 to 307510
Columns: 122 entries, SK_ID_CURR to AMT_REQ_CREDIT_BUREAU_YEAR
dtypes: float64(65), int64(41), object(16)
memory usage: 286.2+ MB</code></pre>
</div>
</div>
</section>
<section id="통계적-수치-확인" class="level3">
<h3 class="anchored" data-anchor-id="통계적-수치-확인">통계적 수치 확인</h3>
<section id="기초-통계량-확인" class="level4">
<h4 class="anchored" data-anchor-id="기초-통계량-확인">기초 통계량 확인</h4>
<ul>
<li>pandas의 describe()
<ul>
<li>count : 결측치가 아닌 값의 개수</li>
<li>unique : 범주형 변수에 대해, unique한 값의 개수</li>
<li>top : 범주형 변수에 대해, 가장 많은 값</li>
<li>freq : 범주형 변수에 대해, 가장 많은 값의 개수</li>
<li>mean : 평균</li>
<li>std : 표준편차</li>
<li>min / 25% / 50% (median) / 75% / max : 최소값 / Q1 / 중앙값 / Q3 / 최대값</li>
</ul></li>
<li>아래의 코드(describe)를 통해 다음과 같은 점을 생각해 볼 수 있음
<ul>
<li>Unique값이 있다는 것 → 범주형 변수라는 것</li>
<li><strong>대부분 컬럼이 정규화</strong>된 것으로 추정
<ul>
<li>Min 0 / Max 1인 컬럼이 많음</li>
<li>평균과 표준편차가 작은 편인 컬럼이 많음</li>
</ul></li>
<li>대부분 컬럼이 편향이 많이 있어보임
<ul>
<li>예를 들어 <strong>NAME_CONTRACT_TYPE</strong>컬럼의 경우, unique 2 / count 307511 / frep 278232</li>
</ul></li>
<li>(향후 로그변환을 위해)변수가 음수인지 양수인지 봐두기</li>
</ul></li>
</ul>
<div id="19b02772" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">data.NAME_CONTRACT_TYPE.value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>NAME_CONTRACT_TYPE
Cash loans         278232
Revolving loans     29279
Name: count, dtype: int64</code></pre>
</div>
</div>
<div id="7519d181" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">basic_statistics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.describe(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all'</span>).transpose().reset_index()</span>
<span id="cb7-2">basic_statistics.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'unique'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">index</th>
<th data-quarto-table-cell-role="th">count</th>
<th data-quarto-table-cell-role="th">unique</th>
<th data-quarto-table-cell-role="th">top</th>
<th data-quarto-table-cell-role="th">freq</th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">std</th>
<th data-quarto-table-cell-role="th">min</th>
<th data-quarto-table-cell-role="th">25%</th>
<th data-quarto-table-cell-role="th">50%</th>
<th data-quarto-table-cell-role="th">75%</th>
<th data-quarto-table-cell-role="th">max</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>NAME_CONTRACT_TYPE</td>
<td>307511</td>
<td>2</td>
<td>Cash loans</td>
<td>278232</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4</td>
<td>FLAG_OWN_CAR</td>
<td>307511</td>
<td>2</td>
<td>N</td>
<td>202924</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">5</td>
<td>FLAG_OWN_REALTY</td>
<td>307511</td>
<td>2</td>
<td>Y</td>
<td>213312</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">90</td>
<td>EMERGENCYSTATE_MODE</td>
<td>161756</td>
<td>2</td>
<td>No</td>
<td>159428</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">3</td>
<td>CODE_GENDER</td>
<td>307511</td>
<td>3</td>
<td>F</td>
<td>202448</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">87</td>
<td>HOUSETYPE_MODE</td>
<td>153214</td>
<td>3</td>
<td>block of flats</td>
<td>150503</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">86</td>
<td>FONDKAPREMONT_MODE</td>
<td>97216</td>
<td>4</td>
<td>reg oper account</td>
<td>73830</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>NAME_EDUCATION_TYPE</td>
<td>307511</td>
<td>5</td>
<td>Secondary / secondary special</td>
<td>218391</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>NAME_FAMILY_STATUS</td>
<td>307511</td>
<td>6</td>
<td>Married</td>
<td>196432</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>NAME_HOUSING_TYPE</td>
<td>307511</td>
<td>6</td>
<td>House / apartment</td>
<td>272868</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">11</td>
<td>NAME_TYPE_SUITE</td>
<td>306219</td>
<td>7</td>
<td>Unaccompanied</td>
<td>248526</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">32</td>
<td>WEEKDAY_APPR_PROCESS_START</td>
<td>307511</td>
<td>7</td>
<td>TUESDAY</td>
<td>53901</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">89</td>
<td>WALLSMATERIAL_MODE</td>
<td>151170</td>
<td>7</td>
<td>Panel</td>
<td>66040</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">12</td>
<td>NAME_INCOME_TYPE</td>
<td>307511</td>
<td>8</td>
<td>Working</td>
<td>158774</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">28</td>
<td>OCCUPATION_TYPE</td>
<td>211120</td>
<td>18</td>
<td>Laborers</td>
<td>55186</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">40</td>
<td>ORGANIZATION_TYPE</td>
<td>307511</td>
<td>58</td>
<td>Business Entity Type 3</td>
<td>67992</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>SK_ID_CURR</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>278180.518577</td>
<td>102790.175348</td>
<td>100002.0</td>
<td>189145.5</td>
<td>278202.0</td>
<td>367142.5</td>
<td>456255.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>TARGET</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.080729</td>
<td>0.272419</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>CNT_CHILDREN</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.417052</td>
<td>0.722121</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>19.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>AMT_INCOME_TOTAL</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>168797.919297</td>
<td>237123.146279</td>
<td>25650.0</td>
<td>112500.0</td>
<td>147150.0</td>
<td>202500.0</td>
<td>117000000.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>AMT_CREDIT</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>599025.999706</td>
<td>402490.776996</td>
<td>45000.0</td>
<td>270000.0</td>
<td>513531.0</td>
<td>808650.0</td>
<td>4050000.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>AMT_ANNUITY</td>
<td>307499.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>27108.573909</td>
<td>14493.737315</td>
<td>1615.5</td>
<td>16524.0</td>
<td>24903.0</td>
<td>34596.0</td>
<td>258025.5</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>AMT_GOODS_PRICE</td>
<td>307233.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>538396.207429</td>
<td>369446.46054</td>
<td>40500.0</td>
<td>238500.0</td>
<td>450000.0</td>
<td>679500.0</td>
<td>4050000.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">16</td>
<td>REGION_POPULATION_RELATIVE</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.020868</td>
<td>0.013831</td>
<td>0.00029</td>
<td>0.010006</td>
<td>0.01885</td>
<td>0.028663</td>
<td>0.072508</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">17</td>
<td>DAYS_BIRTH</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>-16036.995067</td>
<td>4363.988632</td>
<td>-25229.0</td>
<td>-19682.0</td>
<td>-15750.0</td>
<td>-12413.0</td>
<td>-7489.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">18</td>
<td>DAYS_EMPLOYED</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>63815.045904</td>
<td>141275.766519</td>
<td>-17912.0</td>
<td>-2760.0</td>
<td>-1213.0</td>
<td>-289.0</td>
<td>365243.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">19</td>
<td>DAYS_REGISTRATION</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>-4986.120328</td>
<td>3522.886321</td>
<td>-24672.0</td>
<td>-7479.5</td>
<td>-4504.0</td>
<td>-2010.0</td>
<td>0.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">20</td>
<td>DAYS_ID_PUBLISH</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>-2994.202373</td>
<td>1509.450419</td>
<td>-7197.0</td>
<td>-4299.0</td>
<td>-3254.0</td>
<td>-1720.0</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">21</td>
<td>OWN_CAR_AGE</td>
<td>104582.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>12.061091</td>
<td>11.944812</td>
<td>0.0</td>
<td>5.0</td>
<td>9.0</td>
<td>15.0</td>
<td>91.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">22</td>
<td>FLAG_MOBIL</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.999997</td>
<td>0.001803</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">23</td>
<td>FLAG_EMP_PHONE</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.819889</td>
<td>0.38428</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">24</td>
<td>FLAG_WORK_PHONE</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.199368</td>
<td>0.399526</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">25</td>
<td>FLAG_CONT_MOBILE</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.998133</td>
<td>0.043164</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">26</td>
<td>FLAG_PHONE</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.281066</td>
<td>0.449521</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">27</td>
<td>FLAG_EMAIL</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.05672</td>
<td>0.231307</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">29</td>
<td>CNT_FAM_MEMBERS</td>
<td>307509.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>2.152665</td>
<td>0.910682</td>
<td>1.0</td>
<td>2.0</td>
<td>2.0</td>
<td>3.0</td>
<td>20.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">30</td>
<td>REGION_RATING_CLIENT</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>2.052463</td>
<td>0.509034</td>
<td>1.0</td>
<td>2.0</td>
<td>2.0</td>
<td>2.0</td>
<td>3.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">31</td>
<td>REGION_RATING_CLIENT_W_CITY</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>2.031521</td>
<td>0.502737</td>
<td>1.0</td>
<td>2.0</td>
<td>2.0</td>
<td>2.0</td>
<td>3.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">33</td>
<td>HOUR_APPR_PROCESS_START</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>12.063419</td>
<td>3.265832</td>
<td>0.0</td>
<td>10.0</td>
<td>12.0</td>
<td>14.0</td>
<td>23.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">34</td>
<td>REG_REGION_NOT_LIVE_REGION</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.015144</td>
<td>0.122126</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">35</td>
<td>REG_REGION_NOT_WORK_REGION</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.050769</td>
<td>0.219526</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">36</td>
<td>LIVE_REGION_NOT_WORK_REGION</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.040659</td>
<td>0.197499</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">37</td>
<td>REG_CITY_NOT_LIVE_CITY</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.078173</td>
<td>0.268444</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">38</td>
<td>REG_CITY_NOT_WORK_CITY</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.230454</td>
<td>0.421124</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">39</td>
<td>LIVE_CITY_NOT_WORK_CITY</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.179555</td>
<td>0.383817</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">41</td>
<td>EXT_SOURCE_1</td>
<td>134133.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.50213</td>
<td>0.211062</td>
<td>0.014568</td>
<td>0.334007</td>
<td>0.505998</td>
<td>0.675053</td>
<td>0.962693</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">42</td>
<td>EXT_SOURCE_2</td>
<td>306851.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.514393</td>
<td>0.19106</td>
<td>0.0</td>
<td>0.392457</td>
<td>0.565961</td>
<td>0.663617</td>
<td>0.855</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">43</td>
<td>EXT_SOURCE_3</td>
<td>246546.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.510853</td>
<td>0.194844</td>
<td>0.000527</td>
<td>0.37065</td>
<td>0.535276</td>
<td>0.669057</td>
<td>0.89601</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">44</td>
<td>APARTMENTS_AVG</td>
<td>151450.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.11744</td>
<td>0.10824</td>
<td>0.0</td>
<td>0.0577</td>
<td>0.0876</td>
<td>0.1485</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">45</td>
<td>BASEMENTAREA_AVG</td>
<td>127568.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.088442</td>
<td>0.082438</td>
<td>0.0</td>
<td>0.0442</td>
<td>0.0763</td>
<td>0.1122</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">46</td>
<td>YEARS_BEGINEXPLUATATION_AVG</td>
<td>157504.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.977735</td>
<td>0.059223</td>
<td>0.0</td>
<td>0.9767</td>
<td>0.9816</td>
<td>0.9866</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">47</td>
<td>YEARS_BUILD_AVG</td>
<td>103023.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.752471</td>
<td>0.11328</td>
<td>0.0</td>
<td>0.6872</td>
<td>0.7552</td>
<td>0.8232</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">48</td>
<td>COMMONAREA_AVG</td>
<td>92646.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.044621</td>
<td>0.076036</td>
<td>0.0</td>
<td>0.0078</td>
<td>0.0211</td>
<td>0.0515</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">49</td>
<td>ELEVATORS_AVG</td>
<td>143620.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.078942</td>
<td>0.134576</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.12</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">50</td>
<td>ENTRANCES_AVG</td>
<td>152683.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.149725</td>
<td>0.100049</td>
<td>0.0</td>
<td>0.069</td>
<td>0.1379</td>
<td>0.2069</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">51</td>
<td>FLOORSMAX_AVG</td>
<td>154491.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.226282</td>
<td>0.144641</td>
<td>0.0</td>
<td>0.1667</td>
<td>0.1667</td>
<td>0.3333</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">52</td>
<td>FLOORSMIN_AVG</td>
<td>98869.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.231894</td>
<td>0.16138</td>
<td>0.0</td>
<td>0.0833</td>
<td>0.2083</td>
<td>0.375</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">53</td>
<td>LANDAREA_AVG</td>
<td>124921.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.066333</td>
<td>0.081184</td>
<td>0.0</td>
<td>0.0187</td>
<td>0.0481</td>
<td>0.0856</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">54</td>
<td>LIVINGAPARTMENTS_AVG</td>
<td>97312.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.100775</td>
<td>0.092576</td>
<td>0.0</td>
<td>0.0504</td>
<td>0.0756</td>
<td>0.121</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">55</td>
<td>LIVINGAREA_AVG</td>
<td>153161.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.107399</td>
<td>0.110565</td>
<td>0.0</td>
<td>0.0453</td>
<td>0.0745</td>
<td>0.1299</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">56</td>
<td>NONLIVINGAPARTMENTS_AVG</td>
<td>93997.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.008809</td>
<td>0.047732</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0039</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">57</td>
<td>NONLIVINGAREA_AVG</td>
<td>137829.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.028358</td>
<td>0.069523</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0036</td>
<td>0.0277</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">58</td>
<td>APARTMENTS_MODE</td>
<td>151450.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.114231</td>
<td>0.107936</td>
<td>0.0</td>
<td>0.0525</td>
<td>0.084</td>
<td>0.1439</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">59</td>
<td>BASEMENTAREA_MODE</td>
<td>127568.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.087543</td>
<td>0.084307</td>
<td>0.0</td>
<td>0.0407</td>
<td>0.0746</td>
<td>0.1124</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">60</td>
<td>YEARS_BEGINEXPLUATATION_MODE</td>
<td>157504.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.977065</td>
<td>0.064575</td>
<td>0.0</td>
<td>0.9767</td>
<td>0.9816</td>
<td>0.9866</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">61</td>
<td>YEARS_BUILD_MODE</td>
<td>103023.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.759637</td>
<td>0.110111</td>
<td>0.0</td>
<td>0.6994</td>
<td>0.7648</td>
<td>0.8236</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">62</td>
<td>COMMONAREA_MODE</td>
<td>92646.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.042553</td>
<td>0.074445</td>
<td>0.0</td>
<td>0.0072</td>
<td>0.019</td>
<td>0.049</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">63</td>
<td>ELEVATORS_MODE</td>
<td>143620.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.07449</td>
<td>0.132256</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.1208</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">64</td>
<td>ENTRANCES_MODE</td>
<td>152683.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.145193</td>
<td>0.100977</td>
<td>0.0</td>
<td>0.069</td>
<td>0.1379</td>
<td>0.2069</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">65</td>
<td>FLOORSMAX_MODE</td>
<td>154491.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.222315</td>
<td>0.143709</td>
<td>0.0</td>
<td>0.1667</td>
<td>0.1667</td>
<td>0.3333</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">66</td>
<td>FLOORSMIN_MODE</td>
<td>98869.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.228058</td>
<td>0.16116</td>
<td>0.0</td>
<td>0.0833</td>
<td>0.2083</td>
<td>0.375</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">67</td>
<td>LANDAREA_MODE</td>
<td>124921.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.064958</td>
<td>0.08175</td>
<td>0.0</td>
<td>0.0166</td>
<td>0.0458</td>
<td>0.0841</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">68</td>
<td>LIVINGAPARTMENTS_MODE</td>
<td>97312.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.105645</td>
<td>0.09788</td>
<td>0.0</td>
<td>0.0542</td>
<td>0.0771</td>
<td>0.1313</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">69</td>
<td>LIVINGAREA_MODE</td>
<td>153161.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.105975</td>
<td>0.111845</td>
<td>0.0</td>
<td>0.0427</td>
<td>0.0731</td>
<td>0.1252</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">70</td>
<td>NONLIVINGAPARTMENTS_MODE</td>
<td>93997.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.008076</td>
<td>0.046276</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0039</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">71</td>
<td>NONLIVINGAREA_MODE</td>
<td>137829.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.027022</td>
<td>0.070254</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0011</td>
<td>0.0231</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">72</td>
<td>APARTMENTS_MEDI</td>
<td>151450.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.11785</td>
<td>0.109076</td>
<td>0.0</td>
<td>0.0583</td>
<td>0.0864</td>
<td>0.1489</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">73</td>
<td>BASEMENTAREA_MEDI</td>
<td>127568.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.087955</td>
<td>0.082179</td>
<td>0.0</td>
<td>0.0437</td>
<td>0.0758</td>
<td>0.1116</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">74</td>
<td>YEARS_BEGINEXPLUATATION_MEDI</td>
<td>157504.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.977752</td>
<td>0.059897</td>
<td>0.0</td>
<td>0.9767</td>
<td>0.9816</td>
<td>0.9866</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">75</td>
<td>YEARS_BUILD_MEDI</td>
<td>103023.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.755746</td>
<td>0.112066</td>
<td>0.0</td>
<td>0.6914</td>
<td>0.7585</td>
<td>0.8256</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">76</td>
<td>COMMONAREA_MEDI</td>
<td>92646.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.044595</td>
<td>0.076144</td>
<td>0.0</td>
<td>0.0079</td>
<td>0.0208</td>
<td>0.0513</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">77</td>
<td>ELEVATORS_MEDI</td>
<td>143620.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.078078</td>
<td>0.134467</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.12</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">78</td>
<td>ENTRANCES_MEDI</td>
<td>152683.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.149213</td>
<td>0.100368</td>
<td>0.0</td>
<td>0.069</td>
<td>0.1379</td>
<td>0.2069</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">79</td>
<td>FLOORSMAX_MEDI</td>
<td>154491.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.225897</td>
<td>0.145067</td>
<td>0.0</td>
<td>0.1667</td>
<td>0.1667</td>
<td>0.3333</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">80</td>
<td>FLOORSMIN_MEDI</td>
<td>98869.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.231625</td>
<td>0.161934</td>
<td>0.0</td>
<td>0.0833</td>
<td>0.2083</td>
<td>0.375</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">81</td>
<td>LANDAREA_MEDI</td>
<td>124921.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.067169</td>
<td>0.082167</td>
<td>0.0</td>
<td>0.0187</td>
<td>0.0487</td>
<td>0.0868</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">82</td>
<td>LIVINGAPARTMENTS_MEDI</td>
<td>97312.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.101954</td>
<td>0.093642</td>
<td>0.0</td>
<td>0.0513</td>
<td>0.0761</td>
<td>0.1231</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">83</td>
<td>LIVINGAREA_MEDI</td>
<td>153161.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.108607</td>
<td>0.11226</td>
<td>0.0</td>
<td>0.0457</td>
<td>0.0749</td>
<td>0.1303</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">84</td>
<td>NONLIVINGAPARTMENTS_MEDI</td>
<td>93997.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.008651</td>
<td>0.047415</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0039</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">85</td>
<td>NONLIVINGAREA_MEDI</td>
<td>137829.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.028236</td>
<td>0.070166</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0031</td>
<td>0.0266</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">88</td>
<td>TOTALAREA_MODE</td>
<td>159080.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.102547</td>
<td>0.107462</td>
<td>0.0</td>
<td>0.0412</td>
<td>0.0688</td>
<td>0.1276</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">91</td>
<td>OBS_30_CNT_SOCIAL_CIRCLE</td>
<td>306490.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>1.422245</td>
<td>2.400989</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>2.0</td>
<td>348.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">92</td>
<td>DEF_30_CNT_SOCIAL_CIRCLE</td>
<td>306490.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.143421</td>
<td>0.446698</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>34.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">93</td>
<td>OBS_60_CNT_SOCIAL_CIRCLE</td>
<td>306490.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>1.405292</td>
<td>2.379803</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>2.0</td>
<td>344.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">94</td>
<td>DEF_60_CNT_SOCIAL_CIRCLE</td>
<td>306490.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.100049</td>
<td>0.362291</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>24.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">95</td>
<td>DAYS_LAST_PHONE_CHANGE</td>
<td>307510.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>-962.858788</td>
<td>826.808487</td>
<td>-4292.0</td>
<td>-1570.0</td>
<td>-757.0</td>
<td>-274.0</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">96</td>
<td>FLAG_DOCUMENT_2</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000042</td>
<td>0.006502</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">97</td>
<td>FLAG_DOCUMENT_3</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.710023</td>
<td>0.453752</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">98</td>
<td>FLAG_DOCUMENT_4</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000081</td>
<td>0.009016</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">99</td>
<td>FLAG_DOCUMENT_5</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.015115</td>
<td>0.12201</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">100</td>
<td>FLAG_DOCUMENT_6</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.088055</td>
<td>0.283376</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">101</td>
<td>FLAG_DOCUMENT_7</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000192</td>
<td>0.01385</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">102</td>
<td>FLAG_DOCUMENT_8</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.081376</td>
<td>0.273412</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">103</td>
<td>FLAG_DOCUMENT_9</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.003896</td>
<td>0.062295</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">104</td>
<td>FLAG_DOCUMENT_10</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000023</td>
<td>0.004771</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">105</td>
<td>FLAG_DOCUMENT_11</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.003912</td>
<td>0.062424</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">106</td>
<td>FLAG_DOCUMENT_12</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000007</td>
<td>0.00255</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">107</td>
<td>FLAG_DOCUMENT_13</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.003525</td>
<td>0.059268</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">108</td>
<td>FLAG_DOCUMENT_14</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.002936</td>
<td>0.05411</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">109</td>
<td>FLAG_DOCUMENT_15</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.00121</td>
<td>0.03476</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">110</td>
<td>FLAG_DOCUMENT_16</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.009928</td>
<td>0.099144</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">111</td>
<td>FLAG_DOCUMENT_17</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000267</td>
<td>0.016327</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">112</td>
<td>FLAG_DOCUMENT_18</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.00813</td>
<td>0.089798</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">113</td>
<td>FLAG_DOCUMENT_19</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000595</td>
<td>0.024387</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">114</td>
<td>FLAG_DOCUMENT_20</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000507</td>
<td>0.022518</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">115</td>
<td>FLAG_DOCUMENT_21</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000335</td>
<td>0.018299</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">116</td>
<td>AMT_REQ_CREDIT_BUREAU_HOUR</td>
<td>265992.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.006402</td>
<td>0.083849</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>4.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">117</td>
<td>AMT_REQ_CREDIT_BUREAU_DAY</td>
<td>265992.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.007</td>
<td>0.110757</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>9.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">118</td>
<td>AMT_REQ_CREDIT_BUREAU_WEEK</td>
<td>265992.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.034362</td>
<td>0.204685</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>8.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">119</td>
<td>AMT_REQ_CREDIT_BUREAU_MON</td>
<td>265992.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.267395</td>
<td>0.916002</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>27.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">120</td>
<td>AMT_REQ_CREDIT_BUREAU_QRT</td>
<td>265992.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.265474</td>
<td>0.794056</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>261.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">121</td>
<td>AMT_REQ_CREDIT_BUREAU_YEAR</td>
<td>265992.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>1.899974</td>
<td>1.869295</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>3.0</td>
<td>25.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="왜도-확인" class="level4">
<h4 class="anchored" data-anchor-id="왜도-확인">왜도 확인</h4>
<ul>
<li>수치형 변수만, skew함수로 왜도를 구할 수 있음</li>
<li>음의 왜도 확인하기 + 높은 양의 왜도 확인하기(10이 넘는 경우 왜도가 높은 편)</li>
<li>아래 코드의 결과를 기준으로, <strong>왜도가 심하게 높은 주요 변수 → 이상치 여부를 시각화로 확인 필요</strong>
<ul>
<li>AMT_INCOME_TOTAL : 391.559654</li>
<li>YEARS_BEGINEXPLUATATION_MEDI : -15.573124</li>
<li>FLAG_CONT_MOBILE : -23.081172</li>
<li>FLAG_MOBIL : -554.536744</li>
</ul></li>
</ul>
<div id="96e0998d" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">numerical_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.select_dtypes(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'float64'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int64'</span>])</span>
<span id="cb8-2">numeric_skew <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numerical_data.skew().reset_index() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># skew() 함수로 왜도 구하기</span></span>
<span id="cb8-3">numeric_skew.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skewness'</span>]</span>
<span id="cb8-4"></span>
<span id="cb8-5">ext_statistics <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.merge(basic_statistics, numeric_skew, on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'index'</span>, how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>)</span>
<span id="cb8-6">ext_statistics.sort_values(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skewness'</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">index</th>
<th data-quarto-table-cell-role="th">count</th>
<th data-quarto-table-cell-role="th">unique</th>
<th data-quarto-table-cell-role="th">top</th>
<th data-quarto-table-cell-role="th">freq</th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">std</th>
<th data-quarto-table-cell-role="th">min</th>
<th data-quarto-table-cell-role="th">25%</th>
<th data-quarto-table-cell-role="th">50%</th>
<th data-quarto-table-cell-role="th">75%</th>
<th data-quarto-table-cell-role="th">max</th>
<th data-quarto-table-cell-role="th">skewness</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">106</td>
<td>FLAG_DOCUMENT_12</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000007</td>
<td>0.00255</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>392.114779</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>AMT_INCOME_TOTAL</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>168797.919297</td>
<td>237123.146279</td>
<td>25650.0</td>
<td>112500.0</td>
<td>147150.0</td>
<td>202500.0</td>
<td>117000000.0</td>
<td>391.559654</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">104</td>
<td>FLAG_DOCUMENT_10</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000023</td>
<td>0.004771</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>209.589054</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">96</td>
<td>FLAG_DOCUMENT_2</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000042</td>
<td>0.006502</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>153.791817</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">120</td>
<td>AMT_REQ_CREDIT_BUREAU_QRT</td>
<td>265992.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.265474</td>
<td>0.794056</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>261.0</td>
<td>134.365776</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">98</td>
<td>FLAG_DOCUMENT_4</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000081</td>
<td>0.009016</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>110.894364</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">101</td>
<td>FLAG_DOCUMENT_7</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000192</td>
<td>0.01385</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>72.174108</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">111</td>
<td>FLAG_DOCUMENT_17</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000267</td>
<td>0.016327</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>61.214140</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">115</td>
<td>FLAG_DOCUMENT_21</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000335</td>
<td>0.018299</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>54.612939</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">114</td>
<td>FLAG_DOCUMENT_20</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000507</td>
<td>0.022518</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>44.364897</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">113</td>
<td>FLAG_DOCUMENT_19</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000595</td>
<td>0.024387</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>40.956134</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">109</td>
<td>FLAG_DOCUMENT_15</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.00121</td>
<td>0.03476</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>28.699333</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">117</td>
<td>AMT_REQ_CREDIT_BUREAU_DAY</td>
<td>265992.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.007</td>
<td>0.110757</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>9.0</td>
<td>27.043505</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">108</td>
<td>FLAG_DOCUMENT_14</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.002936</td>
<td>0.05411</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>18.372533</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">107</td>
<td>FLAG_DOCUMENT_13</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.003525</td>
<td>0.059268</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>16.753746</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">70</td>
<td>NONLIVINGAPARTMENTS_MODE</td>
<td>93997.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.008076</td>
<td>0.046276</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0039</td>
<td>1.0</td>
<td>16.251819</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">103</td>
<td>FLAG_DOCUMENT_9</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.003896</td>
<td>0.062295</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>15.927755</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">105</td>
<td>FLAG_DOCUMENT_11</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.003912</td>
<td>0.062424</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>15.894229</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">84</td>
<td>NONLIVINGAPARTMENTS_MEDI</td>
<td>93997.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.008651</td>
<td>0.047415</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0039</td>
<td>1.0</td>
<td>15.671995</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">56</td>
<td>NONLIVINGAPARTMENTS_AVG</td>
<td>93997.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.008809</td>
<td>0.047732</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0039</td>
<td>1.0</td>
<td>15.541185</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">116</td>
<td>AMT_REQ_CREDIT_BUREAU_HOUR</td>
<td>265992.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.006402</td>
<td>0.083849</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>4.0</td>
<td>14.534062</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">91</td>
<td>OBS_30_CNT_SOCIAL_CIRCLE</td>
<td>306490.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>1.422245</td>
<td>2.400989</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>2.0</td>
<td>348.0</td>
<td>12.139598</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">93</td>
<td>OBS_60_CNT_SOCIAL_CIRCLE</td>
<td>306490.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>1.405292</td>
<td>2.379803</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>2.0</td>
<td>344.0</td>
<td>12.070829</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">112</td>
<td>FLAG_DOCUMENT_18</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.00813</td>
<td>0.089798</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>10.955080</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">110</td>
<td>FLAG_DOCUMENT_16</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.009928</td>
<td>0.099144</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>9.886111</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">118</td>
<td>AMT_REQ_CREDIT_BUREAU_WEEK</td>
<td>265992.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.034362</td>
<td>0.204685</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>8.0</td>
<td>9.293573</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">99</td>
<td>FLAG_DOCUMENT_5</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.015115</td>
<td>0.12201</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>7.948322</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">34</td>
<td>REG_REGION_NOT_LIVE_REGION</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.015144</td>
<td>0.122126</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>7.940276</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">119</td>
<td>AMT_REQ_CREDIT_BUREAU_MON</td>
<td>265992.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.267395</td>
<td>0.916002</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>27.0</td>
<td>7.804848</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">57</td>
<td>NONLIVINGAREA_AVG</td>
<td>137829.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.028358</td>
<td>0.069523</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0036</td>
<td>0.0277</td>
<td>1.0</td>
<td>6.559012</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">71</td>
<td>NONLIVINGAREA_MODE</td>
<td>137829.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.027022</td>
<td>0.070254</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0011</td>
<td>0.0231</td>
<td>1.0</td>
<td>6.522451</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">85</td>
<td>NONLIVINGAREA_MEDI</td>
<td>137829.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.028236</td>
<td>0.070166</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0031</td>
<td>0.0266</td>
<td>1.0</td>
<td>6.508831</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">62</td>
<td>COMMONAREA_MODE</td>
<td>92646.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.042553</td>
<td>0.074445</td>
<td>0.0</td>
<td>0.0072</td>
<td>0.019</td>
<td>0.049</td>
<td>1.0</td>
<td>5.620589</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">48</td>
<td>COMMONAREA_AVG</td>
<td>92646.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.044621</td>
<td>0.076036</td>
<td>0.0</td>
<td>0.0078</td>
<td>0.0211</td>
<td>0.0515</td>
<td>1.0</td>
<td>5.457305</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">76</td>
<td>COMMONAREA_MEDI</td>
<td>92646.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.044595</td>
<td>0.076144</td>
<td>0.0</td>
<td>0.0079</td>
<td>0.0208</td>
<td>0.0513</td>
<td>1.0</td>
<td>5.419238</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">94</td>
<td>DEF_60_CNT_SOCIAL_CIRCLE</td>
<td>306490.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.100049</td>
<td>0.362291</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>24.0</td>
<td>5.277878</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">92</td>
<td>DEF_30_CNT_SOCIAL_CIRCLE</td>
<td>306490.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.143421</td>
<td>0.446698</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>34.0</td>
<td>5.183518</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">36</td>
<td>LIVE_REGION_NOT_WORK_REGION</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.040659</td>
<td>0.197499</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>4.651620</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">53</td>
<td>LANDAREA_AVG</td>
<td>124921.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.066333</td>
<td>0.081184</td>
<td>0.0</td>
<td>0.0187</td>
<td>0.0481</td>
<td>0.0856</td>
<td>1.0</td>
<td>4.458677</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">67</td>
<td>LANDAREA_MODE</td>
<td>124921.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.064958</td>
<td>0.08175</td>
<td>0.0</td>
<td>0.0166</td>
<td>0.0458</td>
<td>0.0841</td>
<td>1.0</td>
<td>4.377027</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">81</td>
<td>LANDAREA_MEDI</td>
<td>124921.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.067169</td>
<td>0.082167</td>
<td>0.0</td>
<td>0.0187</td>
<td>0.0487</td>
<td>0.0868</td>
<td>1.0</td>
<td>4.368292</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">35</td>
<td>REG_REGION_NOT_WORK_REGION</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.050769</td>
<td>0.219526</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>4.092767</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">27</td>
<td>FLAG_EMAIL</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.05672</td>
<td>0.231307</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>3.832853</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">45</td>
<td>BASEMENTAREA_AVG</td>
<td>127568.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.088442</td>
<td>0.082438</td>
<td>0.0</td>
<td>0.0442</td>
<td>0.0763</td>
<td>0.1122</td>
<td>1.0</td>
<td>3.566306</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">73</td>
<td>BASEMENTAREA_MEDI</td>
<td>127568.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.087955</td>
<td>0.082179</td>
<td>0.0</td>
<td>0.0437</td>
<td>0.0758</td>
<td>0.1116</td>
<td>1.0</td>
<td>3.553040</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">59</td>
<td>BASEMENTAREA_MODE</td>
<td>127568.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.087543</td>
<td>0.084307</td>
<td>0.0</td>
<td>0.0407</td>
<td>0.0746</td>
<td>0.1124</td>
<td>1.0</td>
<td>3.481533</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">37</td>
<td>REG_CITY_NOT_LIVE_CITY</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.078173</td>
<td>0.268444</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>3.142781</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>TARGET</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.080729</td>
<td>0.272419</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>3.078159</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">102</td>
<td>FLAG_DOCUMENT_8</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.081376</td>
<td>0.273412</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>3.062241</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">54</td>
<td>LIVINGAPARTMENTS_AVG</td>
<td>97312.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.100775</td>
<td>0.092576</td>
<td>0.0</td>
<td>0.0504</td>
<td>0.0756</td>
<td>0.121</td>
<td>1.0</td>
<td>3.042198</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">82</td>
<td>LIVINGAPARTMENTS_MEDI</td>
<td>97312.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.101954</td>
<td>0.093642</td>
<td>0.0</td>
<td>0.0513</td>
<td>0.0761</td>
<td>0.1231</td>
<td>1.0</td>
<td>2.988291</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">100</td>
<td>FLAG_DOCUMENT_6</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.088055</td>
<td>0.283376</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>2.907427</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">68</td>
<td>LIVINGAPARTMENTS_MODE</td>
<td>97312.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.105645</td>
<td>0.09788</td>
<td>0.0</td>
<td>0.0542</td>
<td>0.0771</td>
<td>0.1313</td>
<td>1.0</td>
<td>2.902672</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">69</td>
<td>LIVINGAREA_MODE</td>
<td>153161.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.105975</td>
<td>0.111845</td>
<td>0.0</td>
<td>0.0427</td>
<td>0.0731</td>
<td>0.1252</td>
<td>1.0</td>
<td>2.902491</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">55</td>
<td>LIVINGAREA_AVG</td>
<td>153161.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.107399</td>
<td>0.110565</td>
<td>0.0</td>
<td>0.0453</td>
<td>0.0745</td>
<td>0.1299</td>
<td>1.0</td>
<td>2.854736</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">83</td>
<td>LIVINGAREA_MEDI</td>
<td>153161.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.108607</td>
<td>0.11226</td>
<td>0.0</td>
<td>0.0457</td>
<td>0.0749</td>
<td>0.1303</td>
<td>1.0</td>
<td>2.848935</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">88</td>
<td>TOTALAREA_MODE</td>
<td>159080.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.102547</td>
<td>0.107462</td>
<td>0.0</td>
<td>0.0412</td>
<td>0.0688</td>
<td>0.1276</td>
<td>1.0</td>
<td>2.797572</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">21</td>
<td>OWN_CAR_AGE</td>
<td>104582.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>12.061091</td>
<td>11.944812</td>
<td>0.0</td>
<td>5.0</td>
<td>9.0</td>
<td>15.0</td>
<td>91.0</td>
<td>2.745422</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">58</td>
<td>APARTMENTS_MODE</td>
<td>151450.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.114231</td>
<td>0.107936</td>
<td>0.0</td>
<td>0.0525</td>
<td>0.084</td>
<td>0.1439</td>
<td>1.0</td>
<td>2.703052</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">44</td>
<td>APARTMENTS_AVG</td>
<td>151450.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.11744</td>
<td>0.10824</td>
<td>0.0</td>
<td>0.0577</td>
<td>0.0876</td>
<td>0.1485</td>
<td>1.0</td>
<td>2.641836</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">72</td>
<td>APARTMENTS_MEDI</td>
<td>151450.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.11785</td>
<td>0.109076</td>
<td>0.0</td>
<td>0.0583</td>
<td>0.0864</td>
<td>0.1489</td>
<td>1.0</td>
<td>2.639256</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">63</td>
<td>ELEVATORS_MODE</td>
<td>143620.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.07449</td>
<td>0.132256</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.1208</td>
<td>1.0</td>
<td>2.552281</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">77</td>
<td>ELEVATORS_MEDI</td>
<td>143620.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.078078</td>
<td>0.134467</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.12</td>
<td>1.0</td>
<td>2.457824</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">49</td>
<td>ELEVATORS_AVG</td>
<td>143620.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.078942</td>
<td>0.134576</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.12</td>
<td>1.0</td>
<td>2.439429</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">50</td>
<td>ENTRANCES_AVG</td>
<td>152683.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.149725</td>
<td>0.100049</td>
<td>0.0</td>
<td>0.069</td>
<td>0.1379</td>
<td>0.2069</td>
<td>1.0</td>
<td>2.399717</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">64</td>
<td>ENTRANCES_MODE</td>
<td>152683.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.145193</td>
<td>0.100977</td>
<td>0.0</td>
<td>0.069</td>
<td>0.1379</td>
<td>0.2069</td>
<td>1.0</td>
<td>2.392343</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">78</td>
<td>ENTRANCES_MEDI</td>
<td>152683.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.149213</td>
<td>0.100368</td>
<td>0.0</td>
<td>0.069</td>
<td>0.1379</td>
<td>0.2069</td>
<td>1.0</td>
<td>2.387711</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">6</td>
<td>CNT_CHILDREN</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.417052</td>
<td>0.722121</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>19.0</td>
<td>1.974604</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">39</td>
<td>LIVE_CITY_NOT_WORK_CITY</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.179555</td>
<td>0.383817</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.669795</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">18</td>
<td>DAYS_EMPLOYED</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>63815.045904</td>
<td>141275.766519</td>
<td>-17912.0</td>
<td>-2760.0</td>
<td>-1213.0</td>
<td>-289.0</td>
<td>365243.0</td>
<td>1.664346</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">9</td>
<td>AMT_ANNUITY</td>
<td>307499.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>27108.573909</td>
<td>14493.737315</td>
<td>1615.5</td>
<td>16524.0</td>
<td>24903.0</td>
<td>34596.0</td>
<td>258025.5</td>
<td>1.579777</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">24</td>
<td>FLAG_WORK_PHONE</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.199368</td>
<td>0.399526</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.504950</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>REGION_POPULATION_RELATIVE</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.020868</td>
<td>0.013831</td>
<td>0.00029</td>
<td>0.010006</td>
<td>0.01885</td>
<td>0.028663</td>
<td>0.072508</td>
<td>1.488009</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">10</td>
<td>AMT_GOODS_PRICE</td>
<td>307233.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>538396.207429</td>
<td>369446.46054</td>
<td>40500.0</td>
<td>238500.0</td>
<td>450000.0</td>
<td>679500.0</td>
<td>4050000.0</td>
<td>1.349000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">38</td>
<td>REG_CITY_NOT_WORK_CITY</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.230454</td>
<td>0.421124</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.280138</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">65</td>
<td>FLOORSMAX_MODE</td>
<td>154491.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.222315</td>
<td>0.143709</td>
<td>0.0</td>
<td>0.1667</td>
<td>0.1667</td>
<td>0.3333</td>
<td>1.0</td>
<td>1.244343</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">121</td>
<td>AMT_REQ_CREDIT_BUREAU_YEAR</td>
<td>265992.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>1.899974</td>
<td>1.869295</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>3.0</td>
<td>25.0</td>
<td>1.243590</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">79</td>
<td>FLOORSMAX_MEDI</td>
<td>154491.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.225897</td>
<td>0.145067</td>
<td>0.0</td>
<td>0.1667</td>
<td>0.1667</td>
<td>0.3333</td>
<td>1.0</td>
<td>1.240185</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>AMT_CREDIT</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>599025.999706</td>
<td>402490.776996</td>
<td>45000.0</td>
<td>270000.0</td>
<td>513531.0</td>
<td>808650.0</td>
<td>4050000.0</td>
<td>1.234778</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">51</td>
<td>FLOORSMAX_AVG</td>
<td>154491.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.226282</td>
<td>0.144641</td>
<td>0.0</td>
<td>0.1667</td>
<td>0.1667</td>
<td>0.3333</td>
<td>1.0</td>
<td>1.226454</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">29</td>
<td>CNT_FAM_MEMBERS</td>
<td>307509.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>2.152665</td>
<td>0.910682</td>
<td>1.0</td>
<td>2.0</td>
<td>2.0</td>
<td>3.0</td>
<td>20.0</td>
<td>0.987543</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">26</td>
<td>FLAG_PHONE</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.281066</td>
<td>0.449521</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.974083</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">66</td>
<td>FLOORSMIN_MODE</td>
<td>98869.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.228058</td>
<td>0.16116</td>
<td>0.0</td>
<td>0.0833</td>
<td>0.2083</td>
<td>0.375</td>
<td>1.0</td>
<td>0.963835</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">80</td>
<td>FLOORSMIN_MEDI</td>
<td>98869.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.231625</td>
<td>0.161934</td>
<td>0.0</td>
<td>0.0833</td>
<td>0.2083</td>
<td>0.375</td>
<td>1.0</td>
<td>0.960226</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">52</td>
<td>FLOORSMIN_AVG</td>
<td>98869.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.231894</td>
<td>0.16138</td>
<td>0.0</td>
<td>0.0833</td>
<td>0.2083</td>
<td>0.375</td>
<td>1.0</td>
<td>0.954197</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">20</td>
<td>DAYS_ID_PUBLISH</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>-2994.202373</td>
<td>1509.450419</td>
<td>-7197.0</td>
<td>-4299.0</td>
<td>-3254.0</td>
<td>-1720.0</td>
<td>0.0</td>
<td>0.349327</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">30</td>
<td>REGION_RATING_CLIENT</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>2.052463</td>
<td>0.509034</td>
<td>1.0</td>
<td>2.0</td>
<td>2.0</td>
<td>2.0</td>
<td>3.0</td>
<td>0.087468</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">31</td>
<td>REGION_RATING_CLIENT_W_CITY</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>2.031521</td>
<td>0.502737</td>
<td>1.0</td>
<td>2.0</td>
<td>2.0</td>
<td>2.0</td>
<td>3.0</td>
<td>0.059730</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>SK_ID_CURR</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>278180.518577</td>
<td>102790.175348</td>
<td>100002.0</td>
<td>189145.5</td>
<td>278202.0</td>
<td>367142.5</td>
<td>456255.0</td>
<td>-0.001200</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">33</td>
<td>HOUR_APPR_PROCESS_START</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>12.063419</td>
<td>3.265832</td>
<td>0.0</td>
<td>10.0</td>
<td>12.0</td>
<td>14.0</td>
<td>23.0</td>
<td>-0.028024</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">41</td>
<td>EXT_SOURCE_1</td>
<td>134133.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.50213</td>
<td>0.211062</td>
<td>0.014568</td>
<td>0.334007</td>
<td>0.505998</td>
<td>0.675053</td>
<td>0.962693</td>
<td>-0.068755</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>DAYS_BIRTH</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>-16036.995067</td>
<td>4363.988632</td>
<td>-25229.0</td>
<td>-19682.0</td>
<td>-15750.0</td>
<td>-12413.0</td>
<td>-7489.0</td>
<td>-0.115673</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">43</td>
<td>EXT_SOURCE_3</td>
<td>246546.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.510853</td>
<td>0.194844</td>
<td>0.000527</td>
<td>0.37065</td>
<td>0.535276</td>
<td>0.669057</td>
<td>0.89601</td>
<td>-0.409390</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">19</td>
<td>DAYS_REGISTRATION</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>-4986.120328</td>
<td>3522.886321</td>
<td>-24672.0</td>
<td>-7479.5</td>
<td>-4504.0</td>
<td>-2010.0</td>
<td>0.0</td>
<td>-0.590872</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">95</td>
<td>DAYS_LAST_PHONE_CHANGE</td>
<td>307510.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>-962.858788</td>
<td>826.808487</td>
<td>-4292.0</td>
<td>-1570.0</td>
<td>-757.0</td>
<td>-274.0</td>
<td>0.0</td>
<td>-0.713606</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">42</td>
<td>EXT_SOURCE_2</td>
<td>306851.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.514393</td>
<td>0.19106</td>
<td>0.0</td>
<td>0.392457</td>
<td>0.565961</td>
<td>0.663617</td>
<td>0.855</td>
<td>-0.793576</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">97</td>
<td>FLAG_DOCUMENT_3</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.710023</td>
<td>0.453752</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>-0.925725</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">47</td>
<td>YEARS_BUILD_AVG</td>
<td>103023.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.752471</td>
<td>0.11328</td>
<td>0.0</td>
<td>0.6872</td>
<td>0.7552</td>
<td>0.8232</td>
<td>1.0</td>
<td>-0.962485</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">75</td>
<td>YEARS_BUILD_MEDI</td>
<td>103023.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.755746</td>
<td>0.112066</td>
<td>0.0</td>
<td>0.6914</td>
<td>0.7585</td>
<td>0.8256</td>
<td>1.0</td>
<td>-0.962784</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">61</td>
<td>YEARS_BUILD_MODE</td>
<td>103023.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.759637</td>
<td>0.110111</td>
<td>0.0</td>
<td>0.6994</td>
<td>0.7648</td>
<td>0.8236</td>
<td>1.0</td>
<td>-1.002305</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">23</td>
<td>FLAG_EMP_PHONE</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.819889</td>
<td>0.38428</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>-1.664886</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">60</td>
<td>YEARS_BEGINEXPLUATATION_MODE</td>
<td>157504.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.977065</td>
<td>0.064575</td>
<td>0.0</td>
<td>0.9767</td>
<td>0.9816</td>
<td>0.9866</td>
<td>1.0</td>
<td>-14.755318</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">46</td>
<td>YEARS_BEGINEXPLUATATION_AVG</td>
<td>157504.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.977735</td>
<td>0.059223</td>
<td>0.0</td>
<td>0.9767</td>
<td>0.9816</td>
<td>0.9866</td>
<td>1.0</td>
<td>-15.515264</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">74</td>
<td>YEARS_BEGINEXPLUATATION_MEDI</td>
<td>157504.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.977752</td>
<td>0.059897</td>
<td>0.0</td>
<td>0.9767</td>
<td>0.9816</td>
<td>0.9866</td>
<td>1.0</td>
<td>-15.573124</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">25</td>
<td>FLAG_CONT_MOBILE</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.998133</td>
<td>0.043164</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>-23.081172</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">22</td>
<td>FLAG_MOBIL</td>
<td>307511.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.999997</td>
<td>0.001803</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>1.0</td>
<td>-554.536744</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>NAME_CONTRACT_TYPE</td>
<td>307511</td>
<td>2</td>
<td>Cash loans</td>
<td>278232</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>CODE_GENDER</td>
<td>307511</td>
<td>3</td>
<td>F</td>
<td>202448</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>FLAG_OWN_CAR</td>
<td>307511</td>
<td>2</td>
<td>N</td>
<td>202924</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>FLAG_OWN_REALTY</td>
<td>307511</td>
<td>2</td>
<td>Y</td>
<td>213312</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">11</td>
<td>NAME_TYPE_SUITE</td>
<td>306219</td>
<td>7</td>
<td>Unaccompanied</td>
<td>248526</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">12</td>
<td>NAME_INCOME_TYPE</td>
<td>307511</td>
<td>8</td>
<td>Working</td>
<td>158774</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">13</td>
<td>NAME_EDUCATION_TYPE</td>
<td>307511</td>
<td>5</td>
<td>Secondary / secondary special</td>
<td>218391</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">14</td>
<td>NAME_FAMILY_STATUS</td>
<td>307511</td>
<td>6</td>
<td>Married</td>
<td>196432</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">15</td>
<td>NAME_HOUSING_TYPE</td>
<td>307511</td>
<td>6</td>
<td>House / apartment</td>
<td>272868</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">28</td>
<td>OCCUPATION_TYPE</td>
<td>211120</td>
<td>18</td>
<td>Laborers</td>
<td>55186</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">32</td>
<td>WEEKDAY_APPR_PROCESS_START</td>
<td>307511</td>
<td>7</td>
<td>TUESDAY</td>
<td>53901</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">40</td>
<td>ORGANIZATION_TYPE</td>
<td>307511</td>
<td>58</td>
<td>Business Entity Type 3</td>
<td>67992</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">86</td>
<td>FONDKAPREMONT_MODE</td>
<td>97216</td>
<td>4</td>
<td>reg oper account</td>
<td>73830</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">87</td>
<td>HOUSETYPE_MODE</td>
<td>153214</td>
<td>3</td>
<td>block of flats</td>
<td>150503</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">89</td>
<td>WALLSMATERIAL_MODE</td>
<td>151170</td>
<td>7</td>
<td>Panel</td>
<td>66040</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">90</td>
<td>EMERGENCYSTATE_MODE</td>
<td>161756</td>
<td>2</td>
<td>No</td>
<td>159428</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="결측치-확인" class="level4">
<h4 class="anchored" data-anchor-id="결측치-확인">결측치 확인</h4>
<ul>
<li>isnull()을 활용한 결측치 확인</li>
</ul>
<div id="1edd3778" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.isnull().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().sort_values(ascending <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb9-2">percent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (data.isnull().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>data.isnull().count()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>).sort_values(ascending <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb9-3">missing_data  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([total, percent], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keys<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'percent'</span>])</span>
<span id="cb9-4">missing_data[missing_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'percent'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">total</th>
<th data-quarto-table-cell-role="th">percent</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">COMMONAREA_MEDI</td>
<td>214865</td>
<td>69.872297</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">COMMONAREA_AVG</td>
<td>214865</td>
<td>69.872297</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">COMMONAREA_MODE</td>
<td>214865</td>
<td>69.872297</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">NONLIVINGAPARTMENTS_MODE</td>
<td>213514</td>
<td>69.432963</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">NONLIVINGAPARTMENTS_AVG</td>
<td>213514</td>
<td>69.432963</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">NONLIVINGAPARTMENTS_MEDI</td>
<td>213514</td>
<td>69.432963</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">FONDKAPREMONT_MODE</td>
<td>210295</td>
<td>68.386172</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">LIVINGAPARTMENTS_MODE</td>
<td>210199</td>
<td>68.354953</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">LIVINGAPARTMENTS_AVG</td>
<td>210199</td>
<td>68.354953</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">LIVINGAPARTMENTS_MEDI</td>
<td>210199</td>
<td>68.354953</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">FLOORSMIN_AVG</td>
<td>208642</td>
<td>67.848630</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">FLOORSMIN_MODE</td>
<td>208642</td>
<td>67.848630</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">FLOORSMIN_MEDI</td>
<td>208642</td>
<td>67.848630</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">YEARS_BUILD_MEDI</td>
<td>204488</td>
<td>66.497784</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">YEARS_BUILD_MODE</td>
<td>204488</td>
<td>66.497784</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">YEARS_BUILD_AVG</td>
<td>204488</td>
<td>66.497784</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">OWN_CAR_AGE</td>
<td>202929</td>
<td>65.990810</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">LANDAREA_MEDI</td>
<td>182590</td>
<td>59.376738</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">LANDAREA_MODE</td>
<td>182590</td>
<td>59.376738</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">LANDAREA_AVG</td>
<td>182590</td>
<td>59.376738</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">BASEMENTAREA_MEDI</td>
<td>179943</td>
<td>58.515956</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">BASEMENTAREA_AVG</td>
<td>179943</td>
<td>58.515956</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">BASEMENTAREA_MODE</td>
<td>179943</td>
<td>58.515956</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">EXT_SOURCE_1</td>
<td>173378</td>
<td>56.381073</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">NONLIVINGAREA_MODE</td>
<td>169682</td>
<td>55.179164</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">NONLIVINGAREA_AVG</td>
<td>169682</td>
<td>55.179164</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">NONLIVINGAREA_MEDI</td>
<td>169682</td>
<td>55.179164</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ELEVATORS_MEDI</td>
<td>163891</td>
<td>53.295980</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ELEVATORS_AVG</td>
<td>163891</td>
<td>53.295980</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ELEVATORS_MODE</td>
<td>163891</td>
<td>53.295980</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">WALLSMATERIAL_MODE</td>
<td>156341</td>
<td>50.840783</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">APARTMENTS_MEDI</td>
<td>156061</td>
<td>50.749729</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">APARTMENTS_AVG</td>
<td>156061</td>
<td>50.749729</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">APARTMENTS_MODE</td>
<td>156061</td>
<td>50.749729</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENTRANCES_MEDI</td>
<td>154828</td>
<td>50.348768</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ENTRANCES_AVG</td>
<td>154828</td>
<td>50.348768</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">ENTRANCES_MODE</td>
<td>154828</td>
<td>50.348768</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">LIVINGAREA_AVG</td>
<td>154350</td>
<td>50.193326</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">LIVINGAREA_MODE</td>
<td>154350</td>
<td>50.193326</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">LIVINGAREA_MEDI</td>
<td>154350</td>
<td>50.193326</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">HOUSETYPE_MODE</td>
<td>154297</td>
<td>50.176091</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">FLOORSMAX_MODE</td>
<td>153020</td>
<td>49.760822</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">FLOORSMAX_MEDI</td>
<td>153020</td>
<td>49.760822</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">FLOORSMAX_AVG</td>
<td>153020</td>
<td>49.760822</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">YEARS_BEGINEXPLUATATION_MODE</td>
<td>150007</td>
<td>48.781019</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">YEARS_BEGINEXPLUATATION_MEDI</td>
<td>150007</td>
<td>48.781019</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">YEARS_BEGINEXPLUATATION_AVG</td>
<td>150007</td>
<td>48.781019</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">TOTALAREA_MODE</td>
<td>148431</td>
<td>48.268517</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">EMERGENCYSTATE_MODE</td>
<td>145755</td>
<td>47.398304</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">OCCUPATION_TYPE</td>
<td>96391</td>
<td>31.345545</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">EXT_SOURCE_3</td>
<td>60965</td>
<td>19.825307</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_HOUR</td>
<td>41519</td>
<td>13.501631</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_DAY</td>
<td>41519</td>
<td>13.501631</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_WEEK</td>
<td>41519</td>
<td>13.501631</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_MON</td>
<td>41519</td>
<td>13.501631</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_QRT</td>
<td>41519</td>
<td>13.501631</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_YEAR</td>
<td>41519</td>
<td>13.501631</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">NAME_TYPE_SUITE</td>
<td>1292</td>
<td>0.420148</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">OBS_30_CNT_SOCIAL_CIRCLE</td>
<td>1021</td>
<td>0.332021</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DEF_30_CNT_SOCIAL_CIRCLE</td>
<td>1021</td>
<td>0.332021</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">OBS_60_CNT_SOCIAL_CIRCLE</td>
<td>1021</td>
<td>0.332021</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DEF_60_CNT_SOCIAL_CIRCLE</td>
<td>1021</td>
<td>0.332021</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">EXT_SOURCE_2</td>
<td>660</td>
<td>0.214626</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">AMT_GOODS_PRICE</td>
<td>278</td>
<td>0.090403</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">AMT_ANNUITY</td>
<td>12</td>
<td>0.003902</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">CNT_FAM_MEMBERS</td>
<td>2</td>
<td>0.000650</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">DAYS_LAST_PHONE_CHANGE</td>
<td>1</td>
<td>0.000325</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<ul>
<li>전체 데이터에서, 결측이 10% 이상인 컬럼 확인
<ul>
<li>몇 퍼센트의 결측치를 볼지는 개인별 선택</li>
</ul></li>
<li>결측치가 많으므로 단순히 Drop할 것이 아니라 Imputation(대체)이 필요함</li>
</ul>
<div id="9a54072a" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">missing_data[missing_data.percent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>].shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>missing_data.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>0.4672131147540984</code></pre>
</div>
</div>
</section>
<section id="이상치-확인" class="level4">
<h4 class="anchored" data-anchor-id="이상치-확인">이상치 확인</h4>
<ul>
<li><p>결측치와 달리, 이상치는 기준을 정해야 함</p>
<ul>
<li>일반적으로 IQR을 기준으로 많이 작업(모수의 분포를 모르므로)</li>
<li>IQR(Q3-Q1)을 기준으로, <img src="https://latex.codecogs.com/png.latex?Q1%20-%201.5*IQR"> 보다 작거나, <img src="https://latex.codecogs.com/png.latex?Q3%20+%201.5*IQR"> 보다 크면 이상치라고 함</li>
</ul></li>
<li><p>분위수를 구하는 quantile함수를 활용해, Q1, Q3, IQR을 직접 구하는 함수를 구현할 수 있음</p></li>
<li><p>이상치 확인할 때, 결측치 제외하는 것이 중요함</p></li>
<li><p>이상치 확인하기 (결측치 제외되지 않은 사례)</p>
<ul>
<li>이상치 비율이 비정상적으로 큰 것을 볼 수 있음</li>
</ul></li>
</ul>
<div id="353730c9" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> detect_outliers(df):</span>
<span id="cb12-2">  outlier_flags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.copy()</span>
<span id="cb12-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.columns:</span>
<span id="cb12-4">    col_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[column].dropna()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결측치 제외   → 이상치를 구하는데 영향을 끼치므로</span></span>
<span id="cb12-5">    Q1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col_data.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb12-6">    Q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col_data.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>)</span>
<span id="cb12-7">    IQR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Q1</span>
<span id="cb12-8">    lower_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Q1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> IQR</span>
<span id="cb12-9">    upper_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> IQR</span>
<span id="cb12-10">    outlier_flags[column] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[column].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(</span>
<span id="cb12-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> lower_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> upper_bound</span>
<span id="cb12-12">    )</span>
<span id="cb12-13"></span>
<span id="cb12-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> outlier_flags</span>
<span id="cb12-15"></span>
<span id="cb12-16">outliers_total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> detect_outliers(numerical_data).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().sort_values(ascending <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb12-17">outliers_percent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (detect_outliers(numerical_data).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>detect_outliers(numerical_data).count()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>).sort_values(ascending <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb12-18">outliers_data  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([outliers_total, outliers_percent], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keys<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'percent'</span>])</span>
<span id="cb12-19">outliers_data.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">total</th>
<th data-quarto-table-cell-role="th">percent</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">NONLIVINGAPARTMENTS_AVG</td>
<td>229094</td>
<td>74.499449</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">NONLIVINGAPARTMENTS_MEDI</td>
<td>228729</td>
<td>74.380754</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">NONLIVINGAPARTMENTS_MODE</td>
<td>227738</td>
<td>74.058489</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">COMMONAREA_MEDI</td>
<td>222869</td>
<td>72.475131</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">COMMONAREA_AVG</td>
<td>222807</td>
<td>72.454969</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">COMMONAREA_MODE</td>
<td>222803</td>
<td>72.453668</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">LIVINGAPARTMENTS_MEDI</td>
<td>218126</td>
<td>70.932747</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">LIVINGAPARTMENTS_AVG</td>
<td>218080</td>
<td>70.917788</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">LIVINGAPARTMENTS_MODE</td>
<td>217668</td>
<td>70.783809</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">FLOORSMIN_MEDI</td>
<td>208986</td>
<td>67.960496</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<ul>
<li>이상치 확인하기 (결측치 제외된 사례)
<ul>
<li>이상치의 비중이 26, 25%와 같이 높은 편으로, 단순히 제거하여 해결하는 것은 좋지 않음</li>
<li>시각화까지 진행해보고, 이후 방향을 결정</li>
</ul></li>
</ul>
<div id="0d566558" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> detect_outliers_wo_nan(df):</span>
<span id="cb13-2">  outlier_flags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.copy()</span>
<span id="cb13-3">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> column <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.columns:</span>
<span id="cb13-4">    col_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[column].dropna()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결측치 제외</span></span>
<span id="cb13-5">    Q1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col_data.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb13-6">    Q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col_data.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>)</span>
<span id="cb13-7">    IQR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Q1</span>
<span id="cb13-8">    lower_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Q1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> IQR</span>
<span id="cb13-9">    upper_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> IQR</span>
<span id="cb13-10">    outlier_flags[column] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[column].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(</span>
<span id="cb13-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> lower_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> upper_bound <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> pd.notna(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb13-12">    )</span>
<span id="cb13-13"></span>
<span id="cb13-14">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> outlier_flags</span></code></pre></div>
</div>
<div id="0b25b733" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">outliers_total <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> detect_outliers_wo_nan(numerical_data).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().sort_values(ascending <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb14-2">outliers_percent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (detect_outliers_wo_nan(numerical_data).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>detect_outliers_wo_nan(numerical_data).count()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>).sort_values(ascending <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb14-3">outliers_data  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([outliers_total, outliers_percent], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keys<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'percent'</span>])</span>
<span id="cb14-4">outliers_data.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">total</th>
<th data-quarto-table-cell-role="th">percent</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">REGION_RATING_CLIENT</td>
<td>80527</td>
<td>26.186706</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">REGION_RATING_CLIENT_W_CITY</td>
<td>78027</td>
<td>25.373726</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">DAYS_EMPLOYED</td>
<td>72217</td>
<td>23.484363</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">REG_CITY_NOT_WORK_CITY</td>
<td>70867</td>
<td>23.045354</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">FLAG_WORK_PHONE</td>
<td>61308</td>
<td>19.936848</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">FLAG_EMP_PHONE</td>
<td>55386</td>
<td>18.011063</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">LIVE_CITY_NOT_WORK_CITY</td>
<td>55215</td>
<td>17.955455</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_QRT</td>
<td>50575</td>
<td>16.446566</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_MON</td>
<td>43759</td>
<td>14.230060</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DEF_30_CNT_SOCIAL_CIRCLE</td>
<td>35166</td>
<td>11.435688</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="심화1-벡터연산을-통한-최적화-기존-이상치-연산과-비교" class="level4">
<h4 class="anchored" data-anchor-id="심화1-벡터연산을-통한-최적화-기존-이상치-연산과-비교">심화1 : 벡터연산을 통한 최적화 (기존 이상치 연산과 비교)</h4>
<ul>
<li>pandas를 반복문 대신 벡터연산(numpy)으로 빠르게 처리할 수 있음
<ul>
<li>apply함수 : 각 행/열을 독립적으로 처리하는 벡터화 함수</li>
</ul></li>
<li>하단 코드는 벡터연산 적용한 이상치 찾는 함수 vs 기존의 이상치 찾는 함수의 비교</li>
</ul>
<div id="c00e886c" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> detect_outliers_fast(df):</span>
<span id="cb15-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate IQR without NaN values</span></span>
<span id="cb15-3">    Q1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'midpoint'</span>)</span>
<span id="cb15-4">    Q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>, interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'midpoint'</span>)</span>
<span id="cb15-5">    IQR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Q1</span>
<span id="cb15-6">    lower_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Q1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> IQR</span>
<span id="cb15-7">    upper_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> IQR</span>
<span id="cb15-8"></span>
<span id="cb15-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Vectorized outlier detection with NaN handling</span></span>
<span id="cb15-10">    outlier_flags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(</span>
<span id="cb15-11">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> col: <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>col.between(lower_bound[col.name], upper_bound[col.name]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> col.notna()</span>
<span id="cb15-12">    )</span>
<span id="cb15-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> outlier_flags</span></code></pre></div>
</div>
<div id="a87471dd" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb16-2">detect_outliers_wo_nan(numerical_data).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 기존의 (벡터연산 미적용된) 코드</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: total: 13.8 s
Wall time: 14.5 s</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">SK_ID_CURR</th>
<th data-quarto-table-cell-role="th">TARGET</th>
<th data-quarto-table-cell-role="th">CNT_CHILDREN</th>
<th data-quarto-table-cell-role="th">AMT_INCOME_TOTAL</th>
<th data-quarto-table-cell-role="th">AMT_CREDIT</th>
<th data-quarto-table-cell-role="th">AMT_ANNUITY</th>
<th data-quarto-table-cell-role="th">AMT_GOODS_PRICE</th>
<th data-quarto-table-cell-role="th">REGION_POPULATION_RELATIVE</th>
<th data-quarto-table-cell-role="th">DAYS_BIRTH</th>
<th data-quarto-table-cell-role="th">DAYS_EMPLOYED</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_18</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_19</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_20</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_21</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_HOUR</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_DAY</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_WEEK</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_MON</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_QRT</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_YEAR</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>False</td>
<td>True</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>...</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>...</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>...</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>...</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>...</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
</tr>
</tbody>
</table>

<p>5 rows × 106 columns</p>
</div>
</div>
</div>
<div id="56d3a32b" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb18-2">detect_outliers_fast(numerical_data).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 벡터연산 적용한 코드</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: total: 797 ms
Wall time: 867 ms</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="15">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">SK_ID_CURR</th>
<th data-quarto-table-cell-role="th">TARGET</th>
<th data-quarto-table-cell-role="th">CNT_CHILDREN</th>
<th data-quarto-table-cell-role="th">AMT_INCOME_TOTAL</th>
<th data-quarto-table-cell-role="th">AMT_CREDIT</th>
<th data-quarto-table-cell-role="th">AMT_ANNUITY</th>
<th data-quarto-table-cell-role="th">AMT_GOODS_PRICE</th>
<th data-quarto-table-cell-role="th">REGION_POPULATION_RELATIVE</th>
<th data-quarto-table-cell-role="th">DAYS_BIRTH</th>
<th data-quarto-table-cell-role="th">DAYS_EMPLOYED</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_18</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_19</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_20</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_21</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_HOUR</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_DAY</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_WEEK</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_MON</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_QRT</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_YEAR</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>False</td>
<td>True</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>...</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>...</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>...</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>...</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>...</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
<td>False</td>
</tr>
</tbody>
</table>

<p>5 rows × 106 columns</p>
</div>
</div>
</div>
</section>
<section id="심화2-polars" class="level4">
<h4 class="anchored" data-anchor-id="심화2-polars">심화2 : Polars</h4>
<ul>
<li>대용량 데이터 처리에 특화된 Polars
<ul>
<li>pandas와 비슷한 문법, 대부분의 경우 pandas보다 빠른 연산</li>
<li>광범위하게 쓰이진 않지만, 대용량 데이터 처리에는 유용함</li>
</ul></li>
</ul>
<div id="b8a7b96a" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install polars</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Collecting polars
  Downloading polars-1.19.0-cp39-abi3-win_amd64.whl.metadata (15 kB)
Downloading polars-1.19.0-cp39-abi3-win_amd64.whl (32.8 MB)
   ---------------------------------------- 0.0/32.8 MB ? eta -:--:--
   -- ------------------------------------- 2.4/32.8 MB 11.2 MB/s eta 0:00:03
   ----- ---------------------------------- 4.7/32.8 MB 11.4 MB/s eta 0:00:03
   -------- ------------------------------- 7.3/32.8 MB 11.6 MB/s eta 0:00:03
   --------- ------------------------------ 7.9/32.8 MB 9.2 MB/s eta 0:00:03
   ----------- ---------------------------- 9.7/32.8 MB 9.2 MB/s eta 0:00:03
   --------------- ------------------------ 12.3/32.8 MB 9.6 MB/s eta 0:00:03
   ----------------- ---------------------- 14.7/32.8 MB 9.9 MB/s eta 0:00:02
   --------------------- ------------------ 17.3/32.8 MB 10.2 MB/s eta 0:00:02
   ----------------------- ---------------- 19.7/32.8 MB 10.3 MB/s eta 0:00:02
   -------------------------- ------------- 22.0/32.8 MB 10.6 MB/s eta 0:00:02
   ---------------------------- ----------- 23.6/32.8 MB 10.2 MB/s eta 0:00:01
   ------------------------------- -------- 26.2/32.8 MB 10.3 MB/s eta 0:00:01
   ---------------------------------- ----- 28.6/32.8 MB 10.4 MB/s eta 0:00:01
   ------------------------------------- -- 31.2/32.8 MB 10.5 MB/s eta 0:00:01
   ---------------------------------------- 32.8/32.8 MB 10.4 MB/s eta 0:00:00
Installing collected packages: polars
Successfully installed polars-1.19.0</code></pre>
</div>
</div>
<div id="fd3c0800" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Polars 활용한 코드</span></span>
<span id="cb22-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb22-3"></span>
<span id="cb22-4">numerical_data_polars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.from_pandas(numerical_data)</span>
<span id="cb22-5"></span>
<span id="cb22-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> detect_outliers_polars(df):</span>
<span id="cb22-7">    q1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>)</span>
<span id="cb22-8">    q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.quantile(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.75</span>)</span>
<span id="cb22-9">    iqr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> q1</span>
<span id="cb22-10">    lower_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> q1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> iqr</span>
<span id="cb22-11">    upper_bound <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> q3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> iqr</span>
<span id="cb22-12"></span>
<span id="cb22-13">    outlier_flags <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.with_columns(</span>
<span id="cb22-14">        [</span>
<span id="cb22-15">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>((pl.col(col) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> lower_bound[col]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (pl.col(col) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> upper_bound[col])) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 범위 계산</span></span>
<span id="cb22-16">            .fill_null(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결측치 제외   → null을 넣지않고 삭제</span></span>
<span id="cb22-17">            .alias(col) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 기존 열 이름 유지</span></span>
<span id="cb22-18">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.columns</span>
<span id="cb22-19">        ]</span>
<span id="cb22-20">    )</span>
<span id="cb22-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> outlier_flags</span></code></pre></div>
</div>
<div id="89ae4fed" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb23-2">detect_outliers_polars(numerical_data_polars).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: total: 1.02 s
Wall time: 266 ms</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="19">
<div><style>
.dataframe > thead > tr,
.dataframe > tbody > tr {
  text-align: right;
  white-space: pre-wrap;
}
</style>
<small>shape: (5, 106)</small>
<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">SK_ID_CURR</th>
<th data-quarto-table-cell-role="th">TARGET</th>
<th data-quarto-table-cell-role="th">CNT_CHILDREN</th>
<th data-quarto-table-cell-role="th">AMT_INCOME_TOTAL</th>
<th data-quarto-table-cell-role="th">AMT_CREDIT</th>
<th data-quarto-table-cell-role="th">AMT_ANNUITY</th>
<th data-quarto-table-cell-role="th">AMT_GOODS_PRICE</th>
<th data-quarto-table-cell-role="th">REGION_POPULATION_RELATIVE</th>
<th data-quarto-table-cell-role="th">DAYS_BIRTH</th>
<th data-quarto-table-cell-role="th">DAYS_EMPLOYED</th>
<th data-quarto-table-cell-role="th">DAYS_REGISTRATION</th>
<th data-quarto-table-cell-role="th">DAYS_ID_PUBLISH</th>
<th data-quarto-table-cell-role="th">OWN_CAR_AGE</th>
<th data-quarto-table-cell-role="th">FLAG_MOBIL</th>
<th data-quarto-table-cell-role="th">FLAG_EMP_PHONE</th>
<th data-quarto-table-cell-role="th">FLAG_WORK_PHONE</th>
<th data-quarto-table-cell-role="th">FLAG_CONT_MOBILE</th>
<th data-quarto-table-cell-role="th">FLAG_PHONE</th>
<th data-quarto-table-cell-role="th">FLAG_EMAIL</th>
<th data-quarto-table-cell-role="th">CNT_FAM_MEMBERS</th>
<th data-quarto-table-cell-role="th">REGION_RATING_CLIENT</th>
<th data-quarto-table-cell-role="th">REGION_RATING_CLIENT_W_CITY</th>
<th data-quarto-table-cell-role="th">HOUR_APPR_PROCESS_START</th>
<th data-quarto-table-cell-role="th">REG_REGION_NOT_LIVE_REGION</th>
<th data-quarto-table-cell-role="th">REG_REGION_NOT_WORK_REGION</th>
<th data-quarto-table-cell-role="th">LIVE_REGION_NOT_WORK_REGION</th>
<th data-quarto-table-cell-role="th">REG_CITY_NOT_LIVE_CITY</th>
<th data-quarto-table-cell-role="th">REG_CITY_NOT_WORK_CITY</th>
<th data-quarto-table-cell-role="th">LIVE_CITY_NOT_WORK_CITY</th>
<th data-quarto-table-cell-role="th">EXT_SOURCE_1</th>
<th data-quarto-table-cell-role="th">EXT_SOURCE_2</th>
<th data-quarto-table-cell-role="th">EXT_SOURCE_3</th>
<th data-quarto-table-cell-role="th">APARTMENTS_AVG</th>
<th data-quarto-table-cell-role="th">BASEMENTAREA_AVG</th>
<th data-quarto-table-cell-role="th">YEARS_BEGINEXPLUATATION_AVG</th>
<th data-quarto-table-cell-role="th">YEARS_BUILD_AVG</th>
<th data-quarto-table-cell-role="th">COMMONAREA_AVG</th>
<th data-quarto-table-cell-role="th">…</th>
<th data-quarto-table-cell-role="th">LANDAREA_MEDI</th>
<th data-quarto-table-cell-role="th">LIVINGAPARTMENTS_MEDI</th>
<th data-quarto-table-cell-role="th">LIVINGAREA_MEDI</th>
<th data-quarto-table-cell-role="th">NONLIVINGAPARTMENTS_MEDI</th>
<th data-quarto-table-cell-role="th">NONLIVINGAREA_MEDI</th>
<th data-quarto-table-cell-role="th">TOTALAREA_MODE</th>
<th data-quarto-table-cell-role="th">OBS_30_CNT_SOCIAL_CIRCLE</th>
<th data-quarto-table-cell-role="th">DEF_30_CNT_SOCIAL_CIRCLE</th>
<th data-quarto-table-cell-role="th">OBS_60_CNT_SOCIAL_CIRCLE</th>
<th data-quarto-table-cell-role="th">DEF_60_CNT_SOCIAL_CIRCLE</th>
<th data-quarto-table-cell-role="th">DAYS_LAST_PHONE_CHANGE</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_2</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_3</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_4</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_5</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_6</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_7</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_8</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_9</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_10</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_11</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_12</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_13</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_14</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_15</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_16</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_17</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_18</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_19</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_20</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_21</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_HOUR</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_DAY</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_WEEK</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_MON</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_QRT</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_YEAR</th>
</tr>
<tr class="even">
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>…</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
<th>bool</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>false</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>…</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr class="even">
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>…</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr class="odd">
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>…</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
<tr class="even">
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>…</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
</tr>
<tr class="odd">
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>…</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>true</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
<td>false</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</section>
<section id="y의-불균형도-확인" class="level4">
<h4 class="anchored" data-anchor-id="y의-불균형도-확인">y의 불균형도 확인</h4>
<ul>
<li>pandas의 value_counts : SQL의 group by + count</li>
</ul>
<div id="cad53d0c" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>].value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>TARGET
0    282686
1     24825
Name: count, dtype: int64</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="실습1-확인한-통계량을-가지고-시각화-고민하기" class="level2">
<h2 class="anchored" data-anchor-id="실습1-확인한-통계량을-가지고-시각화-고민하기">실습1 : 확인한 통계량을 가지고 시각화 고민하기</h2>
<ul>
<li>지금까지 본 수치를 기반으로 각 변수별로 어떤 시각화가 필요할지 고민해봅시다.
<ul>
<li>범주형 변수(describe기준 unique값 있는 경우)에 대해 barplot</li>
<li>대부분 변수에 대해 Histogram으로 분포 확인</li>
<li>결측치(Null)을 제외한 후 Box plot으로 이상치 확인</li>
<li>Heatmap을 활용한 상관계수 확인</li>
</ul></li>
</ul>
<div id="30145d7c" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">data.describe(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">SK_ID_CURR</th>
<th data-quarto-table-cell-role="th">TARGET</th>
<th data-quarto-table-cell-role="th">NAME_CONTRACT_TYPE</th>
<th data-quarto-table-cell-role="th">CODE_GENDER</th>
<th data-quarto-table-cell-role="th">FLAG_OWN_CAR</th>
<th data-quarto-table-cell-role="th">FLAG_OWN_REALTY</th>
<th data-quarto-table-cell-role="th">CNT_CHILDREN</th>
<th data-quarto-table-cell-role="th">AMT_INCOME_TOTAL</th>
<th data-quarto-table-cell-role="th">AMT_CREDIT</th>
<th data-quarto-table-cell-role="th">AMT_ANNUITY</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_18</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_19</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_20</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_21</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_HOUR</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_DAY</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_WEEK</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_MON</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_QRT</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_YEAR</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">count</td>
<td>307511.000000</td>
<td>307511.000000</td>
<td>307511</td>
<td>307511</td>
<td>307511</td>
<td>307511</td>
<td>307511.000000</td>
<td>3.075110e+05</td>
<td>3.075110e+05</td>
<td>307499.000000</td>
<td>...</td>
<td>307511.000000</td>
<td>307511.000000</td>
<td>307511.000000</td>
<td>307511.000000</td>
<td>265992.000000</td>
<td>265992.000000</td>
<td>265992.000000</td>
<td>265992.000000</td>
<td>265992.000000</td>
<td>265992.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">unique</td>
<td>NaN</td>
<td>NaN</td>
<td>2</td>
<td>3</td>
<td>2</td>
<td>2</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>...</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">top</td>
<td>NaN</td>
<td>NaN</td>
<td>Cash loans</td>
<td>F</td>
<td>N</td>
<td>Y</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>...</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">freq</td>
<td>NaN</td>
<td>NaN</td>
<td>278232</td>
<td>202448</td>
<td>202924</td>
<td>213312</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>...</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">mean</td>
<td>278180.518577</td>
<td>0.080729</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.417052</td>
<td>1.687979e+05</td>
<td>5.990260e+05</td>
<td>27108.573909</td>
<td>...</td>
<td>0.008130</td>
<td>0.000595</td>
<td>0.000507</td>
<td>0.000335</td>
<td>0.006402</td>
<td>0.007000</td>
<td>0.034362</td>
<td>0.267395</td>
<td>0.265474</td>
<td>1.899974</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">std</td>
<td>102790.175348</td>
<td>0.272419</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.722121</td>
<td>2.371231e+05</td>
<td>4.024908e+05</td>
<td>14493.737315</td>
<td>...</td>
<td>0.089798</td>
<td>0.024387</td>
<td>0.022518</td>
<td>0.018299</td>
<td>0.083849</td>
<td>0.110757</td>
<td>0.204685</td>
<td>0.916002</td>
<td>0.794056</td>
<td>1.869295</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">min</td>
<td>100002.000000</td>
<td>0.000000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000000</td>
<td>2.565000e+04</td>
<td>4.500000e+04</td>
<td>1615.500000</td>
<td>...</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">25%</td>
<td>189145.500000</td>
<td>0.000000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000000</td>
<td>1.125000e+05</td>
<td>2.700000e+05</td>
<td>16524.000000</td>
<td>...</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">50%</td>
<td>278202.000000</td>
<td>0.000000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>0.000000</td>
<td>1.471500e+05</td>
<td>5.135310e+05</td>
<td>24903.000000</td>
<td>...</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>1.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">75%</td>
<td>367142.500000</td>
<td>0.000000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>1.000000</td>
<td>2.025000e+05</td>
<td>8.086500e+05</td>
<td>34596.000000</td>
<td>...</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>3.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">max</td>
<td>456255.000000</td>
<td>1.000000</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>19.000000</td>
<td>1.170000e+08</td>
<td>4.050000e+06</td>
<td>258025.500000</td>
<td>...</td>
<td>1.000000</td>
<td>1.000000</td>
<td>1.000000</td>
<td>1.000000</td>
<td>4.000000</td>
<td>9.000000</td>
<td>8.000000</td>
<td>27.000000</td>
<td>261.000000</td>
<td>25.000000</td>
</tr>
</tbody>
</table>

<p>11 rows × 122 columns</p>
</div>
</div>
</div>
</section>
<section id="시각화" class="level2">
<h2 class="anchored" data-anchor-id="시각화">시각화</h2>
<ul>
<li>일단 기본적인 histogram, barplot을 그려보기
<ul>
<li>수치형 변수는 histogram, 범주형 변수는 bar plot</li>
<li>select_dtypes 활용</li>
</ul></li>
</ul>
<section id="histogram" class="level3">
<h3 class="anchored" data-anchor-id="histogram">Histogram</h3>
<ul>
<li>수치형데이터에 대해 histogram 그리기</li>
<li>Matplotlib와 Seaborn으로 나누어 실습</li>
</ul>
<div id="aeecce1e" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">numeric_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.select_dtypes(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'float64'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'int64'</span>])</span>
<span id="cb28-2">numeric_data.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">SK_ID_CURR</th>
<th data-quarto-table-cell-role="th">TARGET</th>
<th data-quarto-table-cell-role="th">CNT_CHILDREN</th>
<th data-quarto-table-cell-role="th">AMT_INCOME_TOTAL</th>
<th data-quarto-table-cell-role="th">AMT_CREDIT</th>
<th data-quarto-table-cell-role="th">AMT_ANNUITY</th>
<th data-quarto-table-cell-role="th">AMT_GOODS_PRICE</th>
<th data-quarto-table-cell-role="th">REGION_POPULATION_RELATIVE</th>
<th data-quarto-table-cell-role="th">DAYS_BIRTH</th>
<th data-quarto-table-cell-role="th">DAYS_EMPLOYED</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_18</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_19</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_20</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_21</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_HOUR</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_DAY</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_WEEK</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_MON</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_QRT</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_YEAR</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>100002</td>
<td>1</td>
<td>0</td>
<td>202500.0</td>
<td>406597.5</td>
<td>24700.5</td>
<td>351000.0</td>
<td>0.018801</td>
<td>-9461</td>
<td>-637</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>100003</td>
<td>0</td>
<td>0</td>
<td>270000.0</td>
<td>1293502.5</td>
<td>35698.5</td>
<td>1129500.0</td>
<td>0.003541</td>
<td>-16765</td>
<td>-1188</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>100004</td>
<td>0</td>
<td>0</td>
<td>67500.0</td>
<td>135000.0</td>
<td>6750.0</td>
<td>135000.0</td>
<td>0.010032</td>
<td>-19046</td>
<td>-225</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
</tr>
</tbody>
</table>

<p>3 rows × 106 columns</p>
</div>
</div>
</div>
<div id="7104f6ec" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Matplotlib와 Seaborn 그래프</span></span>
<span id="cb29-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb29-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb29-4"></span>
<span id="cb29-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터 준비</span></span>
<span id="cb29-6">var_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb29-7">var_nm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numeric_data.columns[var_idx]</span>
<span id="cb29-8"></span>
<span id="cb29-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 서브플롯 생성</span></span>
<span id="cb29-10">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), sharey<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb29-11"></span>
<span id="cb29-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 코드 1: Matplotlib Graph (좌측)</span></span>
<span id="cb29-13">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].hist(numeric_data[var_nm], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>)</span>
<span id="cb29-14">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Histogram of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>var_nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb29-15">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Values'</span>)</span>
<span id="cb29-16">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb29-17"></span>
<span id="cb29-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 코드 2: Seaborn Graph (우측)</span></span>
<span id="cb29-19">sns.histplot(data[var_nm], kde<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb29-20">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Histogram of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>var_nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb29-21">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Values'</span>)</span>
<span id="cb29-22">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb29-23"></span>
<span id="cb29-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 그래프 간격 조정</span></span>
<span id="cb29-25">plt.tight_layout()</span>
<span id="cb29-26">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250105/index_files/figure-html/cell-22-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>0~1 사이에 분포하는 컬럼이 많음 → 많은 컬럼이 정규화 되어있음</li>
<li>앞서 왜도가 높았던 컬럼의 확인 결과
<ul>
<li>AMT_INCOME_TOTAL(391.559654) : 식별이 어려워 bin값 조정필요</li>
<li>YEARS_BEGINEXPLUATATION_MEDI(-15.573124) : 왜도와 달리 값이 치우치지 않아보임</li>
<li>FLAG_CONT_MOBILE(-23.081172) : 왜도와 달리 값이 치우치지 않아보임</li>
<li>FLAG_MOBIL(-554.536744) : 왜도와 달리 값이 치우치지 않아보임</li>
</ul></li>
</ul>
<div id="db74b1f0" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb30-2"></span>
<span id="cb30-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 설정: 가로 그래프 개수</span></span>
<span id="cb30-4">cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb30-5">num_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(numeric_data.columns)</span>
<span id="cb30-6">rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.ceil(num_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cols)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 필요한 행(row) 수 계산</span></span>
<span id="cb30-7"></span>
<span id="cb30-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 서브플롯 생성</span></span>
<span id="cb30-9">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(rows, cols, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 figure 크기 조정</span></span>
<span id="cb30-10">axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes.flatten()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2D 배열을 1D로 변환하여 인덱싱 편리하게</span></span>
<span id="cb30-11"></span>
<span id="cb30-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그래프 그리기</span></span>
<span id="cb30-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> var_idx, var_nm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(numeric_data.columns):</span>
<span id="cb30-14">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[var_idx]</span>
<span id="cb30-15">    ax.hist(numeric_data.iloc[:, var_idx], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'skyblue'</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>)</span>
<span id="cb30-16">    ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Histogram of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>var_nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb30-17">    ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Values'</span>)</span>
<span id="cb30-18">    ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb30-19"></span>
<span id="cb30-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 빈 서브플롯 숨기기</span></span>
<span id="cb30-21"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_vars, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(axes)):</span>
<span id="cb30-22">    axes[i].axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb30-23"></span>
<span id="cb30-24">plt.tight_layout()</span>
<span id="cb30-25">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250105/index_files/figure-html/cell-23-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="실습2-시각화-실습" class="level3">
<h3 class="anchored" data-anchor-id="실습2-시각화-실습">실습2 : 시각화 실습</h3>
<ul>
<li>AMT_INCOME_TOTAL을 다시 시각화해봅시다. bins 변수를 적절히 조정해서 잘 보이게 해봅시다.</li>
</ul>
<div id="de43fef2" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">var_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb31-2"></span>
<span id="cb31-3">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb31-4">plt.hist(numeric_data.iloc[:,var_idx], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 컬럼명 기준으로 인덱싱시 발생할 수 있는 오류 예방.</span></span>
<span id="cb31-5">plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Histogram of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>var_nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb31-6">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Values'</span>)</span>
<span id="cb31-7">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Frequency'</span>)</span>
<span id="cb31-8">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250105/index_files/figure-html/cell-24-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="barplot" class="level3">
<h3 class="anchored" data-anchor-id="barplot">Barplot</h3>
<ul>
<li><code>plt.bar</code> or <code>sns.barplot</code>으로 시각화</li>
</ul>
<div id="35307765" class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">categorical_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.select_dtypes(include<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'object'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'category'</span>])</span>
<span id="cb32-2">categorical_data.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="41">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">NAME_CONTRACT_TYPE</th>
<th data-quarto-table-cell-role="th">CODE_GENDER</th>
<th data-quarto-table-cell-role="th">FLAG_OWN_CAR</th>
<th data-quarto-table-cell-role="th">FLAG_OWN_REALTY</th>
<th data-quarto-table-cell-role="th">NAME_TYPE_SUITE</th>
<th data-quarto-table-cell-role="th">NAME_INCOME_TYPE</th>
<th data-quarto-table-cell-role="th">NAME_EDUCATION_TYPE</th>
<th data-quarto-table-cell-role="th">NAME_FAMILY_STATUS</th>
<th data-quarto-table-cell-role="th">NAME_HOUSING_TYPE</th>
<th data-quarto-table-cell-role="th">OCCUPATION_TYPE</th>
<th data-quarto-table-cell-role="th">WEEKDAY_APPR_PROCESS_START</th>
<th data-quarto-table-cell-role="th">ORGANIZATION_TYPE</th>
<th data-quarto-table-cell-role="th">FONDKAPREMONT_MODE</th>
<th data-quarto-table-cell-role="th">HOUSETYPE_MODE</th>
<th data-quarto-table-cell-role="th">WALLSMATERIAL_MODE</th>
<th data-quarto-table-cell-role="th">EMERGENCYSTATE_MODE</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Cash loans</td>
<td>M</td>
<td>N</td>
<td>Y</td>
<td>Unaccompanied</td>
<td>Working</td>
<td>Secondary / secondary special</td>
<td>Single / not married</td>
<td>House / apartment</td>
<td>Laborers</td>
<td>WEDNESDAY</td>
<td>Business Entity Type 3</td>
<td>reg oper account</td>
<td>block of flats</td>
<td>Stone, brick</td>
<td>No</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Cash loans</td>
<td>F</td>
<td>N</td>
<td>N</td>
<td>Family</td>
<td>State servant</td>
<td>Higher education</td>
<td>Married</td>
<td>House / apartment</td>
<td>Core staff</td>
<td>MONDAY</td>
<td>School</td>
<td>reg oper account</td>
<td>block of flats</td>
<td>Block</td>
<td>No</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Revolving loans</td>
<td>M</td>
<td>Y</td>
<td>Y</td>
<td>Unaccompanied</td>
<td>Working</td>
<td>Secondary / secondary special</td>
<td>Single / not married</td>
<td>House / apartment</td>
<td>Laborers</td>
<td>MONDAY</td>
<td>Government</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Cash loans</td>
<td>F</td>
<td>N</td>
<td>Y</td>
<td>Unaccompanied</td>
<td>Working</td>
<td>Secondary / secondary special</td>
<td>Civil marriage</td>
<td>House / apartment</td>
<td>Laborers</td>
<td>WEDNESDAY</td>
<td>Business Entity Type 3</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Cash loans</td>
<td>M</td>
<td>N</td>
<td>Y</td>
<td>Unaccompanied</td>
<td>Working</td>
<td>Secondary / secondary special</td>
<td>Single / not married</td>
<td>House / apartment</td>
<td>Core staff</td>
<td>THURSDAY</td>
<td>Religion</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<ul>
<li>하단의 범주형변수 시각화를 통해 알 수 있는 점
<ul>
<li>대체로 불균형한 분포를 보임</li>
<li>대부분 unique값이 많지 않아, one-hot인코딩에 크게 문제가 없어보임</li>
<li>Education_type은 순위가 있는 변수이므로 인코딩할 때 유의</li>
</ul></li>
</ul>
<div id="78d9343d" class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 설정: 가로 그래프 개수</span></span>
<span id="cb33-2">cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb33-3">num_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(categorical_data.columns)</span>
<span id="cb33-4">rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.ceil(num_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cols)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 필요한 행(row) 수 계산</span></span>
<span id="cb33-5"></span>
<span id="cb33-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 서브플롯 생성</span></span>
<span id="cb33-7">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(rows, cols, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 figure 크기 조정</span></span>
<span id="cb33-8">axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes.flatten()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2D 배열을 1D로 변환하여 인덱싱 편리하게</span></span>
<span id="cb33-9"></span>
<span id="cb33-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그래프 그리기</span></span>
<span id="cb33-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> var_idx, var_nm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(categorical_data.columns):</span>
<span id="cb33-12">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[var_idx]</span>
<span id="cb33-13">    value_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> categorical_data[var_nm].value_counts().reset_index()</span>
<span id="cb33-14">    value_counts.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [var_nm, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>]</span>
<span id="cb33-15">    sns.barplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>var_nm, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>value_counts, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb33-16">    ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Bar Plot of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>var_nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb33-17">    ax.set_xlabel(var_nm)</span>
<span id="cb33-18">    ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb33-19">    ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb33-20"></span>
<span id="cb33-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 빈 서브플롯 숨기기</span></span>
<span id="cb33-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_vars, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(axes)):</span>
<span id="cb33-23">    axes[i].axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb33-24"></span>
<span id="cb33-25">plt.tight_layout()</span>
<span id="cb33-26">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250105/index_files/figure-html/cell-26-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<ul>
<li>Target(y)값 기준으로 나누어서(Stack) 그릴 수도 있음</li>
</ul>
<div id="f40b3b35" class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># TARGET 데이터 합치기</span></span>
<span id="cb34-2">combined_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> categorical_data.copy()</span>
<span id="cb34-3">combined_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 동일한 인덱스를 기준으로 TARGET 추가</span></span>
<span id="cb34-4"></span>
<span id="cb34-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 설정: 가로 그래프 개수</span></span>
<span id="cb34-6">cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb34-7">num_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(categorical_data.columns)</span>
<span id="cb34-8">rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.ceil(num_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cols)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 필요한 행(row) 수 계산</span></span>
<span id="cb34-9"></span>
<span id="cb34-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 서브플롯 생성</span></span>
<span id="cb34-11">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(rows, cols, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 figure 크기 조정</span></span>
<span id="cb34-12">axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes.flatten()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2D 배열을 1D로 변환하여 인덱싱 편리하게</span></span>
<span id="cb34-13"></span>
<span id="cb34-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그래프 그리기</span></span>
<span id="cb34-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> var_idx, var_nm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(categorical_data.columns):</span>
<span id="cb34-16">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[var_idx]</span>
<span id="cb34-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터 그룹화 및 카운트 계산</span></span>
<span id="cb34-18">    stacked_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combined_data.groupby([var_nm, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>]).size().reset_index(name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb34-19">    sns.barplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>var_nm, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>stacked_data, dodge<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb34-20">    ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Stacked Bar Plot of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>var_nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> by TARGET'</span>)</span>
<span id="cb34-21">    ax.set_xlabel(var_nm)</span>
<span id="cb34-22">    ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Count'</span>)</span>
<span id="cb34-23">    ax.tick_params(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb34-24">    ax.legend(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'upper right'</span>)</span>
<span id="cb34-25"></span>
<span id="cb34-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 빈 서브플롯 숨기기</span></span>
<span id="cb34-27"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_vars, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(axes)):</span>
<span id="cb34-28">    axes[i].axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb34-29"></span>
<span id="cb34-30">plt.tight_layout()</span>
<span id="cb34-31">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250105/index_files/figure-html/cell-27-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="실습3" class="level3">
<h3 class="anchored" data-anchor-id="실습3">실습3</h3>
<ul>
<li>y도 시각화 해봅시다.</li>
</ul>
<div id="43a6c3a6" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">sns.countplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;Axes: xlabel='TARGET', ylabel='count'&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250105/index_files/figure-html/cell-28-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="boxplot" class="level3">
<h3 class="anchored" data-anchor-id="boxplot">Boxplot</h3>
<ul>
<li><code>sns.boxplot</code> or <code>plt.boxplot</code>로 시각화 가능</li>
<li>이상치에 대해 시각화 (10%가 넘는 경우 시각화 해보기)</li>
<li>아래 boxplot 시각화를 기준으로
<ul>
<li>0이나 1이 너무 많아, 일반적인 boxplot형태는 아님</li>
<li>DAYS_EMPLOYED는 음의 값이 존재</li>
<li><strong>Drop이 아닌 변환으로 진행</strong></li>
</ul></li>
</ul>
<div id="de8b2ee4" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb37-2"></span>
<span id="cb37-3">outliers_over_10 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outliers_data[outliers_data.percent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb37-4"></span>
<span id="cb37-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 설정: 가로 그래프 개수</span></span>
<span id="cb37-6">cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb37-7">num_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(outliers_over_10.index)</span>
<span id="cb37-8">rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> math.ceil(num_vars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cols)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 필요한 행(row) 수 계산</span></span>
<span id="cb37-9"></span>
<span id="cb37-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 서브플롯 생성</span></span>
<span id="cb37-11">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(rows, cols, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 figure 크기 조정</span></span>
<span id="cb37-12">axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes.flatten()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2D 배열을 1D로 변환하여 인덱싱 편리하게</span></span>
<span id="cb37-13"></span>
<span id="cb37-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그래프 그리기</span></span>
<span id="cb37-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> var_idx, var_nm <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(outliers_over_10.index):</span>
<span id="cb37-16">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> axes[var_idx]</span>
<span id="cb37-17">    sns.boxplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data[var_nm], ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lightblue'</span>)</span>
<span id="cb37-18">    ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Box Plot of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>var_nm<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb37-19">    ax.set_xlabel(var_nm)</span>
<span id="cb37-20"></span>
<span id="cb37-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 빈 서브플롯 숨기기</span></span>
<span id="cb37-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_vars, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(axes)):</span>
<span id="cb37-23">    axes[i].axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb37-24"></span>
<span id="cb37-25">plt.tight_layout()</span>
<span id="cb37-26">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250105/index_files/figure-html/cell-29-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="lineplot" class="level3">
<h3 class="anchored" data-anchor-id="lineplot">lineplot</h3>
<ul>
<li>사용중인 데이터가 시계열 데이터가 아니므로, 임의의 데이터로 시각화</li>
</ul>
<div id="17fce40d" class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate random time series data</span></span>
<span id="cb38-2">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb38-3">time_series_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb38-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Date'</span>: pd.date_range(start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-01-01'</span>, periods<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'D'</span>),</span>
<span id="cb38-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>: np.cumsum(np.random.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cumulative sum of random values</span></span>
<span id="cb38-6">})</span>
<span id="cb38-7"></span>
<span id="cb38-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 서브플롯 생성</span></span>
<span id="cb38-9">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), sharey<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb38-10"></span>
<span id="cb38-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 코드 1: Matplotlib</span></span>
<span id="cb38-12">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].plot(time_series_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Date'</span>], time_series_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>)</span>
<span id="cb38-13">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Series Lineplot (Matplotlib)'</span>)</span>
<span id="cb38-14">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Date'</span>)</span>
<span id="cb38-15">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>)</span>
<span id="cb38-16">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].legend()</span>
<span id="cb38-17">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb38-18"></span>
<span id="cb38-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 코드 2: Seaborn</span></span>
<span id="cb38-20">sns.lineplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Date'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Value'</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>time_series_data, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>, ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb38-21">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Time Series Lineplot (Seaborn)'</span>)</span>
<span id="cb38-22">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Date'</span>)</span>
<span id="cb38-23">axes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb38-24"></span>
<span id="cb38-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 그래프 간격 조정</span></span>
<span id="cb38-26">plt.tight_layout()</span>
<span id="cb38-27">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250105/index_files/figure-html/cell-30-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="heatmap" class="level3">
<h3 class="anchored" data-anchor-id="heatmap">Heatmap</h3>
<ul>
<li>y변수와의 상관계수를 시각화, 수치형&amp;수치형 변수일 때 사용</li>
<li>seaborn만 가능(matplotlib불가)</li>
<li>사용중인 데이터의 y가 binary이므로, 임의 데이터로 시각화</li>
</ul>
<div id="ea98b5ff" class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb39-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb39-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb39-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb39-5"></span>
<span id="cb39-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a random example dataset</span></span>
<span id="cb39-7">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb39-8">example_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(</span>
<span id="cb39-9">    np.random.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb39-10">    columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Feature_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)]</span>
<span id="cb39-11">)</span>
<span id="cb39-12"></span>
<span id="cb39-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the correlation matrix</span></span>
<span id="cb39-14">correlation_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> example_data.corr()</span>
<span id="cb39-15"></span>
<span id="cb39-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the heatmap using seaborn</span></span>
<span id="cb39-17">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb39-18">sns.heatmap(correlation_matrix, annot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, fmt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.2f'</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'coolwarm'</span>, cbar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb39-19">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Correlation Heatmap'</span>)</span>
<span id="cb39-20">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250105/index_files/figure-html/cell-31-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
</section>
<section id="실습4-시각화-결과를-바탕으로-전처리-고민하기" class="level2">
<h2 class="anchored" data-anchor-id="실습4-시각화-결과를-바탕으로-전처리-고민하기">실습4 : 시각화 결과를 바탕으로, 전처리 고민하기</h2>
<ul>
<li>지금까지의 시각화 결과를 바탕으로 변수별로 어떤 전처리가 필요할지, 전처리 계획을 세워봅시다.
<ul>
<li>많은 컬럼이 정규화되어있음</li>
<li>왜도가 높았던 변수가 있었지만, 시각화해보니 값이 치우치지는 않았음</li>
<li>이상치 데이터가 많은 편으로, 단순히 제거하는 것은 옳지 않음</li>
<li>순위가 있는 Education_type은 인코딩할 때 주의(순위있는 변수)</li>
<li>unique값이 많지 않은 경우는 원핫인코딩도 고려</li>
</ul></li>
</ul>
</section>
<section id="전처리" class="level2">
<h2 class="anchored" data-anchor-id="전처리">전처리</h2>
<section id="이상값-결측값-처리" class="level3">
<h3 class="anchored" data-anchor-id="이상값-결측값-처리">이상값, 결측값 처리</h3>
<ul>
<li>Drop 또는 변환을 통해 처리
<ul>
<li>현재 사용중인 데이터는 Drop보다는 변환이 적절</li>
<li>pandas fillna()를 활용</li>
</ul></li>
<li>정규화 여부로 변수 나눠보기
<ul>
<li>정규화 여부에 따라 채워넣을 값이 달라지기 때문</li>
</ul></li>
</ul>
<div id="05c496a5" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결측치가 있는 컬럼 : 결측 데이터 비율 0% 초과</span></span>
<span id="cb40-2">missing_data_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> missing_data[missing_data.percent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].index.tolist()</span>
<span id="cb40-3">missing_data_cols</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>['COMMONAREA_MEDI',
 'COMMONAREA_AVG',
 'COMMONAREA_MODE',
 'NONLIVINGAPARTMENTS_MODE',
 'NONLIVINGAPARTMENTS_AVG',
 'NONLIVINGAPARTMENTS_MEDI',
 'FONDKAPREMONT_MODE',
 'LIVINGAPARTMENTS_MODE',
 'LIVINGAPARTMENTS_AVG',
 'LIVINGAPARTMENTS_MEDI',
 'FLOORSMIN_AVG',
 'FLOORSMIN_MODE',
 'FLOORSMIN_MEDI',
 'YEARS_BUILD_MEDI',
 'YEARS_BUILD_MODE',
 'YEARS_BUILD_AVG',
 'OWN_CAR_AGE',
 'LANDAREA_MEDI',
 'LANDAREA_MODE',
 'LANDAREA_AVG',
 'BASEMENTAREA_MEDI',
 'BASEMENTAREA_AVG',
 'BASEMENTAREA_MODE',
 'EXT_SOURCE_1',
 'NONLIVINGAREA_MODE',
 'NONLIVINGAREA_AVG',
 'NONLIVINGAREA_MEDI',
 'ELEVATORS_MEDI',
 'ELEVATORS_AVG',
 'ELEVATORS_MODE',
 'WALLSMATERIAL_MODE',
 'APARTMENTS_MEDI',
 'APARTMENTS_AVG',
 'APARTMENTS_MODE',
 'ENTRANCES_MEDI',
 'ENTRANCES_AVG',
 'ENTRANCES_MODE',
 'LIVINGAREA_AVG',
 'LIVINGAREA_MODE',
 'LIVINGAREA_MEDI',
 'HOUSETYPE_MODE',
 'FLOORSMAX_MODE',
 'FLOORSMAX_MEDI',
 'FLOORSMAX_AVG',
 'YEARS_BEGINEXPLUATATION_MODE',
 'YEARS_BEGINEXPLUATATION_MEDI',
 'YEARS_BEGINEXPLUATATION_AVG',
 'TOTALAREA_MODE',
 'EMERGENCYSTATE_MODE',
 'OCCUPATION_TYPE',
 'EXT_SOURCE_3',
 'AMT_REQ_CREDIT_BUREAU_HOUR',
 'AMT_REQ_CREDIT_BUREAU_DAY',
 'AMT_REQ_CREDIT_BUREAU_WEEK',
 'AMT_REQ_CREDIT_BUREAU_MON',
 'AMT_REQ_CREDIT_BUREAU_QRT',
 'AMT_REQ_CREDIT_BUREAU_YEAR',
 'NAME_TYPE_SUITE',
 'OBS_30_CNT_SOCIAL_CIRCLE',
 'DEF_30_CNT_SOCIAL_CIRCLE',
 'OBS_60_CNT_SOCIAL_CIRCLE',
 'DEF_60_CNT_SOCIAL_CIRCLE',
 'EXT_SOURCE_2',
 'AMT_GOODS_PRICE',
 'AMT_ANNUITY',
 'CNT_FAM_MEMBERS',
 'DAYS_LAST_PHONE_CHANGE']</code></pre>
</div>
</div>
<div id="b281671a" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 최소 0 /최대 1인 값을 찾는 mask (정규화 되어있는)</span></span>
<span id="cb42-2">min_max_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (numeric_data.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (numeric_data.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb42-3"></span>
<span id="cb42-4">df_min_max_0_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numeric_data.loc[:, min_max_mask]</span>
<span id="cb42-5">df_min_max_0_1.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">TARGET</th>
<th data-quarto-table-cell-role="th">FLAG_MOBIL</th>
<th data-quarto-table-cell-role="th">FLAG_EMP_PHONE</th>
<th data-quarto-table-cell-role="th">FLAG_WORK_PHONE</th>
<th data-quarto-table-cell-role="th">FLAG_CONT_MOBILE</th>
<th data-quarto-table-cell-role="th">FLAG_PHONE</th>
<th data-quarto-table-cell-role="th">FLAG_EMAIL</th>
<th data-quarto-table-cell-role="th">REG_REGION_NOT_LIVE_REGION</th>
<th data-quarto-table-cell-role="th">REG_REGION_NOT_WORK_REGION</th>
<th data-quarto-table-cell-role="th">LIVE_REGION_NOT_WORK_REGION</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_12</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_13</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_14</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_15</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_16</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_17</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_18</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_19</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_20</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_21</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>

<p>5 rows × 76 columns</p>
</div>
</div>
</div>
<div id="866a43b6" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">df_min_max_0_1.columns</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>Index(['TARGET', 'FLAG_MOBIL', 'FLAG_EMP_PHONE', 'FLAG_WORK_PHONE',
       'FLAG_CONT_MOBILE', 'FLAG_PHONE', 'FLAG_EMAIL',
       'REG_REGION_NOT_LIVE_REGION', 'REG_REGION_NOT_WORK_REGION',
       'LIVE_REGION_NOT_WORK_REGION', 'REG_CITY_NOT_LIVE_CITY',
       'REG_CITY_NOT_WORK_CITY', 'LIVE_CITY_NOT_WORK_CITY', 'APARTMENTS_AVG',
       'BASEMENTAREA_AVG', 'YEARS_BEGINEXPLUATATION_AVG', 'YEARS_BUILD_AVG',
       'COMMONAREA_AVG', 'ELEVATORS_AVG', 'ENTRANCES_AVG', 'FLOORSMAX_AVG',
       'FLOORSMIN_AVG', 'LANDAREA_AVG', 'LIVINGAPARTMENTS_AVG',
       'LIVINGAREA_AVG', 'NONLIVINGAPARTMENTS_AVG', 'NONLIVINGAREA_AVG',
       'APARTMENTS_MODE', 'BASEMENTAREA_MODE', 'YEARS_BEGINEXPLUATATION_MODE',
       'YEARS_BUILD_MODE', 'COMMONAREA_MODE', 'ELEVATORS_MODE',
       'ENTRANCES_MODE', 'FLOORSMAX_MODE', 'FLOORSMIN_MODE', 'LANDAREA_MODE',
       'LIVINGAPARTMENTS_MODE', 'LIVINGAREA_MODE', 'NONLIVINGAPARTMENTS_MODE',
       'NONLIVINGAREA_MODE', 'APARTMENTS_MEDI', 'BASEMENTAREA_MEDI',
       'YEARS_BEGINEXPLUATATION_MEDI', 'YEARS_BUILD_MEDI', 'COMMONAREA_MEDI',
       'ELEVATORS_MEDI', 'ENTRANCES_MEDI', 'FLOORSMAX_MEDI', 'FLOORSMIN_MEDI',
       'LANDAREA_MEDI', 'LIVINGAPARTMENTS_MEDI', 'LIVINGAREA_MEDI',
       'NONLIVINGAPARTMENTS_MEDI', 'NONLIVINGAREA_MEDI', 'TOTALAREA_MODE',
       'FLAG_DOCUMENT_2', 'FLAG_DOCUMENT_3', 'FLAG_DOCUMENT_4',
       'FLAG_DOCUMENT_5', 'FLAG_DOCUMENT_6', 'FLAG_DOCUMENT_7',
       'FLAG_DOCUMENT_8', 'FLAG_DOCUMENT_9', 'FLAG_DOCUMENT_10',
       'FLAG_DOCUMENT_11', 'FLAG_DOCUMENT_12', 'FLAG_DOCUMENT_13',
       'FLAG_DOCUMENT_14', 'FLAG_DOCUMENT_15', 'FLAG_DOCUMENT_16',
       'FLAG_DOCUMENT_17', 'FLAG_DOCUMENT_18', 'FLAG_DOCUMENT_19',
       'FLAG_DOCUMENT_20', 'FLAG_DOCUMENT_21'],
      dtype='object')</code></pre>
</div>
</div>
<div id="66ab66b8" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 앞서 만든 mask의 값과 다른(~) dataframe 구하기 (정규화되어있지 않은)</span></span>
<span id="cb45-2">df_other <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numeric_data.loc[:, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>min_max_mask]</span>
<span id="cb45-3">df_other.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">SK_ID_CURR</th>
<th data-quarto-table-cell-role="th">CNT_CHILDREN</th>
<th data-quarto-table-cell-role="th">AMT_INCOME_TOTAL</th>
<th data-quarto-table-cell-role="th">AMT_CREDIT</th>
<th data-quarto-table-cell-role="th">AMT_ANNUITY</th>
<th data-quarto-table-cell-role="th">AMT_GOODS_PRICE</th>
<th data-quarto-table-cell-role="th">REGION_POPULATION_RELATIVE</th>
<th data-quarto-table-cell-role="th">DAYS_BIRTH</th>
<th data-quarto-table-cell-role="th">DAYS_EMPLOYED</th>
<th data-quarto-table-cell-role="th">DAYS_REGISTRATION</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">DEF_30_CNT_SOCIAL_CIRCLE</th>
<th data-quarto-table-cell-role="th">OBS_60_CNT_SOCIAL_CIRCLE</th>
<th data-quarto-table-cell-role="th">DEF_60_CNT_SOCIAL_CIRCLE</th>
<th data-quarto-table-cell-role="th">DAYS_LAST_PHONE_CHANGE</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_HOUR</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_DAY</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_WEEK</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_MON</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_QRT</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_YEAR</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>100002</td>
<td>0</td>
<td>202500.0</td>
<td>406597.5</td>
<td>24700.5</td>
<td>351000.0</td>
<td>0.018801</td>
<td>-9461</td>
<td>-637</td>
<td>-3648.0</td>
<td>...</td>
<td>2.0</td>
<td>2.0</td>
<td>2.0</td>
<td>-1134.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>100003</td>
<td>0</td>
<td>270000.0</td>
<td>1293502.5</td>
<td>35698.5</td>
<td>1129500.0</td>
<td>0.003541</td>
<td>-16765</td>
<td>-1188</td>
<td>-1186.0</td>
<td>...</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>-828.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>100004</td>
<td>0</td>
<td>67500.0</td>
<td>135000.0</td>
<td>6750.0</td>
<td>135000.0</td>
<td>0.010032</td>
<td>-19046</td>
<td>-225</td>
<td>-4260.0</td>
<td>...</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>-815.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>100006</td>
<td>0</td>
<td>135000.0</td>
<td>312682.5</td>
<td>29686.5</td>
<td>297000.0</td>
<td>0.008019</td>
<td>-19005</td>
<td>-3039</td>
<td>-9833.0</td>
<td>...</td>
<td>0.0</td>
<td>2.0</td>
<td>0.0</td>
<td>-617.0</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>100007</td>
<td>0</td>
<td>121500.0</td>
<td>513000.0</td>
<td>21865.5</td>
<td>513000.0</td>
<td>0.028663</td>
<td>-19932</td>
<td>-3038</td>
<td>-4311.0</td>
<td>...</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>-1106.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
</tr>
</tbody>
</table>

<p>5 rows × 30 columns</p>
</div>
</div>
</div>
<div id="2f1dd0b9" class="cell">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1">df_other.columns</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Index(['SK_ID_CURR', 'CNT_CHILDREN', 'AMT_INCOME_TOTAL', 'AMT_CREDIT',
       'AMT_ANNUITY', 'AMT_GOODS_PRICE', 'REGION_POPULATION_RELATIVE',
       'DAYS_BIRTH', 'DAYS_EMPLOYED', 'DAYS_REGISTRATION', 'DAYS_ID_PUBLISH',
       'OWN_CAR_AGE', 'CNT_FAM_MEMBERS', 'REGION_RATING_CLIENT',
       'REGION_RATING_CLIENT_W_CITY', 'HOUR_APPR_PROCESS_START',
       'EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3',
       'OBS_30_CNT_SOCIAL_CIRCLE', 'DEF_30_CNT_SOCIAL_CIRCLE',
       'OBS_60_CNT_SOCIAL_CIRCLE', 'DEF_60_CNT_SOCIAL_CIRCLE',
       'DAYS_LAST_PHONE_CHANGE', 'AMT_REQ_CREDIT_BUREAU_HOUR',
       'AMT_REQ_CREDIT_BUREAU_DAY', 'AMT_REQ_CREDIT_BUREAU_WEEK',
       'AMT_REQ_CREDIT_BUREAU_MON', 'AMT_REQ_CREDIT_BUREAU_QRT',
       'AMT_REQ_CREDIT_BUREAU_YEAR'],
      dtype='object')</code></pre>
</div>
</div>
<ul>
<li>정규화 된 vs 되지 않은 변수에 대한 처리 방안
<ul>
<li>정규화된 변수(df_min_max_0_1.columns)는 도시, 아파트 등 거주지에 관련된 변수
<ul>
<li>평균이나 0으로 대체할 수 있음</li>
<li>아예 다른 -1 등으로 대체하여, 모델에게 일반적인 값이 아니라고 알려줄 수 있음</li>
</ul></li>
<li>정규화되지 않은 변수(df_other.columns)는 공통적이지 않아 위처럼 일괄적용은 불가
<ul>
<li>무난하게 평균으로 대체(Imputation)</li>
</ul></li>
</ul></li>
</ul>
<div id="b8953c97" class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 정규화된 데이터(df_min_max_0_1) : -1로 채우기</span></span>
<span id="cb48-2">df_min_max_0_1_filled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_min_max_0_1.fillna(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb48-3"></span>
<span id="cb48-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 정규화되지 않은 데이터( : )df_other) : 평균으로 채우기</span></span>
<span id="cb48-5">df_other_filled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_other.fillna(df_other.mean())</span>
<span id="cb48-6"></span>
<span id="cb48-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 두 데이터 다시 합치기</span></span>
<span id="cb48-8">numeric_data_filled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([df_min_max_0_1_filled, df_other_filled], axis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb48-9">numeric_data_filled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numeric_data_filled[numeric_data.columns]</span>
<span id="cb48-10">numeric_data_filled.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">SK_ID_CURR</th>
<th data-quarto-table-cell-role="th">TARGET</th>
<th data-quarto-table-cell-role="th">CNT_CHILDREN</th>
<th data-quarto-table-cell-role="th">AMT_INCOME_TOTAL</th>
<th data-quarto-table-cell-role="th">AMT_CREDIT</th>
<th data-quarto-table-cell-role="th">AMT_ANNUITY</th>
<th data-quarto-table-cell-role="th">AMT_GOODS_PRICE</th>
<th data-quarto-table-cell-role="th">REGION_POPULATION_RELATIVE</th>
<th data-quarto-table-cell-role="th">DAYS_BIRTH</th>
<th data-quarto-table-cell-role="th">DAYS_EMPLOYED</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_18</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_19</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_20</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_21</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_HOUR</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_DAY</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_WEEK</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_MON</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_QRT</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_YEAR</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>100002</td>
<td>1</td>
<td>0</td>
<td>202500.0</td>
<td>406597.5</td>
<td>24700.5</td>
<td>351000.0</td>
<td>0.018801</td>
<td>-9461</td>
<td>-637</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.000000</td>
<td>0.000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>1.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>100003</td>
<td>0</td>
<td>0</td>
<td>270000.0</td>
<td>1293502.5</td>
<td>35698.5</td>
<td>1129500.0</td>
<td>0.003541</td>
<td>-16765</td>
<td>-1188</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.000000</td>
<td>0.000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>100004</td>
<td>0</td>
<td>0</td>
<td>67500.0</td>
<td>135000.0</td>
<td>6750.0</td>
<td>135000.0</td>
<td>0.010032</td>
<td>-19046</td>
<td>-225</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.000000</td>
<td>0.000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>100006</td>
<td>0</td>
<td>0</td>
<td>135000.0</td>
<td>312682.5</td>
<td>29686.5</td>
<td>297000.0</td>
<td>0.008019</td>
<td>-19005</td>
<td>-3039</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.006402</td>
<td>0.007</td>
<td>0.034362</td>
<td>0.267395</td>
<td>0.265474</td>
<td>1.899974</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>100007</td>
<td>0</td>
<td>0</td>
<td>121500.0</td>
<td>513000.0</td>
<td>21865.5</td>
<td>513000.0</td>
<td>0.028663</td>
<td>-19932</td>
<td>-3038</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.000000</td>
<td>0.000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
</tr>
</tbody>
</table>

<p>5 rows × 106 columns</p>
</div>
</div>
</div>
<div id="9bca8b89" class="cell">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결측치 존재여부 확인하기 : 없음</span></span>
<span id="cb49-2">numeric_data_filled.isna().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>SK_ID_CURR                      0
TARGET                          0
CNT_CHILDREN                    0
AMT_INCOME_TOTAL                0
AMT_CREDIT                      0
AMT_ANNUITY                     0
AMT_GOODS_PRICE                 0
REGION_POPULATION_RELATIVE      0
DAYS_BIRTH                      0
DAYS_EMPLOYED                   0
DAYS_REGISTRATION               0
DAYS_ID_PUBLISH                 0
OWN_CAR_AGE                     0
FLAG_MOBIL                      0
FLAG_EMP_PHONE                  0
FLAG_WORK_PHONE                 0
FLAG_CONT_MOBILE                0
FLAG_PHONE                      0
FLAG_EMAIL                      0
CNT_FAM_MEMBERS                 0
REGION_RATING_CLIENT            0
REGION_RATING_CLIENT_W_CITY     0
HOUR_APPR_PROCESS_START         0
REG_REGION_NOT_LIVE_REGION      0
REG_REGION_NOT_WORK_REGION      0
LIVE_REGION_NOT_WORK_REGION     0
REG_CITY_NOT_LIVE_CITY          0
REG_CITY_NOT_WORK_CITY          0
LIVE_CITY_NOT_WORK_CITY         0
EXT_SOURCE_1                    0
EXT_SOURCE_2                    0
EXT_SOURCE_3                    0
APARTMENTS_AVG                  0
BASEMENTAREA_AVG                0
YEARS_BEGINEXPLUATATION_AVG     0
YEARS_BUILD_AVG                 0
COMMONAREA_AVG                  0
ELEVATORS_AVG                   0
ENTRANCES_AVG                   0
FLOORSMAX_AVG                   0
FLOORSMIN_AVG                   0
LANDAREA_AVG                    0
LIVINGAPARTMENTS_AVG            0
LIVINGAREA_AVG                  0
NONLIVINGAPARTMENTS_AVG         0
NONLIVINGAREA_AVG               0
APARTMENTS_MODE                 0
BASEMENTAREA_MODE               0
YEARS_BEGINEXPLUATATION_MODE    0
YEARS_BUILD_MODE                0
COMMONAREA_MODE                 0
ELEVATORS_MODE                  0
ENTRANCES_MODE                  0
FLOORSMAX_MODE                  0
FLOORSMIN_MODE                  0
LANDAREA_MODE                   0
LIVINGAPARTMENTS_MODE           0
LIVINGAREA_MODE                 0
NONLIVINGAPARTMENTS_MODE        0
NONLIVINGAREA_MODE              0
APARTMENTS_MEDI                 0
BASEMENTAREA_MEDI               0
YEARS_BEGINEXPLUATATION_MEDI    0
YEARS_BUILD_MEDI                0
COMMONAREA_MEDI                 0
ELEVATORS_MEDI                  0
ENTRANCES_MEDI                  0
FLOORSMAX_MEDI                  0
FLOORSMIN_MEDI                  0
LANDAREA_MEDI                   0
LIVINGAPARTMENTS_MEDI           0
LIVINGAREA_MEDI                 0
NONLIVINGAPARTMENTS_MEDI        0
NONLIVINGAREA_MEDI              0
TOTALAREA_MODE                  0
OBS_30_CNT_SOCIAL_CIRCLE        0
DEF_30_CNT_SOCIAL_CIRCLE        0
OBS_60_CNT_SOCIAL_CIRCLE        0
DEF_60_CNT_SOCIAL_CIRCLE        0
DAYS_LAST_PHONE_CHANGE          0
FLAG_DOCUMENT_2                 0
FLAG_DOCUMENT_3                 0
FLAG_DOCUMENT_4                 0
FLAG_DOCUMENT_5                 0
FLAG_DOCUMENT_6                 0
FLAG_DOCUMENT_7                 0
FLAG_DOCUMENT_8                 0
FLAG_DOCUMENT_9                 0
FLAG_DOCUMENT_10                0
FLAG_DOCUMENT_11                0
FLAG_DOCUMENT_12                0
FLAG_DOCUMENT_13                0
FLAG_DOCUMENT_14                0
FLAG_DOCUMENT_15                0
FLAG_DOCUMENT_16                0
FLAG_DOCUMENT_17                0
FLAG_DOCUMENT_18                0
FLAG_DOCUMENT_19                0
FLAG_DOCUMENT_20                0
FLAG_DOCUMENT_21                0
AMT_REQ_CREDIT_BUREAU_HOUR      0
AMT_REQ_CREDIT_BUREAU_DAY       0
AMT_REQ_CREDIT_BUREAU_WEEK      0
AMT_REQ_CREDIT_BUREAU_MON       0
AMT_REQ_CREDIT_BUREAU_QRT       0
AMT_REQ_CREDIT_BUREAU_YEAR      0
dtype: int64</code></pre>
</div>
</div>
</section>
<section id="표준화-정규화" class="level3">
<h3 class="anchored" data-anchor-id="표준화-정규화">표준화 / 정규화</h3>
<ul>
<li>현재 이용중인 데이터는 정규화가 되어있어, 더미 데이터로 정규화 실습</li>
</ul>
<div id="be383d25" class="cell">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 필요한 라이브러리 임포트</span></span>
<span id="cb51-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> make_classification</span>
<span id="cb51-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb51-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StandardScaler, MinMaxScaler</span>
<span id="cb51-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LogisticRegression</span>
<span id="cb51-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score</span>
<span id="cb51-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb51-8"></span>
<span id="cb51-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. 데이터 생성</span></span>
<span id="cb51-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make_classification을 사용해 극단적인 스케일 차이를 가진 데이터를 생성</span></span>
<span id="cb51-11">X_extreme, y_extreme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_classification(</span>
<span id="cb51-12">    n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>,            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터 샘플 수</span></span>
<span id="cb51-13">    n_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>,             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 피처 수</span></span>
<span id="cb51-14">    n_informative<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 유용한 피처 수</span></span>
<span id="cb51-15">    scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 피처별 스케일 조정</span></span>
<span id="cb51-16">    random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 재현 가능성을 위한 시드값</span></span>
<span id="cb51-17">)</span></code></pre></div>
</div>
<div id="0635d64a" class="cell">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">pd.DataFrame(X_extreme).describe().transpose()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">count</th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">std</th>
<th data-quarto-table-cell-role="th">min</th>
<th data-quarto-table-cell-role="th">25%</th>
<th data-quarto-table-cell-role="th">50%</th>
<th data-quarto-table-cell-role="th">75%</th>
<th data-quarto-table-cell-role="th">max</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>10000.0</td>
<td>-0.000843</td>
<td>0.099991</td>
<td>-0.400455</td>
<td>-0.068812</td>
<td>-9.649203e-04</td>
<td>0.065022</td>
<td>0.345748</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>10000.0</td>
<td>-0.049159</td>
<td>0.203922</td>
<td>-1.028082</td>
<td>-0.186545</td>
<td>-4.998679e-02</td>
<td>0.087477</td>
<td>0.696282</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>10000.0</td>
<td>0.098310</td>
<td>9.967478</td>
<td>-37.084345</td>
<td>-6.431134</td>
<td>2.068342e-01</td>
<td>6.805382</td>
<td>36.569668</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>10000.0</td>
<td>0.000092</td>
<td>0.100792</td>
<td>-0.376615</td>
<td>-0.068290</td>
<td>1.600637e-03</td>
<td>0.066608</td>
<td>0.370791</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>10000.0</td>
<td>33.711066</td>
<td>9968.009346</td>
<td>-37924.222059</td>
<td>-6660.572565</td>
<td>2.665940e+01</td>
<td>6718.807581</td>
<td>38249.915049</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>10000.0</td>
<td>-0.014777</td>
<td>10.035188</td>
<td>-44.042140</td>
<td>-6.791118</td>
<td>-1.207864e-03</td>
<td>6.879935</td>
<td>34.238262</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>10000.0</td>
<td>0.004445</td>
<td>0.348834</td>
<td>-1.327898</td>
<td>-0.224403</td>
<td>4.139092e-03</td>
<td>0.240916</td>
<td>1.279965</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>10000.0</td>
<td>-29.276123</td>
<td>9901.953926</td>
<td>-34920.171700</td>
<td>-6780.256223</td>
<td>5.289047e+01</td>
<td>6660.789736</td>
<td>35896.144788</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>10000.0</td>
<td>5012.027982</td>
<td>20322.028651</td>
<td>-72656.674262</td>
<td>-8177.712578</td>
<td>5.592046e+03</td>
<td>19130.519205</td>
<td>87719.082190</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>10000.0</td>
<td>5.235305</td>
<td>21.577716</td>
<td>-94.872061</td>
<td>-8.381620</td>
<td>6.028815e+00</td>
<td>19.905182</td>
<td>86.318571</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>10000.0</td>
<td>-16.717119</td>
<td>22438.781080</td>
<td>-94469.882979</td>
<td>-14865.590516</td>
<td>7.735623e+02</td>
<td>15595.529638</td>
<td>82303.951337</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>10000.0</td>
<td>-0.000006</td>
<td>0.001006</td>
<td>-0.004374</td>
<td>-0.000688</td>
<td>-2.374679e-07</td>
<td>0.000671</td>
<td>0.003626</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>10000.0</td>
<td>105.978945</td>
<td>10155.422965</td>
<td>-37826.155102</td>
<td>-6811.010474</td>
<td>6.823802e+01</td>
<td>6998.192954</td>
<td>45621.147236</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>10000.0</td>
<td>-0.001012</td>
<td>0.210320</td>
<td>-0.858273</td>
<td>-0.143428</td>
<td>5.860082e-04</td>
<td>0.140071</td>
<td>0.889246</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">14</td>
<td>10000.0</td>
<td>-4858.457290</td>
<td>21738.300654</td>
<td>-94748.760660</td>
<td>-19030.662537</td>
<td>-5.041786e+03</td>
<td>9388.088922</td>
<td>78861.853678</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>10000.0</td>
<td>-0.000007</td>
<td>0.000999</td>
<td>-0.004067</td>
<td>-0.000675</td>
<td>-5.164186e-06</td>
<td>0.000670</td>
<td>0.003677</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">16</td>
<td>10000.0</td>
<td>-5.141587</td>
<td>17.738662</td>
<td>-71.054112</td>
<td>-17.153315</td>
<td>-5.349305e+00</td>
<td>7.050539</td>
<td>55.128501</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>10000.0</td>
<td>-0.000369</td>
<td>0.100389</td>
<td>-0.348579</td>
<td>-0.067523</td>
<td>-3.805544e-04</td>
<td>0.067480</td>
<td>0.367819</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">18</td>
<td>10000.0</td>
<td>-0.000006</td>
<td>0.000996</td>
<td>-0.003884</td>
<td>-0.000686</td>
<td>-1.293092e-05</td>
<td>0.000666</td>
<td>0.003644</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">19</td>
<td>10000.0</td>
<td>-0.000172</td>
<td>0.099557</td>
<td>-0.353209</td>
<td>-0.067392</td>
<td>8.681804e-04</td>
<td>0.067532</td>
<td>0.340875</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">20</td>
<td>10000.0</td>
<td>-0.000009</td>
<td>0.098640</td>
<td>-0.400360</td>
<td>-0.066536</td>
<td>5.128733e-04</td>
<td>0.066323</td>
<td>0.345383</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">21</td>
<td>10000.0</td>
<td>-0.000014</td>
<td>0.000989</td>
<td>-0.003470</td>
<td>-0.000682</td>
<td>-2.495327e-05</td>
<td>0.000648</td>
<td>0.003575</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">22</td>
<td>10000.0</td>
<td>58.343623</td>
<td>9989.324997</td>
<td>-37011.053323</td>
<td>-6603.388513</td>
<td>-2.738199e+01</td>
<td>6687.434189</td>
<td>37550.968936</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">23</td>
<td>10000.0</td>
<td>-0.191571</td>
<td>22.000080</td>
<td>-76.276131</td>
<td>-15.251958</td>
<td>-1.285423e+00</td>
<td>14.269217</td>
<td>93.037809</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">24</td>
<td>10000.0</td>
<td>-94.852822</td>
<td>9900.227203</td>
<td>-39993.322490</td>
<td>-6837.457775</td>
<td>-1.868981e+01</td>
<td>6573.974126</td>
<td>38262.551726</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">25</td>
<td>10000.0</td>
<td>0.000006</td>
<td>0.001006</td>
<td>-0.003842</td>
<td>-0.000672</td>
<td>8.375875e-06</td>
<td>0.000691</td>
<td>0.004219</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">26</td>
<td>10000.0</td>
<td>0.000290</td>
<td>0.003541</td>
<td>-0.012334</td>
<td>-0.002022</td>
<td>2.878352e-04</td>
<td>0.002610</td>
<td>0.015225</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">27</td>
<td>10000.0</td>
<td>0.000841</td>
<td>0.099419</td>
<td>-0.399701</td>
<td>-0.065312</td>
<td>1.257511e-04</td>
<td>0.067327</td>
<td>0.354844</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">28</td>
<td>10000.0</td>
<td>-0.088997</td>
<td>9.912015</td>
<td>-34.888492</td>
<td>-6.821070</td>
<td>-1.745981e-01</td>
<td>6.518458</td>
<td>37.321065</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">29</td>
<td>10000.0</td>
<td>0.000400</td>
<td>0.099395</td>
<td>-0.356424</td>
<td>-0.066818</td>
<td>1.730892e-04</td>
<td>0.066774</td>
<td>0.386391</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">30</td>
<td>10000.0</td>
<td>-79.666444</td>
<td>10110.197747</td>
<td>-37110.587943</td>
<td>-6797.004214</td>
<td>-2.879375e+01</td>
<td>6750.676244</td>
<td>37841.363336</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">31</td>
<td>10000.0</td>
<td>0.112263</td>
<td>10.151527</td>
<td>-37.939557</td>
<td>-6.815460</td>
<td>6.569630e-02</td>
<td>7.061795</td>
<td>42.020259</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">32</td>
<td>10000.0</td>
<td>0.059398</td>
<td>10.005156</td>
<td>-37.291744</td>
<td>-6.652975</td>
<td>1.770254e-01</td>
<td>6.828899</td>
<td>39.181850</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">33</td>
<td>10000.0</td>
<td>-0.000011</td>
<td>0.001012</td>
<td>-0.003814</td>
<td>-0.000696</td>
<td>-1.729425e-05</td>
<td>0.000668</td>
<td>0.003775</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">34</td>
<td>10000.0</td>
<td>0.112279</td>
<td>9.979008</td>
<td>-35.699687</td>
<td>-6.730720</td>
<td>1.131022e-01</td>
<td>6.848352</td>
<td>39.768682</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">35</td>
<td>10000.0</td>
<td>0.000514</td>
<td>0.001720</td>
<td>-0.005501</td>
<td>-0.000699</td>
<td>4.901425e-04</td>
<td>0.001649</td>
<td>0.008263</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">36</td>
<td>10000.0</td>
<td>-0.000020</td>
<td>0.002119</td>
<td>-0.007758</td>
<td>-0.001392</td>
<td>1.818282e-04</td>
<td>0.001455</td>
<td>0.006503</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">37</td>
<td>10000.0</td>
<td>201.890197</td>
<td>9859.993885</td>
<td>-36573.006696</td>
<td>-6408.351214</td>
<td>1.730065e+02</td>
<td>6872.631552</td>
<td>34511.089264</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">38</td>
<td>10000.0</td>
<td>-0.055936</td>
<td>10.030580</td>
<td>-37.936384</td>
<td>-6.934862</td>
<td>-5.052432e-02</td>
<td>6.753313</td>
<td>38.782169</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">39</td>
<td>10000.0</td>
<td>-0.000004</td>
<td>0.001007</td>
<td>-0.004414</td>
<td>-0.000690</td>
<td>-1.970009e-05</td>
<td>0.000669</td>
<td>0.003569</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<ul>
<li>변수별로 scale차이가 큰 데이터가 만들어졌고, 로지스틱 회귀 모델에 넣어볼 예정</li>
<li>표준화와 정규화 부분에 집중해서 보기(나머지는 추후 배움)</li>
<li><strong>표준화</strong>는 <code>sklearn.preprocessing</code>의 <code>StandardScaler</code>로, <strong>정규화</strong>는 <code>MinMaxScaler</code>로 수행</li>
</ul>
<div id="b8fab45b" class="cell">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. 데이터 분리</span></span>
<span id="cb53-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 학습 데이터와 테스트 데이터로 분리</span></span>
<span id="cb53-3">X_train_extreme, X_test_extreme, y_train_extreme, y_test_extreme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(</span>
<span id="cb53-4">    X_extreme, y_extreme, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span></span>
<span id="cb53-5">)</span>
<span id="cb53-6"></span>
<span id="cb53-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. 로지스틱 회귀 모델 초기화</span></span>
<span id="cb53-8">model_lr_extreme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LogisticRegression(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, max_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)</span>
<span id="cb53-9"></span>
<span id="cb53-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. 원본 데이터로 예측 (Raw Data)</span></span>
<span id="cb53-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스케일링 없이 원본 데이터를 사용해 모델 학습</span></span>
<span id="cb53-12">model_lr_extreme.fit(X_train_extreme, y_train_extreme)</span>
<span id="cb53-13">y_pred_raw_extreme_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_lr_extreme.predict(X_test_extreme)</span>
<span id="cb53-14">accuracy_raw_extreme_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test_extreme, y_pred_raw_extreme_lr)</span>
<span id="cb53-15"></span>
<span id="cb53-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5. 표준화된 데이터로 예측 (Standardized Data)</span></span>
<span id="cb53-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 표준화를 적용한 데이터를 사용해 모델 학습</span></span>
<span id="cb53-18">scaler_standard <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StandardScaler()</span>
<span id="cb53-19">X_train_extreme_standardized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler_standard.fit_transform(X_train_extreme) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fit을 통해 0~4의 값이 min/max 0/4임을 구하고, transform으로 0~1로 변경</span></span>
<span id="cb53-20">X_test_extreme_standardized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler_standard.transform(X_test_extreme)</span>
<span id="cb53-21"></span>
<span id="cb53-22">model_lr_extreme.fit(X_train_extreme_standardized, y_train_extreme)</span>
<span id="cb53-23">y_pred_standardized_extreme_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_lr_extreme.predict(X_test_extreme_standardized)</span>
<span id="cb53-24">accuracy_standardized_extreme_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test_extreme, y_pred_standardized_extreme_lr)</span>
<span id="cb53-25"></span>
<span id="cb53-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 6. 정규화된 데이터로 예측 (Normalized Data)</span></span>
<span id="cb53-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 정규화를 적용한 데이터를 사용해 모델 학습</span></span>
<span id="cb53-28">scaler_minmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MinMaxScaler()</span>
<span id="cb53-29">X_train_extreme_normalized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler_minmax.fit_transform(X_train_extreme)</span>
<span id="cb53-30">X_test_extreme_normalized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler_minmax.transform(X_test_extreme)</span>
<span id="cb53-31"></span>
<span id="cb53-32">model_lr_extreme.fit(X_train_extreme_normalized, y_train_extreme)</span>
<span id="cb53-33">y_pred_normalized_extreme_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_lr_extreme.predict(X_test_extreme_normalized)</span>
<span id="cb53-34">accuracy_normalized_extreme_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test_extreme, y_pred_normalized_extreme_lr)</span>
<span id="cb53-35"></span>
<span id="cb53-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 7. 결과 비교</span></span>
<span id="cb53-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결과를 데이터프레임으로 정리</span></span>
<span id="cb53-38">results_extreme_lr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb53-39">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Method"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Raw Data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Standardized Data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normalized Data"</span>],</span>
<span id="cb53-40">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Accuracy"</span>: [accuracy_raw_extreme_lr, accuracy_standardized_extreme_lr, accuracy_normalized_extreme_lr],</span>
<span id="cb53-41">}</span>
<span id="cb53-42"></span>
<span id="cb53-43">results_extreme_lr_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(results_extreme_lr)</span>
<span id="cb53-44">results_extreme_lr_df</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>c:\Users\kibok\AppData\Local\Programs\Python\Python312\Lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Method</th>
<th data-quarto-table-cell-role="th">Accuracy</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Raw Data</td>
<td>0.692333</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Standardized Data</td>
<td>0.803000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Normalized Data</td>
<td>0.803667</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="변환-1" class="level3">
<h3 class="anchored" data-anchor-id="변환-1">변환</h3>
<ul>
<li>앞서 확인한 사실 : 일부 데이터의 치우침(왜도), 이상치, DAYS_EMPLOYED를 제외하면 전부 양수</li>
<li>위와 같은 경우 변환을 할 수 있으며, 로그변환과 제곱근 변환 중 일반적으로 쓰이는 로그변환을 사용</li>
<li><code>np.log1p</code>를 사용 : log(x + 1)를 정밀하게 연산하는 함수로, 값이 0에 가까울수록 무한대로 발산하는 것을 막기위해 log1p를 사용
<ul>
<li>손실없이 계산하기 위해 log1p를 사용</li>
</ul></li>
</ul>
<div id="dfeb29e2" class="cell">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1">outliers_over_10</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">total</th>
<th data-quarto-table-cell-role="th">percent</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">REGION_RATING_CLIENT</td>
<td>80527</td>
<td>26.186706</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">REGION_RATING_CLIENT_W_CITY</td>
<td>78027</td>
<td>25.373726</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">DAYS_EMPLOYED</td>
<td>72217</td>
<td>23.484363</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">REG_CITY_NOT_WORK_CITY</td>
<td>70867</td>
<td>23.045354</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">FLAG_WORK_PHONE</td>
<td>61308</td>
<td>19.936848</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">FLAG_EMP_PHONE</td>
<td>55386</td>
<td>18.011063</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">LIVE_CITY_NOT_WORK_CITY</td>
<td>55215</td>
<td>17.955455</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_QRT</td>
<td>50575</td>
<td>16.446566</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_MON</td>
<td>43759</td>
<td>14.230060</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">DEF_30_CNT_SOCIAL_CIRCLE</td>
<td>35166</td>
<td>11.435688</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="c5e56e1d" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1">log_transform_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outliers_over_10.index.tolist()</span>
<span id="cb56-2">log_transform_columns.remove(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>)</span>
<span id="cb56-3">log_transform_columns</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<pre><code>['REGION_RATING_CLIENT',
 'REGION_RATING_CLIENT_W_CITY',
 'REG_CITY_NOT_WORK_CITY',
 'FLAG_WORK_PHONE',
 'FLAG_EMP_PHONE',
 'LIVE_CITY_NOT_WORK_CITY',
 'AMT_REQ_CREDIT_BUREAU_QRT',
 'AMT_REQ_CREDIT_BUREAU_MON',
 'DEF_30_CNT_SOCIAL_CIRCLE']</code></pre>
</div>
</div>
<div id="8967ba20" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1">numeric_data_filled[log_transform_columns]  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numeric_data_filled[log_transform_columns].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : np.log1p(x))</span></code></pre></div>
</div>
<div id="ecb15940" class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1">numeric_data_filled.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">SK_ID_CURR</th>
<th data-quarto-table-cell-role="th">TARGET</th>
<th data-quarto-table-cell-role="th">CNT_CHILDREN</th>
<th data-quarto-table-cell-role="th">AMT_INCOME_TOTAL</th>
<th data-quarto-table-cell-role="th">AMT_CREDIT</th>
<th data-quarto-table-cell-role="th">AMT_ANNUITY</th>
<th data-quarto-table-cell-role="th">AMT_GOODS_PRICE</th>
<th data-quarto-table-cell-role="th">REGION_POPULATION_RELATIVE</th>
<th data-quarto-table-cell-role="th">DAYS_BIRTH</th>
<th data-quarto-table-cell-role="th">DAYS_EMPLOYED</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_18</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_19</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_20</th>
<th data-quarto-table-cell-role="th">FLAG_DOCUMENT_21</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_HOUR</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_DAY</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_WEEK</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_MON</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_QRT</th>
<th data-quarto-table-cell-role="th">AMT_REQ_CREDIT_BUREAU_YEAR</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>100002</td>
<td>1</td>
<td>0</td>
<td>202500.0</td>
<td>406597.5</td>
<td>24700.5</td>
<td>351000.0</td>
<td>0.018801</td>
<td>-9461</td>
<td>-637</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.000000</td>
<td>0.000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>1.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>100003</td>
<td>0</td>
<td>0</td>
<td>270000.0</td>
<td>1293502.5</td>
<td>35698.5</td>
<td>1129500.0</td>
<td>0.003541</td>
<td>-16765</td>
<td>-1188</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.000000</td>
<td>0.000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>100004</td>
<td>0</td>
<td>0</td>
<td>67500.0</td>
<td>135000.0</td>
<td>6750.0</td>
<td>135000.0</td>
<td>0.010032</td>
<td>-19046</td>
<td>-225</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.000000</td>
<td>0.000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>100006</td>
<td>0</td>
<td>0</td>
<td>135000.0</td>
<td>312682.5</td>
<td>29686.5</td>
<td>297000.0</td>
<td>0.008019</td>
<td>-19005</td>
<td>-3039</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.006402</td>
<td>0.007</td>
<td>0.034362</td>
<td>0.236964</td>
<td>0.235447</td>
<td>1.899974</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>100007</td>
<td>0</td>
<td>0</td>
<td>121500.0</td>
<td>513000.0</td>
<td>21865.5</td>
<td>513000.0</td>
<td>0.028663</td>
<td>-19932</td>
<td>-3038</td>
<td>...</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0.000000</td>
<td>0.000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
<td>0.000000</td>
</tr>
</tbody>
</table>

<p>5 rows × 106 columns</p>
</div>
</div>
</div>
</section>
<section id="실습-5" class="level3">
<h3 class="anchored" data-anchor-id="실습-5">실습 5</h3>
<ul>
<li>DAYS_EMPOLYED 같이 음수의 값을 갖는 경우, 최소값 조정이라는 걸 통해 변환해줄 수 있습니다.</li>
<li>쉽게 말해 최소값의 절대값보다 큰 수 C를 모든 데이터에 더하는 걸 말합니다.</li>
<li>구현한 뒤에 로그변환을 해봅시다.</li>
</ul>
<div id="375c4e0a" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb60" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb60-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 최소값 조정 : numeric_data_filled['DAYS_EMPLOYED'].min() * -1</span></span>
<span id="cb60-2">(numeric_data_filled[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> numeric_data_filled[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DAYS_EMPLOYED'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : np.log1p(x)).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<pre><code>0    9.757074
1    9.724660
2    9.780642
3    9.607370
4    9.607437
Name: DAYS_EMPLOYED, dtype: float64</code></pre>
</div>
</div>
</section>
<section id="인코딩-1" class="level3">
<h3 class="anchored" data-anchor-id="인코딩-1">인코딩</h3>
<ul>
<li>각 카테고리의 값을 숫자로 바꾸는 <strong>Label인코딩은 순서에 대한 왜곡 발생</strong>
<ul>
<li><strong>메모리, 계산 부담이 없는 경우는 One-hot 인코딩</strong>이 이론상 더 성능이 좋음</li>
<li>범주간의 <strong>순서가 존재하는 경우는 Label 인코딩</strong>을 하는게 오히려 좋음</li>
<li>Unique한 값이 많으면 One-hot인코딩은 메모리 비효율 발생</li>
</ul></li>
<li><code>sklearn.preprocessing</code>의 <code>OneHotEncoder</code>으로 Ont-hot 인코딩</li>
</ul>
<div id="a99213b7" class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># One-hot 인코딩 대상 컬럼</span></span>
<span id="cb62-2"></span>
<span id="cb62-3">one_hot_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> categorical_data.describe().transpose()[categorical_data.describe().transpose().unique <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>].index.tolist()</span>
<span id="cb62-4">one_hot_columns</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<pre><code>['NAME_CONTRACT_TYPE',
 'CODE_GENDER',
 'FLAG_OWN_CAR',
 'FLAG_OWN_REALTY',
 'HOUSETYPE_MODE',
 'EMERGENCYSTATE_MODE']</code></pre>
</div>
</div>
<div id="81bed530" class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb64" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb64-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># One-hot 인코딩(fit_transform)을 통해, 각 카테고리의 값이  컬럼으로 올라감</span></span>
<span id="cb64-2"></span>
<span id="cb64-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OneHotEncoder</span>
<span id="cb64-4"></span>
<span id="cb64-5">ohe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OneHotEncoder(sparse_output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb64-6">onehot_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ohe.fit_transform(categorical_data[one_hot_columns])</span>
<span id="cb64-7">encoded_col_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ohe.get_feature_names_out(input_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>one_hot_columns)</span>
<span id="cb64-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get_feature_names_out : ont-hot 인코딩된 컬럼을 반환</span></span>
<span id="cb64-9"></span>
<span id="cb64-10">onehot_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(onehot_encoded, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>encoded_col_names, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>categorical_data.index)</span>
<span id="cb64-11">onehot_df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="44">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">NAME_CONTRACT_TYPE_Cash loans</th>
<th data-quarto-table-cell-role="th">NAME_CONTRACT_TYPE_Revolving loans</th>
<th data-quarto-table-cell-role="th">CODE_GENDER_F</th>
<th data-quarto-table-cell-role="th">CODE_GENDER_M</th>
<th data-quarto-table-cell-role="th">CODE_GENDER_XNA</th>
<th data-quarto-table-cell-role="th">FLAG_OWN_CAR_N</th>
<th data-quarto-table-cell-role="th">FLAG_OWN_CAR_Y</th>
<th data-quarto-table-cell-role="th">FLAG_OWN_REALTY_N</th>
<th data-quarto-table-cell-role="th">FLAG_OWN_REALTY_Y</th>
<th data-quarto-table-cell-role="th">HOUSETYPE_MODE_block of flats</th>
<th data-quarto-table-cell-role="th">HOUSETYPE_MODE_specific housing</th>
<th data-quarto-table-cell-role="th">HOUSETYPE_MODE_terraced house</th>
<th data-quarto-table-cell-role="th">HOUSETYPE_MODE_nan</th>
<th data-quarto-table-cell-role="th">EMERGENCYSTATE_MODE_No</th>
<th data-quarto-table-cell-role="th">EMERGENCYSTATE_MODE_Yes</th>
<th data-quarto-table-cell-role="th">EMERGENCYSTATE_MODE_nan</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
<td>0.0</td>
<td>0.0</td>
<td>1.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<ul>
<li>순위가 불명확하거나 값이 다양한 경우 : Label Encoder 사용</li>
<li><code>sklearn.preprocessing</code>의 <code>LabelEncoder</code>로 Label인코딩
<ul>
<li>컬럼별로 인코딩되며, 한번에 fit_transform불가</li>
<li>벡터연산으로 적용해보기(<code>.apply()</code>)</li>
</ul></li>
</ul>
<div id="e4bab7b5" class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Label인코딩 대상 컬럼</span></span>
<span id="cb65-2"></span>
<span id="cb65-3">le_columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> categorical_data.describe().transpose()[categorical_data.describe().transpose().unique <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>].index.tolist()</span>
<span id="cb65-4">le_columns.remove(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NAME_EDUCATION_TYPE'</span>)</span>
<span id="cb65-5">le_columns</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="47">
<pre><code>['NAME_TYPE_SUITE',
 'NAME_INCOME_TYPE',
 'NAME_FAMILY_STATUS',
 'NAME_HOUSING_TYPE',
 'OCCUPATION_TYPE',
 'WEEKDAY_APPR_PROCESS_START',
 'ORGANIZATION_TYPE',
 'FONDKAPREMONT_MODE',
 'WALLSMATERIAL_MODE']</code></pre>
</div>
</div>
<div id="9f8e75a3" class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb67" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb67-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LabelEncoder</span>
<span id="cb67-2">le <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LabelEncoder()</span>
<span id="cb67-3">le_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> categorical_data[le_columns].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(le.fit_transform)</span>
<span id="cb67-4">le_df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="48">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">NAME_TYPE_SUITE</th>
<th data-quarto-table-cell-role="th">NAME_INCOME_TYPE</th>
<th data-quarto-table-cell-role="th">NAME_FAMILY_STATUS</th>
<th data-quarto-table-cell-role="th">NAME_HOUSING_TYPE</th>
<th data-quarto-table-cell-role="th">OCCUPATION_TYPE</th>
<th data-quarto-table-cell-role="th">WEEKDAY_APPR_PROCESS_START</th>
<th data-quarto-table-cell-role="th">ORGANIZATION_TYPE</th>
<th data-quarto-table-cell-role="th">FONDKAPREMONT_MODE</th>
<th data-quarto-table-cell-role="th">WALLSMATERIAL_MODE</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>6</td>
<td>7</td>
<td>3</td>
<td>1</td>
<td>8</td>
<td>6</td>
<td>5</td>
<td>2</td>
<td>5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1</td>
<td>4</td>
<td>1</td>
<td>1</td>
<td>3</td>
<td>1</td>
<td>39</td>
<td>2</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>6</td>
<td>7</td>
<td>3</td>
<td>1</td>
<td>8</td>
<td>1</td>
<td>11</td>
<td>4</td>
<td>7</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>6</td>
<td>7</td>
<td>0</td>
<td>1</td>
<td>8</td>
<td>6</td>
<td>5</td>
<td>4</td>
<td>7</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>6</td>
<td>7</td>
<td>3</td>
<td>1</td>
<td>3</td>
<td>4</td>
<td>37</td>
<td>4</td>
<td>7</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="실습6" class="level3">
<h3 class="anchored" data-anchor-id="실습6">실습6</h3>
<ul>
<li>지금도 괜찮긴 한데, 이러면 나중에 저 값이 뭔지 궁금해도 찾아볼 수 없는 문제가 생깁니다.</li>
<li>fit과 transform을 나눠서 적용하면 어떻게 될 것도 같은데, 해볼까요?</li>
</ul>
<div id="92e794a0" class="cell" data-execution_count="49">
<div class="sourceCode cell-code" id="cb68" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb68-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 고민해 본 방법1 : 각 딕셔너리에 .classes_를 활용해 보존 (GPT로 구현)</span></span>
<span id="cb68-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LabelEncoder</span>
<span id="cb68-3"></span>
<span id="cb68-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. 각 열마다 별도의 LabelEncoder 생성</span></span>
<span id="cb68-5">label_encoders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {col: LabelEncoder() <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> le_columns}</span>
<span id="cb68-6"></span>
<span id="cb68-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. fit: LabelEncoder를 각 열에 학습</span></span>
<span id="cb68-8">le_df_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> categorical_data[le_columns].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(</span>
<span id="cb68-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> col: label_encoders[col.name].fit(col)</span>
<span id="cb68-10">)</span>
<span id="cb68-11"></span>
<span id="cb68-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 학습된 카테고리와 매핑된 값 저장</span></span>
<span id="cb68-13">dict_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb68-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> le_columns:</span>
<span id="cb68-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 레이블과 변환된 값의 매핑 저장</span></span>
<span id="cb68-16">    dict_classes[col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {label: idx <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, label <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(label_encoders[col].classes_)}</span>
<span id="cb68-17"></span>
<span id="cb68-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. transform: 학습된 LabelEncoder를 각 열에 적용</span></span>
<span id="cb68-19">le_df_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> categorical_data[le_columns].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(</span>
<span id="cb68-20">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> col: label_encoders[col.name].transform(col)</span>
<span id="cb68-21">)</span>
<span id="cb68-22"></span>
<span id="cb68-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결과 확인</span></span>
<span id="cb68-24">dict_classes</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="49">
<pre><code>{'NAME_TYPE_SUITE': {'Children': 0,
  'Family': 1,
  'Group of people': 2,
  'Other_A': 3,
  'Other_B': 4,
  'Spouse, partner': 5,
  'Unaccompanied': 6,
  nan: 7},
 'NAME_INCOME_TYPE': {'Businessman': 0,
  'Commercial associate': 1,
  'Maternity leave': 2,
  'Pensioner': 3,
  'State servant': 4,
  'Student': 5,
  'Unemployed': 6,
  'Working': 7},
 'NAME_FAMILY_STATUS': {'Civil marriage': 0,
  'Married': 1,
  'Separated': 2,
  'Single / not married': 3,
  'Unknown': 4,
  'Widow': 5},
 'NAME_HOUSING_TYPE': {'Co-op apartment': 0,
  'House / apartment': 1,
  'Municipal apartment': 2,
  'Office apartment': 3,
  'Rented apartment': 4,
  'With parents': 5},
 'OCCUPATION_TYPE': {'Accountants': 0,
  'Cleaning staff': 1,
  'Cooking staff': 2,
  'Core staff': 3,
  'Drivers': 4,
  'HR staff': 5,
  'High skill tech staff': 6,
  'IT staff': 7,
  'Laborers': 8,
  'Low-skill Laborers': 9,
  'Managers': 10,
  'Medicine staff': 11,
  'Private service staff': 12,
  'Realty agents': 13,
  'Sales staff': 14,
  'Secretaries': 15,
  'Security staff': 16,
  'Waiters/barmen staff': 17,
  nan: 18},
 'WEEKDAY_APPR_PROCESS_START': {'FRIDAY': 0,
  'MONDAY': 1,
  'SATURDAY': 2,
  'SUNDAY': 3,
  'THURSDAY': 4,
  'TUESDAY': 5,
  'WEDNESDAY': 6},
 'ORGANIZATION_TYPE': {'Advertising': 0,
  'Agriculture': 1,
  'Bank': 2,
  'Business Entity Type 1': 3,
  'Business Entity Type 2': 4,
  'Business Entity Type 3': 5,
  'Cleaning': 6,
  'Construction': 7,
  'Culture': 8,
  'Electricity': 9,
  'Emergency': 10,
  'Government': 11,
  'Hotel': 12,
  'Housing': 13,
  'Industry: type 1': 14,
  'Industry: type 10': 15,
  'Industry: type 11': 16,
  'Industry: type 12': 17,
  'Industry: type 13': 18,
  'Industry: type 2': 19,
  'Industry: type 3': 20,
  'Industry: type 4': 21,
  'Industry: type 5': 22,
  'Industry: type 6': 23,
  'Industry: type 7': 24,
  'Industry: type 8': 25,
  'Industry: type 9': 26,
  'Insurance': 27,
  'Kindergarten': 28,
  'Legal Services': 29,
  'Medicine': 30,
  'Military': 31,
  'Mobile': 32,
  'Other': 33,
  'Police': 34,
  'Postal': 35,
  'Realtor': 36,
  'Religion': 37,
  'Restaurant': 38,
  'School': 39,
  'Security': 40,
  'Security Ministries': 41,
  'Self-employed': 42,
  'Services': 43,
  'Telecom': 44,
  'Trade: type 1': 45,
  'Trade: type 2': 46,
  'Trade: type 3': 47,
  'Trade: type 4': 48,
  'Trade: type 5': 49,
  'Trade: type 6': 50,
  'Trade: type 7': 51,
  'Transport: type 1': 52,
  'Transport: type 2': 53,
  'Transport: type 3': 54,
  'Transport: type 4': 55,
  'University': 56,
  'XNA': 57},
 'FONDKAPREMONT_MODE': {'not specified': 0,
  'org spec account': 1,
  'reg oper account': 2,
  'reg oper spec account': 3,
  nan: 4},
 'WALLSMATERIAL_MODE': {'Block': 0,
  'Mixed': 1,
  'Monolithic': 2,
  'Others': 3,
  'Panel': 4,
  'Stone, brick': 5,
  'Wooden': 6,
  nan: 7}}</code></pre>
</div>
</div>
<div id="b8103b50" class="cell" data-execution_count="50">
<div class="sourceCode cell-code" id="cb70" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb70-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 고민해 본 방법2 : joblib로 인코더 저장 (타 프로젝트에서 해 본 방법)</span></span>
<span id="cb70-2"></span>
<span id="cb70-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> joblib</span>
<span id="cb70-4"></span>
<span id="cb70-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0. 인코딩 전 데이터의 X, Y 확인</span></span>
<span id="cb70-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""X : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>categorical_data[le_columns]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb70-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">      Y : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TARGET'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>index<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb70-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">      """</span>)</span>
<span id="cb70-9"></span>
<span id="cb70-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. 각 열마다 별도의 LabelEncoder 생성 및 학습</span></span>
<span id="cb70-11">label_encoders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb70-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> le_columns:</span>
<span id="cb70-13">    le <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LabelEncoder()</span>
<span id="cb70-14">    le.fit(categorical_data[col])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LabelEncoder 학습</span></span>
<span id="cb70-15">    label_encoders[col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> le      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 학습된 인코더를 딕셔너리에 저장</span></span>
<span id="cb70-16"></span>
<span id="cb70-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. LabelEncoder 딕셔너리를 joblib으로 저장</span></span>
<span id="cb70-18">joblib.dump(label_encoders, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label_encoders.pkl'</span>)</span>
<span id="cb70-19"></span>
<span id="cb70-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. 저장된 LabelEncoder를 사용해 transform 적용</span></span>
<span id="cb70-21">label_encoders_loaded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> joblib.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'label_encoders.pkl'</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 인코더 불러오기</span></span>
<span id="cb70-22">encoded_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> categorical_data[le_columns].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(</span>
<span id="cb70-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> col: label_encoders_loaded[col.name].transform(col)</span>
<span id="cb70-24">)</span>
<span id="cb70-25"></span>
<span id="cb70-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결과 확인</span></span>
<span id="cb70-27">encoded_data.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>X : RangeIndex(start=0, stop=307511, step=1)
      Y : RangeIndex(start=0, stop=307511, step=1)
      </code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="50">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">NAME_TYPE_SUITE</th>
<th data-quarto-table-cell-role="th">NAME_INCOME_TYPE</th>
<th data-quarto-table-cell-role="th">NAME_FAMILY_STATUS</th>
<th data-quarto-table-cell-role="th">NAME_HOUSING_TYPE</th>
<th data-quarto-table-cell-role="th">OCCUPATION_TYPE</th>
<th data-quarto-table-cell-role="th">WEEKDAY_APPR_PROCESS_START</th>
<th data-quarto-table-cell-role="th">ORGANIZATION_TYPE</th>
<th data-quarto-table-cell-role="th">FONDKAPREMONT_MODE</th>
<th data-quarto-table-cell-role="th">WALLSMATERIAL_MODE</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>6</td>
<td>7</td>
<td>3</td>
<td>1</td>
<td>8</td>
<td>6</td>
<td>5</td>
<td>2</td>
<td>5</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1</td>
<td>4</td>
<td>1</td>
<td>1</td>
<td>3</td>
<td>1</td>
<td>39</td>
<td>2</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>6</td>
<td>7</td>
<td>3</td>
<td>1</td>
<td>8</td>
<td>1</td>
<td>11</td>
<td>4</td>
<td>7</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>6</td>
<td>7</td>
<td>0</td>
<td>1</td>
<td>8</td>
<td>6</td>
<td>5</td>
<td>4</td>
<td>7</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>6</td>
<td>7</td>
<td>3</td>
<td>1</td>
<td>3</td>
<td>4</td>
<td>37</td>
<td>4</td>
<td>7</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="e91642b1" class="cell">
<div class="sourceCode cell-code" id="cb72" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb72-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 고민해 본 방법2-2 : joblib로 저장한 인코더 로딩하는 예제</span></span>
<span id="cb72-2"></span>
<span id="cb72-3">encoder_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> joblib.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'encoder_label.pkl'</span>)</span>
<span id="cb72-4">x_data_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder_label.transform(df_dropped[x_column], df_dropped[y_column])</span></code></pre></div>
</div>
<div id="89d3af78" class="cell">
<div class="sourceCode cell-code" id="cb73" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb73-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 답</span></span>
<span id="cb73-2"></span>
<span id="cb73-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 각 컬럼에 대한 LabelEncoder를 저장할 딕셔너리</span></span>
<span id="cb73-4">encoders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb73-5"></span>
<span id="cb73-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## apply를 사용해 벡터 연산으로 처리</span></span>
<span id="cb73-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> encode_column(column):</span>
<span id="cb73-8">    le <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LabelEncoder()</span>
<span id="cb73-9">    encoders[column.name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> le  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 컬럼명을 key로 LabelEncoder 저장</span></span>
<span id="cb73-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> le.fit_transform(column)</span>
<span id="cb73-11"></span>
<span id="cb73-12">df_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> categorical_data[le_columns].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(encode_column)</span></code></pre></div>
</div>
<ul>
<li>순위를 반영해야하는 경우 Ordinal인코딩
<ul>
<li>순위가 명확한 학벌에 대해 적용</li>
<li>Order는 낮은 → 높은 순서로 반영</li>
</ul></li>
</ul>
<div id="471a8946" class="cell">
<div class="sourceCode cell-code" id="cb74" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb74-1">np.unique(categorical_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NAME_EDUCATION_TYPE'</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array(['Academic degree', 'Higher education', 'Incomplete higher',
       'Lower secondary', 'Secondary / secondary special'], dtype=object)</code></pre>
</div>
</div>
<div id="bf4c6a10" class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb76" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb76-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OrdinalEncoder</span>
<span id="cb76-2"></span>
<span id="cb76-3">order <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb76-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Lower secondary'</span>,</span>
<span id="cb76-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Secondary / secondary special'</span>,</span>
<span id="cb76-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Incomplete higher'</span>,</span>
<span id="cb76-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Higher education'</span>,</span>
<span id="cb76-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Academic degree'</span></span>
<span id="cb76-9">]</span>
<span id="cb76-10"></span>
<span id="cb76-11">oe <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OrdinalEncoder(categories<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[order])</span>
<span id="cb76-12">oe_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> oe.fit_transform(categorical_data[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NAME_EDUCATION_TYPE'</span>]], )</span>
<span id="cb76-13">oe_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(oe_df.flatten(), index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>categorical_data.index, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NAME_EDUCATION_TYPE_Encoded'</span>)</span>
<span id="cb76-14"></span>
<span id="cb76-15">oe_df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="52">
<pre><code>0    1.0
1    3.0
2    1.0
3    1.0
4    1.0
Name: NAME_EDUCATION_TYPE_Encoded, dtype: float64</code></pre>
</div>
</div>
</section>
<section id="구간화-1" class="level3">
<h3 class="anchored" data-anchor-id="구간화-1">구간화</h3>
<ul>
<li><p>구간화를 할 만큼 제반지식(도메인)이 충분하지 않으므로, 임의의 더미 데이터로 구간화 실습</p></li>
<li><p><code>sklearn.preprocessing</code>의 <code>KBinsDiscretizer</code></p></li>
<li><p>아래 코드데이터를 보면, 실 성능에 도움이 되지 않을 수 있음</p>
<pre><code>  Accuracy without binning: 0.9600
  Accuracy with binning: 0.9567</code></pre></li>
<li><p><strong>구간화가 주는 메모리적 이득이 크지 않다면, 적용하는 것을 신중히 고려</strong></p></li>
</ul>
<div id="ff199cf5" class="cell">
<div class="sourceCode cell-code" id="cb79" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb79-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb79-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb79-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> make_classification</span>
<span id="cb79-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb79-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.ensemble <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RandomForestClassifier</span>
<span id="cb79-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score</span>
<span id="cb79-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> KBinsDiscretizer</span>
<span id="cb79-8"></span>
<span id="cb79-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 신용점수 데이터 생성</span></span>
<span id="cb79-10">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb79-11">num_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb79-12">credit_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, num_samples)</span>
<span id="cb79-13">annual_income <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20_000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100_000</span>, num_samples)</span>
<span id="cb79-14"></span>
<span id="cb79-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 신용점수와 대출 승인 여부 설계</span></span>
<span id="cb79-16">target_credit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(credit_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb79-17">random_noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_samples, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>])</span>
<span id="cb79-18">target_credit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(random_noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> target_credit, target_credit)</span>
<span id="cb79-19"></span>
<span id="cb79-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 더미 데이터 생성 (make_classification)</span></span>
<span id="cb79-21">X_dummy, y_dummy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_classification(</span>
<span id="cb79-22">    n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_samples,         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 샘플 수</span></span>
<span id="cb79-23">    n_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 총 피처 수</span></span>
<span id="cb79-24">    n_informative<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 유의미한 피처 수</span></span>
<span id="cb79-25">    n_redundant<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 중복된 피처 수</span></span>
<span id="cb79-26">    n_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,                   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 클래스 수</span></span>
<span id="cb79-27">    random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>,               <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 재현성을 위한 랜덤 시드</span></span>
<span id="cb79-28">    class_sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 클래스 간 분리 정도</span></span>
<span id="cb79-29">)</span>
<span id="cb79-30"></span>
<span id="cb79-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 신용점수 데이터와 더미 데이터 결합</span></span>
<span id="cb79-32">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(X_dummy, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"dummy_feature_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(X_dummy.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])])</span>
<span id="cb79-33">data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"credit_score"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> credit_score</span>
<span id="cb79-34">data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"annual_income"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> annual_income</span>
<span id="cb79-35"></span>
<span id="cb79-36">data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(target_credit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y_dummy, target_credit, y_dummy)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 타겟 혼합</span></span>
<span id="cb79-37"></span>
<span id="cb79-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터 분리</span></span>
<span id="cb79-39">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>])</span>
<span id="cb79-40">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>]</span>
<span id="cb79-41"></span>
<span id="cb79-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 구간화를 적용하지 않은 경우</span></span>
<span id="cb79-43">X_train, X_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb79-44">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomForestClassifier(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb79-45">model.fit(X_train, y_train)</span>
<span id="cb79-46">non_binned_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(X_test)</span>
<span id="cb79-47">non_binned_accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, non_binned_preds)</span>
<span id="cb79-48"></span>
<span id="cb79-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 신용점수에 구간화 적용 (고위험: 0~400, 중위험: 400~700, 저위험: 700~1000)</span></span>
<span id="cb79-50">binner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KBinsDiscretizer(n_bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, encode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ordinal'</span>, strategy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uniform'</span>)</span>
<span id="cb79-51">X_binned <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.copy()</span>
<span id="cb79-52">X_binned[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"credit_score"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> binner.fit_transform(X[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"credit_score"</span>]]).flatten()</span>
<span id="cb79-53"></span>
<span id="cb79-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터 분리 (구간화된 데이터)</span></span>
<span id="cb79-55">X_train_binned, X_test_binned, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X_binned, y, test_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb79-56">model_binned <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RandomForestClassifier(random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb79-57">model_binned.fit(X_train_binned, y_train)</span>
<span id="cb79-58">binned_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_binned.predict(X_test_binned)</span>
<span id="cb79-59">binned_accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_test, binned_preds)</span>
<span id="cb79-60"></span>
<span id="cb79-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결과 출력</span></span>
<span id="cb79-62"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Accuracy without binning: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>non_binned_accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb79-63"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Accuracy with binning: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>binned_accuracy<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy without binning: 0.9600
Accuracy with binning: 0.9567</code></pre>
</div>
</div>
</section>
<section id="과제" class="level3">
<h3 class="anchored" data-anchor-id="과제">과제</h3>
<ul>
<li>개인/팀에 따라 주어진 과제 데이터에 대해, <strong>EDA와 전처리</strong> 진행 후, 데이터마트(csv파일) 만들기</li>
<li>데이터를 처음보는(모르는) 사람에게 잘 설명하는 것이 앞으로의 (분석)업무임을 생각하며 진행</li>
<li>위의 과정이 들어간 ipynb파일을 과제로 제출(+만든 csv파일은 계속 활용할 것이므로 잘 가지고 있기)</li>
<li>과제 유형
<ul>
<li>단체 과제 : Home Credit Default Risk (주택담보대출)
<ul>
<li>https://www.kaggle.com/c/home-credit-default-risk/overview</li>
<li>특징
<ul>
<li>실제 현업처럼 데이터가 나뉘어 있음</li>
<li><strong>(분석용 마트를 만들기 위해)먼저 Merge를 한 후, 개인별로 EDA를 하는 경우가 많음</strong></li>
<li>이 과제의 모든 데이터를 쓸 필요는 없음 (좀 더 보고싶은 변수들을 Merge)
<ul>
<li>application_{train|test}.csv 파일만으로도 (y값)제출 진행 가능함</li>
</ul></li>
<li><strong>인코딩을 제외하고는 필수 전처리는 아님. 다만 좋은 결과를 위해서는 추가해야 함</strong></li>
<li>기존에 소개한 산탄데르 과제는 너무 과한 과제로 보여 제외함
<ul>
<li>https://www.kaggle.com/competitions/santander-customer-satisfaction/overview</li>
</ul></li>
</ul></li>
</ul></li>
<li>개인 과제 : 월간 데이콘 신용카드 사용자 연체 예측 AI 경진대회 (신용카드 연체예측)
<ul>
<li>https://dacon.io/competitions/official/235713/overview/description</li>
<li>특징
<ul>
<li>단체 과제보다 컬럼의 수가 적음</li>
</ul></li>
</ul></li>
</ul></li>
</ul>


</section>
</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>EDA</category>
  <category>Preprocessing</category>
  <category>202412Study_DataAnalysis</category>
  <guid>https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20250105/</guid>
  <pubDate>Sun, 05 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[DA스터디/2주차] SQL심화</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20241229/</link>
  <description><![CDATA[ 






<p>금융권 데이터를 활용한 분석 스터디 - 2주차</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>아래의 목적/이유로 참가한 스터디에 대한 기록
<ul>
<li>SQLD취득 후 장기 미사용 &amp; GPT를 통한 SQL사용 등으로 많이 잊은 SQL을 복기</li>
<li>기존에 사용해 본 Optuna가 아닌 Autogluon이 커리큘럼에 있어 익혀보고자 함</li>
<li>기존에 관심있던 XAI(설명가능한 AI)를 익히고자 함</li>
</ul></li>
<li>2주차 요약
<ul>
<li>SQL의 자료형, 함수(CAST, COALESCE 등), 서브쿼리와 CTE</li>
<li>프로그래머스의 SQL문제풀이 과제</li>
<li>참고 : 하단 실습코드는 head() 적용되어 있음(불필요하게 긴 포스팅 방지)</li>
</ul></li>
</ul>
</section>
<section id="주차-수업정리" class="level1">
<h1>2주차 수업정리</h1>
<section id="자료형" class="level2">
<h2 class="anchored" data-anchor-id="자료형">자료형</h2>
<ul>
<li>SQL문법마다 조금씩 다르지만, 일반적으로 아래와 같음
<ul>
<li>정보가 없는 경우 : NULL</li>
<li>문자형 : TEXT (STRING / VARCHAR)</li>
<li>숫자형 : INT (INTEGER), REAL (FLOAT / DOUBLE)</li>
<li>날짜/시간형 : TIMESTAMP (DATE / TIME / DATETIME / TIMESTAMP)</li>
</ul></li>
</ul>
<section id="문자-자료형" class="level3">
<h3 class="anchored" data-anchor-id="문자-자료형">문자 자료형</h3>
<ul>
<li><code>TEXT</code> : <strong>길이 제한이 없는</strong> 문자열 변수. 로그, 리뷰 등 긴 텍스트 저장</li>
<li><code>CHAR</code> : <strong>길이가 고정된</strong> 문자열 변수. 전화/우편번호 등 길이가 일정한 문자열 저장
<ul>
<li>길이가 부족하면 공백으로 채움</li>
</ul></li>
<li><code>VARCHAR</code> : <strong>길이가 가변인</strong> 문자열 변수. <strong>가장 일반적으로 사용</strong>
<ul>
<li>최대길이를 지정하여 사용</li>
</ul></li>
</ul>
</section>
<section id="숫자-자료형" class="level3">
<h3 class="anchored" data-anchor-id="숫자-자료형">숫자 자료형</h3>
<ul>
<li><p>정수형 변수</p>
<ul>
<li><code>INT</code>: (소숫점이 없는)정수형 변수. 판매수량, 차량 대수 등 저장
<ul>
<li><code>BIGINT</code> / <code>SMALLINT</code> : 자릿수에 따라 지정. 매출 등 큰 숫자를 BIGINT로 저장
<ul>
<li>큰 숫자일 필요가 없다면 SMALLINT지정하여 메모리를 절약</li>
</ul></li>
<li>INT간 연산은 INT를 반환하므로, 결과가 FLOAT 등 소수가 될 경우 유의</li>
</ul></li>
</ul></li>
<li><p>부동소수점 변수</p>
<ul>
<li><code>REAL</code>: <strong>부동소수점</strong>인 실수형 변수.
<ul>
<li>부동소수점 : 소수점의 위치가 바뀌며, 유효숫자 X 10^지수 형태로 저장</li>
<li>부동소수점 예시 (지수의 값에 따라 소숫점이 이동한다)
<ul>
<li>1234.5 → 유효숫자 1.2345 &amp; 지수 <img src="https://latex.codecogs.com/png.latex?10%5E3"></li>
<li>1.2345 → 유효숫자 1.2345 &amp; 지수 <img src="https://latex.codecogs.com/png.latex?10%5E0"></li>
<li>1.2345e3 와 같은 형태로 나타내기도 함</li>
</ul></li>
<li>일반적으로 REAL은 7자리 정도의 유효숫자를 가짐</li>
</ul></li>
<li><code>DOUBLE</code> : <code>REAL</code>보다 약 2배인 15자리 정도의 유효숫자를 가지는 실수형 변수</li>
<li><code>FLOAT(p)</code> : (REAL, DOUBLE과 달리)정밀도를 지정할 수 있는 실수형 변수
<ul>
<li>FLOAT(24) : REAL과 동일 / FLOAT(53) : DOUBLE과 동일
<ul>
<li>추가검색해본 결과, p는 유효숫자수가 아니며, FLOAT(24)=REAL은 바이트 수 기준.</li>
</ul></li>
<li>여기까지 REAL, DOUBLE, FLOAT를 부동소수점 변수라 부릅니다.</li>
</ul></li>
</ul></li>
<li><p>고정소수점 변수</p>
<ul>
<li><code>DECIMAL(m, d)</code>: <strong>고정소수점</strong>인 실수형 변수.
<ul>
<li>고정소수점 : 정밀도가 아니라 소수점의 위치를 고정(DECIMAL 형태의 자료형)</li>
<li>m은 유효숫자의 개수, d는 소수점 이하의 자릿수</li>
<li>DECIMAL 지정예시 : 1234.5 → DECIMAL(5,1)</li>
</ul></li>
</ul></li>
<li><p>부동소수점 vs 고정소수점 비교</p>
<table class="caption-top table">
<colgroup>
<col style="width: 16%">
<col style="width: 42%">
<col style="width: 40%">
</colgroup>
<thead>
<tr class="header">
<th><strong>특징</strong></th>
<th><strong>부동소수점</strong></th>
<th><strong>고정소수점</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>소수점 위치</strong></td>
<td>가변적</td>
<td>고정적</td>
</tr>
<tr class="even">
<td><strong>저장 방식</strong></td>
<td>유효숫자와 지수를 저장</td>
<td>정수와 소수점 위치를 기반으로 저장</td>
</tr>
<tr class="odd">
<td><strong>표현 가능 범위</strong></td>
<td>매우 크거나 작은 값 표현 가능</td>
<td>표현 가능 범위 제한</td>
</tr>
<tr class="even">
<td><strong>정밀도</strong></td>
<td>제한적, 오차 발생 가능</td>
<td>정밀도 100% 보장</td>
</tr>
<tr class="odd">
<td><strong>연산 속도</strong></td>
<td>상대적으로 느림</td>
<td>상대적으로 빠름</td>
</tr>
<tr class="even">
<td><strong>주요 사용 사례</strong></td>
<td>과학적 계산, 통계</td>
<td>금융, 회계, 정밀한 금액 계산</td>
</tr>
<tr class="odd">
<td><strong>SQL 자료형</strong></td>
<td>REAL, FLOAT, DOUBLE</td>
<td>DECIMAL, NUMERIC</td>
</tr>
</tbody>
</table></li>
</ul>
</section>
<section id="날짜시간-자료형" class="level3">
<h3 class="anchored" data-anchor-id="날짜시간-자료형">날짜/시간 자료형</h3>
<ul>
<li><p><code>DATE</code> / <code>TIME</code> : 날짜/시간 형태 데이터 (YYYY-MM-DD 또는 HH:MM:SS 형태로 저장)</p></li>
<li><p><code>DATETIME</code> / <code>TIMESTAMP</code> : 날짜+시간 형태의 자료 (YYYY-MM-DD HH:MM:SS 형태로 저장)</p>
<ul>
<li>DATETIME VS TIMESTAMP
<ul>
<li>DATETIME은 입력값을 그대로 저장 / TIMESTAMP는 UTC(협정세계시)로 변환</li>
<li>글로벌서비스라면 TIMESTAMP, 값을 유지하고 싶으면 DATETIME</li>
</ul></li>
</ul></li>
</ul>
</section>
</section>
<section id="자료형-변환cast함수" class="level2">
<h2 class="anchored" data-anchor-id="자료형-변환cast함수">자료형 변환(CAST함수)</h2>
<ul>
<li>일반적으로 CAST함수로 변환. <code>CAST(컬럼명 AS 변수형)</code> 형태로 사용</li>
</ul>
</section>
<section id="자료형-변환-실습" class="level2">
<h2 class="anchored" data-anchor-id="자료형-변환-실습">자료형 변환 실습</h2>
<div id="9636b892" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlite3</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SQLite 데이터베이스 파일 연결 (db가 없으면 자동 생성)</span></span>
<span id="cb1-5">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my_database.db'</span>, timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb1-6">cursor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span></code></pre></div>
</div>
<div id="cafa7018" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># INT간 연산의 잘못된 예시 : c_camp_rt = campaign / (campaign + previous)</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 5행(idx 41187)의 값이 0.75가 아닌 0으로 잘못되었음</span></span>
<span id="cb2-3">pd.read_sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT campaign / (campaign + previous) AS c_camp_rt, campaign, previous FROM tb_camp'</span>, conn).tail(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">c_camp_rt</th>
<th data-quarto-table-cell-role="th">campaign</th>
<th data-quarto-table-cell-role="th">previous</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">41183</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">41184</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">41185</td>
<td>1</td>
<td>2</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">41186</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">41187</td>
<td>0</td>
<td>3</td>
<td>1</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="0847a143" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CAST를 활용해 연산 정확하게 하기</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 메모리 효율을 위해, (FLOAT가 아닌)REAL 사용</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 메모리 효율을 위해, CAST 횟수를 최소화 (분모에서 합한 후 사용)</span></span>
<span id="cb3-4">pd.read_sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT CAST(campaign AS REAL) / CAST((campaign + previous) AS REAL) AS c_camp_rt, campaign, previous FROM tb_camp'</span>, conn).tail(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">c_camp_rt</th>
<th data-quarto-table-cell-role="th">campaign</th>
<th data-quarto-table-cell-role="th">previous</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">41183</td>
<td>1.00</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">41184</td>
<td>1.00</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">41185</td>
<td>1.00</td>
<td>2</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">41186</td>
<td>1.00</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">41187</td>
<td>0.75</td>
<td>3</td>
<td>1</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="문자열-함수" class="level2">
<h2 class="anchored" data-anchor-id="문자열-함수">문자열 함수</h2>
<ul>
<li>사용하는 SQL에 따라 상이하나 일반적으로 아래와 같음</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">UPPER</span>(col) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LOWER</span>(col) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 문자열을 대 / 소문자로 변환하는 함수입니다.</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">LENGTH</span>(col) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 문자열의 길이를 반환하는 함수입니다.</span></span>
<span id="cb4-3">SUBSTRING(col, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">start</span>, n) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 문자열의 start 부터 n개의 문자를 반환하는 함수입니다.</span></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">REPLACE</span>(문자열, 문자1, 문자2) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 문자1을 문자2로 통째로 변환합니다.</span></span></code></pre></div>
<section id="upper대문자-변환-lower소문자-변환-length문자열-길이" class="level3">
<h3 class="anchored" data-anchor-id="upper대문자-변환-lower소문자-변환-length문자열-길이">UPPER(대문자 변환), LOWER(소문자 변환), LENGTH(문자열 길이)</h3>
<div id="3443e7d9" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 초기 데이터</span></span>
<span id="cb5-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb5-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    job</span></span>
<span id="cb5-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM tb_cst</span></span>
<span id="cb5-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-6"></span>
<span id="cb5-7">pd.read_sql_query(q, conn).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">job</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>housemaid</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>services</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>services</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>admin.</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>services</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="8962c113" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># UPPER를 통한 대문자 변환 / LENGTH를 통한 문자길이 계산</span></span>
<span id="cb6-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb6-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    UPPER(job) as upper_job,</span></span>
<span id="cb6-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    LENGTH(job) as len_job</span></span>
<span id="cb6-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM tb_cst</span></span>
<span id="cb6-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-7"></span>
<span id="cb6-8">pd.read_sql_query(q, conn).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">upper_job</th>
<th data-quarto-table-cell-role="th">len_job</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>HOUSEMAID</td>
<td>9</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>SERVICES</td>
<td>8</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>SERVICES</td>
<td>8</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>ADMIN.</td>
<td>6</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>SERVICES</td>
<td>8</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="substr지정한-위치부터-n개-글자-가져오기" class="level3">
<h3 class="anchored" data-anchor-id="substr지정한-위치부터-n개-글자-가져오기">SUBSTR(지정한 위치부터 N개 글자 가져오기)</h3>
<ul>
<li>아래는 데이터의 첫 글자만 떼어내어, CHAR(1)로 저장해 메모리를 절약하는 예제</li>
</ul>
<div id="ce43fb52" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 초기 데이터(marital 컬럼의 모든 데이터의 unique값 첫 글자가 일치하지 않음)</span></span>
<span id="cb7-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb7-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    marital</span></span>
<span id="cb7-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM tb_cst</span></span>
<span id="cb7-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-6"></span>
<span id="cb7-7">pd.read_sql_query(q, conn)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'marital'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array(['married', 'single', 'divorced', 'unknown'], dtype=object)</code></pre>
</div>
</div>
<div id="0780821c" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb9-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    CAST(SUBSTR(marital,1,1) AS CHAR(1)) as mr_c</span></span>
<span id="cb9-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM tb_cst</span></span>
<span id="cb9-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb9-5"></span>
<span id="cb9-6">pd.read_sql_query(q, conn).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">mr_c</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>m</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>m</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>m</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>m</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>m</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>m</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>m</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>m</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>s</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>s</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<ul>
<li>아래는 SUBSTR로 뒤의 2글자를 자르는 예제</li>
</ul>
<div id="e0f19a83" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb10-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    marital,</span></span>
<span id="cb10-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SUBSTR(marital, LENGTH(marital)-1, 2) as last2</span></span>
<span id="cb10-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM tb_cst</span></span>
<span id="cb10-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-6">pd.read_sql_query(q, conn).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">marital</th>
<th data-quarto-table-cell-role="th">last2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>married</td>
<td>ed</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>married</td>
<td>ed</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>married</td>
<td>ed</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>married</td>
<td>ed</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>married</td>
<td>ed</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>married</td>
<td>ed</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>married</td>
<td>ed</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>married</td>
<td>ed</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>single</td>
<td>le</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>single</td>
<td>le</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="replace단어-찾아-바꾸기" class="level3">
<h3 class="anchored" data-anchor-id="replace단어-찾아-바꾸기">REPLACE(단어 찾아 바꾸기)</h3>
<ul>
<li>아래는 다양한 곳에서 예약어로 사용되는 <code>.</code>을, 데이터에서 제거하는 예제</li>
</ul>
<div id="c540679a" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 초기 데이터(education 컬럼의 unique값)</span></span>
<span id="cb11-2">pd.read_sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select * from tb_cst'</span>, conn).job.unique()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array(['housemaid', 'services', 'admin.', 'blue-collar', 'technician',
       'retired', 'management', 'unemployed', 'self-employed', 'unknown',
       'entrepreneur', 'student'], dtype=object)</code></pre>
</div>
</div>
<div id="4e60cf7d" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Replace적용된 데이터 (. 찾아 삭제)</span></span>
<span id="cb13-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT job, REPLACE(job, 'admin.', 'admin') AS new_job</span></span>
<span id="cb13-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM tb_cst</span></span>
<span id="cb13-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb13-5">pd.read_sql(q, conn).new_job.unique()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array(['housemaid', 'services', 'admin', 'blue-collar', 'technician',
       'retired', 'management', 'unemployed', 'self-employed', 'unknown',
       'entrepreneur', 'student'], dtype=object)</code></pre>
</div>
</div>
</section>
</section>
<section id="문자열-함수-실습" class="level2">
<h2 class="anchored" data-anchor-id="문자열-함수-실습">문자열 함수 실습</h2>
<ul>
<li>tb_cst에서 job이 ’blue*collar’인 사람에 대해</li>
<li>하이픈 (-)을 언더바(_*로 바꾼뒤, 직업을 대문자로 바꿔서 new_job을 반환하기</li>
</ul>
<div id="61b2222d" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 실습 답안</span></span>
<span id="cb15-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT job, UPPER(REPLACE(job, 'blue-collar', 'blue_collar')) AS new_job</span></span>
<span id="cb15-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM tb_cst</span></span>
<span id="cb15-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb15-5">pd.read_sql(q, conn).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">job</th>
<th data-quarto-table-cell-role="th">new_job</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>housemaid</td>
<td>HOUSEMAID</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>services</td>
<td>SERVICES</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>services</td>
<td>SERVICES</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>admin.</td>
<td>ADMIN.</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>services</td>
<td>SERVICES</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>services</td>
<td>SERVICES</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>admin.</td>
<td>ADMIN.</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>blue-collar</td>
<td>BLUE_COLLAR</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>technician</td>
<td>TECHNICIAN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>services</td>
<td>SERVICES</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="c3d5f88e" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 메모리 절약하기 : 처음 Replace부터 대문자를 적용하여 UPPER함수 미사용</span></span>
<span id="cb16-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT job, REPLACE(job, 'blue-collar', 'BLUE_COLLAR') AS new_job</span></span>
<span id="cb16-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM tb_cst</span></span>
<span id="cb16-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb16-5">pd.read_sql(q, conn).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">job</th>
<th data-quarto-table-cell-role="th">new_job</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>housemaid</td>
<td>housemaid</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>services</td>
<td>services</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>services</td>
<td>services</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>admin.</td>
<td>admin.</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>services</td>
<td>services</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>services</td>
<td>services</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>admin.</td>
<td>admin.</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>blue-collar</td>
<td>BLUE_COLLAR</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>technician</td>
<td>technician</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>services</td>
<td>services</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="숫자-함수" class="level2">
<h2 class="anchored" data-anchor-id="숫자-함수">숫자 함수</h2>
<ul>
<li>집계함수(SUM, AVG, VAR, COUNT 등)는 계산결과를 보여주지만, 이번에는 단일 숫자를 변환</li>
<li><code>FLOOR</code>(버림), <code>CEIL</code>(올림), <code>ROUND</code>(반올림)</li>
<li><code>ABS</code>(절대값), <code>MOD</code>(나눈 후 나머지), <code>LOG</code>, <code>LN</code>(자연로그), <code>EXP</code>, <code>SQRT</code> 등
<ul>
<li>LOG(숫자, 컬럼명)의 경우 숫자는 밑이며, 생략시 10이거나 SQL에 따라 달라짐</li>
</ul></li>
<li>사용하는 SQL에 따라 문법은 다를 수 있음</li>
</ul>
<div id="3c2c563b" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 버림/올림/반올림</span></span>
<span id="cb17-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb17-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    cons_price_idx,</span></span>
<span id="cb17-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    FLOOR(cons_price_idx) AS fl_idx,</span></span>
<span id="cb17-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    CEIL(cons_price_idx) AS cl_idx,</span></span>
<span id="cb17-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ROUND(cons_price_idx, 1) AS rd_idx1,</span></span>
<span id="cb17-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ROUND(cons_price_idx, 2) AS rd_idx2</span></span>
<span id="cb17-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM tb_out</span></span>
<span id="cb17-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb17-10">pd.read_sql(q, conn)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">cons_price_idx</th>
<th data-quarto-table-cell-role="th">fl_idx</th>
<th data-quarto-table-cell-role="th">cl_idx</th>
<th data-quarto-table-cell-role="th">rd_idx1</th>
<th data-quarto-table-cell-role="th">rd_idx2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>93.994</td>
<td>93.0</td>
<td>94.0</td>
<td>94.0</td>
<td>93.99</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>93.994</td>
<td>93.0</td>
<td>94.0</td>
<td>94.0</td>
<td>93.99</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>93.994</td>
<td>93.0</td>
<td>94.0</td>
<td>94.0</td>
<td>93.99</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>93.994</td>
<td>93.0</td>
<td>94.0</td>
<td>94.0</td>
<td>93.99</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>93.994</td>
<td>93.0</td>
<td>94.0</td>
<td>94.0</td>
<td>93.99</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">370</td>
<td>94.767</td>
<td>94.0</td>
<td>95.0</td>
<td>94.8</td>
<td>94.77</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">371</td>
<td>94.767</td>
<td>94.0</td>
<td>95.0</td>
<td>94.8</td>
<td>94.77</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">372</td>
<td>94.767</td>
<td>94.0</td>
<td>95.0</td>
<td>94.8</td>
<td>94.77</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">373</td>
<td>94.767</td>
<td>94.0</td>
<td>95.0</td>
<td>94.8</td>
<td>94.77</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">374</td>
<td>94.767</td>
<td>94.0</td>
<td>95.0</td>
<td>94.8</td>
<td>94.77</td>
</tr>
</tbody>
</table>

<p>375 rows × 5 columns</p>
</div>
</div>
</div>
<div id="58ab7130" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 로그, 로그2읫, e의 4승, 4의 제곱근, e의 4승의 자연로그, 4를 2로 나눈 나머지, 4의 절대값</span></span>
<span id="cb18-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb18-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    4,</span></span>
<span id="cb18-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    LOG(4),</span></span>
<span id="cb18-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    LOG(2,4),</span></span>
<span id="cb18-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    EXP(4),</span></span>
<span id="cb18-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SQRT(4),</span></span>
<span id="cb18-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    LN(EXP(4)),</span></span>
<span id="cb18-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    MOD(4,2),</span></span>
<span id="cb18-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ABS(4)</span></span>
<span id="cb18-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb18-12">pd.read_sql(q, conn)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">4</th>
<th data-quarto-table-cell-role="th">LOG(4)</th>
<th data-quarto-table-cell-role="th">LOG(2,4)</th>
<th data-quarto-table-cell-role="th">EXP(4)</th>
<th data-quarto-table-cell-role="th">SQRT(4)</th>
<th data-quarto-table-cell-role="th">LN(EXP(4))</th>
<th data-quarto-table-cell-role="th">MOD(4,2)</th>
<th data-quarto-table-cell-role="th">ABS(4)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>4</td>
<td>0.60206</td>
<td>2.0</td>
<td>54.59815</td>
<td>2.0</td>
<td>4.0</td>
<td>0.0</td>
<td>4</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="숫자-함수-실습" class="level2">
<h2 class="anchored" data-anchor-id="숫자-함수-실습">숫자 함수 실습</h2>
<ul>
<li>tb_out 테이블의</li>
<li>nr_employed 열에 대해서</li>
<li>자연로그를 씌워서 ln_nr_employed열에,</li>
<li>제곱근을 구해서 sqrt_nr_employed열에 할당해 봅시다</li>
</ul>
<div id="48097689" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># write your code</span></span>
<span id="cb19-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb19-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    LN(nr_employed) as ln_nr_employed,</span></span>
<span id="cb19-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SQRT(nr_employed) as sqrt_nr_employed</span></span>
<span id="cb19-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM tb_out</span></span>
<span id="cb19-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb19-7">pd.read_sql(q, conn)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">ln_nr_employed</th>
<th data-quarto-table-cell-role="th">sqrt_nr_employed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>8.554682</td>
<td>72.048595</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>8.554682</td>
<td>72.048595</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>8.554682</td>
<td>72.048595</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>8.554682</td>
<td>72.048595</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>8.554682</td>
<td>72.048595</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">370</td>
<td>8.509887</td>
<td>70.452821</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">371</td>
<td>8.509887</td>
<td>70.452821</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">372</td>
<td>8.509887</td>
<td>70.452821</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">373</td>
<td>8.509887</td>
<td>70.452821</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">374</td>
<td>8.509887</td>
<td>70.452821</td>
</tr>
</tbody>
</table>

<p>375 rows × 2 columns</p>
</div>
</div>
</div>
</section>
<section id="날짜-함수" class="level2">
<h2 class="anchored" data-anchor-id="날짜-함수">날짜 함수</h2>
<ul>
<li><p>SQL별 문법차이가 커서, 자세한 부분은 사용하기 전 공식문서를 확인</p></li>
<li><p>STFRTIME 함수는 공통적으로 있는 편</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb20-1">STRFTIME(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'format'</span>, col) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-- 날짜 데이터를 원하는 지정한 format의 문자열로 변환해서 반환합니다.</span></span></code></pre></div>
<table class="caption-top table">
<colgroup>
<col style="width: 11%">
<col style="width: 56%">
<col style="width: 31%">
</colgroup>
<thead>
<tr class="header">
<th>코드</th>
<th>설명</th>
<th>예시</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>%Y</code></td>
<td>연도 (4자리)</td>
<td>2024</td>
</tr>
<tr class="even">
<td><code>%y</code></td>
<td>연도 (2자리)</td>
<td>24</td>
</tr>
<tr class="odd">
<td><code>%m</code></td>
<td>월 (2자리)</td>
<td>01 (1월), 12 (12월)</td>
</tr>
<tr class="even">
<td><code>%d</code></td>
<td>일 (2자리)</td>
<td>01 (1일), 31 (31일)</td>
</tr>
<tr class="odd">
<td><code>%H</code></td>
<td>시간 (24시간제, 2자리)</td>
<td>00 (자정), 23 (23시)</td>
</tr>
<tr class="even">
<td><code>%M</code></td>
<td>분 (2자리)</td>
<td>00, 59</td>
</tr>
<tr class="odd">
<td><code>%S</code></td>
<td>초 (2자리)</td>
<td>00, 59</td>
</tr>
<tr class="even">
<td><code>%w</code></td>
<td>요일 (0: 일요일, 6: 토요일)</td>
<td>0 (일요일), 6 (토요일)</td>
</tr>
<tr class="odd">
<td><code>%W</code></td>
<td>연중 주 번호 (0부터 시작)</td>
<td>00, 52</td>
</tr>
<tr class="even">
<td><code>%j</code></td>
<td>연중 일 번호 (1부터 시작)</td>
<td>001 (1월 1일), 365</td>
</tr>
<tr class="odd">
<td><code>%f</code></td>
<td>소수점 이하 초 (마이크로초 단위, 6자리)</td>
<td>123456</td>
</tr>
<tr class="even">
<td><code>%s</code></td>
<td>Unix Timestamp (1970년 1월 1일부터의 초)</td>
<td>1708953600</td>
</tr>
<tr class="odd">
<td><code>%z</code></td>
<td>UTC 오프셋 (시간대 정보)</td>
<td>+0000, -0800</td>
</tr>
<tr class="even">
<td><code>%Z</code></td>
<td>시간대 이름 (예: UTC)</td>
<td>UTC</td>
</tr>
<tr class="odd">
<td><code>%%</code></td>
<td><code>%</code> 문자 그대로</td>
<td>%</td>
</tr>
</tbody>
</table></li>
</ul>
<div id="4bbb88d5" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 실습용 테이블 생성</span></span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 테이블 생성</span></span>
<span id="cb21-4">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""CREATE TABLE tb_dates (</span></span>
<span id="cb21-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    order_id INTEGER PRIMARY KEY,</span></span>
<span id="cb21-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    order_date TEXT</span></span>
<span id="cb21-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">);"""</span></span>
<span id="cb21-8">conn.execute(q)</span>
<span id="cb21-9"></span>
<span id="cb21-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 샘플데이터 입력</span></span>
<span id="cb21-11">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""INSERT INTO tb_dates (order_id, order_date) VALUES</span></span>
<span id="cb21-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">(1, '2024-12-26 10:30:00'),</span></span>
<span id="cb21-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">(2, '2024-12-25 14:20:00'),</span></span>
<span id="cb21-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">(3, '2024-12-24 08:00:00');</span></span>
<span id="cb21-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb21-16">conn.execute(q)</span></code></pre></div>
</div>
<div id="865dc4c6" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># STFRTIME 실습</span></span>
<span id="cb22-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT order_id, order_date, STRFTIME('%Y', order_date) AS order_year FROM tb_dates;"""</span></span>
<span id="cb22-3">pd.read_sql(q, conn)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">order_id</th>
<th data-quarto-table-cell-role="th">order_date</th>
<th data-quarto-table-cell-role="th">order_year</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1</td>
<td>2024-12-26 10:30:00</td>
<td>2024</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2</td>
<td>2024-12-25 14:20:00</td>
<td>2024</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>3</td>
<td>2024-12-24 08:00:00</td>
<td>2024</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<ul>
<li>DB별 날짜 간의 차이구하는 샘플</li>
</ul>
<table class="caption-top table">
<colgroup>
<col style="width: 10%">
<col style="width: 60%">
<col style="width: 28%">
</colgroup>
<thead>
<tr class="header">
<th><strong>Database</strong></th>
<th><strong>SQL Query</strong></th>
<th><strong>설명</strong></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>MySQL</strong></td>
<td><code>SELECT DATEDIFF('2024-12-31', '2024-12-25') AS days_difference;</code></td>
<td>두 날짜 간의 차이를 <strong>일 단위</strong>로 반환</td>
</tr>
<tr class="even">
<td><strong>Oracle</strong></td>
<td><code>SELECT TO_DATE('2024-12-31', 'YYYY-MM-DD') - TO_DATE('2024-12-25', 'YYYY-MM-DD') AS days_difference FROM dual;</code></td>
<td>날짜 간 차이를 <strong>일 단위</strong>로 반환</td>
</tr>
<tr class="odd">
<td><strong>SQLite3</strong></td>
<td><code>SELECT JULIANDAY('2024-12-31') - JULIANDAY('2024-12-25') AS days_difference;</code></td>
<td>두 날짜의 <strong>율리우스 날짜 차이</strong>를 계산</td>
</tr>
<tr class="even">
<td><strong>Hive</strong></td>
<td><code>SELECT DATEDIFF('2024-12-31', '2024-12-25') AS days_difference;</code></td>
<td>날짜 차이를 <strong>일 단위</strong>로 반환</td>
</tr>
<tr class="odd">
<td><strong>PostgreSQL</strong></td>
<td><code>SELECT '2024-12-31'::DATE - '2024-12-25'::DATE AS days_difference;</code></td>
<td>두 날짜 간의 차이를 <strong>일 단위</strong>로 반환</td>
</tr>
</tbody>
</table>
</section>
<section id="case-when-조건문" class="level2">
<h2 class="anchored" data-anchor-id="case-when-조건문">CASE WHEN 조건문</h2>
<ul>
<li>CASE WHEN</li>
</ul>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb23-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CASE</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHEN</span> 조건1 <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">THEN</span> 결과1</span>
<span id="cb23-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHEN</span> 조건2 <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">THEN</span> 결과2</span>
<span id="cb23-3">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>.</span>
<span id="cb23-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ELSE</span> 모든 조건을 만족하지 않을 때의 결과 <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">END</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> 변수명</span></code></pre></div>
<ul>
<li>아래 표의 education(학력)은, 순위가 있는 Ordinal변수
<ul>
<li>한 자리 숫자코드로 지정해 모델이 이해하기 쉽게 / 메모리효율이 높아지게 함</li>
</ul></li>
</ul>
<div id="3dad7c22" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">pd.read_sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT education FROM tb_cst'</span>, conn).education.unique()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array(['basic.4y', 'high.school', 'basic.6y', 'basic.9y',
       'professional.course', 'unknown', 'university.degree',
       'illiterate'], dtype=object)</code></pre>
</div>
</div>
<div id="cf798895" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb26-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    education,</span></span>
<span id="cb26-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    CASE WHEN education = 'illiterate' THEN 0</span></span>
<span id="cb26-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">         WHEN education = 'basic.4y' THEN 1</span></span>
<span id="cb26-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">         WHEN education = 'basic.6y' THEN 2</span></span>
<span id="cb26-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">         WHEN education = 'basic.9y' THEN 3</span></span>
<span id="cb26-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">         WHEN education = 'high.school' THEN 4</span></span>
<span id="cb26-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">         WHEN education = 'university.degree' THEN 5</span></span>
<span id="cb26-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">         WHEN education = 'professional.course' THEN 6</span></span>
<span id="cb26-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">         WHEN education = 'unknown' THEN 99</span></span>
<span id="cb26-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">         ELSE 99 END AS education_c</span></span>
<span id="cb26-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM tb_cst</span></span>
<span id="cb26-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb26-14">pd.read_sql(q, conn).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">education</th>
<th data-quarto-table-cell-role="th">education_c</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>basic.4y</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>high.school</td>
<td>4</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>high.school</td>
<td>4</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>basic.6y</td>
<td>2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>high.school</td>
<td>4</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>basic.9y</td>
<td>3</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>professional.course</td>
<td>6</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>unknown</td>
<td>99</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>professional.course</td>
<td>6</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>high.school</td>
<td>4</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<ul>
<li>학력별 고객 수를 1K 이상/이하 등으로 지정하는 예시</li>
</ul>
<div id="735701a9" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb27-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    education,</span></span>
<span id="cb27-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    COUNT(*) AS n_cst,</span></span>
<span id="cb27-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    CASE WHEN COUNT(*) &gt; 1000 THEN 'Above 1K'</span></span>
<span id="cb27-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">         ELSE 'Below 1K'</span></span>
<span id="cb27-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">         END AS n_cst_over_1k</span></span>
<span id="cb27-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM tb_cst</span></span>
<span id="cb27-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">GROUP BY education</span></span>
<span id="cb27-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb27-10">pd.read_sql(q, conn)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">education</th>
<th data-quarto-table-cell-role="th">n_cst</th>
<th data-quarto-table-cell-role="th">n_cst_over_1k</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>basic.4y</td>
<td>4176</td>
<td>Above 1K</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>basic.6y</td>
<td>2292</td>
<td>Above 1K</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>basic.9y</td>
<td>6045</td>
<td>Above 1K</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>high.school</td>
<td>9515</td>
<td>Above 1K</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>illiterate</td>
<td>18</td>
<td>Below 1K</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>professional.course</td>
<td>5243</td>
<td>Above 1K</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>university.degree</td>
<td>12168</td>
<td>Above 1K</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>unknown</td>
<td>1731</td>
<td>Above 1K</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="sql실행순서-case-when-사용시-유의할-점" class="level2">
<h2 class="anchored" data-anchor-id="sql실행순서-case-when-사용시-유의할-점">SQL실행순서 (+CASE WHEN 사용시 유의할 점)</h2>
<ul>
<li>SQL실행순서
<ol type="1">
<li>FROM &amp; JOIN</li>
<li>WHERE</li>
<li>GROUP BY</li>
<li>HAVING</li>
<li>SELECT (window function, case when)</li>
<li>ORDER BY</li>
<li>LIMIT</li>
</ol></li>
<li>CASE WHEN은 SELECT 안에서 실행되므로, CASE WHEN으로 생성한 변수를 쓰려면 별칭이 아닌 구문 전체를 사용
<ul>
<li>AS는 오류를 일으키는 경우가 많아 END까지만 작성</li>
</ul></li>
</ul>
</section>
<section id="case-when-실습" class="level2">
<h2 class="anchored" data-anchor-id="case-when-실습">CASE WHEN 실습</h2>
<ul>
<li>고객의 직업별로</li>
<li>확실히 파산한 고객의 수를 n_default_cst에 할당한 뒤 (Unique한 수를 세려면 DISTINCT를 열 앞에 붙여주세요. COUNT(DISTINCT COL) 이렇게요.)</li>
<li>1명 이상 있다면 1 없으면 0을 is_default_job에 할당해주세요.</li>
</ul>
<div id="a374842b" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb28-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">job, </span></span>
<span id="cb28-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SUM(CASE WHEN is_default = 'yes' THEN 1</span></span>
<span id="cb28-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        ELSE 0</span></span>
<span id="cb28-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        END) AS n_default_cst,</span></span>
<span id="cb28-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">CASE WHEN SUM(CASE WHEN is_default = 'yes' then 1</span></span>
<span id="cb28-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        ELSE 0</span></span>
<span id="cb28-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        END) &gt;= 1 THEN 1</span></span>
<span id="cb28-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        ELSE 0</span></span>
<span id="cb28-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        END AS is_default_job</span></span>
<span id="cb28-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM tb_cst</span></span>
<span id="cb28-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">GROUP BY job</span></span>
<span id="cb28-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb28-14">pd.read_sql(q, conn)</span>
<span id="cb28-15"></span>
<span id="cb28-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 위 사항은 자주 사용되는 케이스임</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">job</th>
<th data-quarto-table-cell-role="th">n_default_cst</th>
<th data-quarto-table-cell-role="th">is_default_job</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>admin.</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>blue-collar</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>entrepreneur</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>housemaid</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>management</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>retired</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>self-employed</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>services</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>student</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>technician</td>
<td>2</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>unemployed</td>
<td>1</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">11</td>
<td>unknown</td>
<td>0</td>
<td>0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="join과-union" class="level2">
<h2 class="anchored" data-anchor-id="join과-union">JOIN과 UNION</h2>
<ul>
<li>서로 다른 두 테이블을 합치고 싶을 때 JOIN 사용(Python pandas의 merge와 동일)</li>
<li>FROM절 다음에 사용</li>
</ul>
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb29-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb29-2">    tb1.col1_from_tb1,</span>
<span id="cb29-3">    tb1.col2_from_tb1,</span>
<span id="cb29-4">    tb1.join_key,</span>
<span id="cb29-5">    tb2.col1_from_tb2</span>
<span id="cb29-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> table1 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> tb1</span>
<span id="cb29-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'JOIN 방법'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span> tabl2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> tb2</span>
<span id="cb29-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ON</span> tb1.join_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tb2.join_key</span>
<span id="cb29-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>.</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20241229/index_files/figure-html/d19c77be-1-Note_week2_1.jpg" class="img-fluid figure-img"></p>
<figcaption>Note_week2_1.jpg</figcaption>
</figure>
</div>
<div id="927c4fe9" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># JOIN대상 테이블1</span></span>
<span id="cb30-2">tb_cst <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM tb_cst'</span>, conn)</span>
<span id="cb30-3">tb_cst.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">age</th>
<th data-quarto-table-cell-role="th">job</th>
<th data-quarto-table-cell-role="th">marital</th>
<th data-quarto-table-cell-role="th">education</th>
<th data-quarto-table-cell-role="th">is_default</th>
<th data-quarto-table-cell-role="th">housing</th>
<th data-quarto-table-cell-role="th">loan</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2023-01-01</td>
<td>0</td>
<td>56</td>
<td>housemaid</td>
<td>married</td>
<td>basic.4y</td>
<td>no</td>
<td>no</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2023-01-01</td>
<td>1</td>
<td>57</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>unknown</td>
<td>no</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2023-01-01</td>
<td>2</td>
<td>37</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
<td>yes</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2023-01-01</td>
<td>3</td>
<td>40</td>
<td>admin.</td>
<td>married</td>
<td>basic.6y</td>
<td>no</td>
<td>no</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2023-01-01</td>
<td>4</td>
<td>56</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
<td>no</td>
<td>yes</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="ea0d21c1" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># JOIN대상 테이블2</span></span>
<span id="cb31-2">tb_camp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM tb_camp'</span>, conn)</span>
<span id="cb31-3">tb_camp.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">contact</th>
<th data-quarto-table-cell-role="th">month</th>
<th data-quarto-table-cell-role="th">day_of_week</th>
<th data-quarto-table-cell-role="th">duration</th>
<th data-quarto-table-cell-role="th">campaign</th>
<th data-quarto-table-cell-role="th">pdays</th>
<th data-quarto-table-cell-role="th">previous</th>
<th data-quarto-table-cell-role="th">poutcome</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2023-01-01</td>
<td>0</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>261</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2023-01-01</td>
<td>1</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>149</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2023-01-01</td>
<td>2</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>226</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2023-01-01</td>
<td>3</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>151</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2023-01-01</td>
<td>4</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>307</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="4d182de3" class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># JOIN대상 테이블3</span></span>
<span id="cb32-2">tb_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM tb_out'</span>, conn)</span>
<span id="cb32-3">tb_out.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">emp_var_rate</th>
<th data-quarto-table-cell-role="th">cons_price_idx</th>
<th data-quarto-table-cell-role="th">cons_conf_idx</th>
<th data-quarto-table-cell-role="th">euribor3m</th>
<th data-quarto-table-cell-role="th">nr_employed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2023-01-01</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2023-01-02</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.856</td>
<td>5191.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2023-01-03</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.855</td>
<td>5191.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2023-01-04</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.859</td>
<td>5191.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2023-01-05</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.860</td>
<td>5191.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<ul>
<li>LEFT JOIN 예시</li>
</ul>
<div id="c6933451" class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LEFT JOIN 예시</span></span>
<span id="cb33-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb33-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.date, -- from절에서 가져올 열들을 별칭을 활용해 지정해 줍니다.</span></span>
<span id="cb33-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.idx,</span></span>
<span id="cb33-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.age,</span></span>
<span id="cb33-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.job,</span></span>
<span id="cb33-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.marital,</span></span>
<span id="cb33-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.education,</span></span>
<span id="cb33-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.is_default,</span></span>
<span id="cb33-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.housing,</span></span>
<span id="cb33-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.loan,</span></span>
<span id="cb33-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    o1.emp_var_rate, -- 마찬가지로 join절에서 가져올 열 역시 지정이 가능합니다.</span></span>
<span id="cb33-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    o1.cons_price_idx,</span></span>
<span id="cb33-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    o1.cons_conf_idx,</span></span>
<span id="cb33-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    o1.euribor3m,</span></span>
<span id="cb33-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    o1.nr_employed</span></span>
<span id="cb33-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM tb_cst AS c1</span></span>
<span id="cb33-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">LEFT JOIN tb_out AS o1</span></span>
<span id="cb33-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  ON c1.date = o1.date</span></span>
<span id="cb33-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb33-21">pd.read_sql(q, conn).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">age</th>
<th data-quarto-table-cell-role="th">job</th>
<th data-quarto-table-cell-role="th">marital</th>
<th data-quarto-table-cell-role="th">education</th>
<th data-quarto-table-cell-role="th">is_default</th>
<th data-quarto-table-cell-role="th">housing</th>
<th data-quarto-table-cell-role="th">loan</th>
<th data-quarto-table-cell-role="th">emp_var_rate</th>
<th data-quarto-table-cell-role="th">cons_price_idx</th>
<th data-quarto-table-cell-role="th">cons_conf_idx</th>
<th data-quarto-table-cell-role="th">euribor3m</th>
<th data-quarto-table-cell-role="th">nr_employed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2023-01-01</td>
<td>0</td>
<td>56</td>
<td>housemaid</td>
<td>married</td>
<td>basic.4y</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2023-01-01</td>
<td>1</td>
<td>57</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>unknown</td>
<td>no</td>
<td>no</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2023-01-01</td>
<td>2</td>
<td>37</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2023-01-01</td>
<td>3</td>
<td>40</td>
<td>admin.</td>
<td>married</td>
<td>basic.6y</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2023-01-01</td>
<td>4</td>
<td>56</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
<td>no</td>
<td>yes</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<ul>
<li>INNER JOIN 예시</li>
</ul>
<div id="3b719633" class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># JOIN대상 테이블4</span></span>
<span id="cb34-2">tb_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM tb_y'</span>, conn)</span>
<span id="cb34-3">tb_y.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2023-01-01</td>
<td>0</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2023-01-01</td>
<td>1</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2023-01-01</td>
<td>2</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2023-01-01</td>
<td>3</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2023-01-01</td>
<td>5</td>
<td>no</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="81cc9215" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># INNER JOIN 예시</span></span>
<span id="cb35-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb35-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.date, -- from절에서 가져올 열들을 별칭을 활용해 지정해 줍니다.</span></span>
<span id="cb35-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.idx,</span></span>
<span id="cb35-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.age,</span></span>
<span id="cb35-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.job,</span></span>
<span id="cb35-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.marital,</span></span>
<span id="cb35-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.education,</span></span>
<span id="cb35-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.is_default,</span></span>
<span id="cb35-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.housing,</span></span>
<span id="cb35-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.loan,</span></span>
<span id="cb35-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    y1.y</span></span>
<span id="cb35-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM tb_cst AS c1</span></span>
<span id="cb35-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">INNER JOIN tb_y AS y1</span></span>
<span id="cb35-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  ON c1.date = y1.date</span></span>
<span id="cb35-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    AND c1.idx = y1.idx</span></span>
<span id="cb35-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb35-18">co <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(q, conn)</span>
<span id="cb35-19">co.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">age</th>
<th data-quarto-table-cell-role="th">job</th>
<th data-quarto-table-cell-role="th">marital</th>
<th data-quarto-table-cell-role="th">education</th>
<th data-quarto-table-cell-role="th">is_default</th>
<th data-quarto-table-cell-role="th">housing</th>
<th data-quarto-table-cell-role="th">loan</th>
<th data-quarto-table-cell-role="th">y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2023-01-01</td>
<td>0</td>
<td>56</td>
<td>housemaid</td>
<td>married</td>
<td>basic.4y</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2023-01-01</td>
<td>1</td>
<td>57</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>unknown</td>
<td>no</td>
<td>no</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2023-01-01</td>
<td>2</td>
<td>37</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2023-01-01</td>
<td>3</td>
<td>40</td>
<td>admin.</td>
<td>married</td>
<td>basic.6y</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2023-01-01</td>
<td>5</td>
<td>45</td>
<td>services</td>
<td>married</td>
<td>basic.9y</td>
<td>unknown</td>
<td>no</td>
<td>no</td>
<td>no</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="561b626c" class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""INNER JOIN의 결과 행의 개수 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>co<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb36-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">기존 tb_cst의 행의 개수 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tb_cst<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>INNER JOIN의 결과 행의 개수 : 37534
기존 tb_cst의 행의 개수 : 41188</code></pre>
</div>
</div>
</section>
<section id="coalesce또는-nvl" class="level2">
<h2 class="anchored" data-anchor-id="coalesce또는-nvl">COALESCE(또는 NVL)</h2>
<ul>
<li><p>NULL이 들어갈 자리에 지정한 값을 넣음</p>
<div class="sourceCode" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb38-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COALESCE</span>(tb1.col1, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">as</span> col1</span></code></pre></div></li>
<li><p>위에서 INNER JOIN사용시 값이 줄었는데, Y값이 없다는 것을 YES가 아닌 NO나 UNKNOWN으로 구분해 이진/다중 분류로 사용하고 싶을 때에도 활용 가능</p></li>
</ul>
<div id="4d225900" class="cell">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb39-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.date, -- from절에서 가져올 열들을 별칭을 활용해 지정해 줍니다.</span></span>
<span id="cb39-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.idx,</span></span>
<span id="cb39-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.age,</span></span>
<span id="cb39-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.job,</span></span>
<span id="cb39-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.marital,</span></span>
<span id="cb39-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.education,</span></span>
<span id="cb39-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.is_default,</span></span>
<span id="cb39-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.housing,</span></span>
<span id="cb39-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.loan,</span></span>
<span id="cb39-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    COALESCE(y1.y, 'no') as y</span></span>
<span id="cb39-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM tb_cst AS c1</span></span>
<span id="cb39-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">LEFT JOIN tb_y AS y1</span></span>
<span id="cb39-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  ON c1.date = y1.date</span></span>
<span id="cb39-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    AND c1.idx = y1.idx</span></span>
<span id="cb39-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb39-17">co2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(q, conn)</span>
<span id="cb39-18">co2.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">age</th>
<th data-quarto-table-cell-role="th">job</th>
<th data-quarto-table-cell-role="th">marital</th>
<th data-quarto-table-cell-role="th">education</th>
<th data-quarto-table-cell-role="th">is_default</th>
<th data-quarto-table-cell-role="th">housing</th>
<th data-quarto-table-cell-role="th">loan</th>
<th data-quarto-table-cell-role="th">y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2023-01-01</td>
<td>0</td>
<td>56</td>
<td>housemaid</td>
<td>married</td>
<td>basic.4y</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2023-01-01</td>
<td>1</td>
<td>57</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>unknown</td>
<td>no</td>
<td>no</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2023-01-01</td>
<td>2</td>
<td>37</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2023-01-01</td>
<td>3</td>
<td>40</td>
<td>admin.</td>
<td>married</td>
<td>basic.6y</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2023-01-01</td>
<td>4</td>
<td>56</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
<td>no</td>
<td>yes</td>
<td>no</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="39cdbd4b" class="cell">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># NULL로 채워넣어 행의 수가 줄지 않음</span></span>
<span id="cb40-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""INNER JOIN의 결과 행의 개수 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>co2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb40-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">기존 tb_cst의 행의 개수 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>tb_cst<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>INNER JOIN의 결과 행의 개수 : 41188
기존 tb_cst의 행의 개수 : 41188</code></pre>
</div>
</div>
</section>
<section id="join과-coalese-실습" class="level2">
<h2 class="anchored" data-anchor-id="join과-coalese-실습">JOIN과 COALESE 실습</h2>
<ul>
<li>tb_cst, tb_camp, tb_out, tb_y를 전부 JOIN해 tb_master table을 만들어 저장하세요.</li>
<li>tb_cst, tb_camp, tb_y는 date, idx를 key로, tb_out은 date를 key로 갖습니다.</li>
<li>tb_y가 null인 경우, ’unknown’으로 값을 채워 넣으세요.</li>
</ul>
<div id="4bbdaa34" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">conn.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DROP TABLE IF EXISTS tb_master"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>&lt;sqlite3.Cursor at 0x150ffa8a5c0&gt;</code></pre>
</div>
</div>
<div id="2ed4691a" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb44-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">CREATE TABLE tb_master AS</span></span>
<span id="cb44-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT</span></span>
<span id="cb44-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        *</span></span>
<span id="cb44-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        ,COALESCE(c3.y, 'unknown')</span></span>
<span id="cb44-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    FROM tb_cst as c1</span></span>
<span id="cb44-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    LEFT JOIN tb_camp as c2</span></span>
<span id="cb44-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        ON c1.date = c2.date AND c1.idx = c2.idx</span></span>
<span id="cb44-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    LEFT JOIN tb_y as c3</span></span>
<span id="cb44-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        ON c1.date = c3.date AND c1.idx = c3.idx</span></span>
<span id="cb44-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    LEFT JOIN tb_out as d1</span></span>
<span id="cb44-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        ON c1.date = d1.date</span></span>
<span id="cb44-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb44-14">conn.execute(q)</span>
<span id="cb44-15"></span>
<span id="cb44-16">pd.read_sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SELECT * FROM tb_master'</span>, conn).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">age</th>
<th data-quarto-table-cell-role="th">job</th>
<th data-quarto-table-cell-role="th">marital</th>
<th data-quarto-table-cell-role="th">education</th>
<th data-quarto-table-cell-role="th">is_default</th>
<th data-quarto-table-cell-role="th">housing</th>
<th data-quarto-table-cell-role="th">loan</th>
<th data-quarto-table-cell-role="th">date:1</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">date:2</th>
<th data-quarto-table-cell-role="th">idx:2</th>
<th data-quarto-table-cell-role="th">y</th>
<th data-quarto-table-cell-role="th">date:3</th>
<th data-quarto-table-cell-role="th">emp_var_rate</th>
<th data-quarto-table-cell-role="th">cons_price_idx</th>
<th data-quarto-table-cell-role="th">cons_conf_idx</th>
<th data-quarto-table-cell-role="th">euribor3m</th>
<th data-quarto-table-cell-role="th">nr_employed</th>
<th data-quarto-table-cell-role="th">COALESCE(c3.y, 'unknown')</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2023-01-01</td>
<td>0</td>
<td>56</td>
<td>housemaid</td>
<td>married</td>
<td>basic.4y</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>2023-01-01</td>
<td>...</td>
<td>2023-01-01</td>
<td>0.0</td>
<td>no</td>
<td>2023-01-01</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2023-01-01</td>
<td>1</td>
<td>57</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>unknown</td>
<td>no</td>
<td>no</td>
<td>2023-01-01</td>
<td>...</td>
<td>2023-01-01</td>
<td>1.0</td>
<td>no</td>
<td>2023-01-01</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2023-01-01</td>
<td>2</td>
<td>37</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>2023-01-01</td>
<td>...</td>
<td>2023-01-01</td>
<td>2.0</td>
<td>no</td>
<td>2023-01-01</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2023-01-01</td>
<td>3</td>
<td>40</td>
<td>admin.</td>
<td>married</td>
<td>basic.6y</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>2023-01-01</td>
<td>...</td>
<td>2023-01-01</td>
<td>3.0</td>
<td>no</td>
<td>2023-01-01</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2023-01-01</td>
<td>4</td>
<td>56</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
<td>no</td>
<td>yes</td>
<td>2023-01-01</td>
<td>...</td>
<td>None</td>
<td>NaN</td>
<td>None</td>
<td>2023-01-01</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>unknown</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>2023-01-01</td>
<td>5</td>
<td>45</td>
<td>services</td>
<td>married</td>
<td>basic.9y</td>
<td>unknown</td>
<td>no</td>
<td>no</td>
<td>2023-01-01</td>
<td>...</td>
<td>2023-01-01</td>
<td>5.0</td>
<td>no</td>
<td>2023-01-01</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>2023-01-01</td>
<td>6</td>
<td>59</td>
<td>admin.</td>
<td>married</td>
<td>professional.course</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>2023-01-01</td>
<td>...</td>
<td>2023-01-01</td>
<td>6.0</td>
<td>no</td>
<td>2023-01-01</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>2023-01-01</td>
<td>7</td>
<td>41</td>
<td>blue-collar</td>
<td>married</td>
<td>unknown</td>
<td>unknown</td>
<td>no</td>
<td>no</td>
<td>2023-01-01</td>
<td>...</td>
<td>2023-01-01</td>
<td>7.0</td>
<td>no</td>
<td>2023-01-01</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>2023-01-01</td>
<td>8</td>
<td>24</td>
<td>technician</td>
<td>single</td>
<td>professional.course</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>2023-01-01</td>
<td>...</td>
<td>2023-01-01</td>
<td>8.0</td>
<td>no</td>
<td>2023-01-01</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>2023-01-01</td>
<td>9</td>
<td>25</td>
<td>services</td>
<td>single</td>
<td>high.school</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>2023-01-01</td>
<td>...</td>
<td>2023-01-01</td>
<td>9.0</td>
<td>no</td>
<td>2023-01-01</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
</tbody>
</table>

<p>10 rows × 29 columns</p>
</div>
</div>
</div>
</section>
<section id="서브쿼리와-cte" class="level2">
<h2 class="anchored" data-anchor-id="서브쿼리와-cte">서브쿼리와 CTE</h2>
<ul>
<li>실무에서는 쿼리가 길고 많은 테이블을 가져다가 쓰게 됨</li>
<li>매번 위처럼 CREATE TABLE로 업무하면 전산팀 등에서 용량 문제로 연락올 수 있음</li>
<li>이런 문제가 발생치 않도록 할 수 있는 것이 <code>서브쿼리</code>와 <code>CTE</code></li>
<li>서브쿼리는 사용이 편하나 가독성/재활용성이 떨어지고, CTE는 이해하기 용이함
<ul>
<li>본인의 업무에 맞게 활용</li>
</ul></li>
</ul>
<section id="서브쿼리" class="level3">
<h3 class="anchored" data-anchor-id="서브쿼리">서브쿼리</h3>
<ul>
<li>FROM, WHERE, HAVING 등 다양한 곳에 사용할 수 있음
<ul>
<li>보통 FROM, JOIN, WHERE에 많이 사용</li>
</ul></li>
<li>장점 : 별도 테이블로 저장/삭제할 필요없이 쿼리를 적어 사용가능</li>
<li>단점 : 가독성, 재활용</li>
<li>서브쿼리 샘플 (LEFT JOIN부분)</li>
</ul>
<div class="sourceCode" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb45-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb45-2">    c1.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb45-3">    c2.marital_rate_per_job</span>
<span id="cb45-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> tb_cst <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> c1</span>
<span id="cb45-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LEFT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span> (</span>
<span id="cb45-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb45-7">    job,</span>
<span id="cb45-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUM</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CASE</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHEN</span> marital <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'married'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">THEN</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ELSE</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">END</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> marital_rate_per_job</span>
<span id="cb45-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> tb_cst</span>
<span id="cb45-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> job</span>
<span id="cb45-11">) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> c2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ON</span> c1.job <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c2.job</span></code></pre></div>
</section>
<section id="ctecommon-table-expressions" class="level3">
<h3 class="anchored" data-anchor-id="ctecommon-table-expressions">CTE(Common Table Expressions)</h3>
<ul>
<li>WITH + 임시테이블명을 지정 후, 호출하여 사용가능</li>
</ul>
<div class="sourceCode" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb46-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WITH</span> 임시테이블명 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> (</span>
<span id="cb46-2">원래 서브쿼리에 들어가던 쿼리</span>
<span id="cb46-3">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>.</span></code></pre></div>
<ul>
<li>여러개를 지정할 경우, WITH는 한번만 쓰고 ,(쉼표)로 구분</li>
<li>적절한 테이블네이밍과 주석을 통해, 장기적 관점에서 관리/활용이 용이함</li>
<li>CTE 샘플</li>
</ul>
<div class="sourceCode" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb47-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WITH</span> tb_marital_rate_per_job <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> (</span>
<span id="cb47-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb47-3">        job,</span>
<span id="cb47-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SUM</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CASE</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHEN</span> marital <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'married'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">THEN</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ELSE</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">END</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> marital_rate_per_job</span>
<span id="cb47-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> tb_cst</span>
<span id="cb47-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> job</span>
<span id="cb47-7">    )</span>
<span id="cb47-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb47-9">        c1.<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>,</span>
<span id="cb47-10">        c2.marital_rate_per_job</span>
<span id="cb47-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> tb_cst <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> c1</span>
<span id="cb47-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LEFT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span> tb_marital_rate_per_job <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> c2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ON</span> c1.job <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> c2.job</span></code></pre></div>
</section>
</section>
<section id="서브쿼리와-cte실습" class="level2">
<h2 class="anchored" data-anchor-id="서브쿼리와-cte실습">서브쿼리와 CTE실습</h2>
<ul>
<li>켐페인 정보 테이블에 대해서</li>
<li>contact별 평균 pdays를 구해 avg_pdays_per_contact에 할당하고 (단 999는 제외할 것)</li>
<li>day_of_week별 평균 duration을 구해 avg_duration_per_dow에 할당하고</li>
<li>해당 두 컬럼을 켐페인 정보 테이블에 LEFT JOIN한 결과를 서브쿼리와 CTE 각각을 사용해 구하세요.</li>
</ul>
<div id="ad8f9191" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 서브쿼리</span></span>
<span id="cb48-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb48-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SELECT</span></span>
<span id="cb48-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    *</span></span>
<span id="cb48-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM tb_camp AS main</span></span>
<span id="cb48-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">LEFT JOIN (SELECT contact, AVG(pdays)</span></span>
<span id="cb48-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      FROM tb_camp</span></span>
<span id="cb48-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      WHERE pdays != 999</span></span>
<span id="cb48-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      GROUP BY contact) AS avg_pdays_per_contact</span></span>
<span id="cb48-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ON main.contact = avg_pdays_per_contact.contact</span></span>
<span id="cb48-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">LEFT JOIN (SELECT day_of_week, AVG(duration)</span></span>
<span id="cb48-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            FROM tb_camp</span></span>
<span id="cb48-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">            GROUP BY day_of_week) AS avg_duration_per_dow</span></span>
<span id="cb48-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ON main.day_of_week = avg_duration_per_dow.day_of_week</span></span>
<span id="cb48-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb48-16"></span>
<span id="cb48-17">pd.read_sql_query(q, conn).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">contact</th>
<th data-quarto-table-cell-role="th">month</th>
<th data-quarto-table-cell-role="th">day_of_week</th>
<th data-quarto-table-cell-role="th">duration</th>
<th data-quarto-table-cell-role="th">campaign</th>
<th data-quarto-table-cell-role="th">pdays</th>
<th data-quarto-table-cell-role="th">previous</th>
<th data-quarto-table-cell-role="th">poutcome</th>
<th data-quarto-table-cell-role="th">contact</th>
<th data-quarto-table-cell-role="th">AVG(pdays)</th>
<th data-quarto-table-cell-role="th">day_of_week</th>
<th data-quarto-table-cell-role="th">AVG(duration)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2023-01-01</td>
<td>0</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>261</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>telephone</td>
<td>6.212389</td>
<td>mon</td>
<td>246.568358</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2023-01-01</td>
<td>1</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>149</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>telephone</td>
<td>6.212389</td>
<td>mon</td>
<td>246.568358</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2023-01-01</td>
<td>2</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>226</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>telephone</td>
<td>6.212389</td>
<td>mon</td>
<td>246.568358</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2023-01-01</td>
<td>3</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>151</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>telephone</td>
<td>6.212389</td>
<td>mon</td>
<td>246.568358</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2023-01-01</td>
<td>4</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>307</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>telephone</td>
<td>6.212389</td>
<td>mon</td>
<td>246.568358</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>2023-01-01</td>
<td>5</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>198</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>telephone</td>
<td>6.212389</td>
<td>mon</td>
<td>246.568358</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>2023-01-01</td>
<td>6</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>139</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>telephone</td>
<td>6.212389</td>
<td>mon</td>
<td>246.568358</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>2023-01-01</td>
<td>7</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>217</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>telephone</td>
<td>6.212389</td>
<td>mon</td>
<td>246.568358</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>2023-01-01</td>
<td>8</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>380</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>telephone</td>
<td>6.212389</td>
<td>mon</td>
<td>246.568358</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>2023-01-01</td>
<td>9</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>50</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>telephone</td>
<td>6.212389</td>
<td>mon</td>
<td>246.568358</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="27153501" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CTE</span></span>
<span id="cb49-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""WITH avg_pdays_per_contact AS (</span></span>
<span id="cb49-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        SELECT contact, AVG(pdays) as average_pdays</span></span>
<span id="cb49-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      FROM tb_camp</span></span>
<span id="cb49-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      WHERE pdays != 999</span></span>
<span id="cb49-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      GROUP BY contact</span></span>
<span id="cb49-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      ),</span></span>
<span id="cb49-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">avg_duration_per_dow AS (</span></span>
<span id="cb49-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        SELECT day_of_week, AVG(duration) as average_duration</span></span>
<span id="cb49-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        FROM tb_camp</span></span>
<span id="cb49-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        GROUP BY day_of_week</span></span>
<span id="cb49-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">      )</span></span>
<span id="cb49-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SELECT</span></span>
<span id="cb49-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    main.*</span></span>
<span id="cb49-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ,c1.average_pdays</span></span>
<span id="cb49-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ,c2.average_duration</span></span>
<span id="cb49-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM tb_camp AS main</span></span>
<span id="cb49-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">LEFT JOIN avg_pdays_per_contact AS c1</span></span>
<span id="cb49-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ON main.contact = c1.contact</span></span>
<span id="cb49-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">LEFT JOIN avg_duration_per_dow AS c2</span></span>
<span id="cb49-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ON main.day_of_week = c2.day_of_week</span></span>
<span id="cb49-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb49-23"></span>
<span id="cb49-24">pd.read_sql_query(q, conn).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">contact</th>
<th data-quarto-table-cell-role="th">month</th>
<th data-quarto-table-cell-role="th">day_of_week</th>
<th data-quarto-table-cell-role="th">duration</th>
<th data-quarto-table-cell-role="th">campaign</th>
<th data-quarto-table-cell-role="th">pdays</th>
<th data-quarto-table-cell-role="th">previous</th>
<th data-quarto-table-cell-role="th">poutcome</th>
<th data-quarto-table-cell-role="th">average_pdays</th>
<th data-quarto-table-cell-role="th">average_duration</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2023-01-01</td>
<td>0</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>261</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>6.212389</td>
<td>246.568358</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2023-01-01</td>
<td>1</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>149</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>6.212389</td>
<td>246.568358</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2023-01-01</td>
<td>2</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>226</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>6.212389</td>
<td>246.568358</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2023-01-01</td>
<td>3</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>151</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>6.212389</td>
<td>246.568358</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2023-01-01</td>
<td>4</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>307</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>6.212389</td>
<td>246.568358</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>2023-01-01</td>
<td>5</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>198</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>6.212389</td>
<td>246.568358</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>2023-01-01</td>
<td>6</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>139</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>6.212389</td>
<td>246.568358</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>2023-01-01</td>
<td>7</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>217</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>6.212389</td>
<td>246.568358</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>2023-01-01</td>
<td>8</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>380</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>6.212389</td>
<td>246.568358</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>2023-01-01</td>
<td>9</td>
<td>telephone</td>
<td>may</td>
<td>mon</td>
<td>50</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>6.212389</td>
<td>246.568358</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="심화-window함수" class="level2">
<h2 class="anchored" data-anchor-id="심화-window함수">심화 : Window함수</h2>
<ul>
<li><p>Window함수는 데이터의 현재 구조를 유지하며 추가 정보를 제공하기 위해 사용</p>
<ul>
<li>앞서 서브쿼리로 했던, 집계함수 계산 후 Join했던 부분을 대체가능함</li>
</ul></li>
<li><p>(Sorting영향을 많이 받으므로)데이터가 엉망일수록 오히려 성능이 안좋을 수 있으나, 가독성 측면에서 이점</p></li>
<li><p>Window함수의 문법</p>
<div class="sourceCode" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb50-1">집계 함수 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">OVER</span> ([<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">PARTITION</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> 파티션 기준 열] [<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> 정렬 기준 열])</span></code></pre></div>
<ul>
<li>집계 함수
<ul>
<li>RANK, SUM, AVG, COUNT, MIN, MAX</li>
<li>ROW_NUMBER : RANK와 유사하나, 값이 같아도 행 번호는 다름</li>
</ul></li>
<li>OVER
<ul>
<li>모든 WINDOW함수와 함께 사용되는 기본 문법</li>
</ul></li>
<li>PARTITION BY
<ul>
<li>해당 열을 기준으로 데이터를 쪼개어(GROUP BY와 유사) 계산</li>
<li>서브쿼리와 CTE에서 GROUP BY에 해당하는 열이 들어가는 자리</li>
</ul></li>
<li>ORDER BY
<ul>
<li>RANK처럼 순서가 유의미한 함수를 사용할 때 사용</li>
<li>SQLITE3은 미지정시 첫 열을 기준으로 정렬</li>
</ul></li>
</ul></li>
</ul>
<div id="a4b5a111" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Window함수 적용 전 샘플</span></span>
<span id="cb51-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""WITH tb_marital_rate_per_job AS (</span></span>
<span id="cb51-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  SELECT</span></span>
<span id="cb51-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    job,</span></span>
<span id="cb51-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SUM(CASE WHEN marital = 'married' THEN 1.0 ELSE 0.0 END) / COUNT(*) AS marital_rate_per_job</span></span>
<span id="cb51-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  FROM tb_cst</span></span>
<span id="cb51-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  GROUP BY job</span></span>
<span id="cb51-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb51-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SELECT</span></span>
<span id="cb51-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c1.*,</span></span>
<span id="cb51-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    c2.marital_rate_per_job</span></span>
<span id="cb51-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM tb_cst AS c1</span></span>
<span id="cb51-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">LEFT JOIN tb_marital_rate_per_job AS c2 ON c1.job = c2.job</span></span>
<span id="cb51-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb51-15"></span>
<span id="cb51-16">tb_cte <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(q, conn)</span>
<span id="cb51-17">tb_cte.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">age</th>
<th data-quarto-table-cell-role="th">job</th>
<th data-quarto-table-cell-role="th">marital</th>
<th data-quarto-table-cell-role="th">education</th>
<th data-quarto-table-cell-role="th">is_default</th>
<th data-quarto-table-cell-role="th">housing</th>
<th data-quarto-table-cell-role="th">loan</th>
<th data-quarto-table-cell-role="th">marital_rate_per_job</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2023-01-01</td>
<td>0</td>
<td>56</td>
<td>housemaid</td>
<td>married</td>
<td>basic.4y</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>0.733019</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2023-01-01</td>
<td>1</td>
<td>57</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>unknown</td>
<td>no</td>
<td>no</td>
<td>0.577979</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2023-01-01</td>
<td>2</td>
<td>37</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>0.577979</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2023-01-01</td>
<td>3</td>
<td>40</td>
<td>admin.</td>
<td>married</td>
<td>basic.6y</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>0.504030</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2023-01-01</td>
<td>4</td>
<td>56</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
<td>no</td>
<td>yes</td>
<td>0.577979</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>2023-01-01</td>
<td>5</td>
<td>45</td>
<td>services</td>
<td>married</td>
<td>basic.9y</td>
<td>unknown</td>
<td>no</td>
<td>no</td>
<td>0.577979</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>2023-01-01</td>
<td>6</td>
<td>59</td>
<td>admin.</td>
<td>married</td>
<td>professional.course</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>0.504030</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>2023-01-01</td>
<td>7</td>
<td>41</td>
<td>blue-collar</td>
<td>married</td>
<td>unknown</td>
<td>unknown</td>
<td>no</td>
<td>no</td>
<td>0.722606</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>2023-01-01</td>
<td>8</td>
<td>24</td>
<td>technician</td>
<td>single</td>
<td>professional.course</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>0.544268</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>2023-01-01</td>
<td>9</td>
<td>25</td>
<td>services</td>
<td>single</td>
<td>high.school</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>0.577979</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="5e51ff77" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Window함수 적용 후 샘플</span></span>
<span id="cb52-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb52-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    *,</span></span>
<span id="cb52-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SUM(CASE WHEN marital = 'married' THEN 1.0 ELSE 0.0 END) OVER(PARTITION BY job) / COUNT(*) OVER(PARTITION BY job) AS marital_rate_per_job</span></span>
<span id="cb52-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM tb_cst</span></span>
<span id="cb52-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb52-7"></span>
<span id="cb52-8">tb_window <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(q, conn)</span>
<span id="cb52-9">tb_window.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">date</th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">age</th>
<th data-quarto-table-cell-role="th">job</th>
<th data-quarto-table-cell-role="th">marital</th>
<th data-quarto-table-cell-role="th">education</th>
<th data-quarto-table-cell-role="th">is_default</th>
<th data-quarto-table-cell-role="th">housing</th>
<th data-quarto-table-cell-role="th">loan</th>
<th data-quarto-table-cell-role="th">marital_rate_per_job</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2023-01-01</td>
<td>3</td>
<td>40</td>
<td>admin.</td>
<td>married</td>
<td>basic.6y</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>0.50403</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2023-01-01</td>
<td>6</td>
<td>59</td>
<td>admin.</td>
<td>married</td>
<td>professional.course</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>0.50403</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2023-01-01</td>
<td>24</td>
<td>37</td>
<td>admin.</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>0.50403</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2023-01-01</td>
<td>30</td>
<td>46</td>
<td>admin.</td>
<td>married</td>
<td>unknown</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>0.50403</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2023-01-01</td>
<td>38</td>
<td>41</td>
<td>admin.</td>
<td>married</td>
<td>university.degree</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>0.50403</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>2023-01-01</td>
<td>42</td>
<td>38</td>
<td>admin.</td>
<td>single</td>
<td>professional.course</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>0.50403</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>2023-01-01</td>
<td>43</td>
<td>57</td>
<td>admin.</td>
<td>married</td>
<td>university.degree</td>
<td>no</td>
<td>no</td>
<td>yes</td>
<td>0.50403</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>2023-01-01</td>
<td>44</td>
<td>44</td>
<td>admin.</td>
<td>married</td>
<td>university.degree</td>
<td>unknown</td>
<td>yes</td>
<td>no</td>
<td>0.50403</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>2023-01-01</td>
<td>46</td>
<td>57</td>
<td>admin.</td>
<td>married</td>
<td>university.degree</td>
<td>no</td>
<td>yes</td>
<td>yes</td>
<td>0.50403</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>2023-01-01</td>
<td>48</td>
<td>35</td>
<td>admin.</td>
<td>married</td>
<td>university.degree</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>0.50403</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="기타" class="level2">
<h2 class="anchored" data-anchor-id="기타">기타</h2>
<ul>
<li>GROUPBY와 PARTITION BY의 차이 : PARTITION BY는 원래 데이터 형태를 해치치 않음
<ul>
<li>GROUPBY는 지정한 컬럼에 대해 값만 남겨놓고 계산(그룹핑할 데이터를 가져 옴옴)
<ul>
<li>예를 들어 위의 데이터는 41188 row를 가지고있었는데, 이 row를 모두 쓰지 않음</li>
</ul></li>
<li>PARTITION BY는 원래 데이터 형태를 해치치않고, 계산을 위한 임시Window를 활용</li>
</ul></li>
<li>파이썬은 느린편이어서, 가능한 SQL 등으로 전처리를 하고 넘어오는 것이 좋다
<ul>
<li>(강사님 기준 대용량 처리) Polar(가 duckdb보다 좀 더 편했음), ductdb &gt; 파이썬</li>
</ul></li>
</ul>
</section>
<section id="과제" class="level2">
<h2 class="anchored" data-anchor-id="과제">과제</h2>
<section id="프로그래머스-과제-풀기" class="level3">
<h3 class="anchored" data-anchor-id="프로그래머스-과제-풀기">프로그래머스 과제 풀기</h3>
<ul>
<li>저작권 관련 <a href="https://docs.channel.io/grepp_qna/ko/articles/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%EC%9D%98-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%EC%99%B8%EB%B6%80%EC%97%90-%EA%B2%8C%EC%8B%9C%ED%95%A0-%EC%88%98-%EC%9E%88%EB%82%98%EC%9A%94-3f8537c9">프로그래머스 링크</a></li>
</ul>
<pre><code>  코딩 테스트 연습 문제
  코딩테스트 연습에 공개된 문제는 (주)그렙이 저작권을 가지고 있습니다.(지문 하단에 별도 저작권 표시 문제 제외)코딩테스트 연습 문제의 지문, 테스트케이스, 풀이 등과 같은 정보는 비상업적, 비영리적 용도로 게시할 수 있습니다.다만 문제의 지문, 풀이 등과 같은 정보를 단순히 게시하는 것을 넘어, 이를 바탕으로 문제를 풀고 채점이 가능하도록 하는 등의 방식으로 활용하는 것은 제한됩니다.

  ※ 2020 KAKAO BLIND RECRUITMENT, Summer/Winter Coding 등의 문제는 기업 코딩 테스트에 나온 문제이나, 코딩테스트 연습에 공개된 문제이기 때문에 마찬가지로 비상업적, 비영리적 용도로 게시할 수 있습니다.

  (2021. 01. 08 업데이트)</code></pre>
<ul>
<li>문제 이미지가 너무 길어서 풀이했던 것만 남김</li>
<li>https://school.programmers.co.kr/learn/courses/30/lessons/299307</li>
</ul>
<div class="sourceCode" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb54-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ID</span>, </span>
<span id="cb54-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">CASE</span> </span>
<span id="cb54-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHEN</span> SIZE_OF_COLONY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">THEN</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LOW'</span></span>
<span id="cb54-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHEN</span> SIZE_OF_COLONY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> SIZE_OF_COLONY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">THEN</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MEDIUM'</span></span>
<span id="cb54-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHEN</span> SIZE_OF_COLONY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">THEN</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HIGH'</span></span>
<span id="cb54-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">END</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SIZE</span></span>
<span id="cb54-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> ECOLI_DATA</span>
<span id="cb54-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ID</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ASC</span>;</span></code></pre></div>
<ul>
<li>https://school.programmers.co.kr/learn/courses/30/lessons/151139</li>
</ul>
<div class="sourceCode" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb55-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> C1.CAR_ID</span>
<span id="cb55-2">    ,C1.CAR_TYPE</span>
<span id="cb55-3">    ,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ROUND</span>(C1.DAILY_FEE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>C3.DISCOUNT_RATE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> FEE</span>
<span id="cb55-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> CAR_RENTAL_COMPANY_CAR <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> C1</span>
<span id="cb55-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LEFT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span> CAR_RENTAL_COMPANY_RENTAL_HISTORY <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> C2</span>
<span id="cb55-6">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ON</span> C1.CAR_ID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C2.CAR_ID</span>
<span id="cb55-7">            <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> C2.END_DATE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-11-01'</span></span>
<span id="cb55-8">            <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> C2.START_DATE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-11-30'</span>        </span>
<span id="cb55-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb55-10">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> CAR_RENTAL_COMPANY_DISCOUNT_PLAN</span>
<span id="cb55-11">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> DURATION_TYPE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'30일 이상'</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> C3</span>
<span id="cb55-12">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ON</span> C1.CAR_TYPE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> C3.CAR_TYPE</span>
<span id="cb55-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb55-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> C2.CAR_ID <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">IS</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">NULL</span></span>
<span id="cb55-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> C1.CAR_TYPE <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">IN</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'세단'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SUV'</span>)</span>
<span id="cb55-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">HAVING</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> FEE <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> FEE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000000</span></span>
<span id="cb55-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> FEE <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DESC</span>, CAR_TYPE <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ASC</span>, CAR_ID <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DESC</span></span></code></pre></div>
<ul>
<li>https://school.programmers.co.kr/learn/courses/30/lessons/59044</li>
</ul>
<div class="sourceCode" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb56-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb56-2">    AI.NAME,</span>
<span id="cb56-3">    AI.DATETIME</span>
<span id="cb56-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> ANIMAL_INS <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> AI</span>
<span id="cb56-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LEFT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">JOIN</span> ANIMAL_OUTS <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> AO</span>
<span id="cb56-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ON</span> AI.ANIMAL_ID <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AO.ANIMAL_ID</span>
<span id="cb56-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb56-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> AO.ANIMAL_ID <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">IS</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">NULL</span></span>
<span id="cb56-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> DATETIME</span>
<span id="cb56-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">LIMIT</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
<ul>
<li>https://school.programmers.co.kr/learn/courses/30/lessons/157339</li>
</ul>
<div class="sourceCode" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb57-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">MONTH</span>(START_DATE) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">MONTH</span></span>
<span id="cb57-2">    , CAR_ID</span>
<span id="cb57-3">    , <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> RECORDS</span>
<span id="cb57-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> CAR_RENTAL_COMPANY_RENTAL_HISTORY</span>
<span id="cb57-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb57-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> START_DATE <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BETWEEN</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-08-01'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-11-01'</span></span>
<span id="cb57-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> CAR_ID <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">IN</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb57-8">                CAR_ID</span>
<span id="cb57-9">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> CAR_RENTAL_COMPANY_RENTAL_HISTORY</span>
<span id="cb57-10">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb57-11">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> START_DATE <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BETWEEN</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-08-01'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AND</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2022-11-01'</span></span>
<span id="cb57-12">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> CAR_ID</span>
<span id="cb57-13">                <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">HAVING</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">COUNT</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb57-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">GROUP</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">MONTH</span>, CAR_ID</span>
<span id="cb57-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">BY</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">MONTH</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">ASC</span>, CAR_ID <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">DESC</span></span></code></pre></div>


</section>
</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>SQL</category>
  <category>202412Study_DataAnalysis</category>
  <guid>https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20241229/</guid>
  <pubDate>Sun, 29 Dec 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[인프콘2024] ‘혹시 당신은 데이터를 모르는 백엔드 개발자인가요’ 세션 정리</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/infcon2024-20240802/</link>
  <description><![CDATA[ 






<p>인프콘에서 들었던 ‘혹시 당신은 데이터를 모르는 백엔드 개발자인가요’ 세션 내용정리</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>인프콘 세션 듣고 간단히 정리 <br>
<ul>
<li><code>혹시 당신은 데이터를 모르는 백엔드 개발자인가요</code> (김지호 님)</li>
</ul></li>
<li><a href="https://www.inflearn.com/course/%EC%9D%B8%ED%94%84%EC%BD%982024-%EB%8B%A4%EC%8B%9C%EB%B3%B4%EA%B8%B0/dashboard">인프콘 다시보기 사이트</a></li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/infcon2024-20240802/index_files/figure-html/225d807a-1-infcon2024-1.png" class="img-fluid figure-img"></p>
<figcaption>infcon2024-1.png</figcaption>
</figure>
</div>
</section>
<section id="세션내용-정리" class="level1">
<h1>세션내용 정리</h1>
<section id="직무팀에-따른-데이터에-대한-관점-차이" class="level2">
<h2 class="anchored" data-anchor-id="직무팀에-따른-데이터에-대한-관점-차이">직무/팀에 따른 데이터에 대한 관점 차이</h2>
<section id="데이터에-대한-접근" class="level3">
<h3 class="anchored" data-anchor-id="데이터에-대한-접근">데이터에 대한 접근</h3>
<ul>
<li>백엔드 엔지니어 : CRUD(CREATE READ UPDATE DELETE)</li>
<li>데이터 팀 : AIRFLOW, DATA LAKE, OLAP, HADOOP 등</li>
</ul>
</section>
<section id="행-vs-열" class="level3">
<h3 class="anchored" data-anchor-id="행-vs-열">행 vs 열</h3>
<ul>
<li>백엔드 엔지니어 : 행을 잘 읽고 쓰는게 중요
<ul>
<li>고객1이 어떤 물건을 얼마에 샀는지를 보는게 중요</li>
</ul></li>
<li>데이터팀 : 열을 잘 보는게 중요
<ul>
<li>비즈니스 인사이트를 위한 부분. 어떤 품목이 몇개나 팔렸나 등</li>
</ul></li>
<li><strong>열 기준의 데이터 관점</strong>을 잘 알게되었을 때의 장점
<ul>
<li><strong>데이터 분석비용 감소, 확장성/생산성 증가</strong></li>
</ul></li>
</ul>
</section>
<section id="데이터에-대한-관점차이로-발생하는-문제" class="level3">
<h3 class="anchored" data-anchor-id="데이터에-대한-관점차이로-발생하는-문제">데이터에 대한 관점차이로 발생하는 문제</h3>
<ul>
<li>예시) 분석비용의 증가
<ul>
<li>엔지니어 : 행 데이터를 nested json, array 등으로 처리하는 것이 간편</li>
<li>데이터 분석가 : 비즈니스 분석시 열 단위 분석한 아래와 같은 경우.
<ul>
<li>아래와 같은 경우, row의 각 json 등을 모두 스캔해야하여 분석 비용이 많이 들 수 있음 <img src="https://kr9268.github.io/posts/infcon2024-20240802/index_files/figure-html/4d5c59a2-1-infcon2024-1_2.png" class="img-fluid" alt="infcon2024-1_2.png"></li>
</ul></li>
<li>정규화를 통한 해결, 앞으로 이 데이터가 분석에 쓰일 것인가를 고민
<ul>
<li>안쓰일 것이라면 json으로도 문제가 되지 않겠지만, 그렇지 않다면 문제</li>
<li>다만 대부분은 쓰일 것으로 예상됨</li>
</ul></li>
</ul></li>
<li>예시) 생산성의 감소
<ul>
<li>엔지니어 : 결제방식 컬럼의 DB Comment(설명)이 없어 알 수 없는 상황 + 기존 결제방식(비즈니스)에 영향을 줄 수 있음
<ul>
<li>이후 새로운 결제방식은 boolean인 컬럼으로 추가 <img src="https://kr9268.github.io/posts/infcon2024-20240802/index_files/figure-html/4d5c59a2-2-infcon2024-1_3.png" class="img-fluid" alt="infcon2024-1_3.png"></li>
</ul></li>
<li>데이터 분석가 : 분석을 하려고 하니, 결제방식컬럼과 함께, 다른 타입의 결제방식 컬럼들이 다수 존재하여 어려움</li>
<li>데이터 카탈로그를 통해, 데이터에 대한 설명 등을 문서화하며 검색가능하도록 통합관리
<ul>
<li>’결제’와 같은 키워드 검색시, 테이블 이름/설명/컬럼명/문서 등을 출력</li>
<li>데이터 카탈로그 등을 구축하지 못한다면, 적어도 Comment라도 남기기
<ul>
<li>데이터가 어디에서 왔는지 등을 함께 명시</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="대용량-트래픽-vs-대용량-데이터" class="level3">
<h3 class="anchored" data-anchor-id="대용량-트래픽-vs-대용량-데이터">대용량 트래픽 vs 대용량 데이터</h3>
<ul>
<li>엔지니어 : 대용량 트래픽을 고객에게 에러 발생없이 제공하는 것이 중요</li>
<li>데이터 분석가 : 테이블 당 데이터의 수(row)가 많고 일반적인 RDBMS는 쿼리 등이 어려울 수 있음
<ul>
<li>분산처리 등이 중요해짐</li>
</ul></li>
<li>단순히 DB에 쓰고 지우는 것이 데이터관리의 전부는 아님
<ul>
<li>Live Production DB에 무거운 분석쿼리를 날린다면, 고객의 쿼리 등이 중단/지연될 수 있음
<ul>
<li>분석환경은 분리해서 운용</li>
</ul></li>
</ul></li>
</ul>
</section>
</section>
<section id="데이터의-무결성" class="level2">
<h2 class="anchored" data-anchor-id="데이터의-무결성">데이터의 무결성</h2>
<ul>
<li>GIGO : 잘못된 데이터를 넣고 좋은 결과가 나올 수는 없음</li>
<li>데이터의 무결성을 지킨 데이터 필요
<ul>
<li>유효성 : 정의된 범위에서 데이터 발생
<ul>
<li>문제예시 - 유료서비스의 활성화 기간을 분석하고자 ’만료일’을 확인하고자 함
<ul>
<li>비즈니스 로직 변경으로, Application에서만 저장되던 데이터를 엔지니어가 직접 일괄로 변경함</li>
<li>프로모션 적용/컴플레인 대응/환불요청 등을 위해 고객센터 등에서 처리한 데이터 (로그가 남지 않음)</li>
</ul></li>
</ul></li>
<li>정확성 : 실제 값을 정확하게 나타냄
<ul>
<li>문제예시 - 유저 데이터의 물리삭제(회원탈퇴)
<ul>
<li>탈퇴한 회원의 DELETE쿼리 실행</li>
<li>회원의 탈퇴가 Human error인 경우</li>
<li>유저의 활동을 통해 서비스 중인 현황을 분석하고자 할 때, 데이터가 없다면 분석 자체가 불가</li>
</ul></li>
<li>데이터의 저장비용(삭제)과 데이터의 가치(보존)에 대한 고민이 들 수 있음
<ul>
<li>향후 어떻게 쓰일 지 알 수 없으므로 저장하는 것이 좋을 수 있음</li>
</ul></li>
</ul></li>
<li>일관성 : 1개 컬럼은 1개의 값을 가져야 함
<ul>
<li>문제예시 - 완료시점(Completed_at)을 하나의 컬럼으로 함께 사용하여, 후에 어떤 컬럼의 완료인지 알기 어려움
<ul>
<li>Completed_at을 함께사용하는 주문/배송 컬럼 <img src="https://kr9268.github.io/posts/infcon2024-20240802/index_files/figure-html/4d5c59a2-3-infcon2024-1_4.png" class="img-fluid" alt="infcon2024-1_4.png"></li>
</ul></li>
</ul></li>
</ul></li>
</ul>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>인프콘</category>
  <category>인프콘2024</category>
  <guid>https://kr9268.github.io/posts/infcon2024-20240802/</guid>
  <pubDate>Wed, 25 Dec 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[DA스터디/1주차] SQL기초 및 실습</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20241222/</link>
  <description><![CDATA[ 






<p>금융권 데이터를 활용한 분석 스터디 - 1주차</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>아래의 목적/이유로 참가한 스터디에 대한 기록
<ul>
<li>SQLD취득 후 장기 미사용 &amp; GPT를 통한 SQL사용 등으로 많이 잊은 SQL을 복기</li>
<li>기존에 사용해 본 Optuna가 아닌 Autogluon이 커리큘럼에 있어 익혀보고자 함</li>
<li>혼자서 postgresql로 DB만들어 써본 적은 있는데, 잘 와닿지 않는 ’데이터마트’생성이 언급되어 있어 개념 정립하고자 함</li>
<li>기존에 관심있던 XAI(설명가능한 AI)를 익히고자 함</li>
</ul></li>
<li>1주차 요약
<ul>
<li>SQL문의 실행순서와 실습</li>
<li>프로그래머스, 해커스랭크의 SQL문제풀이 과제
<ul>
<li>해커스랭크는 문제/풀이 게시에 대한 저작권 내용 확인이 어려워 삭제함</li>
</ul></li>
<li>참고 : 하단 실습코드는 head() 적용되 있음(불필요하게 긴 포스팅 방지)</li>
</ul></li>
</ul>
</section>
<section id="주차-수업정리" class="level1">
<h1>1주차 수업정리</h1>
<section id="sql문-실행순서" class="level2">
<h2 class="anchored" data-anchor-id="sql문-실행순서">SQL문 실행순서</h2>
<ol type="1">
<li>SELECT<br>
</li>
<li>FROM<br>
</li>
<li>JOIN ON<br>
</li>
<li>WHERE<br>
</li>
<li>GROUP BY<br>
</li>
<li>HAVING</li>
<li>ORDER BY<br>
</li>
<li>LIMIT</li>
</ol>
</section>
<section id="select" class="level2">
<h2 class="anchored" data-anchor-id="select">SELECT</h2>
<div id="73b1544e" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlite3</span>
<span id="cb1-3"></span>
<span id="cb1-4">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'my_database.db'</span>)</span></code></pre></div>
</div>
<div id="8646fdb8" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 컬럼 지정</span></span>
<span id="cb2-2">selected_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT idx, y, job FROM my_table;"</span>, conn)</span>
<span id="cb2-3">selected_df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">y</th>
<th data-quarto-table-cell-role="th">job</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0</td>
<td>no</td>
<td>housemaid</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1</td>
<td>no</td>
<td>services</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2</td>
<td>no</td>
<td>services</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>3</td>
<td>no</td>
<td>admin.</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>4</td>
<td>no</td>
<td>services</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="d486f28f" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전체 컬럼 (*)</span></span>
<span id="cb3-2">df_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM my_table"</span>, conn)</span>
<span id="cb3-3">df_all.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">age</th>
<th data-quarto-table-cell-role="th">job</th>
<th data-quarto-table-cell-role="th">marital</th>
<th data-quarto-table-cell-role="th">education</th>
<th data-quarto-table-cell-role="th">is_default</th>
<th data-quarto-table-cell-role="th">housing</th>
<th data-quarto-table-cell-role="th">loan</th>
<th data-quarto-table-cell-role="th">contact</th>
<th data-quarto-table-cell-role="th">month</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">campaign</th>
<th data-quarto-table-cell-role="th">pdays</th>
<th data-quarto-table-cell-role="th">previous</th>
<th data-quarto-table-cell-role="th">poutcome</th>
<th data-quarto-table-cell-role="th">emp_var_rate</th>
<th data-quarto-table-cell-role="th">cons_price_idx</th>
<th data-quarto-table-cell-role="th">cons_conf_idx</th>
<th data-quarto-table-cell-role="th">euribor3m</th>
<th data-quarto-table-cell-role="th">nr_employed</th>
<th data-quarto-table-cell-role="th">y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0</td>
<td>56</td>
<td>housemaid</td>
<td>married</td>
<td>basic.4y</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1</td>
<td>57</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>unknown</td>
<td>no</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2</td>
<td>37</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>3</td>
<td>40</td>
<td>admin.</td>
<td>married</td>
<td>basic.6y</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>4</td>
<td>56</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
<td>no</td>
<td>yes</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
</tbody>
</table>

<p>5 rows × 22 columns</p>
</div>
</div>
</div>
</section>
<section id="select-실습" class="level2">
<h2 class="anchored" data-anchor-id="select-실습">SELECT 실습</h2>
<ul>
<li>my_table에서 idx, martial, education, y를 조회하여 df_trial_1에 할당해봅시다.</li>
</ul>
<div id="dad03b88" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df_trial_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT idx, marital, education, y FROM my_table"</span>, conn)</span>
<span id="cb4-2">df_trial_1.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">marital</th>
<th data-quarto-table-cell-role="th">education</th>
<th data-quarto-table-cell-role="th">y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0</td>
<td>married</td>
<td>basic.4y</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>3</td>
<td>married</td>
<td>basic.6y</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>4</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="where" class="level2">
<h2 class="anchored" data-anchor-id="where">WHERE</h2>
<ul>
<li>WHERE에서의 <code>1=1</code>의 사용
<ul>
<li>없어도 되지만 <strong>편의</strong>를 위해 사용. <strong>실무적으로 많이 활용되는 편</strong></li>
<li>괄호를 활용해 우선순위를 부여(명시)해주는 것이 좋음
<ul>
<li>AND(*)가 OR(+)보다 우선순위가 높으나, 헷갈리지 않게 명시</li>
</ul></li>
</ul></li>
</ul>
<div id="ed6311e0" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb5-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    *</span></span>
<span id="cb5-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM my_table</span></span>
<span id="cb5-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">WHERE 1=1</span></span>
<span id="cb5-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    AND y = 'no'</span></span>
<span id="cb5-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    AND (</span></span>
<span id="cb5-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        is_default = 'no'</span></span>
<span id="cb5-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        OR campaign &gt; 0</span></span>
<span id="cb5-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    );"""</span></span>
<span id="cb5-10">df_multicon_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(q, conn)</span>
<span id="cb5-11">df_multicon_2.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">age</th>
<th data-quarto-table-cell-role="th">job</th>
<th data-quarto-table-cell-role="th">marital</th>
<th data-quarto-table-cell-role="th">education</th>
<th data-quarto-table-cell-role="th">is_default</th>
<th data-quarto-table-cell-role="th">housing</th>
<th data-quarto-table-cell-role="th">loan</th>
<th data-quarto-table-cell-role="th">contact</th>
<th data-quarto-table-cell-role="th">month</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">campaign</th>
<th data-quarto-table-cell-role="th">pdays</th>
<th data-quarto-table-cell-role="th">previous</th>
<th data-quarto-table-cell-role="th">poutcome</th>
<th data-quarto-table-cell-role="th">emp_var_rate</th>
<th data-quarto-table-cell-role="th">cons_price_idx</th>
<th data-quarto-table-cell-role="th">cons_conf_idx</th>
<th data-quarto-table-cell-role="th">euribor3m</th>
<th data-quarto-table-cell-role="th">nr_employed</th>
<th data-quarto-table-cell-role="th">y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0</td>
<td>56</td>
<td>housemaid</td>
<td>married</td>
<td>basic.4y</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1</td>
<td>57</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>unknown</td>
<td>no</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2</td>
<td>37</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>3</td>
<td>40</td>
<td>admin.</td>
<td>married</td>
<td>basic.6y</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>4</td>
<td>56</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
<td>no</td>
<td>yes</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
</tbody>
</table>

<p>5 rows × 22 columns</p>
</div>
</div>
</div>
</section>
<section id="where-심화" class="level2">
<h2 class="anchored" data-anchor-id="where-심화">WHERE 심화</h2>
<ul>
<li>LIKE : 문자열에서 찾기 (%와 함께 사용해 특정 문자열을 포함한 경우를 찾기도 함)</li>
<li>IN : 특정 목록에 포함된 경우 찾기</li>
<li>BETWEEN : 범위 안에 포함된 경우 찾기</li>
</ul>
<div id="da5c79ec" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'LIKE'를 활용해 9가 포함된 값을 찾는 예제</span></span>
<span id="cb6-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb6-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    *</span></span>
<span id="cb6-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM my_table</span></span>
<span id="cb6-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">WHERE idx LIKE '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%9%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">';"""</span></span>
<span id="cb6-6"></span>
<span id="cb6-7">df_idcode_9 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(q, conn)</span>
<span id="cb6-8">df_idcode_9.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">age</th>
<th data-quarto-table-cell-role="th">job</th>
<th data-quarto-table-cell-role="th">marital</th>
<th data-quarto-table-cell-role="th">education</th>
<th data-quarto-table-cell-role="th">is_default</th>
<th data-quarto-table-cell-role="th">housing</th>
<th data-quarto-table-cell-role="th">loan</th>
<th data-quarto-table-cell-role="th">contact</th>
<th data-quarto-table-cell-role="th">month</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">campaign</th>
<th data-quarto-table-cell-role="th">pdays</th>
<th data-quarto-table-cell-role="th">previous</th>
<th data-quarto-table-cell-role="th">poutcome</th>
<th data-quarto-table-cell-role="th">emp_var_rate</th>
<th data-quarto-table-cell-role="th">cons_price_idx</th>
<th data-quarto-table-cell-role="th">cons_conf_idx</th>
<th data-quarto-table-cell-role="th">euribor3m</th>
<th data-quarto-table-cell-role="th">nr_employed</th>
<th data-quarto-table-cell-role="th">y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>9</td>
<td>25</td>
<td>services</td>
<td>single</td>
<td>high.school</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>19</td>
<td>39</td>
<td>management</td>
<td>single</td>
<td>basic.9y</td>
<td>unknown</td>
<td>no</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>29</td>
<td>55</td>
<td>unknown</td>
<td>married</td>
<td>university.degree</td>
<td>unknown</td>
<td>unknown</td>
<td>unknown</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>39</td>
<td>56</td>
<td>technician</td>
<td>married</td>
<td>basic.4y</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>49</td>
<td>45</td>
<td>blue-collar</td>
<td>married</td>
<td>basic.9y</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>2</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
</tbody>
</table>

<p>5 rows × 22 columns</p>
</div>
</div>
</div>
<div id="deaeb940" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'IN'을 활용해 특정 목록의 데이터가 포함된 값을 찾는 예제</span></span>
<span id="cb7-2">IDS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'11003'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'12903'</span>)</span>
<span id="cb7-3"></span>
<span id="cb7-4">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""SELECT</span></span>
<span id="cb7-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    *</span></span>
<span id="cb7-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM my_table</span></span>
<span id="cb7-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">WHERE idx in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>IDS<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">;"""</span></span>
<span id="cb7-8"></span>
<span id="cb7-9">df_given_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(q, conn)</span>
<span id="cb7-10">df_given_ids</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">age</th>
<th data-quarto-table-cell-role="th">job</th>
<th data-quarto-table-cell-role="th">marital</th>
<th data-quarto-table-cell-role="th">education</th>
<th data-quarto-table-cell-role="th">is_default</th>
<th data-quarto-table-cell-role="th">housing</th>
<th data-quarto-table-cell-role="th">loan</th>
<th data-quarto-table-cell-role="th">contact</th>
<th data-quarto-table-cell-role="th">month</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">campaign</th>
<th data-quarto-table-cell-role="th">pdays</th>
<th data-quarto-table-cell-role="th">previous</th>
<th data-quarto-table-cell-role="th">poutcome</th>
<th data-quarto-table-cell-role="th">emp_var_rate</th>
<th data-quarto-table-cell-role="th">cons_price_idx</th>
<th data-quarto-table-cell-role="th">cons_conf_idx</th>
<th data-quarto-table-cell-role="th">euribor3m</th>
<th data-quarto-table-cell-role="th">nr_employed</th>
<th data-quarto-table-cell-role="th">y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>11003</td>
<td>56</td>
<td>retired</td>
<td>married</td>
<td>basic.4y</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>telephone</td>
<td>jun</td>
<td>...</td>
<td>30</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.4</td>
<td>94.465</td>
<td>-41.8</td>
<td>4.962</td>
<td>5228.1</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>12903</td>
<td>23</td>
<td>admin.</td>
<td>single</td>
<td>high.school</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>cellular</td>
<td>jul</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.4</td>
<td>93.918</td>
<td>-42.7</td>
<td>4.962</td>
<td>5228.1</td>
<td>no</td>
</tr>
</tbody>
</table>

<p>2 rows × 22 columns</p>
</div>
</div>
</div>
<div id="9ae72e00" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'BETWEEN'을 활용해 특정 범위의 데이터를 찾는 예제</span></span>
<span id="cb8-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb8-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    *</span></span>
<span id="cb8-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM my_table</span></span>
<span id="cb8-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">WHERE campaign BETWEEN 10 AND 20;"""</span></span>
<span id="cb8-6"></span>
<span id="cb8-7">df_between <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(q, conn)</span>
<span id="cb8-8">df_between.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">age</th>
<th data-quarto-table-cell-role="th">job</th>
<th data-quarto-table-cell-role="th">marital</th>
<th data-quarto-table-cell-role="th">education</th>
<th data-quarto-table-cell-role="th">is_default</th>
<th data-quarto-table-cell-role="th">housing</th>
<th data-quarto-table-cell-role="th">loan</th>
<th data-quarto-table-cell-role="th">contact</th>
<th data-quarto-table-cell-role="th">month</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">campaign</th>
<th data-quarto-table-cell-role="th">pdays</th>
<th data-quarto-table-cell-role="th">previous</th>
<th data-quarto-table-cell-role="th">poutcome</th>
<th data-quarto-table-cell-role="th">emp_var_rate</th>
<th data-quarto-table-cell-role="th">cons_price_idx</th>
<th data-quarto-table-cell-role="th">cons_conf_idx</th>
<th data-quarto-table-cell-role="th">euribor3m</th>
<th data-quarto-table-cell-role="th">nr_employed</th>
<th data-quarto-table-cell-role="th">y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2183</td>
<td>58</td>
<td>management</td>
<td>married</td>
<td>university.degree</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>10</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2189</td>
<td>56</td>
<td>admin.</td>
<td>married</td>
<td>basic.9y</td>
<td>unknown</td>
<td>no</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>11</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2234</td>
<td>47</td>
<td>management</td>
<td>married</td>
<td>university.degree</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>12</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2553</td>
<td>54</td>
<td>retired</td>
<td>married</td>
<td>high.school</td>
<td>unknown</td>
<td>no</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>10</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.856</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2554</td>
<td>31</td>
<td>admin.</td>
<td>married</td>
<td>high.school</td>
<td>unknown</td>
<td>yes</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>13</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.856</td>
<td>5191.0</td>
<td>no</td>
</tr>
</tbody>
</table>

<p>5 rows × 22 columns</p>
</div>
</div>
</div>
</section>
<section id="where-실습" class="level2">
<h2 class="anchored" data-anchor-id="where-실습">WHERE 실습</h2>
<ul>
<li>문제
<ul>
<li>idx에 7이 들어가며</li>
<li>emp_var_rate가 1보다 크고</li>
<li>연령이 20세 이하거나</li>
<li>연령이 70대 이상인</li>
<li>고객을 구하세요.</li>
</ul></li>
</ul>
<div id="d97f833b" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb9-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    *</span></span>
<span id="cb9-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM my_table</span></span>
<span id="cb9-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">WHERE 1=1</span></span>
<span id="cb9-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">AND idx Like '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%7%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb9-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">AND emp_var_rate &gt; 1</span></span>
<span id="cb9-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">AND (age &lt;= 20 or age &gt;= 70);"""</span></span>
<span id="cb9-8"></span>
<span id="cb9-9">df_q2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(q, conn)</span>
<span id="cb9-10">df_q2</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">age</th>
<th data-quarto-table-cell-role="th">job</th>
<th data-quarto-table-cell-role="th">marital</th>
<th data-quarto-table-cell-role="th">education</th>
<th data-quarto-table-cell-role="th">is_default</th>
<th data-quarto-table-cell-role="th">housing</th>
<th data-quarto-table-cell-role="th">loan</th>
<th data-quarto-table-cell-role="th">contact</th>
<th data-quarto-table-cell-role="th">month</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">campaign</th>
<th data-quarto-table-cell-role="th">pdays</th>
<th data-quarto-table-cell-role="th">previous</th>
<th data-quarto-table-cell-role="th">poutcome</th>
<th data-quarto-table-cell-role="th">emp_var_rate</th>
<th data-quarto-table-cell-role="th">cons_price_idx</th>
<th data-quarto-table-cell-role="th">cons_conf_idx</th>
<th data-quarto-table-cell-role="th">euribor3m</th>
<th data-quarto-table-cell-role="th">nr_employed</th>
<th data-quarto-table-cell-role="th">y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>6575</td>
<td>20</td>
<td>entrepreneur</td>
<td>single</td>
<td>high.school</td>
<td>no</td>
<td>no</td>
<td>yes</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>13407</td>
<td>20</td>
<td>admin.</td>
<td>single</td>
<td>high.school</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>cellular</td>
<td>jul</td>
<td>...</td>
<td>4</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.4</td>
<td>93.918</td>
<td>-42.7</td>
<td>4.962</td>
<td>5228.1</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>15798</td>
<td>19</td>
<td>student</td>
<td>single</td>
<td>basic.9y</td>
<td>unknown</td>
<td>yes</td>
<td>no</td>
<td>cellular</td>
<td>jul</td>
<td>...</td>
<td>4</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.4</td>
<td>93.918</td>
<td>-42.7</td>
<td>4.960</td>
<td>5228.1</td>
<td>no</td>
</tr>
</tbody>
</table>

<p>3 rows × 22 columns</p>
</div>
</div>
</div>
</section>
<section id="group-by-집계함수" class="level2">
<h2 class="anchored" data-anchor-id="group-by-집계함수">GROUP BY (+집계함수)</h2>
<ul>
<li>GROUP BY를 활용해 정보를 그룹핑하여 볼 수 있음</li>
<li>SELECT문에 집계함수(SUM 등)를 적어, 해당 컬럼별 집계 가능
<ul>
<li>주의 : 컬럼(변수)이 집계함수나 GROUP BY절 중 한 곳에는 있어야 함</li>
<li>추천 : 집계함수를 적용한 컬럼은 AS로 이름을 지정하는 것이 좋음</li>
</ul></li>
<li>집계함수의 종류
<ul>
<li>SUM : 합</li>
<li>AVG (MEAN) : 평균</li>
<li>MIN / MAX : 최소 / 최대값</li>
<li>COUNT : 개수</li>
</ul></li>
</ul>
<div id="4f2e521c" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb10-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    y, SUM(duration) as sum_dur</span></span>
<span id="cb10-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM my_table</span></span>
<span id="cb10-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">GROUP BY y;"""</span></span>
<span id="cb10-5"></span>
<span id="cb10-6">df_sum_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(q, conn)</span>
<span id="cb10-7">df_sum_0</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">y</th>
<th data-quarto-table-cell-role="th">sum_dur</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>no</td>
<td>8071436</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>yes</td>
<td>2566807</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="group-by-실습" class="level2">
<h2 class="anchored" data-anchor-id="group-by-실습">GROUP BY 실습</h2>
<ul>
<li>문제
<ul>
<li>y별로</li>
<li>idx에 7이 들어가는 대상에 대해</li>
<li>duration의 합과</li>
<li>campaign의 평균, 최대, 최소값을 구해봅시다</li>
</ul></li>
</ul>
<div id="201bc521" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb11-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    y, SUM(duration) as sum_dur, AVG(campaign) as avg_camp, MIN(campaign) as min_camp, MAX(campaign) as max_camp</span></span>
<span id="cb11-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM my_table</span></span>
<span id="cb11-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">WHERE idx like '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%7%</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb11-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">GROUP BY y;"""</span></span>
<span id="cb11-6"></span>
<span id="cb11-7">df_sum_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(q, conn)</span>
<span id="cb11-8">df_sum_0</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">y</th>
<th data-quarto-table-cell-role="th">sum_dur</th>
<th data-quarto-table-cell-role="th">avg_camp</th>
<th data-quarto-table-cell-role="th">min_camp</th>
<th data-quarto-table-cell-role="th">max_camp</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>no</td>
<td>2680014</td>
<td>2.786460</td>
<td>1</td>
<td>56</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>yes</td>
<td>911542</td>
<td>2.091711</td>
<td>1</td>
<td>17</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="having" class="level2">
<h2 class="anchored" data-anchor-id="having">HAVING</h2>
<ul>
<li>집계함수의 결과의 필터링에 HAVING 사용
<ul>
<li>집계함수는 WHERE절 이후 실행되어 WHERE절에서의 집계함수 필터링은 불가함</li>
</ul></li>
</ul>
<div id="9efd18ad" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb12-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    y, SUM(duration) as sum_dur</span></span>
<span id="cb12-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM my_table</span></span>
<span id="cb12-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">GROUP BY y</span></span>
<span id="cb12-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">HAVING SUM(duration) &gt; 5000000;"""</span></span>
<span id="cb12-6"></span>
<span id="cb12-7">df_sum_over_1m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(q, conn)</span>
<span id="cb12-8">df_sum_over_1m</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">y</th>
<th data-quarto-table-cell-role="th">sum_dur</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>no</td>
<td>8071436</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="having-실습" class="level2">
<h2 class="anchored" data-anchor-id="having-실습">HAVING 실습</h2>
<ul>
<li>문제
<ul>
<li>y별로</li>
<li>var_0의 평균값이 11보다 큰 y 대해</li>
<li>var_0의 평균을 avg_var_0,</li>
<li>var_100의 최대값을 max_var_100,</li>
<li>var_100의 최소값을 min_var_100</li>
<li>으로 구하는 쿼리를 써봅시다.</li>
</ul></li>
</ul>
<div id="8e95944d" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb13-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    y, SUM(duration) as sum_dur</span></span>
<span id="cb13-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM my_table</span></span>
<span id="cb13-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">GROUP BY y</span></span>
<span id="cb13-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">HAVING SUM(duration) &gt; 5000000;"""</span></span>
<span id="cb13-6"></span>
<span id="cb13-7">df_sum_over_1m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(q, conn)</span>
<span id="cb13-8">df_sum_over_1m</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">y</th>
<th data-quarto-table-cell-role="th">sum_dur</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>no</td>
<td>8071436</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="order-by정렬" class="level2">
<h2 class="anchored" data-anchor-id="order-by정렬">ORDER BY(정렬)</h2>
<ul>
<li>ORDER BY로 정렬 (SQL마다 다를 수 있으나 기본값은 보통 오름차순)
<ul>
<li>내림차순을 원하는 경우 뒤에 <code>DESC</code>를 붙임</li>
</ul></li>
</ul>
<div id="ba1b0835" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 오름차순 (기본값) 예제</span></span>
<span id="cb14-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb14-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    *</span></span>
<span id="cb14-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM my_table</span></span>
<span id="cb14-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ORDER BY idx;"""</span></span>
<span id="cb14-6"></span>
<span id="cb14-7">df_var0_order <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(q, conn)</span>
<span id="cb14-8">df_var0_order.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">age</th>
<th data-quarto-table-cell-role="th">job</th>
<th data-quarto-table-cell-role="th">marital</th>
<th data-quarto-table-cell-role="th">education</th>
<th data-quarto-table-cell-role="th">is_default</th>
<th data-quarto-table-cell-role="th">housing</th>
<th data-quarto-table-cell-role="th">loan</th>
<th data-quarto-table-cell-role="th">contact</th>
<th data-quarto-table-cell-role="th">month</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">campaign</th>
<th data-quarto-table-cell-role="th">pdays</th>
<th data-quarto-table-cell-role="th">previous</th>
<th data-quarto-table-cell-role="th">poutcome</th>
<th data-quarto-table-cell-role="th">emp_var_rate</th>
<th data-quarto-table-cell-role="th">cons_price_idx</th>
<th data-quarto-table-cell-role="th">cons_conf_idx</th>
<th data-quarto-table-cell-role="th">euribor3m</th>
<th data-quarto-table-cell-role="th">nr_employed</th>
<th data-quarto-table-cell-role="th">y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>0</td>
<td>56</td>
<td>housemaid</td>
<td>married</td>
<td>basic.4y</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1</td>
<td>57</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>unknown</td>
<td>no</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2</td>
<td>37</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>3</td>
<td>40</td>
<td>admin.</td>
<td>married</td>
<td>basic.6y</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>4</td>
<td>56</td>
<td>services</td>
<td>married</td>
<td>high.school</td>
<td>no</td>
<td>no</td>
<td>yes</td>
<td>telephone</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>1.1</td>
<td>93.994</td>
<td>-36.4</td>
<td>4.857</td>
<td>5191.0</td>
<td>no</td>
</tr>
</tbody>
</table>

<p>5 rows × 22 columns</p>
</div>
</div>
</div>
<div id="90b7e4a2" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 내림차순 예제제</span></span>
<span id="cb15-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb15-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    *</span></span>
<span id="cb15-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM my_table</span></span>
<span id="cb15-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ORDER BY idx;"""</span></span>
<span id="cb15-6"></span>
<span id="cb15-7">df_var0_order <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(q, conn)</span>
<span id="cb15-8">df_var0_order.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</div>
</section>
<section id="limit" class="level2">
<h2 class="anchored" data-anchor-id="limit">LIMIT</h2>
<ul>
<li><strong>위에서부터 N개의 값을 반환</strong>하는, pandas의 .head(N)과 같은 함수</li>
</ul>
<div id="09b8e5fe" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb16-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    *</span></span>
<span id="cb16-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM my_table</span></span>
<span id="cb16-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">LIMIT 100</span></span>
<span id="cb16-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb16-6"></span>
<span id="cb16-7">df_100 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(q, conn)</span>
<span id="cb16-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df_100)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>100</code></pre>
</div>
</div>
</section>
<section id="order-by-limit-실습" class="level2">
<h2 class="anchored" data-anchor-id="order-by-limit-실습">ORDER BY &amp; LIMIT 실습</h2>
<ul>
<li>pdays가 999가 아닌 경우에 한해서, pdays값이 상위 100개에 해당하는 데이터를 반환하는 쿼리를 짜 봅시다.</li>
</ul>
<div id="ec1b4ca7" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Write your code</span></span>
<span id="cb18-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT</span></span>
<span id="cb18-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    *</span></span>
<span id="cb18-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM my_table</span></span>
<span id="cb18-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">WHERE pdays != 999</span></span>
<span id="cb18-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ORDER BY pdays desc</span></span>
<span id="cb18-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">LIMIT 100</span></span>
<span id="cb18-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb18-9"></span>
<span id="cb18-10">df_100 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(q, conn)</span>
<span id="cb18-11"></span>
<span id="cb18-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df_100))</span>
<span id="cb18-13">df_100.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>100</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">age</th>
<th data-quarto-table-cell-role="th">job</th>
<th data-quarto-table-cell-role="th">marital</th>
<th data-quarto-table-cell-role="th">education</th>
<th data-quarto-table-cell-role="th">is_default</th>
<th data-quarto-table-cell-role="th">housing</th>
<th data-quarto-table-cell-role="th">loan</th>
<th data-quarto-table-cell-role="th">contact</th>
<th data-quarto-table-cell-role="th">month</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">campaign</th>
<th data-quarto-table-cell-role="th">pdays</th>
<th data-quarto-table-cell-role="th">previous</th>
<th data-quarto-table-cell-role="th">poutcome</th>
<th data-quarto-table-cell-role="th">emp_var_rate</th>
<th data-quarto-table-cell-role="th">cons_price_idx</th>
<th data-quarto-table-cell-role="th">cons_conf_idx</th>
<th data-quarto-table-cell-role="th">euribor3m</th>
<th data-quarto-table-cell-role="th">nr_employed</th>
<th data-quarto-table-cell-role="th">y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>40874</td>
<td>41</td>
<td>technician</td>
<td>married</td>
<td>professional.course</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>cellular</td>
<td>oct</td>
<td>...</td>
<td>2</td>
<td>27</td>
<td>1</td>
<td>success</td>
<td>-1.1</td>
<td>94.601</td>
<td>-49.5</td>
<td>0.959</td>
<td>4963.6</td>
<td>yes</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>40243</td>
<td>24</td>
<td>technician</td>
<td>married</td>
<td>professional.course</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>cellular</td>
<td>jul</td>
<td>...</td>
<td>4</td>
<td>26</td>
<td>1</td>
<td>success</td>
<td>-1.7</td>
<td>94.215</td>
<td>-40.3</td>
<td>0.885</td>
<td>4991.6</td>
<td>yes</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>40234</td>
<td>60</td>
<td>admin.</td>
<td>married</td>
<td>basic.9y</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>cellular</td>
<td>jul</td>
<td>...</td>
<td>2</td>
<td>25</td>
<td>2</td>
<td>failure</td>
<td>-1.7</td>
<td>94.215</td>
<td>-40.3</td>
<td>0.884</td>
<td>4991.6</td>
<td>yes</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>39883</td>
<td>28</td>
<td>management</td>
<td>single</td>
<td>university.degree</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>cellular</td>
<td>jun</td>
<td>...</td>
<td>1</td>
<td>22</td>
<td>1</td>
<td>success</td>
<td>-1.7</td>
<td>94.055</td>
<td>-39.8</td>
<td>0.729</td>
<td>4991.6</td>
<td>yes</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>40489</td>
<td>30</td>
<td>admin.</td>
<td>single</td>
<td>high.school</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>telephone</td>
<td>aug</td>
<td>...</td>
<td>1</td>
<td>22</td>
<td>1</td>
<td>success</td>
<td>-1.7</td>
<td>94.027</td>
<td>-38.3</td>
<td>0.899</td>
<td>4991.6</td>
<td>no</td>
</tr>
</tbody>
</table>

<p>5 rows × 22 columns</p>
</div>
</div>
</div>
</section>
<section id="결과를-테이블로-저장" class="level2">
<h2 class="anchored" data-anchor-id="결과를-테이블로-저장">결과를 테이블로 저장</h2>
<p><em><code>CREATE TABLE (테이블이름) AS</code> SELECT </em> FROM TABLE</p>
<div id="2d76d988" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 특정 쿼리를 테이블 저장</span></span>
<span id="cb20-2"></span>
<span id="cb20-3">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""CREATE TABLE MY_TABLE_ORDERED AS</span></span>
<span id="cb20-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SELECT</span></span>
<span id="cb20-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    *</span></span>
<span id="cb20-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM MY_TABLE</span></span>
<span id="cb20-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ORDER BY idx DESC;"""</span></span>
<span id="cb20-8">conn.execute(q)</span>
<span id="cb20-9"></span>
<span id="cb20-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 저정한 테이블 조회</span></span>
<span id="cb20-11">q2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT * FROM MY_TABLE_ORDERED;"""</span></span>
<span id="cb20-12"></span>
<span id="cb20-13">df_var0_desc_order <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(q2, conn)</span>
<span id="cb20-14">df_var0_desc_order.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">age</th>
<th data-quarto-table-cell-role="th">job</th>
<th data-quarto-table-cell-role="th">marital</th>
<th data-quarto-table-cell-role="th">education</th>
<th data-quarto-table-cell-role="th">is_default</th>
<th data-quarto-table-cell-role="th">housing</th>
<th data-quarto-table-cell-role="th">loan</th>
<th data-quarto-table-cell-role="th">contact</th>
<th data-quarto-table-cell-role="th">month</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">campaign</th>
<th data-quarto-table-cell-role="th">pdays</th>
<th data-quarto-table-cell-role="th">previous</th>
<th data-quarto-table-cell-role="th">poutcome</th>
<th data-quarto-table-cell-role="th">emp_var_rate</th>
<th data-quarto-table-cell-role="th">cons_price_idx</th>
<th data-quarto-table-cell-role="th">cons_conf_idx</th>
<th data-quarto-table-cell-role="th">euribor3m</th>
<th data-quarto-table-cell-role="th">nr_employed</th>
<th data-quarto-table-cell-role="th">y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>41187</td>
<td>74</td>
<td>retired</td>
<td>married</td>
<td>professional.course</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>cellular</td>
<td>nov</td>
<td>...</td>
<td>3</td>
<td>999</td>
<td>1</td>
<td>failure</td>
<td>-1.1</td>
<td>94.767</td>
<td>-50.8</td>
<td>1.028</td>
<td>4963.6</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>41186</td>
<td>44</td>
<td>technician</td>
<td>married</td>
<td>professional.course</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>cellular</td>
<td>nov</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>-1.1</td>
<td>94.767</td>
<td>-50.8</td>
<td>1.028</td>
<td>4963.6</td>
<td>yes</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>41185</td>
<td>56</td>
<td>retired</td>
<td>married</td>
<td>university.degree</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>cellular</td>
<td>nov</td>
<td>...</td>
<td>2</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>-1.1</td>
<td>94.767</td>
<td>-50.8</td>
<td>1.028</td>
<td>4963.6</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>41184</td>
<td>46</td>
<td>blue-collar</td>
<td>married</td>
<td>professional.course</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>cellular</td>
<td>nov</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>-1.1</td>
<td>94.767</td>
<td>-50.8</td>
<td>1.028</td>
<td>4963.6</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>41183</td>
<td>73</td>
<td>retired</td>
<td>married</td>
<td>professional.course</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>cellular</td>
<td>nov</td>
<td>...</td>
<td>1</td>
<td>999</td>
<td>0</td>
<td>nonexistent</td>
<td>-1.1</td>
<td>94.767</td>
<td>-50.8</td>
<td>1.028</td>
<td>4963.6</td>
<td>yes</td>
</tr>
</tbody>
</table>

<p>5 rows × 22 columns</p>
</div>
</div>
</div>
<div id="772c8168" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 저장한 테이블 삭제</span></span>
<span id="cb21-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""DROP TABLE MY_TABLE_ORDERED;"""</span></span>
<span id="cb21-3"></span>
<span id="cb21-4">conn.execute(q)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;sqlite3.Cursor at 0x1eb6a498cc0&gt;</code></pre>
</div>
</div>
</section>
<section id="결과를-테이블로-저장하기-실습" class="level2">
<h2 class="anchored" data-anchor-id="결과를-테이블로-저장하기-실습">결과를 테이블로 저장하기 실습</h2>
<div id="533c0af9" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 테이블 저장</span></span>
<span id="cb23-2">q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""CREATE TABLE question6 AS</span></span>
<span id="cb23-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SELECT</span></span>
<span id="cb23-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    *</span></span>
<span id="cb23-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM my_table</span></span>
<span id="cb23-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">WHERE pdays != 999</span></span>
<span id="cb23-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ORDER BY pdays desc</span></span>
<span id="cb23-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">LIMIT 100;"""</span></span>
<span id="cb23-9">conn.execute(q)</span>
<span id="cb23-10"></span>
<span id="cb23-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 저장한 테이블 확인</span></span>
<span id="cb23-12">q2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""SELECT * FROM question6"""</span></span>
<span id="cb23-13">result1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(q2, conn)</span>
<span id="cb23-14">result1</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">idx</th>
<th data-quarto-table-cell-role="th">age</th>
<th data-quarto-table-cell-role="th">job</th>
<th data-quarto-table-cell-role="th">marital</th>
<th data-quarto-table-cell-role="th">education</th>
<th data-quarto-table-cell-role="th">is_default</th>
<th data-quarto-table-cell-role="th">housing</th>
<th data-quarto-table-cell-role="th">loan</th>
<th data-quarto-table-cell-role="th">contact</th>
<th data-quarto-table-cell-role="th">month</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">campaign</th>
<th data-quarto-table-cell-role="th">pdays</th>
<th data-quarto-table-cell-role="th">previous</th>
<th data-quarto-table-cell-role="th">poutcome</th>
<th data-quarto-table-cell-role="th">emp_var_rate</th>
<th data-quarto-table-cell-role="th">cons_price_idx</th>
<th data-quarto-table-cell-role="th">cons_conf_idx</th>
<th data-quarto-table-cell-role="th">euribor3m</th>
<th data-quarto-table-cell-role="th">nr_employed</th>
<th data-quarto-table-cell-role="th">y</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>40874</td>
<td>41</td>
<td>technician</td>
<td>married</td>
<td>professional.course</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>cellular</td>
<td>oct</td>
<td>...</td>
<td>2</td>
<td>27</td>
<td>1</td>
<td>success</td>
<td>-1.1</td>
<td>94.601</td>
<td>-49.5</td>
<td>0.959</td>
<td>4963.6</td>
<td>yes</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>40243</td>
<td>24</td>
<td>technician</td>
<td>married</td>
<td>professional.course</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>cellular</td>
<td>jul</td>
<td>...</td>
<td>4</td>
<td>26</td>
<td>1</td>
<td>success</td>
<td>-1.7</td>
<td>94.215</td>
<td>-40.3</td>
<td>0.885</td>
<td>4991.6</td>
<td>yes</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>40234</td>
<td>60</td>
<td>admin.</td>
<td>married</td>
<td>basic.9y</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>cellular</td>
<td>jul</td>
<td>...</td>
<td>2</td>
<td>25</td>
<td>2</td>
<td>failure</td>
<td>-1.7</td>
<td>94.215</td>
<td>-40.3</td>
<td>0.884</td>
<td>4991.6</td>
<td>yes</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>39883</td>
<td>28</td>
<td>management</td>
<td>single</td>
<td>university.degree</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>cellular</td>
<td>jun</td>
<td>...</td>
<td>1</td>
<td>22</td>
<td>1</td>
<td>success</td>
<td>-1.7</td>
<td>94.055</td>
<td>-39.8</td>
<td>0.729</td>
<td>4991.6</td>
<td>yes</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>40489</td>
<td>30</td>
<td>admin.</td>
<td>single</td>
<td>high.school</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>telephone</td>
<td>aug</td>
<td>...</td>
<td>1</td>
<td>22</td>
<td>1</td>
<td>success</td>
<td>-1.7</td>
<td>94.027</td>
<td>-38.3</td>
<td>0.899</td>
<td>4991.6</td>
<td>no</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">95</td>
<td>39157</td>
<td>38</td>
<td>blue-collar</td>
<td>single</td>
<td>high.school</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>cellular</td>
<td>mar</td>
<td>...</td>
<td>1</td>
<td>13</td>
<td>2</td>
<td>failure</td>
<td>-1.8</td>
<td>93.369</td>
<td>-34.8</td>
<td>0.655</td>
<td>5008.7</td>
<td>yes</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">96</td>
<td>39243</td>
<td>39</td>
<td>admin.</td>
<td>divorced</td>
<td>university.degree</td>
<td>no</td>
<td>yes</td>
<td>no</td>
<td>cellular</td>
<td>mar</td>
<td>...</td>
<td>1</td>
<td>13</td>
<td>1</td>
<td>success</td>
<td>-1.8</td>
<td>93.369</td>
<td>-34.8</td>
<td>0.650</td>
<td>5008.7</td>
<td>no</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">97</td>
<td>39315</td>
<td>29</td>
<td>technician</td>
<td>single</td>
<td>professional.course</td>
<td>no</td>
<td>yes</td>
<td>yes</td>
<td>cellular</td>
<td>mar</td>
<td>...</td>
<td>2</td>
<td>13</td>
<td>1</td>
<td>success</td>
<td>-1.8</td>
<td>93.369</td>
<td>-34.8</td>
<td>0.643</td>
<td>5008.7</td>
<td>yes</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">98</td>
<td>39556</td>
<td>38</td>
<td>admin.</td>
<td>single</td>
<td>high.school</td>
<td>no</td>
<td>yes</td>
<td>yes</td>
<td>cellular</td>
<td>apr</td>
<td>...</td>
<td>1</td>
<td>13</td>
<td>1</td>
<td>success</td>
<td>-1.8</td>
<td>93.749</td>
<td>-34.6</td>
<td>0.659</td>
<td>5008.7</td>
<td>yes</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">99</td>
<td>39651</td>
<td>30</td>
<td>admin.</td>
<td>single</td>
<td>high.school</td>
<td>no</td>
<td>no</td>
<td>no</td>
<td>cellular</td>
<td>may</td>
<td>...</td>
<td>1</td>
<td>13</td>
<td>1</td>
<td>success</td>
<td>-1.8</td>
<td>93.876</td>
<td>-40.0</td>
<td>0.682</td>
<td>5008.7</td>
<td>no</td>
</tr>
</tbody>
</table>

<p>100 rows × 22 columns</p>
</div>
</div>
</div>
</section>
</section>
<section id="과제" class="level1">
<h1>과제</h1>
<section id="프로그래머스-과제-풀기" class="level2">
<h2 class="anchored" data-anchor-id="프로그래머스-과제-풀기">프로그래머스 과제 풀기</h2>
<ul>
<li>저작권 관련 <a href="https://docs.channel.io/grepp_qna/ko/articles/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%EC%9D%98-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%EC%99%B8%EB%B6%80%EC%97%90-%EA%B2%8C%EC%8B%9C%ED%95%A0-%EC%88%98-%EC%9E%88%EB%82%98%EC%9A%94-3f8537c9">프로그래머스 링크</a></li>
</ul>
<pre><code>  코딩 테스트 연습 문제
  코딩테스트 연습에 공개된 문제는 (주)그렙이 저작권을 가지고 있습니다.
  (지문 하단에 별도 저작권 표시 문제 제외)
  코딩테스트 연습 문제의 지문, 테스트케이스, 풀이 등과 같은 정보는 비상업적, 비영리적 용도로 게시할 수 있습니다.
  다만 문제의 지문, 풀이 등과 같은 정보를 단순히 게시하는 것을 넘어, 
  이를 바탕으로 문제를 풀고 채점이 가능하도록 하는 등의 방식으로 활용하는 것은 제한됩니다.

  ※ 2020 KAKAO BLIND RECRUITMENT, Summer/Winter Coding 등의 문제는 기업 코딩 테스트에 나온 문제이나, 
  코딩테스트 연습에 공개된 문제이기 때문에 마찬가지로 비상업적, 비영리적 용도로 게시할 수 있습니다.

  (2021. 01. 08 업데이트)</code></pre>
<ul>
<li><p>https://school.programmers.co.kr/learn/courses/30/lessons/59040 <img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20241222/index_files/figure-html/0f388070-1-Note_week1_1.jpg" class="img-fluid" alt="Note_week1_1.jpg"> <code>bahzo     SELECT ANIMAL_TYPE, COUNT(*)     FROM ANIMAL_INS     GROUP BY ANIMAL_TYPE     ORDER BY ANIMAL_TYPE</code></p></li>
<li><p>https://school.programmers.co.kr/learn/courses/30/lessons/133024<br> <img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20241222/index_files/figure-html/efaef9b8-1-Note_week1_2.jpg" class="img-fluid" alt="Note_week1_2.jpg"> <code>bahzo     SELECT FLAVOR     FROM FIRST_HALF      ORDER BY TOTAL_ORDER DESC, SHIPMENT_ID</code></p></li>
<li><p>https://school.programmers.co.kr/learn/courses/30/lessons/59405<br> <img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20241222/index_files/figure-html/3c71f171-1-Note_week1_3.jpg" class="img-fluid" alt="Note_week1_3.jpg"> <code>bahzo     SELECT NAME     FROM ANIMAL_INS      ORDER BY DATETIME     LIMIT 1</code></p></li>
<li><p>https://school.programmers.co.kr/learn/courses/30/lessons/131697<br> <img src="https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20241222/index_files/figure-html/dad5cd0f-1-Note_week1_4.jpg" class="img-fluid" alt="Note_week1_4.jpg"> <code>bahzo     SELECT MAX(PRICE) AS MAX_PRICE     FROM PRODUCT</code></p></li>
</ul>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>SQL</category>
  <category>202412Study_DataAnalysis</category>
  <guid>https://kr9268.github.io/posts/meta-cm-sql_and_ml_xai-20241222/</guid>
  <pubDate>Sun, 22 Dec 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[DE스터디/최종과제_피드백정리] 다양한 데이터처리 플랫폼을 사용한 데이터 수집~모니터링</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240924/</link>
  <description><![CDATA[ 






<p>데이터 엔지니어링 스터디 - 최종과제에 대한 피드백 정리</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li><p>참여중인 데이터 엔지니어링 스터디에서 배우는 내용 정리</p>
<ul>
<li>데이터 수집, 정제 : pyspark, airflow</li>
<li>저장 : elasticsearch</li>
<li>시각화 : kibana</li>
</ul></li>
<li><p>최종과제 : 배운 Pyspark, Airflow, Elasticsearch, Kibana로 데이터 파이프라인 만들어보기</p></li>
<li><p>만들다보니 시각화에 대한 부분을 좀 더 해보고 싶어, 과제2를 추가로 진행함</p>
<ul>
<li>과제 1 : gharchive 데이터파이프라인 + 대시보드 약간</li>
<li>과제 2 : 4차산업 핵심광물(Un comtrade) 데이터파이프라인 + 대시보드</li>
<li>git repo (과제 1, 2 모두 여기에 보관)
<ul>
<li><a href="https://github.com/KR9268/metacode_de-2024">https://github.com/KR9268/metacode_de-2024</a></li>
</ul></li>
</ul></li>
<li><p>발표 후 피드백 받은 내용을 하단에 정리</p></li>
</ul>
</section>
<section id="과제-피드백-정리" class="level1">
<h1>과제 피드백 정리</h1>
<section id="과제1-피드백" class="level2">
<h2 class="anchored" data-anchor-id="과제1-피드백">과제1 피드백</h2>
<ul>
<li>Retry 주기는 길지 않게 설정하는 것이 좋다
<ul>
<li>데이터가 1시간 단위로 업데이트되니 부재일 것을 우려하여 2시간 단위로 Retry한 것으로 보임</li>
<li>하지만 발표에서도 그랬듯이 실제로는 데이터가 없어서 문제가 발생하는게 많지 않음</li>
<li>문제해결을 빠르게 하는 것이 중요하므로, 문제사유가 어떤 것이든 1~2시간은 길고 5~10분이 좋을 듯 하다</li>
</ul></li>
</ul>
</section>
<section id="과제2-피드백" class="level2">
<h2 class="anchored" data-anchor-id="과제2-피드백">과제2 피드백</h2>
<ul>
<li>데이터가 수시로 업데이트된다면, 이처럼 업데이트된 것만 현황을 확인하고 가져오는 것이 필수적이고 좋은 전략
<ul>
<li>API형태가 아니라 Kafka 등도 업데이트 된 것만 가져오는 기능을 제공</li>
</ul></li>
<li>적절한 제한량 문제
<ul>
<li>제한이 있으므로 분산처리를 안한다했으나, 제한량이 있을 때 유용한 것이 분산처리이기도 함</li>
<li>IP기준으로 사용량을 체크한다면, 여러 노드의 IP대역 등을 분리하는 방안도 있음
<ul>
<li>현재는 Local환경에서 실습하므로 쓸 수는 없는 방법</li>
<li>크롤링 등은 IP대역으로 체크하므로, 여러 노드에 대역을 할당해 하는 것이 가장 빠름</li>
</ul></li>
<li>API Key라면 Key를 여러개 받아 관리하는 방법도 있음</li>
</ul></li>
<li>API로 데이터를 호출했다면, Raw데이터를 보존
<ul>
<li>복구가 불가능한 상황에 대한 대비</li>
<li>문제 상황에 대한 원인 파악 등 사용(API호출시기에 따라 달라져있으므로 확인이 불가할 수 있음)
<ul>
<li>제공중이던 학습 데이터가 갑자기 튀어 AI학습에 문제생겼을 때, 확인 등을 위해 사용</li>
</ul></li>
</ul></li>
<li>생성한 Unique ID의 규칙
<ul>
<li>과제 진행한 것처럼, 기간이나 카테고리 등으로 들어가는게 맞긴 함(기간+HSCODE+수출국+수입국+수출/수입 여부)</li>
<li>성능개선이 필요하다면, 데이터 쏠림을 막을 수 있는 방법을 고민해야함
<ul>
<li>과제의 Index로는 특정 수출국이 많다면 데이터 쏠림(Skew)이 발생할 수 있음</li>
<li>ID를 한번 해싱(앞에 랜덤해싱을 붙인다던가)하면 분산이 잘 될 수 있음</li>
<li>이러한 일정한 규칙인 Sort값을 앞에 붙여 해싱하면 더 다양하게 해시값이 생성되고 고르게 분산됨</li>
<li>기간, hscode 등 다 알고있는 값을 일방향해싱하면 되므로 만들기 쉽고 분산이 잘될 것임</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="기타-과제-중-궁금했던-점-질의응답" class="level2">
<h2 class="anchored" data-anchor-id="기타-과제-중-궁금했던-점-질의응답">기타 과제 중 궁금했던 점 질의응답</h2>
<ul>
<li>Local환경 실습을 위해 며칠 컴퓨터를 켜두었는데 느려지기도 하고 메모리(Ram)점유율이 올라갔는데, 가비지콜렉션(GC)를 따로 적용하면 되는 문제인지?
<ul>
<li>Spark도 GC를 못해서 죽는 경우가 있고(연산량이 크다던가 이유로), 강제로 GC를 호출하는 방법도 있음
<ul>
<li>map이나 For each 등 너무 큰 연산이 있을 때 루프마다 GC를 호출하는 등 방법</li>
</ul></li>
<li>문제의 원인은 Airflow일 확률이 높아보임
<ul>
<li>Airflow는 Log rotate를 직접 작성해주어야 함
<ul>
<li>Log rotate는 간단히 말해 주기적으로 로그 등을 삭제해주는 것(가장 최근 것을 링크걸고 나머지 삭제 등 진행)</li>
</ul></li>
<li>(Airflow가 아직 덜 성숙한 플랫폼이라는 얘기를 했었는데)Dag추가나 Crontab으로 Log rotate구현이 필요해 보임</li>
<li>중간 값 확인 등을 위해 dataframe의 show 등이 많아 로그가 많이 쌓인 것으로 추정</li>
</ul></li>
</ul></li>
</ul>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Spark</category>
  <category>PySpark</category>
  <category>airflow</category>
  <category>202408Study_DataEngineering</category>
  <guid>https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240924/</guid>
  <pubDate>Tue, 24 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[DE스터디/최종과제2] 다양한 데이터처리 플랫폼을 사용한 데이터 수집~모니터링</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/</link>
  <description><![CDATA[ 






<p>데이터 엔지니어링 스터디 - 최종과제에 대한 ppt (4차산업 핵심광물 데이터파이프라인+대시보드 with UNcomtrade API)</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li><p>참여중인 데이터 엔지니어링 스터디에서 배우는 내용 정리</p>
<ul>
<li>데이터 수집, 정제 : pyspark, airflow</li>
<li>저장 : elasticsearch</li>
<li>시각화 : kibana</li>
</ul></li>
<li><p>최종과제 : 배운 Pyspark, Airflow, Elasticsearch, Kibana로 데이터 파이프라인 만들어보기</p></li>
<li><p>만들다보니 시각화에 대한 부분을 좀 더 해보고 싶어, 과제2를 추가로 진행함</p>
<ul>
<li>과제 1 : gharchive 데이터파이프라인 + 대시보드 약간</li>
<li>과제 2 : 4차산업 핵심광물(Un comtrade) 데이터파이프라인 + 대시보드</li>
<li>git repo (과제 1, 2 모두 여기에 보관)
<ul>
<li><a href="https://github.com/KR9268/metacode_de-2024">https://github.com/KR9268/metacode_de-2024</a></li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="최종과제2-4차산업-핵심광물-데이터파이프라인-시각화" class="level1">
<h1>최종과제2 : 4차산업 핵심광물 데이터파이프라인 + 시각화</h1>
<p><img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-1-슬라이드18.PNG" class="img-fluid" alt="슬라이드18.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-2-슬라이드19.PNG" class="img-fluid" alt="슬라이드19.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-3-슬라이드20.PNG" class="img-fluid" alt="슬라이드20.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-4-슬라이드21.PNG" class="img-fluid" alt="슬라이드21.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-5-슬라이드22.PNG" class="img-fluid" alt="슬라이드22.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-6-슬라이드23.PNG" class="img-fluid" alt="슬라이드23.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-7-슬라이드24.PNG" class="img-fluid" alt="슬라이드24.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-8-슬라이드25.PNG" class="img-fluid" alt="슬라이드25.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-9-슬라이드26.PNG" class="img-fluid" alt="슬라이드26.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-10-슬라이드27.PNG" class="img-fluid" alt="슬라이드27.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-11-슬라이드28.PNG" class="img-fluid" alt="슬라이드28.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-12-슬라이드29.PNG" class="img-fluid" alt="슬라이드29.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-13-슬라이드30.PNG" class="img-fluid" alt="슬라이드30.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-14-슬라이드31.PNG" class="img-fluid" alt="슬라이드31.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-15-슬라이드32.PNG" class="img-fluid" alt="슬라이드32.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-16-슬라이드33.PNG" class="img-fluid" alt="슬라이드33.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-17-슬라이드34.PNG" class="img-fluid" alt="슬라이드34.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-18-슬라이드35.PNG" class="img-fluid" alt="슬라이드35.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-19-슬라이드36.PNG" class="img-fluid" alt="슬라이드36.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-20-슬라이드37.PNG" class="img-fluid" alt="슬라이드37.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-21-슬라이드38.PNG" class="img-fluid" alt="슬라이드38.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-22-슬라이드39.PNG" class="img-fluid" alt="슬라이드39.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/index_files/figure-html/5c71538e-23-슬라이드40.PNG" class="img-fluid" alt="슬라이드40.PNG"></p>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Spark</category>
  <category>PySpark</category>
  <category>airflow</category>
  <category>202408Study_DataEngineering</category>
  <guid>https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_2/</guid>
  <pubDate>Mon, 23 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[DE스터디/최종과제1-gharchive] 다양한 데이터처리 플랫폼을 사용한 데이터 수집~모니터링</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_1/</link>
  <description><![CDATA[ 






<p>데이터 엔지니어링 스터디 - 최종과제에 대한 ppt (gharchive 데이터파이프라인 만들기)</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li><p>참여중인 데이터 엔지니어링 스터디에서 배우는 내용 정리</p>
<ul>
<li>데이터 수집, 정제 : pyspark, airflow</li>
<li>저장 : elasticsearch</li>
<li>시각화 : kibana</li>
</ul></li>
<li><p>최종과제 : 배운 Pyspark, Airflow, Elasticsearch, Kibana로 데이터 파이프라인 만들어보기</p></li>
<li><p>만들다보니 시각화에 대한 부분을 좀 더 해보고 싶어, 과제2를 추가로 진행함</p>
<ul>
<li>과제 1 : gharchive 데이터파이프라인 + 대시보드 약간</li>
<li>과제 2 : 4차산업 핵심광물(Un comtrade) 데이터파이프라인 + 대시보드</li>
<li>git repo (과제 1, 2 모두 여기에 보관)
<ul>
<li><a href="https://github.com/KR9268/metacode_de-2024">https://github.com/KR9268/metacode_de-2024</a></li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="최종과제1-gharchive-데이터파이프라인-대시보드" class="level1">
<h1>최종과제1 : gharchive 데이터파이프라인 + 대시보드</h1>
<p><img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_1/index_files/figure-html/3f37439c-1-슬라이드1.PNG" class="img-fluid" alt="슬라이드1.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_1/index_files/figure-html/3f37439c-10-슬라이드2.PNG" class="img-fluid" alt="슬라이드2.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_1/index_files/figure-html/3f37439c-11-슬라이드3.PNG" class="img-fluid" alt="슬라이드3.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_1/index_files/figure-html/3f37439c-12-슬라이드4.PNG" class="img-fluid" alt="슬라이드4.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_1/index_files/figure-html/3f37439c-13-슬라이드5.PNG" class="img-fluid" alt="슬라이드5.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_1/index_files/figure-html/3f37439c-14-슬라이드6.PNG" class="img-fluid" alt="슬라이드6.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_1/index_files/figure-html/3f37439c-15-슬라이드7.PNG" class="img-fluid" alt="슬라이드7.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_1/index_files/figure-html/3f37439c-16-슬라이드8.PNG" class="img-fluid" alt="슬라이드8.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_1/index_files/figure-html/3f37439c-17-슬라이드9.PNG" class="img-fluid" alt="슬라이드9.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_1/index_files/figure-html/3f37439c-2-슬라이드10.PNG" class="img-fluid" alt="슬라이드10.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_1/index_files/figure-html/3f37439c-3-슬라이드11.PNG" class="img-fluid" alt="슬라이드11.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_1/index_files/figure-html/3f37439c-4-슬라이드12.PNG" class="img-fluid" alt="슬라이드12.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_1/index_files/figure-html/3f37439c-5-슬라이드13.PNG" class="img-fluid" alt="슬라이드13.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_1/index_files/figure-html/3f37439c-6-슬라이드14.PNG" class="img-fluid" alt="슬라이드14.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_1/index_files/figure-html/3f37439c-7-슬라이드15.PNG" class="img-fluid" alt="슬라이드15.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_1/index_files/figure-html/3f37439c-8-슬라이드16.PNG" class="img-fluid" alt="슬라이드16.PNG"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_1/index_files/figure-html/3f37439c-9-슬라이드17.PNG" class="img-fluid" alt="슬라이드17.PNG"></p>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Spark</category>
  <category>PySpark</category>
  <category>airflow</category>
  <category>202408Study_DataEngineering</category>
  <guid>https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240923_1/</guid>
  <pubDate>Mon, 23 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[DE스터디/6주차강의] 다양한 데이터처리 플랫폼을 사용한 데이터 수집~모니터링</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240909/</link>
  <description><![CDATA[ 






<p>데이터 엔지니어링 스터디 내용정리 - Kibana</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>참여중인 데이터 엔지니어링 스터디에서 배우는 내용 정리
<ul>
<li>데이터 수집, 정제 : pyspark, airflow</li>
<li>저장 : elasticsearch</li>
<li>시각화 : kibana</li>
</ul></li>
</ul>
</section>
<section id="주차-과제리뷰" class="level1">
<h1>5주차 과제리뷰</h1>
<section id="airflow" class="level2">
<h2 class="anchored" data-anchor-id="airflow">Airflow</h2>
<ul>
<li>Dag작성 샘플
<ul>
<li>spark-submit.sh 스크립트 파일을 Bash operator로 사용</li>
<li>gharchive의 변동 등으로 인한 사항을 적용 후 직접돌리기 위해 catchup=False</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DAG</span>
<span id="cb1-2">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow.operators.bash_operator <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BashOperator</span>
<span id="cb1-3"></span>
<span id="cb1-4">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime, timedelta</span>
<span id="cb1-5"></span>
<span id="cb1-6"></span>
<span id="cb1-7">  default_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-8">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"owner"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airflow"</span>,</span>
<span id="cb1-9">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"depends_on_past"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb1-10">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start_date"</span>: datetime(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2024</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>),</span>
<span id="cb1-11">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"retries"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb1-12">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"retry_delay"</span>: timedelta(minutes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb1-13">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "on_failure_callback": ,</span></span>
<span id="cb1-14">  }</span>
<span id="cb1-15"></span>
<span id="cb1-16">  dag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DAG(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"github-archive-pipeline"</span>, </span>
<span id="cb1-17">          default_args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>default_args, </span>
<span id="cb1-18">          max_active_runs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb1-19">          schedule_interval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"30 0 * * *"</span>, </span>
<span id="cb1-20">          catchup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, </span>
<span id="cb1-21">          tags<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>])</span>
<span id="cb1-22"></span>
<span id="cb1-23">  dt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (datetime.now() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> timedelta(days<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)).strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-24">  download_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BashOperator(</span>
<span id="cb1-25">      task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'download-data'</span>,</span>
<span id="cb1-26">      bash_command<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"/opt/airflow/jobs/download-data.sh </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>dt<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> "</span>,</span>
<span id="cb1-27">      dag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dag</span>
<span id="cb1-28">  )</span>
<span id="cb1-29"></span>
<span id="cb1-30">  filename <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/opt/airflow/jobs/main.py'</span></span>
<span id="cb1-31">  filter_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BashOperator(</span>
<span id="cb1-32">      task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'filter-data'</span>,</span>
<span id="cb1-33">      bash_command<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'/opt/airflow/jobs/spark-submit.sh </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>filename<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> '</span>,</span>
<span id="cb1-34">      dag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dag</span>
<span id="cb1-35">  )</span>
<span id="cb1-36"></span>
<span id="cb1-37">  download_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> filter_data</span></code></pre></div></li>
</ul>
</section>
</section>
<section id="주차-수업정리" class="level1">
<h1>6주차 수업정리</h1>
<section id="kibana" class="level2">
<h2 class="anchored" data-anchor-id="kibana">Kibana</h2>
<ul>
<li>Data Visualization
<ul>
<li>데이터에 따라 적합한 시각화가 다름 <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240909/index_files/figure-html/6a98d639-1-class_w6-1.jpg" class="img-fluid" alt="class_w6-1.jpg"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240909/index_files/figure-html/6a98d639-2-class_w6-2.jpg" class="img-fluid" alt="class_w6-2.jpg"> <br></li>
</ul></li>
<li>다양한 시각화 툴
<ul>
<li>Tableau
<ul>
<li>유료 툴. ai 등 여러기능이 있으며 무거움</li>
<li>교육 등이 활성화되어 있음</li>
</ul></li>
<li>HighCharts
<ul>
<li>가볍게 1회성으로 작성시 활용가능</li>
</ul></li>
<li>Power BI
<ul>
<li>Tableau와 사용성이 비슷한 Windows툴</li>
</ul></li>
<li>Google Chart
<ul>
<li>온라인으로 사용가능한 기본차트 제공</li>
</ul></li>
<li>D3.js, Chart.js
<ul>
<li>자유도가 높은 라이브러리 (Javascript library)</li>
<li>Javascript이므로 웹에서 데이터 렌더링할 때 사용</li>
<li>실시간반영가능, Interactivity <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240909/index_files/figure-html/6a98d639-3-class_w6-3.jpg" class="img-fluid" alt="class_w6-3.jpg"></li>
</ul></li>
<li>Grafana
<ul>
<li>보통 클라우드의 모니터링을 위해 많이 사용</li>
<li>서버 모니터링에 특화(Conetivity 등)<br>
</li>
</ul></li>
<li>Kibana
<ul>
<li>ES에 데이터를 전송하면, Kibana에 자동반영 <br></li>
</ul></li>
</ul></li>
<li>Kibana 장단점
<ul>
<li>장점
<ul>
<li>Elasticsearch 시스템 모니터링, 검색 성능 평가에 탁월
<ul>
<li>ES와 세트로 만들어져있으며, 별도의 import등이 필요 없음</li>
</ul></li>
<li>다양한 visualization 생성, 인사이트 발굴 가능</li>
<li>데이터 검색/탐색 + (데이터 쌓이는 것)모니터링 + 분석을 하나의 UI 에서 진행</li>
<li>visualization의 다양성과 interactivity 가 떨어짐</li>
</ul></li>
<li>단점
<ul>
<li>Elasticsearch 특화</li>
<li>plugin 설치가 번거로움</li>
<li>잦은 Elasticsearch 버젼업에 따라가기 버거움
<ul>
<li>항상 ES와 Kibana의 버전을 같이 써야함 <br></li>
</ul></li>
</ul></li>
</ul></li>
<li>Kibana 기타
<ul>
<li>Observability</li>
<li>Security</li>
<li>Discover</li>
<li>Management - Index Patterns, Saved Object생성, Dev tool 등</li>
</ul></li>
<li>Kibana 세팅</li>
</ul>
<pre><code>services:
  kibana:
    image: docker.elastic.co/kibana/kibana:8.4.3 # ES와 버전 맞추기
    networks:
      - default-network
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://es:9200
      - ELASTICSEARCH_USERNAME=kibana
      - ELASTICSEARCH_PASSWORD=password
    ports:
      - 5601:5601  # 로컬포트:컨테이너포트
    depends_on:
      - es</code></pre>
<p><br></p>
<ul>
<li>Kibana Manual install
<ul>
<li>https://www.elastic.co/guide/en/kibana/current/install.html</li>
</ul></li>
</ul>
</section>
<section id="kibana-사용실습discover-visualize-library-dashboard" class="level2">
<h2 class="anchored" data-anchor-id="kibana-사용실습discover-visualize-library-dashboard">Kibana 사용실습(Discover, Visualize Library, Dashboard)</h2>
<ul>
<li>Discover
<ul>
<li>기본화면
<ul>
<li>좌측상단 Create data view
<ul>
<li>Name : 원하는 이름 지정</li>
<li>Index pattern : 사용할 index. daily-stats-*과 같이 와일드카드 가능</li>
<li>Timestamp : <span class="citation" data-cites="timestamp를">@timestamp를</span> 기본으로 쓰나 다른 필드로 변경할 수 있다</li>
</ul></li>
<li>좌측상단 Add filter (<code>+</code>버튼)
<ul>
<li>+버튼을 눌러 UI로 필터링 가능</li>
</ul></li>
<li>좌측 Selected/Available fields
<ul>
<li>Selected로 필드추가하여 테이블 형태로 볼 수 있다</li>
</ul></li>
<li>상단 Visualization type
<ul>
<li>그래프 타입 선택 가능 <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240909/index_files/figure-html/8c48436b-4-class_w6-7.jpg" class="img-fluid" alt="class_w6-7.jpg"></li>
</ul></li>
<li>상단 Documents
<ul>
<li>그래프 막대를 클릭하여 해당일자만 조회 가능 <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240909/index_files/figure-html/8c48436b-1-class_w6-4.jpg" class="img-fluid" alt="class_w6-4.jpg"></li>
</ul></li>
</ul></li>
<li>Create field
<ul>
<li>타 필드에서 산출가능하다면 데이터를 최소로 저장하고 필드추가(Script Field생성)하는 방법이 있음</li>
<li>좌측상단 Create field
<ul>
<li>Name지정 및 아래와 같이 script로 계산가능</li>
</ul>
<pre><code>  if (doc['fork_count'].size() != 0){
      return doc['fork_count'].value + 1;
  }</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240909/index_files/figure-html/8c48436b-2-class_w6-5.jpg" class="img-fluid figure-img"></p>
<figcaption>class_w6-5.jpg</figcaption>
</figure>
</div></li>
</ul></li>
<li>Discover에서 값을 확인하다가, 필드클릭 후 Visualize로 이동하여 보는 경우 많음 <br></li>
</ul></li>
<li>Visualize Library
<ul>
<li>종류
<ul>
<li>Lens : 그래프 등 기본 시각화</li>
<li>Maps : 지도 위에 시각화</li>
<li>TSVB : TSVB로 들어간 series data를 위한 기능</li>
<li>Custom visualization : Script로 시각화</li>
</ul></li>
<li>Lens 실습
<ul>
<li>Create - Lens로 진입한 후 좌측상단에서 view를 선택.</li>
<li>추천하는 시각화로 표현되어 있음</li>
<li>하단의 Suggestions의 시각화이며, 교체도 가능</li>
</ul></li>
<li>우측에서 대상 필드 및 Median, Average등 가능 <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240909/index_files/figure-html/8c48436b-3-class_w6-6.jpg" class="img-fluid" alt="class_w6-6.jpg"> <br></li>
</ul></li>
<li>KQL 샘플
<ul>
<li><p>Filter ratio example</p>
<pre><code>count(kql='response.status_code &gt; 400') / count()</code></pre></li>
<li><p>Week over week example (previous week : <code>shift='1w'</code>)</p>
<ul>
<li>서로 다른 단위는 연산 불가</li>
</ul>
<pre><code>percentile(system.network.in.bytes, percentile=99) /
percentile(system.network.in.bytes, percentile=99, shift='1w')</code></pre></li>
<li><p>Percent of total example</p>
<pre><code>sum(products.base_price) / overall_sum(sum(products.base_price))</code></pre>
<p><br></p></li>
</ul></li>
<li>Dashboard
<ul>
<li>만들어 둔 Visualization 또는 새로 생성하여 구성 가능 <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240909/attachment:class_w6-8.jpg" class="img-fluid" alt="class_w6-8.jpg"></li>
</ul></li>
</ul>
</section>
<section id="kibana-기타" class="level2">
<h2 class="anchored" data-anchor-id="kibana-기타">Kibana 기타</h2>
<ul>
<li>Painless lab
<ul>
<li><p>Management - Devtools - Painless lab</p>
<ul>
<li>필드 추가 등을 직접하다가 오류나는 경우, Elastic search가 멈출 수 있고 실제 서비스라면 문제될 수 있음
<ul>
<li>Script field : * ES field에 없는 값을 kibana에서 사용하고 싶을 때 생성할 수 있는 필드</li>
</ul></li>
<li>Painless lab에서 테스트하면 위와 같은 경우를 방지할 수 있음</li>
</ul></li>
<li><p>샘플코드 (필드추가)</p>
<pre><code>GET /_search
  {
      "query" : {
          "match_all": {}
      },
      "script_fields" : {
          "필드명1" : {
              "script" : {
                  "lang": "painless",
                  "source": "doc['price'].value * 2"             }
          },
                  }    }</code></pre></li>
</ul></li>
</ul>
</section>
<section id="기타-참고자료" class="level2">
<h2 class="anchored" data-anchor-id="기타-참고자료">기타 참고자료</h2>
<ul>
<li>Kibana Demo (샘플데이터로 시각화해보기)
<ul>
<li><a href="https://demo.elastic.co/cookie/index.html?goto=%2F">https://demo.elastic.co/cookie/index.html?goto=%2F</a></li>
</ul></li>
<li>D3 Best practice
<ul>
<li><a href="https://observablehq.com/collection/@observablehq/featured-creators">https://observablehq.com/collection/<span class="citation" data-cites="observablehq/featured-creators">@observablehq/featured-creators</span></a></li>
</ul></li>
<li>상황별 시각화
<ul>
<li><a href="https://medium.com/@abdallahashraf90x/how-to-choose-the-right-visualization-for-your-data-data-analysis-c49b1469a583">https://medium.com/<span class="citation" data-cites="abdallahashraf90x/how-to-choose-the-right-visualization-for-your-data-data-analysis-c49b1469a583">@abdallahashraf90x/how-to-choose-the-right-visualization-for-your-data-data-analysis-c49b1469a583</span></a></li>
</ul></li>
<li>Kibana 스크립트 필드에서 Painless 사용
<ul>
<li><a href="https://www.elastic.co/kr/blog/using-painless-kibana-scripted-fields">https://www.elastic.co/kr/blog/using-painless-kibana-scripted-fields</a></li>
</ul></li>
</ul>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Spark</category>
  <category>PySpark</category>
  <category>Kibana</category>
  <category>202408Study_DataEngineering</category>
  <guid>https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240909/</guid>
  <pubDate>Mon, 09 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[DE스터디/5주차과제] 다양한 데이터처리 플랫폼을 사용한 데이터 수집~모니터링</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240908/</link>
  <description><![CDATA[ 






<p>데이터 엔지니어링 스터디 내용정리 - Airflow(+SlackAPI)</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>참여중인 데이터 엔지니어링 스터디에서 배우는 내용 정리
<ul>
<li>데이터 수집, 정제 : pyspark, airflow</li>
<li>저장 : elasticsearch</li>
<li>시각화 : kibana</li>
</ul></li>
<li>5주차 과제 : airflow실습</li>
</ul>
</section>
<section id="과제---5주차" class="level1">
<h1>과제 - 5주차</h1>
<section id="다운로드-정제-저장을-하나의-task로-작성할지-별도의-task-를-두고-dependency-를-설정할지-결정해보세요" class="level2">
<h2 class="anchored" data-anchor-id="다운로드-정제-저장을-하나의-task로-작성할지-별도의-task-를-두고-dependency-를-설정할지-결정해보세요">다운로드, 정제, 저장을 하나의 task로 작성할지, 별도의 task 를 두고 dependency 를 설정할지 결정해보세요</h2>
<ul>
<li>아래의 Task로 구분해서 진행
<ul>
<li>다운로드</li>
<li>오래된 파일 삭제</li>
<li>정제 및 저장</li>
</ul></li>
<li>Dependency는 원본 파일의 다운/삭제가 완료된 후에 정제/저장이 되도록 설정</li>
</ul>
</section>
<section id="데이터-다운로드-정제-저장-기능을-수행하는-dag-를-작성하고-스케줄링을-적용해보세요" class="level2">
<h2 class="anchored" data-anchor-id="데이터-다운로드-정제-저장-기능을-수행하는-dag-를-작성하고-스케줄링을-적용해보세요">데이터 다운로드, 정제, 저장 기능을 수행하는 DAG 를 작성하고 스케줄링을 적용해보세요</h2>
<section id="진행방안" class="level3">
<h3 class="anchored" data-anchor-id="진행방안">진행방안</h3>
<ul>
<li>작업 중 오류 발생시 Slack으로 로그 전송
<ul>
<li>작업명, 실행시간, 로그 등 전송</li>
</ul></li>
<li>기준일자 계산
<ul>
<li>Airflow의 작업일자를 기준으로 파일을 다운로드/삭제할 기준일자 계산</li>
<li>Airflow작업실패시 <code>catchup=True</code>로 기준일자 자동계산하여 변수 수정 등 없이 자동진행</li>
</ul></li>
<li>파일에 대한 작업을 먼저 진행한 뒤 Slack으로 결과 전송
<ul>
<li>다운로드와 삭제는 어느 것이 먼저 진행되어도 무방</li>
<li>다운로드와 삭제함수가 내역을 리턴하고, Slack이 해당 내용(파일내역)으로 작업완료 알림</li>
</ul></li>
<li>Spark로 데이터를 정제한 뒤 저장하고, Slack으로 결과 전송
<ul>
<li>데이터를 정제한 뒤 저장하고, Text파일로 Dataframe결과표를 저장
<ul>
<li>airflow variable에 저장하는 것으로 변경</li>
</ul></li>
<li>Text파일의 표를 Slack으로 전송하여 작업결과를 공유
<ul>
<li>airflow variable에서 가져오는 것으로 변경</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="airflow-graph" class="level3">
<h3 class="anchored" data-anchor-id="airflow-graph">Airflow Graph</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240908/index_files/figure-html/ddd052e8-1-work_w5_airflow_graph.jpg" class="img-fluid figure-img"></p>
<figcaption>work_w5_airflow_graph.jpg</figcaption>
</figure>
</div>
</section>
<section id="slack-결과-샘플" class="level3">
<h3 class="anchored" data-anchor-id="slack-결과-샘플">Slack 결과 샘플</h3>
<p><img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240908/index_files/figure-html/ddd052e8-3-work_w5_slack.jpg" class="img-fluid" alt="work_w5_slack.jpg"> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240908/index_files/figure-html/ddd052e8-2-work_w5_dag_error.jpg" class="img-fluid" alt="work_w5_dag_error.jpg"></p>
</section>
<section id="코드" class="level3">
<h3 class="anchored" data-anchor-id="코드">코드</h3>
<div id="85b3352b" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DAG</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow.operators.python <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PythonOperator</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow.providers.apache.spark.operators.spark_submit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SparkSubmitOperator</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow.providers.slack.operators.slack <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SlackAPIPostOperator</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow.models.baseoperator <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> chain</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Variable</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime, timedelta</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb1-10">sys.path.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/opt/airflow/jobs'</span>)</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflowjob_down_new_delete_old <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> down_from_gharchive, del_old_file_gharchive</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 오류시 메시지를 보낼 함수 정의</span></span>
<span id="cb1-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> slack_failure_callback(context):</span>
<span id="cb1-15">    slack_msg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb1-16"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    :red_circle: DAG Failed</span></span>
<span id="cb1-17"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    *Task*: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>context<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'task_instance'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>task_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-18"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    *Dag*: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>context<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'task_instance'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>dag_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-19"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    *Execution Time*: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>context<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'execution_date'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-20"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    *Log URL*: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(context.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'task_instance'</span>).log_url)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">':8080'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">':8082'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-21"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-22">    </span>
<span id="cb1-23">    slack_alert <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SlackAPIPostOperator(</span>
<span id="cb1-24">            slack_conn_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slack_pkb"</span>,</span>
<span id="cb1-25">            task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'send_error_with_slack'</span>,</span>
<span id="cb1-26">            channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#alarm'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전송할 Slack 채널</span></span>
<span id="cb1-27">            dag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dag,</span>
<span id="cb1-28">            blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb1-29">                {</span>
<span id="cb1-30">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"section"</span>,</span>
<span id="cb1-31">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: {</span>
<span id="cb1-32">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrkdwn"</span>,</span>
<span id="cb1-33">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: (</span>
<span id="cb1-34">                            slack_msg</span>
<span id="cb1-35">                        ),</span>
<span id="cb1-36">                    },</span>
<span id="cb1-37">                }</span>
<span id="cb1-38">            ],</span>
<span id="cb1-39">            text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Airflow Error"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 필수 fallback 메시지</span></span>
<span id="cb1-40">        )</span>
<span id="cb1-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> slack_alert.execute(context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>context)</span>
<span id="cb1-42"></span>
<span id="cb1-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DAG</span></span>
<span id="cb1-44">dag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DAG(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gharchive-down_new_delete_old"</span>, </span>
<span id="cb1-45">          default_args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb1-46">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"owner"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airflow"</span>,</span>
<span id="cb1-47">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"depends_on_past"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 과거 실행에 의존</span></span>
<span id="cb1-48">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start_date"</span>: datetime(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2024</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>),</span>
<span id="cb1-49">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"retries"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># retry 횟수</span></span>
<span id="cb1-50">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"retry_delay"</span>: timedelta(minutes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># retry주기</span></span>
<span id="cb1-51">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'on_failure_callback'</span>: slack_failure_callback,</span>
<span id="cb1-52">            },</span>
<span id="cb1-53">          catchup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb1-54">          tags<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PKB'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gharchive'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'down&amp;delete'</span>])</span>
<span id="cb1-55"></span>
<span id="cb1-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Task0 : target_date 설정 (catchup 등으로 실행하는 부분 고려)</span></span>
<span id="cb1-57"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> set_down_date(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb1-58">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Logical_date : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>kwargs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logical_date'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-59">    target_date_down <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (kwargs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logical_date'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> timedelta(days<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)).strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-60">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Calculated target_date_down : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_date_down<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> target_date_down</span>
<span id="cb1-62"></span>
<span id="cb1-63">down_date_calculate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PythonOperator(</span>
<span id="cb1-64">    task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'calculate_down_date'</span>,</span>
<span id="cb1-65">    python_callable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>set_down_date,</span>
<span id="cb1-66">    provide_context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-67">    dag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dag,</span>
<span id="cb1-68">)</span>
<span id="cb1-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 기존 target_date_down 산출로직 (참고용)</span></span>
<span id="cb1-70"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># target_date_down = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')</span></span>
<span id="cb1-71"></span>
<span id="cb1-72"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> set_delete_date(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):</span>
<span id="cb1-73">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Logical_date : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>kwargs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logical_date'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-74">    target_date_delete <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (kwargs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'logical_date'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> timedelta(days<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)).strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-75">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Calculated target_date_delete : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>target_date_delete<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-76">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> target_date_delete</span>
<span id="cb1-77"></span>
<span id="cb1-78">delete_date_calculate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PythonOperator(</span>
<span id="cb1-79">    task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'calculate_delete_date'</span>,</span>
<span id="cb1-80">    python_callable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>set_delete_date,</span>
<span id="cb1-81">    provide_context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-82">    dag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dag,</span>
<span id="cb1-83">)</span>
<span id="cb1-84"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 기존 target_date_delete 산출로직 (참고용)</span></span>
<span id="cb1-85"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># target_date_delete = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')</span></span>
<span id="cb1-86"></span>
<span id="cb1-87"></span>
<span id="cb1-88"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Task1 : 다운로드</span></span>
<span id="cb1-89">target_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/opt/bitnami/spark/data/gh_archive/'</span></span>
<span id="cb1-90"></span>
<span id="cb1-91">download_from_gharchive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PythonOperator(</span>
<span id="cb1-92">    task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file_down_gharchive"</span>,</span>
<span id="cb1-93">    op_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target_date_down"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">task_instance.xcom_pull(task_ids='calculate_down_date')</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target_path"</span>:target_path},</span>
<span id="cb1-94">    python_callable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> down_from_gharchive,</span>
<span id="cb1-95">    dag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dag</span>
<span id="cb1-96">)</span>
<span id="cb1-97"></span>
<span id="cb1-98"></span>
<span id="cb1-99"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Task2 : 1달지난 파일 삭제</span></span>
<span id="cb1-100"></span>
<span id="cb1-101">delete_old_of_filepath <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PythonOperator(</span>
<span id="cb1-102">    task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"file_delete_old_gharchive"</span>,</span>
<span id="cb1-103">    op_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target_date_delete"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">task_instance.xcom_pull(task_ids='calculate_delete_date')</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target_path"</span>:target_path},</span>
<span id="cb1-104">    python_callable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> del_old_file_gharchive,</span>
<span id="cb1-105">    dag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dag</span>
<span id="cb1-106">)</span>
<span id="cb1-107"></span>
<span id="cb1-108"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Task3 : 결과 전송 with Slack (위 Task에서 리턴받은 결과를 출력)</span></span>
<span id="cb1-109">send_result_with_slack__file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SlackAPIPostOperator(</span>
<span id="cb1-110">    slack_conn_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slack_pkb"</span>,</span>
<span id="cb1-111">    task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'slack_file_down_delete'</span>,</span>
<span id="cb1-112">    channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#alarm'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전송할 Slack 채널</span></span>
<span id="cb1-113">    dag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dag,</span>
<span id="cb1-114">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb1-115">        {</span>
<span id="cb1-116">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"section"</span>,</span>
<span id="cb1-117">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: {</span>
<span id="cb1-118">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrkdwn"</span>,</span>
<span id="cb1-119">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: (</span>
<span id="cb1-120">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*[gharchive다운로드]*</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> task_instance.xcom_pull(task_ids='file_down_gharchive') </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-121">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*[gharchive삭제(30일이상)]*</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> task_instance.xcom_pull(task_ids='file_delete_old_gharchive') </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-122">                ),</span>
<span id="cb1-123">            },</span>
<span id="cb1-124">        }</span>
<span id="cb1-125">    ],</span>
<span id="cb1-126">    text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gharchive_file_downloaded_and_deleted"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 필수 fallback 메시지</span></span>
<span id="cb1-127">)</span>
<span id="cb1-128"></span>
<span id="cb1-129"></span>
<span id="cb1-130"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Task4 : Spark 데이터 정제</span></span>
<span id="cb1-131">spark_filter_gh <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SparkSubmitOperator(</span>
<span id="cb1-132">        task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spark_filter_gharchive'</span>,</span>
<span id="cb1-133">        application<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jobs/main_modified.py"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 절대경로라면 /opt/airflow/jobs/main.py</span></span>
<span id="cb1-134">        application_args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--target_date"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> task_instance.xcom_pull(task_ids='calculate_down_date') </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>],</span>
<span id="cb1-135">        name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spark_filter_gh"</span>,</span>
<span id="cb1-136">        conf<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb1-137">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spark.master'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spark://spark-master:7077'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># master 설정</span></span>
<span id="cb1-138">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spark.dynamicAllocation.enabled'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'true'</span>,</span>
<span id="cb1-139">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spark.dynamicAllocation.executorIdleTimeout'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2m'</span>,</span>
<span id="cb1-140">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spark.dynamicAllocation.minExecutors'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span>,</span>
<span id="cb1-141">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spark.dynamicAllocation.maxExecutors'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'3'</span>,</span>
<span id="cb1-142">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spark.dynamicAllocation.initialExecutors'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1'</span>,</span>
<span id="cb1-143">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spark.memory.offHeap.enabled'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'true'</span>,</span>
<span id="cb1-144">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spark.memory.offHeap.size'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2G'</span>,</span>
<span id="cb1-145">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spark.shuffle.service.enabled'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'true'</span>,</span>
<span id="cb1-146">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spark.executor.memory'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2G'</span>,</span>
<span id="cb1-147">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spark.driver.memory'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2G'</span>,</span>
<span id="cb1-148">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'spark.driver.maxResultSize'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>,</span>
<span id="cb1-149">        },</span>
<span id="cb1-150">        conn_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spark-conn"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 필수값. UI에서 conenctivity 설정해둔 기준</span></span>
<span id="cb1-151">        jars<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/opt/bitnami/spark/resources/elasticsearch-spark-30_2.12-8.4.3.jar"</span>,</span>
<span id="cb1-152">        executor_cores<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb1-153">        num_executors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb1-154">        verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb1-155">        dag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dag</span>
<span id="cb1-156">    )</span>
<span id="cb1-157"></span>
<span id="cb1-158"></span>
<span id="cb1-159"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Task5 : 결과 전송 with Slack</span></span>
<span id="cb1-160">send_result_with_slack__spark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SlackAPIPostOperator(</span>
<span id="cb1-161">    slack_conn_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"slack_pkb"</span>,</span>
<span id="cb1-162">    task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'slack_spark_filter'</span>,</span>
<span id="cb1-163">    channel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#alarm'</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 전송할 Slack 채널</span></span>
<span id="cb1-164">    dag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dag,</span>
<span id="cb1-165">    blocks<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb1-166">        {</span>
<span id="cb1-167">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"section"</span>,</span>
<span id="cb1-168">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: {</span>
<span id="cb1-169">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mrkdwn"</span>,</span>
<span id="cb1-170">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>Variable<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gharchive_df"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb1-171">            },</span>
<span id="cb1-172">        }</span>
<span id="cb1-173">    ],</span>
<span id="cb1-174">    text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gharchive_spark_result"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 필수 fallback 메시지</span></span>
<span id="cb1-175">)</span>
<span id="cb1-176"></span>
<span id="cb1-177"></span>
<span id="cb1-178"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flow</span></span>
<span id="cb1-179">chain([down_date_calculate, delete_date_calculate],</span>
<span id="cb1-180">      [download_from_gharchive, delete_old_of_filepath],</span>
<span id="cb1-181">      send_result_with_slack__file,</span>
<span id="cb1-182">      spark_filter_gh,</span>
<span id="cb1-183">      send_result_with_slack__spark)</span>
<span id="cb1-184"></span>
<span id="cb1-185"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#[down_date_calculate, delete_date_calculate] &gt;&gt; [download_from_gharchive, delete_old_of_filepath] &gt;&gt; send_result_with_slack__file &gt;&gt; spark_filter_gh &gt;&gt; send_result_with_slack__spark</span></span></code></pre></div>
</div>


</section>
</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Spark</category>
  <category>PySpark</category>
  <category>airflow</category>
  <category>202408Study_DataEngineering</category>
  <guid>https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240908/</guid>
  <pubDate>Sun, 08 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[DE스터디/5주차강의] 다양한 데이터처리 플랫폼을 사용한 데이터 수집~모니터링</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240906/</link>
  <description><![CDATA[ 






<p>데이터 엔지니어링 스터디 내용정리 - Airflow</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>참여중인 데이터 엔지니어링 스터디에서 배우는 내용 정리
<ul>
<li>데이터 수집, 정제 : pyspark, airflow</li>
<li>저장 : elasticsearch</li>
<li>시각화 : kibana</li>
</ul></li>
</ul>
</section>
<section id="주차-과제리뷰" class="level1">
<h1>4주차 과제리뷰</h1>
<section id="elasticsearch" class="level2">
<h2 class="anchored" data-anchor-id="elasticsearch">ElasticSearch</h2>
<ul>
<li>ES에 기록하기</li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">df.write.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"org.elasticsearch.spark.sql"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-2">      .mode(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"append"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-3">      .option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"es.nodes"</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>host주소<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-4">      .option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"es.index.auto.create"</span>,  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-5">      .option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"es.resource"</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span>대상 index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-6">      .save()</span></code></pre></div>
<ul>
<li>kibana
<ul>
<li>Elastic Stack을 탐색할 수 있게 하는 시각화 및 관리 서비스
<ul>
<li>데이터 검색/모니터링/보안관리/분석/시각화</li>
</ul></li>
<li>Elastic search의 데이터가 들어오는 것도 쉽게 볼 수 있다 (일일이 쿼리 필요없이)</li>
</ul></li>
</ul>
</section>
</section>
<section id="주차-수업정리" class="level1">
<h1>5주차 수업정리</h1>
<section id="airflow" class="level2">
<h2 class="anchored" data-anchor-id="airflow">Airflow</h2>
<ul>
<li>Workflow Platform
<ul>
<li>Batch Task 처리/스케줄링/모니터링을 위한 플랫폼</li>
<li>한 눈에 볼 수 있는 UI + Task병렬처리 + 모니터링/스케줄링 필요함</li>
<li>crontab은 스케줄링은 가능하지만, 한 눈에 볼 수 있는 UI가 없고 병렬처리 기능 없음 <br></li>
</ul></li>
<li>Airflow
<ul>
<li>Batch Task 처리/스케줄링/모니터링을 위한 Workflow Platform 중 하나</li>
<li>open-source platform forbatch-oriented workflows</li>
<li>여러 플러그인을 제공해 connectivity 좋음 <br></li>
</ul></li>
<li>Airflow UI(Dashboard)
<ul>
<li>실패한 경우 처음부터 실행할 필요 없이, 실패한 log만 보거나 실행 가능</li>
<li>다양한 Status : deferred, failed, running 등</li>
<li>Calender탭 : 요일별 성공/실행 등</li>
<li>Task Duration탭 : 작업별 소요시간 등</li>
<li>Code탭 : 코드실행 결과 등을 확인. 수정은 불가하나 수정사항은 바로 확인 가능 <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240906/index_files/figure-html/08428e83-1-class_w5_1.jpg" class="img-fluid" alt="class_w5_1.jpg"> <br></li>
</ul></li>
<li>Airflow UI(DAGs)
<ul>
<li>작업별 on/off, 태그 설정, Last Run 등 확인 가능 <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240906/index_files/figure-html/08428e83-2-class_w5_2.jpg" class="img-fluid" alt="class_w5_2.jpg"> <br></li>
</ul></li>
<li>Airflow UI(Calender)
<ul>
<li>큰 장애가 있던 날 등을 확인 가능 <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240906/index_files/figure-html/08428e83-3-class_w5_3.jpg" class="img-fluid" alt="class_w5_3.jpg"> <br></li>
</ul></li>
<li>Airflow 구조
<ul>
<li>플러그인을 Webserver와 Scheduler에 설치</li>
<li>작업을 설정하면 Metadata DB에 들어가고 Scheduler가 읽어들여 작업 스헹</li>
<li>유저가 작성한 DAG로 작업수행 후 결과를 다시 DB에 저장</li>
<li>작업결과를 Webserver가 읽어 UI로 보여줌</li>
<li><strong>위와 같은 구조이므로 DB가 먼저 떠야함</strong>
<ul>
<li>실습환경은 postgres로 되어있음(<strong>depends_on: postgres</strong>) <br> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240906/index_files/figure-html/08428e83-4-class_w5_4.jpg" class="img-fluid" alt="class_w5_4.jpg"> <br></li>
</ul></li>
</ul></li>
<li>Airflow 구조 (실무적 시나리오)
<ul>
<li>DAG작성자,Workflow플랫폼 관리자, Operation user(작업여부 등 확인, DAG작성자일 수 있음)</li>
<li>여러 개의 Execution node가 작성된 DAG job 실행</li>
<li>Operation user가 실행결과나 로그 등을 확인하거나 긴급/필요한 경우 작업 중단 등 수행 <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240906/index_files/figure-html/08428e83-5-class_w5_5.jpg" class="img-fluid" alt="class_w5_5.jpg"> <br></li>
</ul></li>
<li>Components(구성요소)
<ul>
<li>Database : Storing metadata</li>
<li>Scheduler : Schedule &amp; execute DAG</li>
<li>Worker : Execute tasks
<ul>
<li>Scheduler와 같은 역할. Scheduler가 여러개 뜬 것과 비슷하게 이해</li>
</ul></li>
<li>Web server : UI <br></li>
</ul></li>
<li>REST API
<ul>
<li>Airflow설정이나 강제실행 등을 외부에서 원격으로 REST API호출해서 가능</li>
<li>운영 편의성의 한 방법으로 제공(리소스 조정이나 권한부여 등)</li>
<li>json input &amp; response <br></li>
</ul></li>
<li>Airflow Pros &amp; Cons(장단점)
<ul>
<li>장점
<ul>
<li>범용성 높음(타 워크플로우 대비 플러그인 많음)</li>
<li>활발한 커뮤니티(유저 많음)</li>
<li>Python으로 쉽고, 정교한(xml보다) DAG 구성가능</li>
<li>Retry기능</li>
</ul></li>
<li>단점
<ul>
<li>기술적으로 성숙 중(여러 이슈가 있음)
<ul>
<li>실무에서 사용하기에는 무리 없는 정도 <br></li>
</ul></li>
</ul></li>
</ul></li>
<li>기타 유사 플랫폼
<ul>
<li>Jenkins (Devops구성 등에 많이 사용)
<ul>
<li>Hudson에서 Jenkins로 이름변경. 처음에는 build 실패시 로그 등 확인하고자 만들어짐(build자동화)
<ul>
<li>실패가 누적되면 좌측 상단 사람아이콘이 점점 화난 얼굴로 바뀌어 확인 가능</li>
</ul></li>
<li>플러그인을 활용해서 자동화 작업 처리
<ul>
<li>업데이트가 안되거나 불안정한 플러그인이 좀 있음</li>
</ul></li>
<li>Task파이프라인을 만들어 CI/CD를 구축하는데 사용</li>
</ul></li>
<li>Azkaban
<ul>
<li>Hadoop Batch job을 위해 LinkedIn 이 개발</li>
<li>UI담당 웹서버 + Auth + 스케줄링 + 모니터링이 각각 1개만 존재
<ul>
<li>위와 함께 별도의 executor가 다수 존재(executor만 다수 존재)</li>
</ul></li>
<li>다양한 기능 부족(airflow는 좀 더 범용적인 타겟)</li>
<li>multiple executor mode 설정해야 병렬처리 가능</li>
<li>busy-waiting 등의 작업대기 패턴 지정 불가</li>
<li>Hadoop기반은 좀 더 유리한 점이 있고, Airflow와는 서로 있거나 없는 기능이 존재</li>
</ul></li>
<li>Oozie, Luigi 등 <br></li>
</ul></li>
<li>Airflow관련 실습 참고사항(세팅방법)
<ul>
<li><p>Dockerfile</p>
<ul>
<li>실습상 Pyspark로 실행되므로 Airflow에 파이썬 패키지를 깔 일은 거의 없음
<ul>
<li>Airflow에서 실행하기 위한 패키지 등이 필요하다면 Dockerfile을 수정</li>
<li>하단 코드의 <code>pip install</code> 부분을 수정</li>
</ul></li>
<li>airflow가 뜨지 않는다면 arm64가 맞는지 확인 후 수정
<ul>
<li>하단 코드의 <code>ENV JAVA_HOME /usr/lib/jvm/java-11-openjdk-arm64</code> 수정</li>
</ul></li>
<li>Dockerfile수정 후 단순히 down &amp; up하면 반영되지 않음
<ul>
<li><p>기존 이미지가 있는지 확인 후 이미지가 있으면 Docker는 별도 작업을 하지 않음</p></li>
<li><p><strong>docker stop → rm → rmi</strong> 하여 기존 이미지 제거 후, <strong>up하여 build 진행</strong></p>
<pre><code>FROM apache/airflow:2.7.1-python3.11

USER root
RUN apt-get update
RUN apt-get install -y gcc python3-dev openjdk-11-jdk wget
RUN apt-get clean

# Set JAVA_HOME environment variable
ENV JAVA_HOME /usr/lib/jvm/java-11-openjdk-arm64

USER airflow

RUN pip install apache-airflow apache-airflow-providers-apache-spark pyspark elasticsearch</code></pre></li>
</ul></li>
</ul></li>
<li><p>Docker-compose.yml</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">webserver</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">&lt;&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">*airflow-common</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> webserver</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   # application 중 webserver</span></span>
<span id="cb3-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"8081:8080"</span></span>
<span id="cb3-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">depends_on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> scheduler</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # scheduler가 먼저떠야해서 depends_on 설정</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scheduler</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">&lt;&lt;</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">*airflow-common</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"> # 오류가 있다면 하단 command에 'airflow db init &amp;&amp;' 를 추가</span></span>
<span id="cb3-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> bash -c "airflow db migrate &amp;&amp; airflow users create --username airflow --firstname airflow --lastname airflow --role Admin --email airflow@gmail.com --password airflow &amp;&amp; airflow scheduler"</span></span></code></pre></div>
<p><br></p></li>
</ul></li>
<li>Airflow 설치방법
<ul>
<li>Installation
<ul>
<li>https://airflow.apache.org/docs/apache-airflow/stable/installation/index.html</li>
</ul></li>
<li>Quick Start
<ul>
<li>https://airflow.apache.org/docs/apache-airflow/stable/start.html</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="dag-작성하는법" class="level2">
<h2 class="anchored" data-anchor-id="dag-작성하는법">DAG 작성하는법</h2>
<ul>
<li><p>DAG(Directed Acyclic Graph)</p>
<ul>
<li>작업의 dependencies과 relationships를 정의</li>
<li>다양한 Operator가 있음 (Operator = Task의 단위) <br></li>
</ul></li>
<li><p>DAG 선언</p>
<ul>
<li><p>with문 사용</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DAG</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow.operators.empty <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> EmptyOperator</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> DAG(</span>
<span id="cb4-5">    dag_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_dag_name"</span>,</span>
<span id="cb4-6">    start_date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>datetime.datetime(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb4-7">    schedule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@daily"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 리소스가 비는 시간에 실행해줌</span></span>
<span id="cb4-8">):</span>
<span id="cb4-9"></span>
<span id="cb4-10">EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task"</span>)</span></code></pre></div></li>
<li><p>변수에 할당 후 operator에 넣기</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">my_dag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DAG(</span>
<span id="cb5-2">    dag_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_dag_name"</span>,</span>
<span id="cb5-3">    start_date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>datetime.datetime(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),      </span>
<span id="cb5-4">    schedule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@daily"</span>,</span>
<span id="cb5-5">)</span>
<span id="cb5-6">EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task"</span>, dag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>my_dag)</span></code></pre></div></li>
<li><p>데코레이터 사용</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow.decorators <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dag</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dag</span>(start_date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>datetime.datetime(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), schedule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@daily"</span>) </span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate_dag():</span>
<span id="cb6-5">    EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task"</span>)</span>
<span id="cb6-6"></span>
<span id="cb6-7">generate_dag()</span></code></pre></div></li>
<li><p>데코레이터로 task지정 (+순서지정)</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow.decorators <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> task</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow.operators.bash <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BashOperator</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A DAG represents a workflow, a collection of tasks</span></span>
<span id="cb7-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> DAG(dag_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"demo"</span>, start_date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>datetime(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), schedule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0 0 * * *"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> dag: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tasks are represented as operators</span></span>
<span id="cb7-6">    hello <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BashOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello"</span>, bash_command<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"echo hello"</span>)</span>
<span id="cb7-7"></span>
<span id="cb7-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@task</span>()</span>
<span id="cb7-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> airflow():</span>
<span id="cb7-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"airflow"</span>)</span>
<span id="cb7-11"></span>
<span id="cb7-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set dependencies between tasks</span></span>
<span id="cb7-13">    hello <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> airflow()</span></code></pre></div>
<p><br></p></li>
</ul></li>
<li><p>Operators(플러그인 역할)</p>
<ul>
<li>HttpOperator</li>
<li>MySqlOperator</li>
<li>PostgresOperator</li>
<li>MsSqlOperator</li>
<li>OracleOperator</li>
<li>JdbcOperator</li>
<li>DockerOperator</li>
<li>HiveOperator</li>
<li>S3FileTransformOperator</li>
<li>PrestoToMySqlOperator</li>
<li>SlackAPIOperator</li>
</ul></li>
<li><p>Python operator예시</p>
<ul>
<li><p>샘플코드에서 xcom_pull()은 DAG 내의 task 사이에서 데이터를 전달할 때 사용</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">dag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DAG(</span>
<span id="cb8-2">    dag_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example_template_as_python_object"</span>,</span>
<span id="cb8-3">    schedule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># @daily, 0 0 * * * 등</span></span>
<span id="cb8-4">    start_date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pendulum.datetime(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, tz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UTC"</span>),</span>
<span id="cb8-5">    catchup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start_date와 현재 사이의 실행이 안된 분량을 catchup=True하여 실행</span></span>
<span id="cb8-6">    render_template_as_native_obj<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb8-7">    )</span>
<span id="cb8-8"></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># task 데코레이터 사용</span></span>
<span id="cb8-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@task</span>(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"extract"</span>)</span>
<span id="cb8-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> extract():</span>
<span id="cb8-12">    data_string <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{"1001": 301.27, "1002": 433.21, "1003": 502.22}'</span> </span>
<span id="cb8-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> json.loads(data_string)</span>
<span id="cb8-14"></span>
<span id="cb8-15">extract_task <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extract()</span>
<span id="cb8-16"></span>
<span id="cb8-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Python operator 사용</span></span>
<span id="cb8-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> transform(order_data):</span>
<span id="cb8-19">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(order_data))</span>
<span id="cb8-20">    total_order_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb8-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> value <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> order_data.values():</span>
<span id="cb8-22">    total_order_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> value</span>
<span id="cb8-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"total_order_value"</span>: total_order_value}</span>
<span id="cb8-24"></span>
<span id="cb8-25">transform_task <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PythonOperator(</span>
<span id="cb8-26">    task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transform"</span>,</span>
<span id="cb8-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># transform함수의 argument넣기 &amp; xcom_pull로 extract task데이터 가져오기</span></span>
<span id="cb8-28">    op_kwargs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"order_data"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ti.xcom_pull('extract')</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>}, </span>
<span id="cb8-29">    python_callable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transform,</span>
<span id="cb8-30">    )</span>
<span id="cb8-31"></span>
<span id="cb8-32">extract_task <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> transform_task</span></code></pre></div>
<p><br></p></li>
</ul></li>
<li><p>Dependency 정의(예시)</p>
<ul>
<li><p>순서가 중요하지 않다면 리스트[]에 넣기</p>
<ul>
<li>first_task &gt;&gt; [second_task, third_task]</li>
</ul></li>
<li><p>방향(&lt;&lt;)에 따라 역순으로 실행</p>
<ul>
<li>third_task &lt;&lt; fourth_task</li>
</ul></li>
<li><p>first_task 후 [second_task, third_task]</p>
<ul>
<li>first_task.set_downstream([second_task, third_task])</li>
</ul></li>
<li><p>fourth_task 후 third_task</p>
<ul>
<li>third_task.set_upstream(fourth_task)</li>
</ul></li>
<li><p>cross_downstream</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Before</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [op1, op2] &gt;&gt; op3</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [op1, op2] &gt;&gt; op4</span></span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># After (Before의 2줄 코드를 아래와 같이 1줄로 표현 가능)</span></span>
<span id="cb9-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow.models.baseoperator <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cross_downstream</span>
<span id="cb9-7"></span>
<span id="cb9-8">cross_downstream([op1, op2], [op3, op4])</span></code></pre></div></li>
<li><p>chain</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Before</span></span>
<span id="cb10-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># op1 &gt;&gt; op2 &gt;&gt; op3 &gt;&gt; op4</span></span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># After1 (&gt;&gt; 대신 chain 사용)</span></span>
<span id="cb10-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow.models.baseoperator <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> chain</span>
<span id="cb10-6"></span>
<span id="cb10-7">chain(op1, op2, op3, op4)</span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># After2 (task많은 경우 comprehension으로 dynamic하게 사용)</span></span>
<span id="cb10-9">chain(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>[EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'op'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)])</span></code></pre></div>
<p><br></p></li>
</ul></li>
<li><p>Retry</p>
<ul>
<li>default_args에 넣어서 설정</li>
<li>후반부로 갈수록 느리게하는 exponential 전략 등 있음</li>
</ul>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow.models.dag <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DAG</span>
<span id="cb11-2">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow.operators.bash <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BashOperator</span>
<span id="cb11-3">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb11-4">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pendulum</span>
<span id="cb11-5"></span>
<span id="cb11-6">  dag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DAG(</span>
<span id="cb11-7">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tutorial"</span>,</span>
<span id="cb11-8">      default_args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb11-9">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"depends_on_past"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 과거 실행에 의존</span></span>
<span id="cb11-10">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"retries"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># retry 횟수</span></span>
<span id="cb11-11">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"retry_delay"</span>: datetime.timedelta(minutes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># retry주기</span></span>
<span id="cb11-12">          },</span>
<span id="cb11-13">      start_date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pendulum.datetime(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2015</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, tz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UTC"</span>), </span>
<span id="cb11-14">      description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A simple tutorial DAG"</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># UI에서 보임</span></span>
<span id="cb11-15">      schedule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@daily"</span>, </span>
<span id="cb11-16">      catchup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb11-17">  )</span></code></pre></div>
<p><br></p></li>
<li><p>Branch</p>
<ul>
<li><p>샘플코드</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@task.branch</span>(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"branch_task"</span>)</span>
<span id="cb12-2"></span>
<span id="cb12-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> branch_func(ti<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb12-4">        xcom_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(ti.xcom_pull(task_ids<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start_task"</span>)) </span>
<span id="cb12-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> xcom_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>:</span>
<span id="cb12-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continue_task"</span></span>
<span id="cb12-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> xcom_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb12-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stop_task"</span></span>
<span id="cb12-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb12-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb12-11"></span>
<span id="cb12-12">    start_op <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BashOperator(</span>
<span id="cb12-13">        task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start_task"</span>,</span>
<span id="cb12-14">        bash_command<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"echo 5"</span>,</span>
<span id="cb12-15">        do_xcom_push<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 터미널에 찍힌 위의 5값이 xcom으로 전달</span></span>
<span id="cb12-16">        dag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dag,</span>
<span id="cb12-17">        )</span>
<span id="cb12-18"></span>
<span id="cb12-19">    branch_op <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> branch_func()</span>
<span id="cb12-20"></span>
<span id="cb12-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># branch_func에 필요한 "continue_task", "stop_task"</span></span>
<span id="cb12-22">    continue_op <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"continue_task"</span>, dag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dag) </span>
<span id="cb12-23">    stop_op <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stop_task"</span>, dag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dag) </span>
<span id="cb12-24"></span>
<span id="cb12-25">    start_op <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> branch_op <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> [continue_op, stop_op]</span></code></pre></div></li>
<li><p>샘플코드 with 이미지</p>
<ul>
<li><div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240906/index_files/figure-html/375c8252-1-class_w5_6.jpg" class="img-fluid figure-img"></p>
<figcaption>class_w5_6.jpg</figcaption>
</figure>
</div>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">  dag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DAG(</span>
<span id="cb13-2">      dag_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"branch_without_trigger"</span>,</span>
<span id="cb13-3">      schedule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@once"</span>,</span>
<span id="cb13-4">      start_date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pendulum.datetime(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2019</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, tz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UTC"</span>),</span>
<span id="cb13-5">  )</span>
<span id="cb13-6"></span>
<span id="cb13-7">  run_this_first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"run_this_first"</span>, dag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dag)</span>
<span id="cb13-8"></span>
<span id="cb13-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@task.branch</span>(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"branching"</span>)</span>
<span id="cb13-10">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> do_branching():</span>
<span id="cb13-11">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"branch_a"</span></span>
<span id="cb13-12"></span>
<span id="cb13-13">  branching <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> do_branching()</span>
<span id="cb13-14">  branch_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"branch_a"</span>, dag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dag)</span>
<span id="cb13-15"></span>
<span id="cb13-16">  follow_branch_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"follow_branch_a"</span>, dag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dag) </span>
<span id="cb13-17">  branch_false <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"branch_false"</span>, dag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dag) </span>
<span id="cb13-18">  join <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"join"</span>, dag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dag)</span>
<span id="cb13-19"></span>
<span id="cb13-20">  run_this_first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> branching</span>
<span id="cb13-21"></span>
<span id="cb13-22">  branching <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> branch_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> follow_branch_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> join</span>
<span id="cb13-23">  branching <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> branch_false <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> join</span></code></pre></div>
<br></li>
</ul></li>
</ul></li>
<li><p>Trigger rule</p>
<ul>
<li><p>종류</p>
<ul>
<li>all_success (<strong>default</strong>): All upstream tasks have succeeded</li>
<li>all_failed: All upstream tasks are in a failed or upstream_failed state</li>
<li>all_done: All upstream tasks are done with their execution</li>
<li>all_skipped: All upstream tasks are in a skipped state</li>
<li>one_failed: At least one upstream task has failed (does not wait for all upstream tasks to be done)</li>
<li>one_success: At least one upstream task has succeeded (does not wait for all upstream tasks to be done)</li>
<li>one_done: At least one upstream task succeeded or failed</li>
<li>none_failed: All upstream tasks have not failed or upstream_failed - that is, all upstream tasks have succeeded or been skipped</li>
<li>none_failed_min_one_success: All upstream tasks have not failed or upstream_failed, and at least one upstream task has succeeded.</li>
<li>none_skipped: No upstream task is in a skipped state - that is, all upstream tasks are in a success, failed, or upstream_failed state</li>
<li>always: No dependencies at all, run this task at any time</li>
</ul></li>
<li><p>샘플코드</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> DAG(</span>
<span id="cb14-2">    dag_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latest_only_with_trigger"</span>,</span>
<span id="cb14-3">    schedule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>datetime.timedelta(hours<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),</span>
<span id="cb14-4">    start_date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pendulum.datetime(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, tz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UTC"</span>),</span>
<span id="cb14-5">    catchup<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb14-6">    tags<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example3"</span>], <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># UI에서 태그로 확인가능</span></span>
<span id="cb14-7">) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> dag:</span>
<span id="cb14-8"></span>
<span id="cb14-9">    latest_only <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LatestOnlyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latest_only"</span>)</span>
<span id="cb14-10">    task1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task1"</span>)</span>
<span id="cb14-11">    task2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task2"</span>)</span>
<span id="cb14-12">    task3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task3"</span>)</span>
<span id="cb14-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># trigger_rule 입력</span></span>
<span id="cb14-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## TriggerRule.ALL_DONE 이므로 upstream인 latest_only/task1/task2 실행되면 실행</span></span>
<span id="cb14-15">    task4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task4"</span>, trigger_rule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>TriggerRule.ALL_DONE) </span>
<span id="cb14-16"></span>
<span id="cb14-17">    latest_only <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> task1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> [task3, task4]</span>
<span id="cb14-18">    task2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> [task3, task4]</span></code></pre></div>
<p><br></p></li>
</ul></li>
<li><p>Task Group</p>
<ul>
<li>Task를 묶고 싶을 때 사용(+설정을 일괄로 부여하고 싶을 때)
<ul>
<li><p>샘플코드1 (Task묶기)</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow.decorators <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> task_group</span>
<span id="cb15-2"></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># task를 그룹으로 묶음</span></span>
<span id="cb15-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@task_group</span>()</span>
<span id="cb15-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> group1():</span>
<span id="cb15-6">    task1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task1"</span>)</span>
<span id="cb15-7">    task2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task2"</span>)</span>
<span id="cb15-8"></span>
<span id="cb15-9">task3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task3"</span>)</span>
<span id="cb15-10"></span>
<span id="cb15-11">group1() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> task3</span></code></pre></div></li>
<li><p>샘플코드2 (Task를 묶고 설정을 일괄로 부여)</p>
<ul>
<li><p>우선순위는 task에 개별로 부여한 설정을 적용한 후, group의 설정을 적용한다</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># task를 그룹으로 묶고, retries 등 일괄로 설정할 때</span></span>
<span id="cb16-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@task_group</span>(default_args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"retries"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>})</span>
<span id="cb16-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> group1():</span>
<span id="cb16-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""This docstring will become the tooltip for the TaskGroup."""</span></span>
<span id="cb16-5">    task1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task1"</span>)</span>
<span id="cb16-6">    task2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BashOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"task2"</span>, bash_command<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"echo Hello World!"</span>, retries<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) </span>
<span id="cb16-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(task1.retries)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print값 : 3</span></span>
<span id="cb16-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(task2.retries)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print값 : 1</span></span></code></pre></div>
<p><br></p></li>
</ul></li>
</ul></li>
</ul></li>
<li><p>Sub Dags</p>
<ul>
<li><p>Sub Dags끼리 Args(설정) 등을 적용할 때 사용</p></li>
<li><p>샘플코드(Dag를 만든 후, SubDagOperator를 사용)</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> DAG(</span>
<span id="cb17-2">    dag_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>DAG_NAME,</span>
<span id="cb17-3">    default_args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"retries"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>},</span>
<span id="cb17-4">    start_date<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>datetime.datetime(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb17-5">    schedule<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@once"</span>,</span>
<span id="cb17-6">    tags<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example"</span>],</span>
<span id="cb17-7">) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> dag:</span>
<span id="cb17-8"></span>
<span id="cb17-9">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"start"</span>,)</span>
<span id="cb17-10"></span>
<span id="cb17-11">    section_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SubDagOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"section-1"</span>,</span>
<span id="cb17-12">        subdag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>subdag(DAG_NAME, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"section-1"</span>, dag.default_args), )</span>
<span id="cb17-13"></span>
<span id="cb17-14">    some_other_task <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some-other-task"</span>,)</span>
<span id="cb17-15"></span>
<span id="cb17-16">    section_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SubDagOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"section-2"</span>,</span>
<span id="cb17-17">        subdag<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>subdag(DAG_NAME, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"section-2"</span>, dag.default_args), )</span>
<span id="cb17-18"></span>
<span id="cb17-19">    end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EmptyOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"end"</span>,)</span>
<span id="cb17-20"></span>
<span id="cb17-21">    start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> section_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> some_other_task <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> section_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> end</span></code></pre></div>
<p><br></p></li>
</ul></li>
<li><p>Sub Dag와 Task group 차이</p>
<ul>
<li>Configuration 적용
<ul>
<li>Sub dags는 여러 Dag Conf, Task group은 하나의 Dag Conf</li>
</ul></li>
<li>View and statistics
<ul>
<li>Sub dags는 여러개의 현황이, Task group은 하나로 보임</li>
</ul></li>
<li>Job의 병렬 처리
<ul>
<li>Sub dags는 여러개의 job으로, Task group은 하나의 job으로 executor가 실행</li>
</ul></li>
<li>선언(declaration)과 규칙(naming restirctions)
<ul>
<li>Sub dags가 좀 더 어려움 <br></li>
</ul></li>
</ul></li>
</ul>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Spark</category>
  <category>PySpark</category>
  <category>Airflow</category>
  <category>202408Study_DataEngineering</category>
  <guid>https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240906/</guid>
  <pubDate>Fri, 06 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[DE스터디/4주차과제] 다양한 데이터처리 플랫폼을 사용한 데이터 수집~모니터링</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240905/</link>
  <description><![CDATA[ 






<p>데이터 엔지니어링 스터디 내용정리 - Spark, Elasticsearch</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>참여중인 데이터 엔지니어링 스터디에서 배우는 내용 정리
<ul>
<li>데이터 수집, 정제 : pyspark, airflow</li>
<li>저장 : elasticsearch</li>
<li>시각화 : kibana</li>
</ul></li>
<li>4주차 과제 : elasticsearch관련 실습(index만들기, pyspark dataframe저장 등)</li>
</ul>
</section>
<section id="과제---4주차" class="level1">
<h1>과제 - 4주차</h1>
<section id="데이터-포맷에-적합한-elasticsearch-index-생성하기" class="level2">
<h2 class="anchored" data-anchor-id="데이터-포맷에-적합한-elasticsearch-index-생성하기">데이터 포맷에 적합한 elasticsearch index 생성하기</h2>
<section id="기본코드" class="level3">
<h3 class="anchored" data-anchor-id="기본코드">기본코드</h3>
<div id="35bc64a3" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> argparse</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pyspark.sql <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SparkSession</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime, timedelta</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sys</span>
<span id="cb1-5">sys.path.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/home/jovyan/jobs'</span>)</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> base <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> read_input, init_df, df_with_meta</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DailyStatFilter, TopRepoFilter, TopUserFilter, PytorchTopIssuerFilter</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> es <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Es</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SparkSession</span></span>
<span id="cb1-11">spark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (SparkSession</span>
<span id="cb1-12">    .builder</span>
<span id="cb1-13">    .master(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"local"</span>)</span>
<span id="cb1-14">    .appName(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spark-sql"</span>)</span>
<span id="cb1-15">    .config(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spark.driver.extraClassPath"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/opt/bitnami/spark/resources/elasticsearch-spark-30_2.12-8.4.3.jar"</span>)</span>
<span id="cb1-16">    .config(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spark.jars"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/opt/bitnami/spark/resources/elasticsearch-spark-30_2.12-8.4.3.jar"</span>)</span>
<span id="cb1-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for jupyter</span></span>
<span id="cb1-18">    .config(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spark.driver.extraClassPath"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/jovyan/resources/elasticsearch-spark-30_2.12-8.4.3.jar"</span>)</span>
<span id="cb1-19">    .config(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spark.jars"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/home/jovyan/resources/elasticsearch-spark-30_2.12-8.4.3.jar"</span>)   </span>
<span id="cb1-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 옵션추가 시작</span></span>
<span id="cb1-21">    .config(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spark.executor.memory"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3G"</span>)</span>
<span id="cb1-22">    .config(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spark.driver.memory"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3G"</span>)</span>
<span id="cb1-23">    .config(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spark.executor.cores"</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 옵션추가 끝</span></span>
<span id="cb1-25">    .getOrCreate())</span>
<span id="cb1-26"></span>
<span id="cb1-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 제출용 파일이므로 로그는 미출력되게 조정 (ALL,DEBUG,ERROR,FATAL,TRACE,WARN,INFO,OFF)</span></span>
<span id="cb1-28">spark.sparkContext.setLogLevel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"OFF"</span>)</span>
<span id="cb1-29"></span>
<span id="cb1-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Args:</span>
<span id="cb1-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb1-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.target_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.spark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-35"></span>
<span id="cb1-36">args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Args()</span>
<span id="cb1-37">args.spark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spark</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.spark.unsafe.Platform (file:/usr/local/spark-3.1.2-bin-hadoop3.2/jars/spark-unsafe_2.12-3.1.2.jar) to constructor java.nio.DirectByteBuffer(long,int)
WARNING: Please consider reporting this to the maintainers of org.apache.spark.unsafe.Platform
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
24/09/05 14:06:06 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).</code></pre>
</div>
</div>
<div id="62023cb4" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for Jupyter test</span></span>
<span id="cb3-2">args.input_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"/home/jovyan/data/gh_archive/2024-08-24-*.json.gz"</span></span></code></pre></div>
</div>
</section>
<section id="실습코드-데이터-확인" class="level3">
<h3 class="anchored" data-anchor-id="실습코드-데이터-확인">실습코드 데이터 확인</h3>
<div id="cb769f9d" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_input(args.spark, args.input_path)</span>
<span id="cb4-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_df(df)</span></code></pre></div>
</div>
<div id="1f91ef5d" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DailyStatFilter 산출데이터 확인</span></span>
<span id="cb5-2">stat_filter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DailyStatFilter(args)</span>
<span id="cb5-3">stat_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stat_filter.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(df)</span>
<span id="cb5-4">stat_df.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>+------------+------------+----------+--------+----------+--------------------+
|d_user_count|d_repo_count|push_count|pr_count|fork_count|commit_comment_count|
+------------+------------+----------+--------+----------+--------------------+
|317111      |255241      |1103808   |106155  |21821     |1480                |
+------------+------------+----------+--------+----------+--------------------+
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>[Stage 27:=============================================&gt;        (169 + 1) / 200]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>+------------+------------+----------+--------+----------+--------------------+
|d_user_count|d_repo_count|push_count|pr_count|fork_count|commit_comment_count|
+------------+------------+----------+--------+----------+--------------------+
|      317111|      255241|   1103808|  106155|     21821|                1480|
+------------+------------+----------+--------+----------+--------------------+
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
                                                                                </code></pre>
</div>
</div>
<div id="fdde401a" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># DailyStatFilter 산출데이터 with metadata(timestamp) 확인</span></span>
<span id="cb11-2">stat_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_with_meta(stat_df, args.target_date)</span>
<span id="cb11-3">stat_df.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>+------------+------------+----------+--------+----------+--------------------+----------+
|d_user_count|d_repo_count|push_count|pr_count|fork_count|commit_comment_count|@timestamp|
+------------+------------+----------+--------+----------+--------------------+----------+
|      317111|      255241|   1103808|  106155|     21821|                1480|      null|
+------------+------------+----------+--------+----------+--------------------+----------+
</code></pre>
</div>
</div>
</section>
<section id="eleasticsearch-index생성할-데이터-확인" class="level3">
<h3 class="anchored" data-anchor-id="eleasticsearch-index생성할-데이터-확인">eleasticsearch index생성할 데이터 확인</h3>
<div id="3f3987c0" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyspark.sql.functions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span></code></pre></div>
</div>
<div id="10345ead" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter : repo_name = pytorch</span></span>
<span id="cb15-2">base_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(F.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'userid_and_repo_name'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pytorch/pytorch'</span>)</span>
<span id="cb15-3"></span>
<span id="cb15-4">issues_event_exists <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(base_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IssuesEvent"</span>).count() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb15-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> issues_event_exists:</span>
<span id="cb15-6">    filtered_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(F.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'IssuesEvent'</span>)</span>
<span id="cb15-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb15-8">    filtered_df <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> filtered_df <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb15-11">    filtered_df.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>[Stage 5:=============================&gt;                             (1 + 1) / 2]</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>+-----------------+--------------------+-------------------+-----------+-------------+----+-------------+-------+-----------+--------------------+--------------------+---------+
|        user_name|                 url|         created_at|         id|repository_id|size|distinct_size|comment|       type|            repo_url|userid_and_repo_name|repo_name|
+-----------------+--------------------+-------------------+-----------+-------------+----+-------------+-------+-----------+--------------------+--------------------+---------+
|         hyperkai|https://api.githu...|2024-08-24 16:21:24|41307929891|         null|null|         null|   null|IssuesEvent|https://api.githu...|     pytorch/pytorch|  pytorch|
|       phanicoder|https://api.githu...|2024-08-24 16:48:56|41308170756|         null|null|         null|   null|IssuesEvent|https://api.githu...|     pytorch/pytorch|  pytorch|
|samuele-bortolato|https://api.githu...|2024-08-24 14:56:17|41307163891|         null|null|         null|   null|IssuesEvent|https://api.githu...|     pytorch/pytorch|  pytorch|
|  pytorchmergebot|https://api.githu...|2024-08-24 17:04:08|41308298815|         null|null|         null|   null|IssuesEvent|https://api.githu...|     pytorch/pytorch|  pytorch|
|       stevenvana|https://api.githu...|2024-08-24 19:20:50|41309466695|         null|null|         null|   null|IssuesEvent|https://api.githu...|     pytorch/pytorch|  pytorch|
|  pytorchmergebot|https://api.githu...|2024-08-24 20:33:26|41310013328|         null|null|         null|   null|IssuesEvent|https://api.githu...|     pytorch/pytorch|  pytorch|
|  pytorchmergebot|https://api.githu...|2024-08-24 21:09:31|41310280894|         null|null|         null|   null|IssuesEvent|https://api.githu...|     pytorch/pytorch|  pytorch|
+-----------------+--------------------+-------------------+-----------+-------------+----+-------------+-------+-----------+--------------------+--------------------+---------+
</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
                                                                                </code></pre>
</div>
</div>
<div id="51b410be" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># groupby : </span></span>
<span id="cb19-2">result_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> filtered_df.groupBy(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user_name'</span>).pivot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>).count()</span>
<span id="cb19-3">result_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result_df.cache()</span>
<span id="cb19-4">result_df.where((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>F.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user_name'</span>).contains(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[bot]'</span>))) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-5">            .orderBy(F.desc(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'IssuesEvent'</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-6">            .limit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb19-7">result_df.show()</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>+-----------------+-----------+
|        user_name|IssuesEvent|
+-----------------+-----------+
|         hyperkai|          1|
|       phanicoder|          1|
|  pytorchmergebot|          3|
|       stevenvana|          1|
|samuele-bortolato|          1|
+-----------------+-----------+
</code></pre>
</div>
</div>
<div id="7e045d31" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">result_df.printSchema()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>root
 |-- user_name: string (nullable = true)
 |-- IssuesEvent: long (nullable = true)
</code></pre>
</div>
</div>
</section>
<section id="elasticsearch-index-생성해보기" class="level3">
<h3 class="anchored" data-anchor-id="elasticsearch-index-생성해보기">elasticsearch index 생성해보기</h3>
<ul>
<li>GPT에서 스키마를 주고 index 생성
<ul>
<li>강의내용에 따라 수정하고자 했으나, GPT의 의도가 내 사용목적에 부합함
<ul>
<li>user_name필드
<ul>
<li><code>type:text</code>로 검색가능한(full-text search) 텍스트 데이터(analyzer 적용)</li>
<li>정렬을 위한 <code>fields.keyword</code>사용(analyzer 미적용)</li>
</ul></li>
<li>IssuesEvent필드
<ul>
<li>type:long</li>
</ul>
<pre><code>PUT /pytorch_top_issuer
{
"mappings": {
"properties": {
"user_name": {
  "type": "text",
  "fields": {
    "keyword": {
      "type": "keyword",
      "ignore_above": 256
    }
  }
},
"IssuesEvent": {
  "type": "long"
}
}
}
}</code></pre></li>
</ul></li>
</ul></li>
</ul>
<div id="93a4aa05" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 만든 index넣어보기 (코드 by GPT)</span></span>
<span id="cb25-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb25-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb25-4"></span>
<span id="cb25-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Elasticsearch 클러스터의 URL 및 포트</span></span>
<span id="cb25-6">es_host <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'localhost'</span></span>
<span id="cb25-7">es_port <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9200</span></span>
<span id="cb25-8">index_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pytorch_top_issuer'</span></span>
<span id="cb25-9"></span>
<span id="cb25-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 인덱스 생성에 사용할 JSON 데이터</span></span>
<span id="cb25-11">mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb25-12">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mappings"</span>: {</span>
<span id="cb25-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"properties"</span>: {</span>
<span id="cb25-14">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user_name"</span>: {</span>
<span id="cb25-15">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>,</span>
<span id="cb25-16">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fields"</span>: {</span>
<span id="cb25-17">          <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"keyword"</span>: {</span>
<span id="cb25-18">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"keyword"</span>,</span>
<span id="cb25-19">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore_above"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span></span>
<span id="cb25-20">          }</span>
<span id="cb25-21">        }</span>
<span id="cb25-22">      },</span>
<span id="cb25-23">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IssuesEvent"</span>: {</span>
<span id="cb25-24">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"long"</span></span>
<span id="cb25-25">      }</span>
<span id="cb25-26">    }</span>
<span id="cb25-27">  }</span>
<span id="cb25-28">}</span>
<span id="cb25-29"></span>
<span id="cb25-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Elasticsearch에 인덱스 생성 요청</span></span>
<span id="cb25-31">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'http://es:9200/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>index_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb25-32">headers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Content-Type'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'application/json'</span>}</span>
<span id="cb25-33"></span>
<span id="cb25-34">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.put(url, headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>headers, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>json.dumps(mapping))</span>
<span id="cb25-35"></span>
<span id="cb25-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 응답 출력</span></span>
<span id="cb25-37"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response.status_code)</span>
<span id="cb25-38"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response.json())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>200
{'acknowledged': True, 'shards_acknowledged': True, 'index': 'pytorch_top_issuer'}</code></pre>
</div>
</div>
</section>
</section>
<section id="spark-dataframe-을-elasticsearch-에-저장해보기" class="level2">
<h2 class="anchored" data-anchor-id="spark-dataframe-을-elasticsearch-에-저장해보기">spark dataframe 을 elasticsearch 에 저장해보기</h2>
<div id="965775ff" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 강의에 사용된 elasticsearch 저장용 코드 그대로 사용</span></span>
<span id="cb27-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Es(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">object</span>):</span>
<span id="cb27-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, es_hosts, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"append"</span>, write_operation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"overwrite"</span>):</span>
<span id="cb27-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_hosts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> es_hosts</span>
<span id="cb27-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mode</span>
<span id="cb27-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_write_operation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> write_operation</span>
<span id="cb27-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_index_auto_create <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"yes"</span></span>
<span id="cb27-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># self.es_mapping_id</span></span>
<span id="cb27-9"></span>
<span id="cb27-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> write_df(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, df, es_resource):</span>
<span id="cb27-11">        df.write.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"org.elasticsearch.spark.sql"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb27-12">          .mode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_mode) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb27-13">          .option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"es.nodes"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_hosts) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb27-14">          .option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"es.index.auto.create"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_index_auto_create) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb27-15">          .option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"es.resource"</span>, es_resource) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb27-16">          .save()</span>
<span id="cb27-17"></span>
<span id="cb27-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 호스트 지정 후 저장함수 활용</span></span>
<span id="cb27-19">es <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Es(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://es:9200"</span>)</span>
<span id="cb27-20">es.write_df(result_df, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pytorch_top_issuer"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>                                                                                </code></pre>
</div>
</div>
<div id="128ecec5" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 앞서 만들어본 elasticsearch index 적용시의 코드</span></span>
<span id="cb29-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 위 실습에서 만들어본 pytorch_top_issuer 인덱스로 테스트. 이후부터는 auto_create옵션으로 진행할 예정</span></span>
<span id="cb29-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Es(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">object</span>):</span>
<span id="cb29-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, es_hosts, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"append"</span>, write_operation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"overwrite"</span>):</span>
<span id="cb29-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_hosts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> es_hosts</span>
<span id="cb29-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mode</span>
<span id="cb29-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_write_operation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> write_operation</span>
<span id="cb29-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_index_auto_create <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 기존 인덱스 사용을 위해 "no"로 설정</span></span>
<span id="cb29-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># self.es_mapping_id</span></span>
<span id="cb29-10"></span>
<span id="cb29-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> write_df(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, df, es_resource):</span>
<span id="cb29-12">        df.write.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"org.elasticsearch.spark.sql"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb29-13">          .mode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_mode) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb29-14">          .option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"es.nodes"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_hosts) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb29-15">          .option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"es.index.auto.create"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_index_auto_create) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb29-16">          .option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"es.resource"</span>, es_resource) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb29-17">          .save()</span>
<span id="cb29-18"></span>
<span id="cb29-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 호스트 지정 후 저장함수 활용</span></span>
<span id="cb29-20">es <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Es(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://es:9200"</span>)</span>
<span id="cb29-21">es.write_df(df, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pytorch_top_issuer"</span>)</span></code></pre></div>
</div>
<div id="af4514f0" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 앞서 만들어본 elasticsearch index 적용시의 코드</span></span>
<span id="cb30-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 위 실습에서 만들어본 pytorch_top_issuer 인덱스로 테스트. 이후부터는 auto_create옵션으로 진행할 예정</span></span>
<span id="cb30-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 결과 확인을 위해 spark의 로그레벨을 다시 조정</span></span>
<span id="cb30-4"></span>
<span id="cb30-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Es(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">object</span>):</span>
<span id="cb30-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, es_hosts, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"append"</span>, write_operation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"overwrite"</span>):</span>
<span id="cb30-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_hosts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> es_hosts</span>
<span id="cb30-8">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mode</span>
<span id="cb30-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_write_operation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> write_operation</span>
<span id="cb30-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_index_auto_create <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"no"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 기존 인덱스 사용을 위해 "no"로 설정</span></span>
<span id="cb30-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># self.es_mapping_id</span></span>
<span id="cb30-12"></span>
<span id="cb30-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> write_df(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, df, es_resource):</span>
<span id="cb30-14">        df.write.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"org.elasticsearch.spark.sql"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb30-15">          .mode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_mode) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb30-16">          .option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"es.nodes"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_hosts) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb30-17">          .option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"es.index.auto.create"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.es_index_auto_create) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb30-18">          .option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"es.resource"</span>, es_resource) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb30-19">          .save()</span>
<span id="cb30-20">        </span>
<span id="cb30-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 결과확인을 위해 임시로 로그레벨 조정 (ALL,DEBUG,ERROR,FATAL,TRACE,WARN,INFO,OFF)</span></span>
<span id="cb30-22">spark.sparkContext.setLogLevel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"WARN"</span>)</span>
<span id="cb30-23"></span>
<span id="cb30-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 호스트 지정 후 저장함수 활용</span></span>
<span id="cb30-25">es <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Es(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://es:9200"</span>)</span>
<span id="cb30-26">es.write_df(df, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pytorch_top_issuer"</span>)</span></code></pre></div>
</div>
</section>
<section id="저장된-데이터-확인해보기" class="level2">
<h2 class="anchored" data-anchor-id="저장된-데이터-확인해보기">저장된 데이터 확인해보기</h2>
<div id="41c7f0b1" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> elasticsearch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Elasticsearch</span></code></pre></div>
</div>
<div id="f123887d" class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect to Elasticsearch by GPT</span></span>
<span id="cb32-2">es <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Elasticsearch([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'http://es:9200'</span>])</span>
<span id="cb32-3"></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the index</span></span>
<span id="cb32-5">index_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pytorch_top_issuer'</span></span>
<span id="cb32-6"></span>
<span id="cb32-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Example search query to retrieve all documents (with a size limit)</span></span>
<span id="cb32-8">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb32-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"query"</span>: {</span>
<span id="cb32-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"match_all"</span>: {}</span>
<span id="cb32-11">    }</span>
<span id="cb32-12">}</span>
<span id="cb32-13"></span>
<span id="cb32-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Execute the search query</span></span>
<span id="cb32-15">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> es.search(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>index_name, body<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>query, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust 'size' to retrieve more documents</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>/tmp/ipykernel_69/3314748211.py:15: DeprecationWarning: The 'body' parameter is deprecated and will be removed in a future version. Instead use individual parameters.
  response = es.search(index=index_name, body=query, size=10)  # Adjust 'size' to retrieve more documents</code></pre>
</div>
</div>
<div id="b29f69c1" class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse and print the search results</span></span>
<span id="cb34-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> hit <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> response[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hits'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hits'</span>]:</span>
<span id="cb34-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(hit[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'_source'</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'user_name': 'hyperkai', 'IssuesEvent': 1}
{'user_name': 'phanicoder', 'IssuesEvent': 1}
{'user_name': 'pytorchmergebot', 'IssuesEvent': 3}
{'user_name': 'stevenvana', 'IssuesEvent': 1}
{'user_name': 'samuele-bortolato', 'IssuesEvent': 1}</code></pre>
</div>
</div>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Spark</category>
  <category>PySpark</category>
  <category>elasticsearch</category>
  <category>202408Study_DataEngineering</category>
  <guid>https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240905/</guid>
  <pubDate>Thu, 05 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[DE스터디/4주차강의] 다양한 데이터처리 플랫폼을 사용한 데이터 수집~모니터링</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240902/</link>
  <description><![CDATA[ 






<p>데이터 엔지니어링 스터디 내용정리 - Elasticsearch</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>참여중인 데이터 엔지니어링 스터디에서 배우는 내용 정리
<ul>
<li>데이터 수집, 정제 : pyspark, airflow</li>
<li>저장 : elasticsearch</li>
<li>시각화 : kibana</li>
</ul></li>
</ul>
</section>
<section id="주차-과제리뷰" class="level1">
<h1>3주차 과제리뷰</h1>
<section id="정제코드-작성해보기" class="level2">
<h2 class="anchored" data-anchor-id="정제코드-작성해보기">정제코드 작성해보기</h2>
<ul>
<li>jobs
<ul>
<li>main.py
<ul>
<li><p>Spark initialization + filter(정제) + 저장</p></li>
<li><p>공통기능</p></li>
<li><p>추후 자동화될 부분 고려되어있는 코드</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">  parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> argparse.ArgumentParser()</span>
<span id="cb1-2">  parser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--target_date"</span>, default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"optional:target date(yyyy-mm-dd)"</span>)</span>
<span id="cb1-3">  args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser.parse_args()</span>
<span id="cb1-4"></span>
<span id="cb1-5">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...(생략)</span></span>
<span id="cb1-6"></span>
<span id="cb1-7">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> args.target_date <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 정제실패시 다시돌릴 때 편의를 위함</span></span>
<span id="cb1-8">      args.target_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (datetime.now() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> timedelta(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)).strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb1-9">  args.input_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"/opt/bitnami/spark/data/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>args<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>target_date<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-*.json"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터명이 날짜일 예정</span></span></code></pre></div></li>
</ul></li>
<li>filter.py
<ul>
<li>정제코드(BaseFilter + TopRepoFilter)</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> base <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaseFilter <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># base.py에서 가져옴</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> TopRepoFilter(BaseFilter):</span>
<span id="cb2-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, df):</span>
<span id="cb2-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Top 10 Repo: Push Count</span></span>
<span id="cb2-6">        repo_cnt_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupBy(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'repository_id'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'repo_name'</span>).pivot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>).count()</span>
<span id="cb2-7">        repo_cnt_df.where((F.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'repository_id'</span>).isNotNull())) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-8">                    .orderBy(F.desc(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PushEvent'</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-9">                    .limit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb2-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> repo_cnt_df</span></code></pre></div>
<ul>
<li>정제코드(BaseFilter + DailyStatFilter)</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> base <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaseFilter <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># base.py에서 가져옴</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> DailyStatFilter(BaseFilter):</span>
<span id="cb3-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> hit_count(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, df, cond, col_name):</span>
<span id="cb3-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># is_cond 컬럼을 만든 후, </span></span>
<span id="cb3-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># F.col('type') == 'PushEvent' 와 같은 조건을 F.when(cond, 1)에 넣어 값이 조건에 맞으면(PushEvent) 1, 아니면(otherwise) 0</span></span>
<span id="cb3-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .agg(F.sum('is_cond').alias(col_name) 으로 합산 후 alias지정</span></span>
<span id="cb3-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> df.withColumn(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_cond'</span>, F.when(cond, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).otherwise(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)).agg(F.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is_cond'</span>).alias(col_name))</span>
<span id="cb3-9"></span>
<span id="cb3-10"></span>
<span id="cb3-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, df):</span>
<span id="cb3-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># daily stats</span></span>
<span id="cb3-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 유니크한 유저  :  d_user_count  | 1000</span></span>
<span id="cb3-14">        stat_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.agg(F.countDistinct(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user_name'</span>).alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d_user_count'</span>))</span>
<span id="cb3-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## d_repo_count | 500 데이터프레임을 만든 후, crossjoin으로 합침  :  d_user_count, d_repo_count | 1000, 500</span></span>
<span id="cb3-16">        stat_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stat_df.crossJoin(df.agg(F.countDistinct(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'repository_id'</span>).alias(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'d_repo_count'</span>)))</span>
<span id="cb3-17"></span>
<span id="cb3-18">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># push counts</span></span>
<span id="cb3-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## where절로 숫자를 구한 후 데이터프레임 생성작업이 필요없도록, hit_count함수로 구현</span></span>
<span id="cb3-20">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## </span></span>
<span id="cb3-21">        push_cnt_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hit_count(df, F.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PushEvent'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'push_count'</span>)</span>
<span id="cb3-22">        push_cnt_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> push_cnt_df.cache() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 캐시를 호출하여 최적화에 도움</span></span>
<span id="cb3-23">        stat_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stat_df.crossJoin(push_cnt_df)</span>
<span id="cb3-24"></span>
<span id="cb3-25">        pr_cnt_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hit_count(df, F.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PullRequestEvent'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pr_count'</span>)</span>
<span id="cb3-26">        pr_cnt_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pr_cnt_df.cache() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 캐시를 호출하여 최적화에 도움</span></span>
<span id="cb3-27">        stat_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stat_df.crossJoin(pr_cnt_df)</span>
<span id="cb3-28"></span>
<span id="cb3-29">        fork_cnt_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hit_count(df, F.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ForkEvent'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fork_count'</span>)</span>
<span id="cb3-30">        fork_cnt_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fork_cnt_df.cache() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 캐시를 호출하여 최적화에 도움</span></span>
<span id="cb3-31">        stat_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stat_df.crossJoin(fork_cnt_df)</span>
<span id="cb3-32"></span>
<span id="cb3-33">        commit_comment_cnt_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hit_count(df, F.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CommitCommentEvent'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'commit_comment_count'</span>)</span>
<span id="cb3-34">        commit_comment_cnt_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> commit_comment_cnt_df.cache()</span>
<span id="cb3-35">        stat_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stat_df.crossJoin(commit_comment_cnt_df)</span>
<span id="cb3-36"></span>
<span id="cb3-37">        stat_df.show(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb3-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> stat_df</span></code></pre></div></li>
<li>base.py
<ul>
<li>executor세팅 관련코드</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">  <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> read_input(spark, input_path):</span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _input_exists(input_path):</span>
<span id="cb4-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> glob.glob(input_path)</span>
<span id="cb4-4"></span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> _input_exists(input_path):</span>
<span id="cb4-6">        df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spark.read.json(input_path)</span>
<span id="cb4-7">        df.printSchema()</span>
<span id="cb4-8"></span>
<span id="cb4-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 파티션의 수가 EXECUTOR보다 적으면 리파티션 (노는 EXECUTOR방지)</span></span>
<span id="cb4-10">        max_executor_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb4-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> df.rdd.getNumPartitions() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> max_executor_num:</span>
<span id="cb4-12">            df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.repartition(max_executor_num)</span>
<span id="cb4-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> df</span>
<span id="cb4-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb4-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span></code></pre></div>
<ul>
<li>메타정보 추가코드</li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> df_with_meta(df, datetime):</span>
<span id="cb5-2">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.withColumn(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@timestamp"</span>, F.lit(datetime)) </span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> df</span></code></pre></div></li>
</ul></li>
</ul>
</section>
<section id="spark-submit" class="level2">
<h2 class="anchored" data-anchor-id="spark-submit">spark-submit</h2>
<ul>
<li>참고사항
<ul>
<li>memory옵션(driver, executor), num-executors, executor-cores를 만져보기</li>
<li>gh archive데이터를 기준으로 메모리 3기가 정도가 원활해보임</li>
</ul>
<pre><code>spark-submit \
--name main.py \
--master spark://spark-master:7077 \
--jars "/opt/bitnami/spark/resources/elasticsearch-spark-30_2.12-8.4.3.jar" \
--conf spark.dynamicAllocation.enabled=true \
--conf spark.dynamicAllocation.executorIdleTimeout=2m \
--conf spark.dynamicAllocation.minExecutors=1 \
--conf spark.dynamicAllocation.maxExecutors=3 \
--conf spark.dynamicAllocation.initialExecutors=1 \
--conf spark.memory.offHeap.enabled=true \
--conf spark.memory.offHeap.size=2G \
--conf spark.shuffle.service.enabled=true \
--conf spark.executor.memory=2G \
--conf spark.driver.memory=2G \
--conf spark.driver.maxResultSize=0 \
--num-executors 2 \
--executor-cores 1 \
${SCRIPT}</code></pre></li>
</ul>
</section>
</section>
<section id="주차-수업정리" class="level1">
<h1>4주차 수업정리</h1>
<section id="elasticsearch" class="level2">
<h2 class="anchored" data-anchor-id="elasticsearch">Elasticsearch</h2>
<ul>
<li>Elasticsearch은 검색엔진인데 왜 저장용도로 사용하는가
<ul>
<li>ELK스택 : Elasticsearch + Logstash + Kibana를 같이 사용. 로그데이터 관리/모니터링 등에 많이 사용(스타트업부터~대기업까지도)</li>
<li>검색엔진이 아닌 ELK스택과 같은 활용으로 이해</li>
<li>키바나와 같이 사용할 수 있는 매력(편리함)
<ul>
<li>데이터의 저장/커넥션/export 등의 과정없이, ES의 호스트네임 입력만으로 쉽게 연동 가능<br>
<br></li>
</ul></li>
</ul></li>
<li>Elasticsearch
<ul>
<li>distributed, RESTful search and analytics engine
<ul>
<li>RESTful : REST API형태로 호출해서 검색가능(서버에 쿼리를 날리면 검색이 가능)</li>
</ul></li>
<li>Apache Lucene을 기반으로 만든 분산 검색 엔진</li>
<li>Analyzer가 내장되어있어 document를 저장하게되면, 검색되도록 해줌 <br></li>
</ul></li>
<li>Elasticsearch 특징(Characteristics)
<ul>
<li>transaction, join 지원되지 않음
<ul>
<li>join을 사용해야하는 경우는 ES를 쓰지 않도록 해야 함</li>
</ul></li>
<li>(검색을 위한)색인작업 시간이 필요
<ul>
<li>색인을 위한 Scoring 알고리즘(제일 적합한 문서임을 점수를 매김) : TF-IDF→BM25로 변경됨
<ul>
<li>BM25는 대기업 검색엔진에도 들어있음</li>
</ul></li>
</ul></li>
<li>버전업이 빠르고/잦고/많음. 이에 따라 (버전별) UI나 API차이가 클 수 있음 <br></li>
</ul></li>
<li>Elasticsearch 구조 (Structure)
<ul>
<li>document : 하나의 기본 구조. json 형태로된 문서</li>
<li>field : document의 필드 (jon의 필드, dataframe에서의 컬럼과 같음)</li>
<li>index : document가 모인 단위, 여러 노드에 분산 저장됨(분산 검색엔진이므로)
<ul>
<li>RDBMS의 index와는 다른 역할. index를 만들어 빠르게 쿼리를 가능하게 하지 않음</li>
</ul></li>
<li>_id : index내 문서에 부여된 unique id (<code>ES가 unique함을 보장하지는 않으며</code> 사용자의 책임 하에 사용)
<ul>
<li>다른 index의 _id라면 같을 수 있음</li>
<li>같은 index 내의 문서라고, 다른 shard에 있어 동일 _id 를 가질 가능성 있음
<ul>
<li>강제하고, 체크하고 있지 않기 때문 <br></li>
</ul></li>
</ul></li>
</ul></li>
<li>Shard
<ul>
<li>Primay와 Replica가 있음. 아래 그림기준 같은 색 칠해진 것들이 같은 Shard <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240902/index_files/figure-html/20c586c7-1-class_w4-1.jpg" class="img-fluid" alt="class_w4-1.jpg"> <br></li>
</ul></li>
<li>Search과정(저장<sub>쿼리</sub>결과도출까지 ES내부적으로 일어나는 일) 및 용어
<ul>
<li>document를 분석해서 Lucene(루신)이 inverted index(역색인)를 생성
<ul>
<li>아파치 루신이 (메모리에서) 역색인을 생성</li>
</ul></li>
<li>document의 insert/update/delete 변경을 메모리에 들고 있다가 주기적으로(batch단위로) disk에 flush
<ul>
<li>refresh: 디스크에 내려 검색가능해짐</li>
</ul></li>
<li>disk에 flush(들어간)된 segment들이 중간중간 적절히 segment merge됨
<ul>
<li>segment: 디스크에 기록된 파일들의 단위</li>
</ul></li>
<li>(여러 segment가 모인) lucene index
<ul>
<li>루신엔진의 역할은 모인 segment에서 결과를 검색하여 결과를 줌(Lucene은 index 내에서만 검색 가능)</li>
<li>루신엔진이 준 결과를 ES가 모아 merge에서 리턴함</li>
</ul></li>
<li>shard(lucene index를 모은[wrapping] 단위)</li>
<li>eleasticsearch index : 여러 shard 가 모인 단위.
<ul>
<li>ES에서 높은 highlevel에서 부르는 index</li>
<li>ES검색을 하면 각 shard에 명령이 내려가 내부에서 검색한 후, 결과를 merge해서 줌</li>
</ul></li>
<li>commit : fsync()를 통해, 커널시스템 캐시내용 ↔︎ 실제 디스크내용의 sync를 맞춤 (⇒ 비싼 작업)
<ul>
<li>커널시스템 캐시내용 : lucene flush 시킨 것</li>
<li>commit주기는 옵션으로 지정 가능</li>
</ul></li>
<li>Elasticsearch의 flush는 내부적으로 Lucene commit을 수행
<ul>
<li>flush가 일어나면 commit을 수행 (디스크를 내리고 싱크를 맞추는 작업의 반복)</li>
</ul></li>
<li>translog : commit 되기 전의 작업 기록 (로딩실패 등의 경우 shard recovery 에 이용)
<ul>
<li>commit되었다면 fail해도 내용을 잃어버리지 않겠지만, commit되지 않은 기록은 translog로 보존</li>
</ul></li>
<li>참조 이미지<br> <img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240902/index_files/figure-html/20c586c7-2-class_w4-2.jpg" class="img-fluid" alt="class_w4-2.jpg"> <br></li>
</ul></li>
<li>nodes
<ul>
<li>master node: 데이터의 저장보다는 관리의 역할
<ul>
<li>클러스터를 관리 - 인덱스 생성이나 삭제, 샤드 할당</li>
<li>master-eligible node : master node 가 될 수 있는 후보들. 지정할 수도 있음
<ul>
<li>master-eligible node끼리 voting해서 master node를 뽑게 됨</li>
</ul></li>
</ul></li>
<li>data node: 데이터가 저장되는 노드. CRUD/Search/Aggregation 등이 일어남</li>
<li>ingest node: 색인 전처리(ingest pipeline) 수행</li>
<li>coordinating node: role이 전부 지정되지 않은 노드(master/data/ingest 모두 아님)
<ul>
<li>클라이언트 요청만 처리(coordinating만 함). data nodes에 요청을 포워딩하고 결과를 모아서 클라이언트에게 응답</li>
</ul></li>
<li>기본적으로는 모든 노드가 coordinating 역할을 수행 <br></li>
</ul></li>
<li>ES Install
<ul>
<li>설치링크 : https://www.elastic.co/kr/downloads/elasticsearch</li>
<li>최신 ES에는 이미 JDK 내장되어 있음
<ul>
<li>ES_JAVA_HOME 옵션을 지정해서 JDK 변경 가능 <br></li>
</ul></li>
</ul></li>
<li>ES 실습환경 설정관련 유의사항(사용중인 docker-compose.yml 수정하는 경우)
<ul>
<li><p>ES의 버전에 맞춰 Kibana의 버전도 맞추어야 함 (같이 사용하려면)</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">    es:</span>
<span id="cb7-2">      image: docker.elastic.co<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>elasticsearch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>elasticsearch:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.4.3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Kibana연동시 이 버전과 맞춰야 함</span></span>
<span id="cb7-3">      networks:</span>
<span id="cb7-4">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>network</span>
<span id="cb7-5">      environment:</span>
<span id="cb7-6">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> node.name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>es <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 노드이름 설정</span></span>
<span id="cb7-7">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> discovery.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>single<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>node</span>
<span id="cb7-8">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> discovery.seed_hosts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>es</span>
<span id="cb7-9">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xpack.security.enabled<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>false</span>
<span id="cb7-10">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xpack.security.enrollment.enabled<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>false</span>
<span id="cb7-11">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xpack.security.http.ssl.enabled<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>false</span>
<span id="cb7-12">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> xpack.security.transport.ssl.enabled<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>false</span>
<span id="cb7-13">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> cluster.routing.allocation.disk.threshold_enabled<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>false</span>
<span id="cb7-14">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> ELASTIC_PASSWORD<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>password</span>
<span id="cb7-15">      mem_limit: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1073741824</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 환경에 따라 미지원될 수 있음. 삭제해도 무방</span></span>
<span id="cb7-16">      ulimits:</span>
<span id="cb7-17">        memlock:</span>
<span id="cb7-18">          soft: <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-19">          hard: <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-20">      volumes:</span>
<span id="cb7-21">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> .<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>es<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>data:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>usr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>share<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>es<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>data <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># es-data폴더로 지정. 로그작성 등에 사용</span></span>
<span id="cb7-22">      ports:</span>
<span id="cb7-23">        <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9200</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9200</span></span></code></pre></div></li>
<li><p>localhost:9200/?query=’키워드’와 같은 느낌으로도 실행가능 (REST API이므로)</p></li>
</ul></li>
</ul>
</section>
<section id="elasticsearch-index" class="level2">
<h2 class="anchored" data-anchor-id="elasticsearch-index">Elasticsearch index</h2>
<ul>
<li>Elasticsearch index
<ul>
<li>Lucene index와 elasticsearch index는 다름을 참고</li>
</ul></li>
<li>Settings
<ul>
<li>number_of_replicas(동적으로 변경 가능) : primary shard 1개 당 replica shard 개수</li>
<li>number_of_shard(<strong>reindex없이 변경 불가</strong>) : index 에 지정된 shards 의 수
<ul>
<li>RDBMS의 index와 달리 어렵고 비용이 많이 드는 작업(Scoring알고리즘 등의 재실행)</li>
<li>reindex는 서비스가 돌고 있으면 서비스를 내려야 하는 등 하기 어려움 <br></li>
</ul></li>
</ul></li>
<li>set index
<ul>
<li>PUT &lt;실제index-name&gt; : index 만들기</li>
<li>GET &lt;실제index-name&gt; : 만든 index확인하기</li>
<li>refresh_interval : 검색대상이 되도록 얼마나 자주 refresh(새로운 데이터의 색인 생성에 대한 주기)
<ul>
<li>index.search.idle.after (default는 30)
<ul>
<li>-1일 경우 refresh하지 않음 (현재 실습처럼 검색하지 않고 쓰는 경우에 사용가능) <br></li>
</ul></li>
</ul></li>
</ul></li>
<li>field type
<ul>
<li>field의 타입
<ul>
<li>simple(기본) 타입 : text, keyword, date, long, double, boolean, ip
<ul>
<li>text vs keyword
<ul>
<li>text : analyzer가 적용된 후 색인
<ul>
<li>analyzer가 각 단어를 분석했기 때문에 full-text search 가능</li>
</ul></li>
<li>keyword : analyzer가 적용되지 않고 색인
<ul>
<li>analyzer가 토큰별 분석을 하지 않아 전체문장 일치해야 검색 가능(즉 search용도가 아님)</li>
<li>search대상이 아닌 sorting/aggregation대상인 경우 많이 사용</li>
<li>(analyzer가 적용되지 않으므로) text보다 빠르다</li>
</ul></li>
</ul></li>
</ul></li>
<li>계층 구조있는 타입 : object, nested</li>
<li>그 외 타입 : geo_point, geo_shape, completion</li>
</ul></li>
<li><strong>한번 지정되면 reindex하지 않으면 변경 불가</strong>. (설계시 신중하게) <br></li>
</ul></li>
<li>index mapping
<ul>
<li>dynamic mapping : 새로운 field name으로 데이터가 들어오면 적당한 타입을 부여</li>
<li>explicit mapping : 명시적으로 mapping을 사전에 지정 (<strong>실제 서비스 등에서 주로 사용</strong>) <br></li>
</ul></li>
<li>custom analyzer
<ul>
<li>사용자가 원하는 analyzer(서드파티 포함) 지정 가능</li>
<li>html_strip, standard, lowercase, stop-token(욕설 등 특정 토큰 색인X) 등</li>
<li>여러 analyzer 등을 완료하면 색인이 가능해짐 <br></li>
</ul></li>
<li>multifields
<ul>
<li>한 필드의 데이터를 여러 설정으로 색인 가능
<ul>
<li>(서비스 요구사항이 fix되어)매핑이 지정되었는데 추가 요구사항이 있는 경우, 반영하기 위해 사용</li>
<li>reindex는 비용이 많이 듦 <br></li>
</ul></li>
</ul></li>
<li>옵션 index:false
<ul>
<li>해당 필드 역색인을 만들지 여부(default:true)
<ul>
<li>주의 : index를 만들지 않으므로 검색대상이 되지 않음</li>
</ul></li>
<li>ES 8.1 부터 필드가 doc_values를 사용한 경우는 index없이도 검색 가능(검색 성능은 떨어짐)</li>
<li>역색인을 생성하지 않을 뿐 정렬이나 집계 가능
<ul>
<li>text와 annotated_text 타입을 제외하고 지원</li>
<li>sorting, aggregations, script 이 필요없으면 disable 가능 <br></li>
</ul></li>
</ul></li>
<li>옵션 enabled:false(object 필드에 적용)
<ul>
<li>false지정시, 파싱도 수행하지 않음</li>
<li>_source에 들어가지만 검색/저장되지 않음
<ul>
<li>데이터 명세상 잘 오고 있는지 확인하는 정도로만 갖고 싶을 때(_source에서 확인만)</li>
<li>API로 받은 데이터를 모두 사용하지 않고, 특정 데이터만 확인하고 싶을 때 <br></li>
</ul></li>
</ul></li>
<li>fielddata(<strong>잘쓰지 않음</strong>)
<ul>
<li>text 필드에 대해 sorting, aggregations, 혹은 script 작업을 수행해야할 때 사용</li>
<li><strong>text 필드를 sorting하고 싶을때</strong> fielddata:enable로 적용
<ul>
<li>text필드이므로 analyzer 적용되고 색인이 생성됨 (예를 들면 문장단위의 sorting 실행됨)</li>
<li>sorting을 하려면 메모리에 올려야 하므로, <strong>heap메모리 사용이 순간적으로 커진다</strong></li>
</ul></li>
<li>기본적으로 disable <br></li>
</ul></li>
<li>analyzer
<ul>
<li>원하는 <strong>여러 필터</strong>를 순서대로 적용 가능</li>
<li>적용순서 : character filters → tokenizer → token filters</li>
<li>종류 : HTML Strip Character Filter, Mapping Character Filter, Pattern Replace Character Filter <br></li>
</ul></li>
<li>tokenizer
<ul>
<li>character stream에서 stream of tokens로 바꿈</li>
<li>1개의 tokenizer만 지정 가능 (토큰 생성방법에 따라 후속이 많이 달라지므로)</li>
<li>기본제공 토크나이저 중 한글전용 토크나이저는 없음 (별도 형태소 분석기 등을 붙여 사용해야 함)</li>
<li>종류 : standard tokenizer, etter tokenizer, whitespace tokenizer, ngram tokenizer 등
<ul>
<li>ngram tokenizer예시) min 2, max 3: hello → he, hel, el, ell, ll, llo <br></li>
</ul></li>
</ul></li>
<li>token filter
<ul>
<li>token stream에서 token을 추가/변경/삭제</li>
<li>0개 이상(미지정 가능)</li>
<li>종류 : lowercase/uppercase, stop words, synonym, pattern_replace, stemmer(어간 추출, 한글불가), trim, truncate <br></li>
</ul></li>
<li>normalizer
<ul>
<li>keyword 필드(text필드와 달리 analyzer미적용)에만 적용. analyzer와 비슷</li>
<li>analyzer는 stream of charactor를 stream of token으로 만들어줌
<ul>
<li>character filters → tokenizer → token filters</li>
</ul></li>
<li>normalizer는 단일 토큰만 생성.
<ul>
<li>character filters, token filters를 적용가능하게 해줌
<ul>
<li>예를 들어, 특정 문자만 지우는 등의 기능으로 사용 <br></li>
</ul></li>
</ul></li>
</ul></li>
<li>_routing
<ul>
<li>document가 어떤 shard에 배정될지 지정</li>
<li>shard number를 결정할 때 보통 hash알고리즘으로 되어있음
<ul>
<li>shard_num = hash(_routing) % num_primary_shards</li>
</ul></li>
<li>기본값으로 _id를 사용(유니크값이므로 각 데이터별로 어느 shard에 넣을지 결정하기에 용이)</li>
<li>색인시에 routing지정했다면 update, delete, get, search 시에도 지정해야 함
<ul>
<li>update 할 때 등도 shard를 찾아 갈 수 있도록 지정해야 함</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="queryes에서-쿼리하는법" class="level2">
<h2 class="anchored" data-anchor-id="queryes에서-쿼리하는법">Query(ES에서 쿼리하는법)</h2>
<ul>
<li>Elasticsearch Query
<ul>
<li>get/put/delete 등 Restful API같은 구조 <br></li>
</ul></li>
<li>get API
<ul>
<li>_doc
<ul>
<li>GET <index>/_doc/&lt;_id&gt;
<ul>
<li>그냥 _id만 넣으면 어느 index에서 찾아야할지 ES가 판단 불가</li>
<li>translog에만 기록이 된 것도 조회가 가능하다(<strong>get은 검색은 아니라는 뜻</strong>)</li>
</ul></index></li>
<li>HEAD <index>/_doc/&lt;_id&gt;
<ul>
<li>존재여부를 bool로 반환</li>
</ul></index></li>
</ul></li>
<li>_source/ (object필드에 enabled:false 적용한 경우 rawdata저장되는 곳)
<ul>
<li>GET <index>/_source/&lt;_id&gt;</index></li>
<li>HEAD <index>/_source/&lt;_id&gt;
<ul>
<li>존재여부 확인 가능 <br></li>
</ul></index></li>
</ul></li>
</ul></li>
<li>_source 추가 설명
<ul>
<li>원본 JSON document body를 저장</li>
<li>색인되지 않으므로 검색대상이 아닌 원본 데이터임</li>
<li>주의사항 : <code>_source: disable</code> 할 경우 update, reindex 등을 사용할 수 없다
<ul>
<li>다른 데이터는 analyzer를 통과한(색인된) 데이터이므로, 재색인할 때는 활용불가하며 원본 있어야함</li>
<li>원본으로 _source에 넣어두므로, disable해두면 reindex나 update를 통한 버전업 불가 <br></li>
</ul></li>
</ul></li>
<li>delete API
<ul>
<li>DELETE <index>/_doc/&lt;_id&gt;
<ul>
<li>삭제flag만 올려두고, 실제 삭제는 Licene segment의 주기적으로 merge될 때 진행됨</li>
<li>내부적으로는 최근 삭제된 문서를 일정기간 보존(shard복구시 삭제 작업을 재처리하기 위함) <br></li>
</ul></index></li>
</ul></li>
<li>update API
<ul>
<li>POST <index>/_update/&lt;_id&gt;
<ul>
<li>일부 필드 업데이트(doc_as_upsert가능)</li>
<li>detect_noop: 실질적으로 어떠한 값도 변경하지 않을 경우 수행 X
<ul>
<li>아무값 변경이 없는데 POST명령이 들어간 경우, 업데이트를 수행하지 않도록 하는 기능 <br></li>
</ul></li>
</ul></index></li>
</ul></li>
<li>multiget API
<ul>
<li>GET /_mget { “docs”: [ ] } <br></li>
</ul></li>
<li>bulk API
<ul>
<li>POST /_bulk
<ul>
<li>index, create, delete, update를 한번에 모아보낼 수 있음</li>
<li>으로 데이터 구분</li>
<li>Content-Type: application/x-ndjson, 마지막 라인 으로 종결</li>
<li><strong>대량 색인 작업 시에 필수로 사용(처음 ES구축시 대량색인해야할 때)</strong></li>
<li>실제 적용 순서가 보장되지 않음 (여러 bulk 작업 간의 순서 보장 X)
<ul>
<li>분산 작업이므로(여러 노드가 작업하므로)</li>
</ul></li>
<li>한 bulk request 안의 같은 _index + _id 조합은 순서 보장 <br></li>
</ul></li>
</ul></li>
<li>Delete by query
<ul>
<li>조건에 맞는 document 삭제</li>
<li>주의사항
<ul>
<li>쿼리 조건에 맞는 document가 여러개일 경우, 삭제하려던 것이 삭제되어있거나 업데이터 되어 쿼리에 맞지 않을 수 있음
<ul>
<li>index 스냅샷을 찍고 스냅샷을 기준으로 작업 진행</li>
<li>스냅샷 이후 변경이 확인되면, 삭제 실패로 끝남</li>
</ul></li>
<li><code>wait_for_completion: false</code> : async 작업 가능
<ul>
<li>delete될 쿼리를 날려두고 다른 작업ㅇ르 할 수 있음</li>
</ul></li>
<li>작업 결과가 .tasks index에 document 로 남음
<ul>
<li>Delete by query가 잘못되었을 때 복구할 수 있도록</li>
</ul></li>
</ul></li>
<li>update by query도 있음 <br></li>
</ul></li>
<li><strong>search</strong> (중요)
<ul>
<li><p><code>GET &lt;index&gt;/_search</code> or <code>POST &lt;index&gt;/_search</code></p></li>
<li><p>특징</p>
<ul>
<li>색인 생성한 것에 대해 맞는 문서를 리턴(scoring순서에 맞게 나옴)</li>
<li>(index 여러 곳에서 검색하기 위해)index는 ,로 구분하여 지정 가능</li>
<li>index 이름에 wildcard * 지정 가능</li>
<li>query string 인자를 이용하는 검색도 존재
<ul>
<li>ex) GET /test/_search?q=fieldName:queryText</li>
</ul></li>
</ul></li>
<li><p>match_all(모두 만족) / match(하나의 필드가 만족)</p>
<pre><code>  {“query”: {
      “match_all”: {}
      “match”: {       “mytext”: “Hello, World!”     }
    } }</code></pre></li>
<li><p>term / terms</p>
<ul>
<li>query string 을 analyze하지 않음(exact term을 포함한 문서를 찾음)</li>
<li>keyword 필드의 경우 normalizer 가 적용되었으면 쿼리에도 적용</li>
<li>terms: 여러 query string (조건) 에 의해 검색 <br></li>
</ul></li>
</ul></li>
<li>prefix query
<ul>
<li>필드가 특정한 prefix로 시작하는 document 검색</li>
<li>명시적 매핑(explicit mapping)시 index_prefixes옵션을 미리 준 경우,
<ul>
<li>속도가 높일 수 있으나(analyzer와 관계없이), 그렇지 않았다면 expensive query
<ul>
<li>많은 DB에서는 사실상 prefix query는 expensive query</li>
</ul></li>
</ul></li>
<li>ES는 비싼 쿼리를 가능하게할지 말지도 옵션 지정 가능
<ul>
<li><code>search.allow_expensive_queries: false</code>라면 expensive query불가 <br></li>
</ul></li>
</ul></li>
<li>range/exists
<ul>
<li>range: 필드가 특정 range 이내의 값인 document
<ul>
<li>gt(greater than), gte, lt, lte로 range를 지정</li>
<li>date field 에 대해서도 지원</li>
<li>text / keyword 필드에 대한 range query는 expensive query
<ul>
<li><code>search.allow_expensive_queries: false</code>라면 사용불가</li>
</ul></li>
</ul></li>
<li>exists: 필드에 값이 색인되어 있는 document
<ul>
<li>empty string 도 값이 있는 것으로 판단</li>
<li>JSON 이 null 이거나 [], [null, null] 등일 경우 값이 없는 것으로 판단</li>
<li>mapping 에 index: false 여서 색인되지 않은 경우에도 값이 없는 것으로 판단bool query <br></li>
</ul></li>
</ul></li>
<li>bool query(여러 쿼리를 조합하는 쿼리)
<ul>
<li>must: 지정된 모든 쿼리 조건을 만족해야 함</li>
<li>must_not: 지정된 모든 쿼리 조건을 만족하지 않아야 함</li>
<li><strong>should</strong>: 지정된 쿼리 중 적어도 minimum_should_match 개수 만큼 만족해야 함
<ul>
<li>filter는 모두 만족해야 함
<ul>
<li>filter : 쿼리 외의 true/false로 답이 나오는 것들
<ul>
<li>query는 relevance score를 계산(리턴값이 score)해 얼마나 문서와 잘 매칭되는지 판단</li>
<li>filter와 query 중 우선순위는 없음
<ul>
<li>should query(bool)라면, filter는 만족하는 query중에서 minimum_should_match를 count <br></li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
</ul></li>
<li>sort
<ul>
<li>필드를 지정해서 검색 결과를 정렬(보통 score는 계산하지 않고 정렬만 함)</li>
<li>정렬 중에는 필드 값이 메모리에 올라감
<ul>
<li>text 타입은 일반적으로 정렬 대상이 될 수 없음 (성능이슈, 비싼작업) <br></li>
</ul></li>
</ul></li>
<li>from / size
<ul>
<li>기초적인 pagination.</li>
<li>1만개를 초과한 document를 pagination할 수 없으며, 이로 인해 잘 사용되지 않음
<ul>
<li>index.max_result_window settings로 기본값이 1만개로 되어있음</li>
</ul></li>
<li>메모리 &amp; 시간이 from + size 의 값에 비례 <br></li>
</ul></li>
<li>scroll / search_after
<ul>
<li>from, size 대신 사용되는 pagination방법</li>
<li>scroll: search context를 유지하며 대량 데이터를 처리
<ul>
<li>검색이 수행된 그 상태를 스냅샷처럼 찍어 검색 결과를 스크롤링</li>
<li>(스냅샷 쓰므로)스크롤링 도중 변화되는 문서 내용은 반영되지 않음</li>
<li>옵션
<ul>
<li>size: 배치에 반환할 문서의 수</li>
<li>_scroll_id: 다음 배치의 검색 값 받을 수 있음</li>
</ul></li>
<li>scroll 인자로 넘겨준 시간만큼 search context를 유지</li>
<li>기준값이 동일한 document 사이에서는 일관된 순서를 보장하지는 않음(sort되어 나오지 않음)</li>
</ul></li>
<li><strong>search_after(제일 많이 사용)</strong>: 결과 문서 중 가장 마지막 문서의 sort 기준값을 사용
<ul>
<li>_id 필드는 doc value가 disabled되어 있기 때문에 이를 기준으로 하는 정렬은 많은 메모리를 사용
<ul>
<li>_id필드로 정렬하지는 않는다는 뜻</li>
</ul></li>
<li>scroll과 다른점 : 실시간 변경 데이터 반영 가능</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="optimization" class="level2">
<h2 class="anchored" data-anchor-id="optimization">Optimization</h2>
<ul>
<li>reindex
<ul>
<li>비싼 작업</li>
<li>원본 index내 문서의 _source를 읽어서 대상 index에 새로 색인</li>
<li>query를 지정하여 일부 문서만 reindex 가능</li>
<li>script 이용하여 throttling, slicing, 비동기 작업 가능</li>
<li>다른 Elasticsearch 클러스터에서 데이터를 가져와 reindex 가능
<ul>
<li>다른 Elasticsearch를 연결하려면 elasticsearch.yml에 reindex.remote.whitelist: “host:XXXX” 추가</li>
</ul>
<pre><code>POST _reindex
{“source”: …
   “dest”: …}</code></pre>
<br></li>
</ul></li>
<li>Index life cycle
<ul>
<li>종류
<ul>
<li>hot: 현재 업데이트가 수행되고 있고 읽기 작업도 가장 많은 상태</li>
<li>warm: 인덱스에 더 이상 업데이트가 수행되지는 않지만 읽기 작업은 들어오는 상태</li>
<li>cold: 인덱스에 더 이상 업데이트가 수행되지 않고 읽기 작업도 가끔씩만 들어오는 상태.
<ul>
<li>검색은 되어야 하나 속도가 느려도 괜찮은 상황.</li>
</ul></li>
<li>frozen: 인덱스에 더 이상 업데이트가 수행 되지 않고 읽기 작업도 거의 들어오지 않는 상태.
<ul>
<li>검색은 되어야 하나 속도가 상당히 느려도 괜찮은 상황.</li>
</ul></li>
<li>delete : 인덱스가 더 이상 필요없고 삭제되어도 무방한 상태</li>
</ul></li>
<li>index가 어느 cycle에 있는지 보면서 자원을 분배
<ul>
<li>이에 따라 검색속도 차이가 많이 남</li>
<li>검색이 느리다면 ’cold’로 간 것은 아닌지 유추 <br></li>
</ul></li>
</ul></li>
<li>Index strategies
<ul>
<li>time series로 만들기 (보통 추천)
<ul>
<li>(RDBMS처럼)데이터 종류별로 만드는 것이 아닌, 2024.01, 2024.02 등</li>
<li>보통은 최근 데이터로 분석하는 경우 많음</li>
<li>검색 범위를 좁히기 + index life cycle전략짜기 에 용이함</li>
<li>오래된 데이터 삭제에 편리</li>
</ul></li>
<li>데이터가 커질 경우 index mapping 직접 만들기</li>
<li>index template 활용하기 (비슷한 index mapping 사용하는 경우)</li>
<li>routing활용하기(어떤 shard에 데이터를 저장할지 지정)
<ul>
<li>성능 향상</li>
<li>index mappings _routing meta field 에 required: true 옵션을 부여해 강제할 수 있다</li>
</ul></li>
<li>field type은 기본적으로 변경 불가능함을 염두에 두기
<ul>
<li>같은 필드의 type 이 계속 변경될 수 있다면 ES특성상 ES가 적합하지 않음</li>
<li>해당 데이터가 들어와야 한다면 <code>enable: false</code>로 색인포기하고 에러발생하지 않게 할 수 있음</li>
</ul></li>
<li>운영도중 analyze 변경 필요성이 있다면, multi field를 고려한다 <br></li>
</ul></li>
<li>Shard Strategies
<ul>
<li>shard의 개수
<ul>
<li>shard 갯수를 노드 수의 n배로 둘 필요는 없음
<ul>
<li>hot/warm 등 index에 따라 리소스가 분배되므로, 성능향상에 꼭 도움이 되지 않음
<ul>
<li>활용중인 index가 많은 경우, 단일 index작업에 모든 노드가 참여하지 않음(고르게 분배되지 않음)</li>
</ul></li>
</ul></li>
<li>추후 추가 서버가 투입될 가능성이 있음</li>
</ul></li>
</ul></li>
</ul>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Spark</category>
  <category>PySpark</category>
  <category>Elasticsearch</category>
  <category>202408Study_DataEngineering</category>
  <guid>https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240902/</guid>
  <pubDate>Mon, 02 Sep 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[DE스터디/3주차과제] 다양한 데이터처리 플랫폼을 사용한 데이터 수집~모니터링</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240830/</link>
  <description><![CDATA[ 






<p>데이터 엔지니어링 스터디 내용정리 - Spark</p>
<section id="개요" class="level1">
<h1>개요</h1>
<ul>
<li>참여중인 데이터 엔지니어링 스터디에서 배우는 내용 정리
<ul>
<li>데이터 수집, 정제 : pyspark, airflow</li>
<li>저장 : elasticsearch</li>
<li>시각화 : kibana</li>
</ul></li>
<li>3주차 과제 : 정제코드(filter.py) 작성 및 spark-submit해보기</li>
</ul>
</section>
<section id="과제---3주차" class="level1">
<h1>과제 - 3주차</h1>
<ul>
<li>데이터 확인용 기초코드</li>
</ul>
<div id="b011614f" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pyspark.sql <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SparkSession</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SparkSession</span></span>
<span id="cb1-4">spark <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb1-5">    SparkSession.builder</span>
<span id="cb1-6">        .appName(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rdd-dataframe"</span>)</span>
<span id="cb1-7">        .master(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"local"</span>)</span>
<span id="cb1-8">        .getOrCreate()</span>
<span id="cb1-9">)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SparkContext를 SparkSession에서 빼두기</span></span>
<span id="cb1-12">sc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spark.sparkContext</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 하단 메시지는 Jupyter 공식이미지에서 나오는 메시지로, 무시하기</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by org.apache.spark.unsafe.Platform (file:/usr/local/spark-3.1.2-bin-hadoop3.2/jars/spark-unsafe_2.12-3.1.2.jar) to constructor java.nio.DirectByteBuffer(long,int)
WARNING: Please consider reporting this to the maintainers of org.apache.spark.unsafe.Platform
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
24/08/28 14:01:32 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).</code></pre>
</div>
</div>
<div id="5793be4a" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#json파일로 저장해 둔 스키마 불러오기</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb3-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pyspark.sql.types <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StructType</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the path to the JSON file</span></span>
<span id="cb3-7">input_file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'github_schema.json'</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open and load the JSON file</span></span>
<span id="cb3-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(input_file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> json_file:</span>
<span id="cb3-11">    github_schema <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(json_file)</span></code></pre></div>
</div>
<div id="ae9e9da4" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 스키마 확인하기</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> find_all_names(data, current_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]):</span>
<span id="cb4-4">    paths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(data, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb4-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data:</span>
<span id="cb4-7">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Collect the path to the current 'name'</span></span>
<span id="cb4-8">            paths.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>.join(current_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>]]))</span>
<span id="cb4-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recursively search within this dictionary</span></span>
<span id="cb4-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> key, value <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data.items():</span>
<span id="cb4-11">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(value, (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)):</span>
<span id="cb4-12">                paths.extend(find_all_names(value, current_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [data.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>, key)]))</span>
<span id="cb4-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(data, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>):</span>
<span id="cb4-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data:</span>
<span id="cb4-15">            paths.extend(find_all_names(item, current_path))</span>
<span id="cb4-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> paths</span>
<span id="cb4-17"></span>
<span id="cb4-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> find_all_names(github_schema):</span>
<span id="cb4-19">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(each_line.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fields.'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>))</span></code></pre></div>
</div>
<div id="537cf6db" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 저장한 스키마로 파일 읽기 (빠른 확인을 위해 1개의 gh archive데이터만 사용)</span></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pyspark.sql.types <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StructType</span>
<span id="cb5-3"></span>
<span id="cb5-4">schema_to_read <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StructType.fromJson(github_schema)</span>
<span id="cb5-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spark.read.schema(schema_to_read).json(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../data/gh_archive/2024-07-01-14.json.gz"</span>)</span></code></pre></div>
</div>
<div id="3ebc0ad0" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 저장한 스키마로 파일 읽기 (전체파일)</span></span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pyspark.sql.types <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StructType</span>
<span id="cb6-3"></span>
<span id="cb6-4">schema_to_read <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StructType.fromJson(github_schema)</span>
<span id="cb6-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spark.read.schema(schema_to_read).json(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../data/gh_archive/2024-07-01-14.json.gz"</span>)</span></code></pre></div>
</div>
<div id="caf2215d" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 데이터 확인</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyspark.sql.functions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb7-4"></span>
<span id="cb7-5">columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'actor.login'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>]</span>
<span id="cb7-6">select_exprs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [F.col(col_path).alias(col_path) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> col_path <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> columns]</span>
<span id="cb7-7"></span>
<span id="cb7-8">df2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.select(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>select_exprs)</span>
<span id="cb7-9">df2.show()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>+--------------------+--------------------+
|         actor.login|                type|
+--------------------+--------------------+
|       CosmomediaCEO|           PushEvent|
|         ayomide3211|         CreateEvent|
|         julianwagle|           PushEvent|
|               RTann|PullRequestReview...|
|       HttpAnimation|           PushEvent|
|           thunderv3|           PushEvent|
| github-actions[bot]|           PushEvent|
|             aspiers|PullRequestReview...|
| github-actions[bot]|           PushEvent|
|     acciojob-5[bot]|         CreateEvent|
|            dfitzmau|   IssueCommentEvent|
|      steven-bellock|   IssueCommentEvent|
|           rssfeeder|           PushEvent|
|     dependabot[bot]|         CreateEvent|
|    Naveen-Palanivel|         CreateEvent|
|          lukerQuant|   IssueCommentEvent|
|      ZaidQourah2004|         CreateEvent|
|youngZwiebelandth...|           PushEvent|
|    abhishekpaturkar|         CreateEvent|
|       TANGHANHUTNAM|           PushEvent|
+--------------------+--------------------+
only showing top 20 rows
</code></pre>
</div>
</div>
<section id="spark-submit.sh-스크립트-참고해서-option-바꾸어보기" class="level2">
<h2 class="anchored" data-anchor-id="spark-submit.sh-스크립트-참고해서-option-바꾸어보기">1. spark-submit.sh 스크립트 참고해서 option 바꾸어보기</h2>
<ul>
<li>memory옵션들, num-executors, executor-cores 바꿔보기</li>
</ul>
<pre><code>&lt;path-to-spark-submit&gt;/spark-submit \
    --class &lt;project.class.path&gt; \
    --name HelloWorld \    # job name지정
    --master spark://spark-master:7077 \                     # master(현재 실습기준으로는 local)
    --driver-cores 2 \                                       # optimization옵션에 해당
    --driver-memory 2g \                                     # optimization옵션에 해당
    --num-executors 4 \                                      # optimization옵션에 해당
    --executor-cores 2 \                                     # optimization옵션에 해당 (병렬처리를 얼마나 많이 할지)
    --executor-memory 2g \                                   # optimization옵션에 해당
    --conf spark.driver.memoryOverhead=1g                     
    --conf spark.executor.memoryOverhead=1g                  
    --conf spark.dynamicAllocation.enabled=true \            
    --conf spark.dynamicAllocation.executorIdleTimeout=2m \   
    --conf spark.dynamicAllocation.minExecutors=1 \          
    --conf spark.dynamicAllocation.maxExecutors=9 \          
    --conf spark.dynamicAllocation.initialExecutors=1 \      
    --conf spark.memory.offHeap.enabled=true \               
    --conf spark.memory.offHeap.size=2G \                    
    --conf spark.shuffle.service.enabled=true \              
    --conf spark.driver.maxResultSize=0 \                    
    --conf spark.logConf=true \                              
    --jars /opt/bitnami/spark/resources/elasticsearch-spark-302.12-8.4.3.jar</code></pre>
<ul>
<li>미사용
<ul>
<li>–class &lt;project.class.path&gt; # 실행될 기본 클래스 지정</li>
<li>–deploy-mode : client/cluster # yarn이 아닌 local환경으로 실습중</li>
</ul></li>
</ul>
</section>
<section id="원하는-최종-스키마를-만들기-위한-정제-코드-filter.py-작성하기" class="level2">
<h2 class="anchored" data-anchor-id="원하는-최종-스키마를-만들기-위한-정제-코드-filter.py-작성하기">2. 원하는 최종 스키마를 만들기 위한 정제 코드 filter.py 작성하기</h2>
<div id="7e284f29" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># filter.py (main.py에서 import하여, 로딩한 dataframe을 넣고 사용)</span></span>
<span id="cb10-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> PytorchTopIssuerFilter(BaseFilter):</span>
<span id="cb10-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, df):</span>
<span id="cb10-4">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter : repo_name = pytorch</span></span>
<span id="cb10-5">        base_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(F.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'userid_and_repo_name'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pytorch/pytorch'</span>)</span>
<span id="cb10-6"></span>
<span id="cb10-7">        issues_event_exists <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(base_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IssuesEvent"</span>).count() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb10-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> issues_event_exists:</span>
<span id="cb10-9">            filtered_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(F.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'IssuesEvent'</span>)</span>
<span id="cb10-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb10-11">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 이후 None이 아닌 경우에만 저장 등의 작업을 하도록 main.py 설정</span></span>
<span id="cb10-12"></span>
<span id="cb10-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># groupby</span></span>
<span id="cb10-14">        result_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> filtered_df.groupBy(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user_name'</span>).pivot(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'type'</span>).count()</span>
<span id="cb10-15">        result_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result_df.cache()</span>
<span id="cb10-16">        result_df.where((<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>F.col(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'user_name'</span>).contains(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'[bot]'</span>))) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb10-17">                    .orderBy(F.desc(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'IssuesEvent'</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb10-18">                    .limit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb10-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result_df</span></code></pre></div>
</div>
</section>
<section id="작성한-정제-코드-spark-submit-해보기" class="level2">
<h2 class="anchored" data-anchor-id="작성한-정제-코드-spark-submit-해보기">3. 작성한 정제 코드 spark-submit 해보기</h2>
<ul>
<li>제출할 내용: spark-submit.sh, filter.py (파일명은 바꾸셔도 무방합니다)</li>
</ul>
<div id="0422db23" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">docker <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exec</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>it metacode_de<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2024</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>spark<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>master<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> spark<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>submit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb11-2">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>master spark:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>spark<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>master:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7077</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb11-3">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>jars <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>opt<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>bitnami<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>spark<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>resources<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>elasticsearch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>spark<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">30_2.12</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.4.3</span>.jar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb11-4">  jobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>main.py</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240830/index_files/figure-html/e08addfd-1-work_w3_sparksubmit.jpg" class="img-fluid figure-img"></p>
<figcaption>work_w3_sparksubmit.jpg</figcaption>
</figure>
</div>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Spark</category>
  <category>PySpark</category>
  <category>202408Study_DataEngineering</category>
  <guid>https://kr9268.github.io/posts/meta-de-spark_and_airflow-20240830/</guid>
  <pubDate>Fri, 30 Aug 2024 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
