<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Blog</title>
<link>https://kr9268.github.io/index_miniprojects.html</link>
<atom:link href="https://kr9268.github.io/index_miniprojects.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Thu, 01 Aug 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>[Python] AIR/VESSEL 예측을 위한 머신러닝 모델(진행중)</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts_miniprojects/sel-py-ml_predict_shiptype-20240801/</link>
  <description><![CDATA[ 





<section id="개요" class="level1">
<h1>개요</h1>
<section id="추진배경" class="level2">
<h2 class="anchored" data-anchor-id="추진배경">추진배경</h2>
<ul>
<li>긴급하게 현재 가지고 있는 데이터로, 예측관련하여 만들 수 있는 머신러닝 모델을 요청받음</li>
<li>Kaggle에서 운송수단을 예측하는 KNN모델 샘플을 발견하여 적용</li>
</ul>
</section>
<section id="계획" class="level2">
<h2 class="anchored" data-anchor-id="계획">계획</h2>
<ul>
<li>국내외의 이동 데이터를 학습한 머신러닝을 활용하여, 조건(국가, 거래업체 등)입력시 어떤 운송수단으로 수출할지 예측(항공/해상)
<ul>
<li>[모델1] KNeighborsClassifier 활용한 분류
<ul>
<li>모델 정확성을 위해 7개의 Feature로 학습</li>
<li>업무 사용시에는 사용자가 알 수 있는 4가지 정보를 필수로 받음 (‘Loading Country’, ‘Final Destination country’, ‘Sold-to party’, ‘Ship To Party’)
<ul>
<li>3가지 추가정보 제공시 더 정확한 예측제공, 없는 경우 기존데이터의 최빈값으로 대체하여 예측 (Sales Organization, Incoterms, Dangerous goods)</li>
</ul></li>
</ul></li>
</ul></li>
<li>예측된 운송수단을 기반으로, 어느정도의 공간(부피)가 필요한지 확인 후 부킹(운송을 위한 공간예약)에 활용
<ul>
<li>[모델2] 활용한 예측
<ul>
<li>모델1에서 입력/예측된 값을 기반으로 부피(Volumn)을 예측
<ul>
<li>‘Loading Country’, ‘Final Destination country’, ‘Sold-to party’, ‘Ship To Party’ (+ ‘AIR/VESSEL’, ‘Dangerous goods’)</li>
</ul></li>
</ul></li>
</ul></li>
<li>예측된 값과 함께, 기존 데이터의 History를 제공해 어떤 출발지에서 나갔었는지 함께 공유하여 업무에 활용
<ul>
<li>어떤 출발지인지에 따라, 사용하면 안되는 선사(해상운송업체)나 항공사가 정해질 수 있음</li>
</ul></li>
<li>KNN 참조한 샘플코드 : https://www.kaggle.com/code/sergeifursa/shipment-type-prediction-with-knn</li>
</ul>
</section>
<section id="효과" class="level2">
<h2 class="anchored" data-anchor-id="효과">효과</h2>
<ul>
<li>특정 조건(출/도착국가, 상대업체)을 기반으로, 항공기와 배 중 어떤 수단으로 얼마만큼 물량을 선적해야할 지 예측</li>
<li>예측한 데이터를 기반으로, 조기에 Space(선적공간)을 수배하고 선점하여 대응력 강화</li>
</ul>
</section>
<section id="github-repository" class="level2">
<h2 class="anchored" data-anchor-id="github-repository">github repository</h2>
<ul>
<li>별도의 github레포로 정리하지 않고, 하단에 코드로만 기록</li>
</ul>
</section>
<section id="세부내용-구현내용-사용한-언어패키지-등" class="level2">
<h2 class="anchored" data-anchor-id="세부내용-구현내용-사용한-언어패키지-등">[세부내용] 구현내용 &amp; 사용한 언어/패키지 등</h2>
<ol type="1">
<li>db로 전환하여 <code>sqlite3</code>으로 데이터 보관</li>
<li>데이터 전처리는 아래의 로직에 따라 <code>pandas</code>로 처리</li>
</ol>
<ul>
<li>Drop
<ul>
<li>예측 대상인 중량(GrossWT), 항공중량(ChargeableWT), 부피(Volumn)이 모두 없으면 Drop</li>
<li>배로 선적하는데 부피가 없는 경우 Drop</li>
</ul></li>
<li>변환(단위 통일)
<ul>
<li>중량은 G/KG 중 KG으로, 부피는 CCM/CBM중 CBM으로 설정</li>
</ul></li>
<li>대체(Null보완)
<ul>
<li>항공중량(ChargeableWT)만 없는 경우, 별도의 계산식으로 보완처리 (Max(중량, 부피*167))</li>
</ul></li>
<li>수치변환(To Numeric)
<ul>
<li>Y값으로 사용할 값 중 Categorical한 AIR/VESSEL컬럼은 dict로 관리 및 보관</li>
<li>X값으로 사용할 값 중 Categorical한 컬럼들은 Scikit-learn의 <code>category_encoders</code>로 변환
<ul>
<li>향후 데이터가 추가/삭제될 상황을 위해 사용(업체코드 등은 추가가 빈번할 것으로 예상)</li>
<li>High Cardinality하여 OnehotEncoding으로 인한 차원문제도 방지</li>
<li>최초 실행 후 <code>joblib</code>로 encoder값을 저장해두고, 이후에는 로딩하여 사용</li>
</ul></li>
</ul></li>
</ul>
<ol start="3" type="1">
<li>데이터셋 분할은 <code>Scikit-learn</code>의 <code>train_test_split</code>으로 train/test 8:2로 split</li>
<li>모델 파라미터는 optuna를 활용하여 세팅</li>
</ol>
<ul>
<li>첫 사용 모델로 일부 특이사항만 지정하여 <code>OptunaSearchCV</code>로 파라미터 지정
<ul>
<li>서열형(Ordinal)이 아닌 Categorical한 Y값이어서 Hamming을 metric으로 지정</li>
<li>일부 Null값이 있어 kd_tree에서는 적용불가 메시지가 떠 kd_tree는 대상에서 제외</li>
<li>이외 파라미터는 공식문서의 default값을 기준으로 일부 buffer를 두어 세팅함</li>
</ul></li>
</ul>
<ol start="5" type="1">
<li><code>Scikit-learn</code>의 <code>cross_val_score</code>으로 모델평가 (accuracy사용)</li>
<li>모델예측은 앞서 <code>category_encoders</code>으로 변환 후 학습했으므로, predict시에도 변환 후 적용</li>
<li>joblib로 모델저장</li>
<li>이후 내용 추가 예정</li>
</ol>
</section>
</section>
<section id="데이터로딩" class="level1">
<h1>데이터로딩</h1>
<section id="load-with-dbsqlite3" class="level2">
<h2 class="anchored" data-anchor-id="load-with-dbsqlite3">Load with DB(sqlite3)</h2>
<div id="2b0e1c98" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlite3</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect to the SQLite database</span></span>
<span id="cb1-5">conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sample.db'</span>)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Write the DataFrame to the database</span></span>
<span id="cb1-8">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM `table`"</span></span>
<span id="cb1-9">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql_query(query, conn)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Close the database connection</span></span>
<span id="cb1-12">conn.close()</span>
<span id="cb1-13">df</span></code></pre></div>
</div>
</section>
</section>
<section id="데이터-전처리date-preprocessing" class="level1">
<h1>데이터 전처리(Date Preprocessing)</h1>
<section id="drop-및-값-변환" class="level2">
<h2 class="anchored" data-anchor-id="drop-및-값-변환">Drop 및 값 변환</h2>
<ul>
<li>[Drop] 운임 또는 Space확보의 기준되는 값이 없는 것이므로 Drop
<ul>
<li>해상/항공여부를 예측하더라도, Space정보가 없는 경우는 이후 대응이 불가하므로 Drop</li>
</ul></li>
<li>[변환] 중량 등 수치에 대한 단위 일치
<ul>
<li>중량(KG, G), 부피(CBM, CCM)일치시키기</li>
</ul></li>
<li>[Null대체] 주어진 값으로 계산하여 대체 가능한 경우 반영
<ul>
<li>Chargeable WT : 중량과 부피를 기준으로 계산가능. Null인 경우 계산하여 대체</li>
</ul></li>
</ul>
<div id="b56b2dac" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 판다스 컬럼생략하지 않게하는 옵션설정</span></span>
<span id="cb2-2">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
</div>
<div id="d5b242e9" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> drop_fillna_convert_df(df):</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Drop</span></span>
<span id="cb3-3">    df_dropped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.drop(df[(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AIR/VESSEL'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Charg. Unit'</span>].isna()].index).copy()</span>
<span id="cb3-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 모든 중량/부피가 없음</span></span>
<span id="cb3-5">    df_dropped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_dropped.drop(df_dropped[df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gross weight'</span>].isna() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Volume'</span>].isna() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Charg. weigh'</span>].isna()].index)</span>
<span id="cb3-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 해상인데 부피 또는 부피단위가 없음</span></span>
<span id="cb3-7">    df_dropped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_dropped.drop(df_dropped[(df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AIR/VESSEL'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Volume'</span>].isna()].index)</span>
<span id="cb3-8">    df_dropped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_dropped.drop(df_dropped[(df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AIR/VESSEL'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Volume unit'</span>].isna()].index)</span>
<span id="cb3-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 항공인데, ChargeableWT가 없는데, 계산할 기초값인 Groww weight나 Volumn 중 하나가 없음</span></span>
<span id="cb3-10">    df_dropped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_dropped.drop(df_dropped[(df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AIR/VESSEL'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Charg. weigh'</span>].isna() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gross weight'</span>].isna()].index)</span>
<span id="cb3-11">    df_dropped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_dropped.drop(df_dropped[(df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AIR/VESSEL'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Charg. weigh'</span>].isna() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Volume'</span>].isna()].index)</span>
<span id="cb3-12"></span>
<span id="cb3-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert Unit</span></span>
<span id="cb3-14">    df_dropped.loc[df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gross unit'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'G'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gross weight'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb3-15">    df_dropped.loc[df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Volume unit'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CCM'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Volume'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb3-16"></span>
<span id="cb3-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Null대체</span></span>
<span id="cb3-18">    crit_replace_na <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Charg. weigh'</span>].isnull()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AIR/VESSEL'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-19">    df_dropped.loc[crit_replace_na, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Charg. weigh'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.maximum(df_dropped[crit_replace_na][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gross weight'</span>], df_dropped[crit_replace_na][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Volume'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">167</span>)</span>
<span id="cb3-20"></span>
<span id="cb3-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> df_dropped</span>
<span id="cb3-22"></span>
<span id="cb3-23">df_dropped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> drop_fillna_convert_df(df)</span></code></pre></div>
</div>
</section>
<section id="x-y값-변환to-numeric" class="level2">
<h2 class="anchored" data-anchor-id="x-y값-변환to-numeric">X, Y값 변환(To numeric)</h2>
<ul>
<li>Y값 변환
<ul>
<li>사용할 3개의 Y값(AIR/VESSEL, Volumn, Charg. weigh)중, 한가지는 Categorical이므로 숫자로 변경
<ul>
<li>AIR/VESSEL(Categorical이므로), Volumn(Numeric), Charg. weigh(Numeric)</li>
</ul></li>
<li>해상/항공만 사용할 예정이므로 해상과 항공에 대해 매핑, 나머지는 9</li>
</ul></li>
<li>X값 변환
<ul>
<li>Dangerous goods는 2가지 값(O,X)밖에 없으므로 0,1로 변환</li>
</ul></li>
</ul>
<div id="f6a1af27" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">mapping_airvessel_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AIR/VESSEL'</span>].unique():</span>
<span id="cb4-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'S'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> i:</span>
<span id="cb4-5">        mapping_airvessel_dict[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'P'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'M'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> i:</span>
<span id="cb4-7">        mapping_airvessel_dict[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb4-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb4-9">        mapping_airvessel_dict[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span></span>
<span id="cb4-10">mapping_airvessel_dict</span></code></pre></div>
</div>
<div id="1c1fc715" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y값 매핑</span></span>
<span id="cb5-2">df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AIR/VESSEL'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AIR/VESSEL'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(mapping_airvessel_dict)</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X값 매핑</span></span>
<span id="cb5-4">df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dangerous goods'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dangerous goods'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>({<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X'</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>})</span></code></pre></div>
</div>
</section>
<section id="x값-변환to-numeric-with-leaveoneout-encoder" class="level2">
<h2 class="anchored" data-anchor-id="x값-변환to-numeric-with-leaveoneout-encoder">X값 변환(To numeric with LeaveOneOut Encoder)</h2>
<ul>
<li>머신러닝학습을 위해 숫자로 변환 필요</li>
<li>LeaveOneOut Encoder를 활용하는 것으로 결정
<ul>
<li><p>국가코드는 거의 바뀔 일이 없지만, 아프리카 지역 등 일부 Minor한 국가로 판매할 경우 추가될 수 있음</p></li>
<li><p>업체코드는 추가/삭제될 가능성이 높음</p></li>
<li><p>Unique값이 많으므로 One-hot Encoding시 차원이 너무 많아질 위험 있음(High Cardinality)</p></li>
<li><p>처음에는 아래와 같이 dict로 각 컬럼별 매핑값을 관리하고자했으나, 번거로움과 대상이 많아짐에 따라 Encoder를 활용</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">  party_code_reverse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {v: k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> party_code.items()}</span>
<span id="cb6-2">  country_code_map_reverse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {v: k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> country_code_map.items()}</span>
<span id="cb6-3"></span>
<span id="cb6-4">  x_data_encoded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame()</span>
<span id="cb6-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_column <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> x_column:</span>
<span id="cb6-6">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> each_column <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loading Country'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Final Destination country'</span>]:</span>
<span id="cb6-7">          x_data_encoded[each_column] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_data[each_column].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(country_code_map_reverse)</span>
<span id="cb6-8">      <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> each_column <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sold-to party'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ship To Party'</span>]:</span>
<span id="cb6-9">          x_data_encoded[each_column] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_data[each_column].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(party_code_reverse)</span></code></pre></div></li>
</ul></li>
<li>Sci-kit learn LeaveOneOut Encoder 공식문서
<ul>
<li>https://contrib.scikit-learn.org/category_encoders/leaveoneout.html</li>
</ul></li>
</ul>
<div id="da8767d1" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 학습할 Feature</span></span>
<span id="cb7-2">x_column <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loading Country'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Final Destination country'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sold-to party'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ship To Party'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dangerous goods'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sales Organization'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Incoterms'</span>]</span>
<span id="cb7-3">y_column <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AIR/VESSEL'</span></span></code></pre></div>
</div>
<div id="f50a523e" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LeaveOneOutEncoder (최초 실행시)</span></span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> category_encoders <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ce</span>
<span id="cb8-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> joblib</span>
<span id="cb8-4"></span>
<span id="cb8-5">encoder_leave_one_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ce.LeaveOneOutEncoder(cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_column, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, return_df<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-6">x_data_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder_leave_one_out.fit_transform(df_dropped[x_column], df_dropped[y_column])</span>
<span id="cb8-7"></span>
<span id="cb8-8">joblib.dump(encoder_leave_one_out, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'encoder_leave_one_out.pkl'</span>)</span>
<span id="cb8-9"></span>
<span id="cb8-10">x_data_all</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Loading Country</th>
<th data-quarto-table-cell-role="th">Final Destination country</th>
<th data-quarto-table-cell-role="th">Sold-to party</th>
<th data-quarto-table-cell-role="th">Ship To Party</th>
<th data-quarto-table-cell-role="th">Dangerous goods</th>
<th data-quarto-table-cell-role="th">Sales Organization</th>
<th data-quarto-table-cell-role="th">Incoterms</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>7.047596</td>
<td>3.679223</td>
<td>3.861376</td>
<td>8.134116</td>
<td>2.765859</td>
<td>2.988212</td>
<td>3.206009</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1.501914</td>
<td>1.956254</td>
<td>1.396398</td>
<td>1.010231</td>
<td>2.410832</td>
<td>3.551036</td>
<td>2.268934</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>1.246987</td>
<td>1.247269</td>
<td>1.076889</td>
<td>1.069540</td>
<td>2.266524</td>
<td>3.929307</td>
<td>1.368437</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>7.557798</td>
<td>3.385827</td>
<td>4.343922</td>
<td>5.881165</td>
<td>2.453504</td>
<td>3.253987</td>
<td>3.082357</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>1.711316</td>
<td>1.644219</td>
<td>1.418986</td>
<td>1.081862</td>
<td>2.604062</td>
<td>1.513666</td>
<td>1.461735</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">68896</td>
<td>1.805997</td>
<td>1.211290</td>
<td>1.620240</td>
<td>0.923400</td>
<td>2.128367</td>
<td>4.805674</td>
<td>1.252805</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">68897</td>
<td>1.738878</td>
<td>1.543501</td>
<td>1.904886</td>
<td>0.850793</td>
<td>2.625204</td>
<td>2.538548</td>
<td>2.008110</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">68898</td>
<td>1.916489</td>
<td>1.649348</td>
<td>1.104931</td>
<td>1.064014</td>
<td>2.018030</td>
<td>2.863359</td>
<td>1.569362</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">68899</td>
<td>1.903145</td>
<td>2.041549</td>
<td>2.386892</td>
<td>0.954536</td>
<td>2.133451</td>
<td>1.841485</td>
<td>1.714075</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">68900</td>
<td>1.963608</td>
<td>1.810246</td>
<td>1.429540</td>
<td>1.208997</td>
<td>2.474078</td>
<td>2.198915</td>
<td>1.706463</td>
</tr>
</tbody>
</table>

<p>68880 rows × 7 columns</p>
</div>
</div>
</div>
<div id="0507419c" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># LeaveOneOutEncoder (실행내역 있는 경우)</span></span>
<span id="cb9-2"></span>
<span id="cb9-3">encoder_leave_one_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> joblib.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'encoder_leave_one_out.pkl'</span>)</span>
<span id="cb9-4">x_data_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder_leave_one_out.transform(df_dropped[x_column], df_dropped[y_column])</span>
<span id="cb9-5"></span>
<span id="cb9-6">joblib.dump(encoder_leave_one_out, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'encoder_leave_one_out.pkl'</span>)</span>
<span id="cb9-7"></span>
<span id="cb9-8">x_data_all</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Loading Country</th>
<th data-quarto-table-cell-role="th">Final Destination country</th>
<th data-quarto-table-cell-role="th">Sold-to party</th>
<th data-quarto-table-cell-role="th">Ship To Party</th>
<th data-quarto-table-cell-role="th">Dangerous goods</th>
<th data-quarto-table-cell-role="th">Sales Organization</th>
<th data-quarto-table-cell-role="th">Incoterms</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>7.041479</td>
<td>2.808034</td>
<td>3.644974</td>
<td>10.297530</td>
<td>2.271593</td>
<td>3.376236</td>
<td>2.761253</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1.203195</td>
<td>1.595750</td>
<td>1.537957</td>
<td>1.012471</td>
<td>2.542451</td>
<td>4.059490</td>
<td>1.791253</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>1.509811</td>
<td>1.355136</td>
<td>1.029430</td>
<td>0.941528</td>
<td>2.484937</td>
<td>3.039443</td>
<td>1.278045</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>8.488335</td>
<td>4.329470</td>
<td>5.074977</td>
<td>5.995380</td>
<td>2.378870</td>
<td>3.362426</td>
<td>2.950839</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>1.371701</td>
<td>1.669704</td>
<td>1.662936</td>
<td>1.251279</td>
<td>2.103728</td>
<td>1.285509</td>
<td>1.482815</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">68896</td>
<td>1.759238</td>
<td>1.000788</td>
<td>1.684182</td>
<td>1.115493</td>
<td>2.130670</td>
<td>2.516951</td>
<td>1.334155</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">68897</td>
<td>2.000342</td>
<td>1.765736</td>
<td>1.469979</td>
<td>1.130242</td>
<td>2.640289</td>
<td>2.358999</td>
<td>1.532509</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">68898</td>
<td>1.901704</td>
<td>1.555484</td>
<td>1.386904</td>
<td>0.944819</td>
<td>2.572425</td>
<td>2.429427</td>
<td>1.479614</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">68899</td>
<td>2.164074</td>
<td>2.300433</td>
<td>2.976153</td>
<td>1.097528</td>
<td>2.626010</td>
<td>1.895660</td>
<td>1.757920</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">68900</td>
<td>1.721231</td>
<td>1.691727</td>
<td>1.582234</td>
<td>1.200996</td>
<td>2.586225</td>
<td>1.986513</td>
<td>1.549286</td>
</tr>
</tbody>
</table>

<p>68880 rows × 7 columns</p>
</div>
</div>
</div>
<div id="4e962657" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">y_data_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_dropped[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AIR/VESSEL'</span>]</span>
<span id="cb10-2">y_data_all</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>0        9
1        1
2        1
3        9
4        1
        ..
68896    1
68897    1
68898    1
68899    1
68900    1
Name: AIR/VESSEL, Length: 68880, dtype: int64</code></pre>
</div>
</div>
</section>
<section id="데이터셋-분할split-traintest" class="level2">
<h2 class="anchored" data-anchor-id="데이터셋-분할split-traintest">데이터셋 분할(Split Train/Test)</h2>
<div id="39a6fc1a" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb12-2"></span>
<span id="cb12-3">x_train, x_test, y_train, y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(x_data_all, y_data_all, train_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, stratify<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_data_all)</span></code></pre></div>
</div>
</section>
</section>
<section id="모델-학습-kneighborsclassifier" class="level1">
<h1>모델 학습 (KNeighborsClassifier)</h1>
<section id="kneighborsclassifier-학습" class="level2">
<h2 class="anchored" data-anchor-id="kneighborsclassifier-학습">KNeighborsClassifier 학습</h2>
<ul>
<li>처음 사용해보는 모델이면서 마감기한이 촉박하여, optuna를 활용하여 파라미터 세팅</li>
<li>Scikit-learn KNeighborsClassifier 공식문서
<ul>
<li>https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html</li>
</ul></li>
<li>Metric의 경우, hamming distance를 채택
<ul>
<li>Kaggle 샘플코드에서 Categorical인 경우는 hamming distance를 기준한다고 되어있음을 참고</li>
<li>시간관계상 간단히 알아보니, Simple matching이라면 hamming, 중요도가 있다면 jacard라고 함</li>
<li>이외에 변수가 서열형(ordinal)인 경우에도 다른 방법이 있다고 하나, 현재의 데이터는 서열형으로 볼 수는 없어 제외</li>
</ul></li>
</ul>
<div id="403a08d1" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> optuna</span>
<span id="cb13-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.neighbors <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> KNeighborsClassifier</span>
<span id="cb13-3"></span>
<span id="cb13-4">clf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KNeighborsClassifier(metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hamming'</span>)</span>
<span id="cb13-5"></span>
<span id="cb13-6">param_distributions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb13-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n_neighbors"</span>: optuna.distributions.IntDistribution(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb13-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weights"</span>: optuna.distributions.CategoricalDistribution([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'uniform'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'distance'</span>]),</span>
<span id="cb13-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"algorithm"</span>: optuna.distributions.CategoricalDistribution([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'auto'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ball_tree'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'brute'</span>]), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#'kd_tree'는 nan인 경우 문제가 있어 제외</span></span>
<span id="cb13-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"leaf_size"</span> : optuna.distributions.IntDistribution(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>),</span>
<span id="cb13-11">}</span>
<span id="cb13-12"></span>
<span id="cb13-13">optuna_search <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optuna.integration.OptunaSearchCV(</span>
<span id="cb13-14">    clf, </span>
<span id="cb13-15">    param_distributions, </span>
<span id="cb13-16">    n_jobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of parallel jobs. -1 means using all processors.</span></span>
<span id="cb13-17">    cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  estimator가 classifier &amp; label이 binary or multiclass라면 sklearn.model_selection.StratifiedKFold 적용 (이외는 sklearn.model_selection.KFold)</span></span>
<span id="cb13-18">    n_trials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, </span>
<span id="cb13-19">    timeout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">600</span>, </span>
<span id="cb13-20">    verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb13-21">    scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If None, score on the estimator is used.</span></span>
<span id="cb13-22">    refit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Best Parameter로 refit. refitted estimator는 best_estimator_ attribute로 바로 predict가능</span></span>
<span id="cb13-23">)</span>
<span id="cb13-24"></span>
<span id="cb13-25">optuna_search.fit(x_train, y_train)</span>
<span id="cb13-26"></span>
<span id="cb13-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Best trial:"</span>)</span>
<span id="cb13-28">trial <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optuna_search.study_.best_trial</span>
<span id="cb13-29"></span>
<span id="cb13-30"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Value: "</span>, trial.value)</span>
<span id="cb13-31"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Params: "</span>)</span>
<span id="cb13-32"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> key, value <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> trial.params.items():</span>
<span id="cb13-33">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"    </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(key, value))</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>py:13: ExperimentalWarning: OptunaSearchCV is experimental (supported from v0.17.0). The interface can change in the future.
  optuna_search = optuna.integration.OptunaSearchCV(
[I 2024-08-04 22:23:30,602] A new study created in memory with name: no-name-8095b4dc-5e03-4ae4-942f-6fa9c1f72a9c
[I 2024-08-04 22:24:37,815] Trial 4 finished with value: 0.5235917538057604 and parameters: {'n_neighbors': 5, 'weights': 'distance', 'algorithm': 'brute', 'leaf_size': 24}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:24:39,034] Trial 5 finished with value: 0.5235917538057604 and parameters: {'n_neighbors': 5, 'weights': 'distance', 'algorithm': 'brute', 'leaf_size': 36}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:24:51,518] Trial 6 finished with value: 0.5235917538057604 and parameters: {'n_neighbors': 3, 'weights': 'distance', 'algorithm': 'brute', 'leaf_size': 23}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:26:20,120] Trial 3 finished with value: 0.3665977063092387 and parameters: {'n_neighbors': 4, 'weights': 'uniform', 'algorithm': 'auto', 'leaf_size': 39}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:26:20,993] Trial 2 finished with value: 0.42937162859026257 and parameters: {'n_neighbors': 3, 'weights': 'distance', 'algorithm': 'ball_tree', 'leaf_size': 25}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:26:51,430] Trial 1 finished with value: 0.3665977063092387 and parameters: {'n_neighbors': 5, 'weights': 'distance', 'algorithm': 'auto', 'leaf_size': 30}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:26:52,521] Trial 7 finished with value: 0.3665977063092387 and parameters: {'n_neighbors': 4, 'weights': 'uniform', 'algorithm': 'auto', 'leaf_size': 32}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:26:52,625] Trial 0 finished with value: 0.42937162859026257 and parameters: {'n_neighbors': 3, 'weights': 'uniform', 'algorithm': 'auto', 'leaf_size': 35}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:27:15,381] Trial 8 finished with value: 0.3665977063092387 and parameters: {'n_neighbors': 5, 'weights': 'distance', 'algorithm': 'auto', 'leaf_size': 35}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:27:16,046] Trial 9 finished with value: 0.3665977063092387 and parameters: {'n_neighbors': 4, 'weights': 'distance', 'algorithm': 'auto', 'leaf_size': 25}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:28:09,880] Trial 14 finished with value: 0.4293897757638404 and parameters: {'n_neighbors': 4, 'weights': 'distance', 'algorithm': 'brute', 'leaf_size': 36}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:28:10,904] Trial 10 finished with value: 0.3665977063092387 and parameters: {'n_neighbors': 4, 'weights': 'distance', 'algorithm': 'auto', 'leaf_size': 36}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:28:12,691] Trial 15 finished with value: 0.4293897757638404 and parameters: {'n_neighbors': 4, 'weights': 'uniform', 'algorithm': 'brute', 'leaf_size': 29}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:28:26,116] Trial 17 finished with value: 0.5235917538057604 and parameters: {'n_neighbors': 5, 'weights': 'uniform', 'algorithm': 'brute', 'leaf_size': 20}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:29:16,651] Trial 12 finished with value: 0.3665977063092387 and parameters: {'n_neighbors': 5, 'weights': 'distance', 'algorithm': 'auto', 'leaf_size': 24}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:29:17,018] Trial 11 finished with value: 0.3665977063092387 and parameters: {'n_neighbors': 5, 'weights': 'uniform', 'algorithm': 'auto', 'leaf_size': 34}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:29:33,118] Trial 19 finished with value: 0.5235917538057604 and parameters: {'n_neighbors': 5, 'weights': 'distance', 'algorithm': 'brute', 'leaf_size': 20}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:29:33,664] Trial 18 finished with value: 0.5235917538057604 and parameters: {'n_neighbors': 5, 'weights': 'distance', 'algorithm': 'brute', 'leaf_size': 20}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:29:37,861] Trial 20 finished with value: 0.5235917538057604 and parameters: {'n_neighbors': 5, 'weights': 'distance', 'algorithm': 'brute', 'leaf_size': 20}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:29:46,067] Trial 21 finished with value: 0.5235917538057604 and parameters: {'n_neighbors': 5, 'weights': 'distance', 'algorithm': 'brute', 'leaf_size': 40}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:30:10,551] Trial 13 finished with value: 0.3665977063092387 and parameters: {'n_neighbors': 5, 'weights': 'distance', 'algorithm': 'ball_tree', 'leaf_size': 32}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:30:11,709] Trial 16 finished with value: 0.3665977063092387 and parameters: {'n_neighbors': 5, 'weights': 'uniform', 'algorithm': 'auto', 'leaf_size': 31}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:30:29,747] Trial 22 finished with value: 0.5235917538057604 and parameters: {'n_neighbors': 5, 'weights': 'distance', 'algorithm': 'brute', 'leaf_size': 40}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:30:30,705] Trial 23 finished with value: 0.5235917538057604 and parameters: {'n_neighbors': 5, 'weights': 'distance', 'algorithm': 'brute', 'leaf_size': 40}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:31:25,150] Trial 29 finished with value: 0.5235917538057604 and parameters: {'n_neighbors': 3, 'weights': 'distance', 'algorithm': 'brute', 'leaf_size': 27}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:31:40,271] Trial 30 finished with value: 0.5235917538057604 and parameters: {'n_neighbors': 3, 'weights': 'distance', 'algorithm': 'brute', 'leaf_size': 23}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:31:41,349] Trial 31 finished with value: 0.5235917538057604 and parameters: {'n_neighbors': 3, 'weights': 'distance', 'algorithm': 'brute', 'leaf_size': 23}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:31:42,531] Trial 28 finished with value: 0.5235917538057604 and parameters: {'n_neighbors': 3, 'weights': 'distance', 'algorithm': 'brute', 'leaf_size': 23}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:32:32,403] Trial 27 finished with value: 0.3665977063092387 and parameters: {'n_neighbors': 4, 'weights': 'distance', 'algorithm': 'ball_tree', 'leaf_size': 28}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:33:00,736] Trial 24 finished with value: 0.3665977063092387 and parameters: {'n_neighbors': 5, 'weights': 'distance', 'algorithm': 'ball_tree', 'leaf_size': 28}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:33:02,806] Trial 26 finished with value: 0.3665977063092387 and parameters: {'n_neighbors': 5, 'weights': 'distance', 'algorithm': 'ball_tree', 'leaf_size': 40}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:33:05,471] Trial 25 finished with value: 0.3665977063092387 and parameters: {'n_neighbors': 5, 'weights': 'distance', 'algorithm': 'ball_tree', 'leaf_size': 28}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:34:04,143] Trial 32 finished with value: 0.42937162859026257 and parameters: {'n_neighbors': 3, 'weights': 'distance', 'algorithm': 'ball_tree', 'leaf_size': 23}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:34:13,049] Trial 33 finished with value: 0.3665977063092387 and parameters: {'n_neighbors': 4, 'weights': 'distance', 'algorithm': 'ball_tree', 'leaf_size': 22}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:34:14,021] Trial 34 finished with value: 0.3665977063092387 and parameters: {'n_neighbors': 4, 'weights': 'distance', 'algorithm': 'ball_tree', 'leaf_size': 27}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:34:16,306] Trial 37 finished with value: 0.4293897757638404 and parameters: {'n_neighbors': 4, 'weights': 'distance', 'algorithm': 'brute', 'leaf_size': 26}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:34:22,248] Trial 38 finished with value: 0.4293897757638404 and parameters: {'n_neighbors': 4, 'weights': 'uniform', 'algorithm': 'brute', 'leaf_size': 22}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:34:22,899] Trial 39 finished with value: 0.4293897757638404 and parameters: {'n_neighbors': 4, 'weights': 'uniform', 'algorithm': 'brute', 'leaf_size': 22}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:34:30,938] Trial 35 finished with value: 0.3665977063092387 and parameters: {'n_neighbors': 4, 'weights': 'distance', 'algorithm': 'ball_tree', 'leaf_size': 27}. Best is trial 4 with value: 0.5235917538057604.
[I 2024-08-04 22:34:37,208] Trial 36 finished with value: 0.3665977063092387 and parameters: {'n_neighbors': 4, 'weights': 'distance', 'algorithm': 'ball_tree', 'leaf_size': 27}. Best is trial 4 with value: 0.5235917538057604.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Best trial:
  Value:  0.5235917538057604
  Params: 
    n_neighbors: 5
    weights: distance
    algorithm: brute
    leaf_size: 24</code></pre>
</div>
</div>
<div id="78fbea2c" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">optuna_search.best_params_</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'n_neighbors': 5,
 'weights': 'distance',
 'algorithm': 'brute',
 'leaf_size': 24}</code></pre>
</div>
</div>
<div id="7dfab7d0" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">best_model_knclassifier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optuna_search.best_estimator_</span>
<span id="cb18-2">best_model_knclassifier</span></code></pre></div>
<div class="cell-output cell-output-display">
<style>#sk-container-id-2 {
  /* Definition of color scheme common for light and dark mode */
  --sklearn-color-text: black;
  --sklearn-color-line: gray;
  /* Definition of color scheme for unfitted estimators */
  --sklearn-color-unfitted-level-0: #fff5e6;
  --sklearn-color-unfitted-level-1: #f6e4d2;
  --sklearn-color-unfitted-level-2: #ffe0b3;
  --sklearn-color-unfitted-level-3: chocolate;
  /* Definition of color scheme for fitted estimators */
  --sklearn-color-fitted-level-0: #f0f8ff;
  --sklearn-color-fitted-level-1: #d4ebff;
  --sklearn-color-fitted-level-2: #b3dbfd;
  --sklearn-color-fitted-level-3: cornflowerblue;

  /* Specific color for light theme */
  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
  --sklearn-color-icon: #696969;

  @media (prefers-color-scheme: dark) {
    /* Redefinition of color scheme for dark theme */
    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
    --sklearn-color-icon: #878787;
  }
}

#sk-container-id-2 {
  color: var(--sklearn-color-text);
}

#sk-container-id-2 pre {
  padding: 0;
}

#sk-container-id-2 input.sk-hidden--visually {
  border: 0;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

#sk-container-id-2 div.sk-dashed-wrapped {
  border: 1px dashed var(--sklearn-color-line);
  margin: 0 0.4em 0.5em 0.4em;
  box-sizing: border-box;
  padding-bottom: 0.4em;
  background-color: var(--sklearn-color-background);
}

#sk-container-id-2 div.sk-container {
  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
     but bootstrap.min.css set `[hidden] { display: none !important; }`
     so we also need the `!important` here to be able to override the
     default hidden behavior on the sphinx rendered scikit-learn.org.
     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
  display: inline-block !important;
  position: relative;
}

#sk-container-id-2 div.sk-text-repr-fallback {
  display: none;
}

div.sk-parallel-item,
div.sk-serial,
div.sk-item {
  /* draw centered vertical line to link estimators */
  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
  background-size: 2px 100%;
  background-repeat: no-repeat;
  background-position: center center;
}

/* Parallel-specific style estimator block */

#sk-container-id-2 div.sk-parallel-item::after {
  content: "";
  width: 100%;
  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
  flex-grow: 1;
}

#sk-container-id-2 div.sk-parallel {
  display: flex;
  align-items: stretch;
  justify-content: center;
  background-color: var(--sklearn-color-background);
  position: relative;
}

#sk-container-id-2 div.sk-parallel-item {
  display: flex;
  flex-direction: column;
}

#sk-container-id-2 div.sk-parallel-item:first-child::after {
  align-self: flex-end;
  width: 50%;
}

#sk-container-id-2 div.sk-parallel-item:last-child::after {
  align-self: flex-start;
  width: 50%;
}

#sk-container-id-2 div.sk-parallel-item:only-child::after {
  width: 0;
}

/* Serial-specific style estimator block */

#sk-container-id-2 div.sk-serial {
  display: flex;
  flex-direction: column;
  align-items: center;
  background-color: var(--sklearn-color-background);
  padding-right: 1em;
  padding-left: 1em;
}


/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
clickable and can be expanded/collapsed.
- Pipeline and ColumnTransformer use this feature and define the default style
- Estimators will overwrite some part of the style using the `sk-estimator` class
*/

/* Pipeline and ColumnTransformer style (default) */

#sk-container-id-2 div.sk-toggleable {
  /* Default theme specific background. It is overwritten whether we have a
  specific estimator or a Pipeline/ColumnTransformer */
  background-color: var(--sklearn-color-background);
}

/* Toggleable label */
#sk-container-id-2 label.sk-toggleable__label {
  cursor: pointer;
  display: block;
  width: 100%;
  margin-bottom: 0;
  padding: 0.5em;
  box-sizing: border-box;
  text-align: center;
}

#sk-container-id-2 label.sk-toggleable__label-arrow:before {
  /* Arrow on the left of the label */
  content: "▸";
  float: left;
  margin-right: 0.25em;
  color: var(--sklearn-color-icon);
}

#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {
  color: var(--sklearn-color-text);
}

/* Toggleable content - dropdown */

#sk-container-id-2 div.sk-toggleable__content {
  max-height: 0;
  max-width: 0;
  overflow: hidden;
  text-align: left;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-2 div.sk-toggleable__content.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-2 div.sk-toggleable__content pre {
  margin: 0.2em;
  border-radius: 0.25em;
  color: var(--sklearn-color-text);
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-2 div.sk-toggleable__content.fitted pre {
  /* unfitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {
  /* Expand drop-down */
  max-height: 200px;
  max-width: 100%;
  overflow: auto;
}

#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
  content: "▾";
}

/* Pipeline/ColumnTransformer-specific style */

#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator-specific style */

/* Colorize estimator box */
#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

#sk-container-id-2 div.sk-label label.sk-toggleable__label,
#sk-container-id-2 div.sk-label label {
  /* The background is the default theme color */
  color: var(--sklearn-color-text-on-default-background);
}

/* On hover, darken the color of the background */
#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-unfitted-level-2);
}

/* Label box, darken color on hover, fitted */
#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
  color: var(--sklearn-color-text);
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Estimator label */

#sk-container-id-2 div.sk-label label {
  font-family: monospace;
  font-weight: bold;
  display: inline-block;
  line-height: 1.2em;
}

#sk-container-id-2 div.sk-label-container {
  text-align: center;
}

/* Estimator-specific */
#sk-container-id-2 div.sk-estimator {
  font-family: monospace;
  border: 1px dotted var(--sklearn-color-border-box);
  border-radius: 0.25em;
  box-sizing: border-box;
  margin-bottom: 0.5em;
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-0);
}

#sk-container-id-2 div.sk-estimator.fitted {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-0);
}

/* on hover */
#sk-container-id-2 div.sk-estimator:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-2);
}

#sk-container-id-2 div.sk-estimator.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-2);
}

/* Specification for estimator info (e.g. "i" and "?") */

/* Common style for "i" and "?" */

.sk-estimator-doc-link,
a:link.sk-estimator-doc-link,
a:visited.sk-estimator-doc-link {
  float: right;
  font-size: smaller;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1em;
  height: 1em;
  width: 1em;
  text-decoration: none !important;
  margin-left: 1ex;
  /* unfitted */
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
  color: var(--sklearn-color-unfitted-level-1);
}

.sk-estimator-doc-link.fitted,
a:link.sk-estimator-doc-link.fitted,
a:visited.sk-estimator-doc-link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
div.sk-estimator:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover,
div.sk-label-container:hover .sk-estimator-doc-link:hover,
.sk-estimator-doc-link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover,
div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
.sk-estimator-doc-link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

/* Span, style for the box shown on hovering the info icon */
.sk-estimator-doc-link span {
  display: none;
  z-index: 9999;
  position: relative;
  font-weight: normal;
  right: .2ex;
  padding: .5ex;
  margin: .5ex;
  width: min-content;
  min-width: 20ex;
  max-width: 50ex;
  color: var(--sklearn-color-text);
  box-shadow: 2pt 2pt 4pt #999;
  /* unfitted */
  background: var(--sklearn-color-unfitted-level-0);
  border: .5pt solid var(--sklearn-color-unfitted-level-3);
}

.sk-estimator-doc-link.fitted span {
  /* fitted */
  background: var(--sklearn-color-fitted-level-0);
  border: var(--sklearn-color-fitted-level-3);
}

.sk-estimator-doc-link:hover span {
  display: block;
}

/* "?"-specific style due to the `<a>` HTML tag */

#sk-container-id-2 a.estimator_doc_link {
  float: right;
  font-size: 1rem;
  line-height: 1em;
  font-family: monospace;
  background-color: var(--sklearn-color-background);
  border-radius: 1rem;
  height: 1rem;
  width: 1rem;
  text-decoration: none;
  /* unfitted */
  color: var(--sklearn-color-unfitted-level-1);
  border: var(--sklearn-color-unfitted-level-1) 1pt solid;
}

#sk-container-id-2 a.estimator_doc_link.fitted {
  /* fitted */
  border: var(--sklearn-color-fitted-level-1) 1pt solid;
  color: var(--sklearn-color-fitted-level-1);
}

/* On hover */
#sk-container-id-2 a.estimator_doc_link:hover {
  /* unfitted */
  background-color: var(--sklearn-color-unfitted-level-3);
  color: var(--sklearn-color-background);
  text-decoration: none;
}

#sk-container-id-2 a.estimator_doc_link.fitted:hover {
  /* fitted */
  background-color: var(--sklearn-color-fitted-level-3);
}
</a></style><div id="sk-container-id-2" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>KNeighborsClassifier(algorithm='brute', leaf_size=24, metric='hamming',
                     weights='distance')</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br>On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden=""><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-2" type="checkbox" checked=""><label for="sk-estimator-id-2" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;&nbsp;KNeighborsClassifier<a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.neighbors.KNeighborsClassifier.html">?<span>Documentation for KNeighborsClassifier</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>KNeighborsClassifier(algorithm='brute', leaf_size=24, metric='hamming',
                     weights='distance')</pre></div> </div></div></div></div>
</div>
</div>
</section>
<section id="kneighborsclassifier-모델평가" class="level2">
<h2 class="anchored" data-anchor-id="kneighborsclassifier-모델평가">KNeighborsClassifier 모델평가</h2>
<div id="d2dc37ee" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sklearn.model_selection</span>
<span id="cb19-2"></span>
<span id="cb19-3">sklearn.model_selection.cross_val_score(best_model_knclassifier, x_test, y_test, scoring<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>, cv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, </span>
<span id="cb19-4">                                        n_jobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, verbose<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([0.52358491, 0.52377495, 0.52377495, 0.52341198, 0.52341198])</code></pre>
</div>
</div>
</section>
<section id="kneighborsclassifier-예측prediction" class="level2">
<h2 class="anchored" data-anchor-id="kneighborsclassifier-예측prediction">KNeighborsClassifier 예측(Prediction)</h2>
<div id="165f4baa" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 예측대상 입력 후 변환</span></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## 입력</span></span>
<span id="cb21-3">x_test_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loading Country'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MX'</span>,</span>
<span id="cb21-4">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Final Destination country'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'US'</span>,</span>
<span id="cb21-5">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sold-to party'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C310-00'</span>,</span>
<span id="cb21-6">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ship To Party'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'4891788'</span>,</span>
<span id="cb21-7">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dangerous goods'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0'</span>,</span>
<span id="cb21-8">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sales Organization'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'R001'</span>,</span>
<span id="cb21-9">                             <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Incoterms'</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CIP'</span>},</span>
<span id="cb21-10">                             index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb21-11">)</span>
<span id="cb21-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## LeaveOneOutEncoder변환</span></span>
<span id="cb21-13">encoder_leave_one_out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> joblib.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'encoder_leave_one_out.pkl'</span>)</span>
<span id="cb21-14">x_data_to_predict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder_leave_one_out.transform(x_test_input[x_column])</span>
<span id="cb21-15">x_data_to_predict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dangerous goods'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_data_to_predict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Dangerous goods'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>({np.nan:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>})</span>
<span id="cb21-16"></span>
<span id="cb21-17">x_data_to_predict</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Loading Country</th>
<th data-quarto-table-cell-role="th">Final Destination country</th>
<th data-quarto-table-cell-role="th">Sold-to party</th>
<th data-quarto-table-cell-role="th">Ship To Party</th>
<th data-quarto-table-cell-role="th">Dangerous goods</th>
<th data-quarto-table-cell-role="th">Sales Organization</th>
<th data-quarto-table-cell-role="th">Incoterms</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>7.339717</td>
<td>3.507706</td>
<td>4.077912</td>
<td>9.0</td>
<td>0</td>
<td>3.443488</td>
<td>3.025576</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="1cf79d82" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 예측값 {1:'VESSEL',2:'AIR'}</span></span>
<span id="cb22-2"></span>
<span id="cb22-3">prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> best_model_knclassifier.predict(x_data_to_predict)</span>
<span id="cb22-4">prediction</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([2], dtype=int64)</code></pre>
</div>
</div>
<div id="220cd1d8" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">array_to_conver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction</span>
<span id="cb24-2">np.where(array_to_conver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'VESSEL'</span>, np.where(array_to_conver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AIR'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'UNKNOWN'</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array(['AIR'], dtype='&lt;U7')</code></pre>
</div>
</div>
</section>
<section id="kneighborsclassifier-모델저장" class="level2">
<h2 class="anchored" data-anchor-id="kneighborsclassifier-모델저장">KNeighborsClassifier 모델저장</h2>
<div id="d5ce0585" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> joblib</span>
<span id="cb26-2"></span>
<span id="cb26-3">joblib_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model_knn_1st_fitted.joblib"</span></span>
<span id="cb26-4">joblib.dump(best_model_knclassifier, joblib_file)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>['model_knn_1st_fitted.joblib']</code></pre>
</div>
</div>
<div id="ce7d30d6" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">joblib_file <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model_knn_1st_fitted.joblib"</span></span>
<span id="cb28-2">knn_loaded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> joblib.load(joblib_file)</span>
<span id="cb28-3"></span>
<span id="cb28-4">prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> knn_loaded.predict(x_data_to_predict)</span>
<span id="cb28-5">prediction</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([2], dtype=int64)</code></pre>
</div>
</div>
<div id="6aba8b11" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">array_to_conver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prediction</span>
<span id="cb30-2">np.where(array_to_conver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'VESSEL'</span>, np.where(array_to_conver <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AIR'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'UNKNOWN'</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array(['AIR'], dtype='&lt;U7')</code></pre>
</div>
</div>


</section>
</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>scikit-learn</category>
  <category>KNeighborsClassifier</category>
  <category>category_encoders</category>
  <category>optuna</category>
  <category>OptunaSearchCV</category>
  <category>joblib</category>
  <category>sqlite3</category>
  <category>pandas</category>
  <guid>https://kr9268.github.io/posts_miniprojects/sel-py-ml_predict_shiptype-20240801/</guid>
  <pubDate>Thu, 01 Aug 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[Python] Github, API활용한 공공데이터 저장소 만들기</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts_miniprojects/dtcontest-ore-py-datagokr/</link>
  <description><![CDATA[ 





<section id="추진배경" class="level2">
<h2 class="anchored" data-anchor-id="추진배경">추진배경</h2>
<ul>
<li>본격적으로 모델 학습을 하기 전, 데이터 이용 편의를 증진하고자 함</li>
<li>팀원들이 R이나 통계분석에는 익숙하나 파이썬 코딩에는 익숙하지않아, 최대한 모델링에 집중하도록 지원
<ul>
<li>하나의 repository에서 원하는 데이터를 한번에 확인 가능</li>
<li>repository에서 바로 복사해서 사용가능한 샘플을 제공하여 쉽게 데이터로딩 가능</li>
</ul></li>
<li>데이터를 하나의 페이지에서 통합관리(공공데이터 홈페이지 접속 등 불필요)
<ul>
<li>업데이트 일자를 표기하여 얼마나 최신 데이터인지 확인 가능</li>
<li>추가하고자 하는 데이터가 공공데이터포털의 데이터라면 쉽게 작업내역에 추가가능 (리스트 추가권한을 주거나, discord봇 접수 등 생각해보았으나 구현시간대비 효용이 작아 직접 추가진행)</li>
</ul></li>
<li>개인서버(NAS)에서 매일 특정시간 구동하여, github서버로 자동 push(업로드)하여 별도의 수작업없이 db 최신화</li>
</ul>
</section>
<section id="효과" class="level2">
<h2 class="anchored" data-anchor-id="효과">효과</h2>
<ul>
<li>특정 공공데이터 포털의 데이터를 사용하기 위해 했던 아래의 작업이 제거됨
<ul>
<li>공공데이터포털에 접속하여 csv파일 저장</li>
<li>저장해둔 csv파일 찾기</li>
<li>해당 파일을 분석했던 jupyter파일로 찾아가 API호출주소나 키를 찾기</li>
<li>csv파일을 저장한 뒤 추가 업데이트가 되었는지 확인하고 재다운로드</li>
<li>한국어 데이터 로딩을 위한 encoding규격 등의 숙지가 필요없음 (저장시 규격을 지정하고, 로딩을 위한 샘플코드에 규격을 지정해둠)</li>
</ul></li>
<li>위의 사항을 달성하기 위한 부가작업이 제거됨
<ul>
<li>csv파일 저장 및 업데이트 시기 기록, 서버에 업로드 및 파일주소 저장</li>
</ul></li>
</ul>
</section>
<section id="github-repository" class="level2">
<h2 class="anchored" data-anchor-id="github-repository">github repository</h2>
<p><a href="https://github.com/KR9268/db_datagokr">관련 github레포</a></p>
<ul>
<li>API개인키 등 정보가 있어 레포에는 csv파일과 현황만 저장함<br> (구현을 위해 필요한 db_list나 개인키 등의 json파일은 모두 ignore리스트로 관리)</li>
<li>git clone해둔 개인서버 디렉토리에서 자동 실행</li>
</ul>
</section>
<section id="세부내용-구현내용-사용한-언어패키지-등" class="level2">
<h2 class="anchored" data-anchor-id="세부내용-구현내용-사용한-언어패키지-등">[세부내용] 구현내용 &amp; 사용한 언어/패키지 등</h2>
<ol type="1">
<li>json_load(<code>json</code>) : 개인키와 db_list 로딩을 위한 함수. 어려운 기능은 아니지만 여러번 쓰여 함수화 <br></li>
<li>download_from_data_go_kr_with_json(<code>requests</code>, <code>json</code>) : 공공데이터포털 API호출용 (실제 자료 + 전체/다운 현황 등 수신)<br></li>
<li>chk_json_status_of_data_go_kr : 전체/실제 건수 등 별도 처리용(대조하여 누락없이 전체자료 저장하기 위함)<br></li>
<li>update_readme : README파일에 파일 현황(데이터명/주소/링크 등) 업데이트용<br></li>
<li>git_push(<code>subprocess</code>) : 새롭게 추가된 모든사항(ignore대상 제외)을 자동으로 업로드(auto commit)하기 위한 용도<br></li>
<li>위의 함수들을 기반으로 아래의 내용을 구현<br></li>
</ol>
<ul>
<li>json으로 민감정보 등을 코드에 표기하지 않고 별도관리 (+ gitignore로 이중보안)<br></li>
<li>1건만 먼저 호출하여 전체건수를 확인 후, 한번에 전체 건을 호출 (10000건 지정 등 과도한 세팅값의 하드코딩 지양)<br></li>
<li><code>pandas</code>로 encoding cp949 지정하여 csv로 저장<br></li>
<li>github raw링크형식을 활용하여 바로 파일로딩할 수 있도록 주소 생성(db에서 아래 형식으로 지정해둔 파일명 사용)<br></li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb1-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb1-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"공공데이터포털의 데이터명"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"base_url"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"API Base Url"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"address_get"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"해당 데이터의 API주소(API목록 란에서 확인)"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-6">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"file_name_to"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CSV로 저장할 파일명(.csv제외)"</span></span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"공공데이터포털의 데이터명2"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-10">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"base_url"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"API Base Url"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-11">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"address_get"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"해당 데이터의 API주소(API목록 란에서 확인)"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-12">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"file_name_to"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CSV로 저장할 파일명(.csv제외)"</span></span>
<span id="cb1-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-14"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<ul>
<li>time.sleep()으로 너무 자주 호출하여 서버에 무리가지 않도록 세팅</li>
</ul>
</section>
<section id="샘플코드패키지-및-함수" class="level2">
<h2 class="anchored" data-anchor-id="샘플코드패키지-및-함수">샘플코드(패키지 및 함수)</h2>
<div id="4fe3ff16" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> subprocess</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> json_load(json_path, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>):</span>
<span id="cb2-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(json_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>encoding) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb2-11">        json_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb2-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> json_data</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> request_and_to_json(url):</span>
<span id="cb2-15">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url)</span>
<span id="cb2-16">    json_ob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(response.text)</span>
<span id="cb2-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> json_ob</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> chk_json_status_of_data_go_kr(json_obj):</span>
<span id="cb2-20">    other_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'currentCount'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'matchCount'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'page'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'perPage'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'totalCount'</span>]</span>
<span id="cb2-21">    result_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb2-22">    </span>
<span id="cb2-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each_column <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> other_data:</span>
<span id="cb2-24">        result_dict[each_column] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json_obj[each_column]  </span>
<span id="cb2-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result_dict </span>
<span id="cb2-26"></span>
<span id="cb2-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> download_from_data_go_kr_with_json(url):</span>
<span id="cb2-28">    json_ob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request_and_to_json(url)</span>
<span id="cb2-29"></span>
<span id="cb2-30">    json_status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chk_json_status_of_data_go_kr(json_ob)</span>
<span id="cb2-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> json_status[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'currentCount'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> json_status[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'totalCount'</span>]:</span>
<span id="cb2-32">        url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> url.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'perPage=1'</span>,<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'perPage=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>json_status[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"totalCount"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-33">        json_ob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request_and_to_json(url)</span>
<span id="cb2-34"></span>
<span id="cb2-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> json_ob</span>
<span id="cb2-36"></span>
<span id="cb2-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_readme(new_content_list):</span>
<span id="cb2-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the README.md file in read mode</span></span>
<span id="cb2-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'README.md'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb2-40">        lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.readlines()</span>
<span id="cb2-41"></span>
<span id="cb2-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find the index of the line that starts with '* 데이터 현황'</span></span>
<span id="cb2-43">    index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>((i <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(lines) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> line.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'* 데이터 현황'</span>)), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb2-44"></span>
<span id="cb2-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the line is found, remove the following lines and insert new content</span></span>
<span id="cb2-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> index <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-47">        lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lines[:index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the following lines</span></span>
<span id="cb2-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#lines.extend(new_content) # Insert new content</span></span>
<span id="cb2-49">        lines.extend(new_content_list) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Insert new content</span></span>
<span id="cb2-50"></span>
<span id="cb2-51">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the README.md file in write mode and write the updated content</span></span>
<span id="cb2-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'README.md'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb2-53">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.writelines(lines)</span>
<span id="cb2-54"></span>
<span id="cb2-55"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> git_push():</span>
<span id="cb2-56">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of all .csv files in the current directory</span></span>
<span id="cb2-57">    csv_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [f <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> os.listdir(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> f.endswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.csv'</span>)]</span>
<span id="cb2-58"></span>
<span id="cb2-59">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stage all .csv files</span></span>
<span id="cb2-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> csv_files:</span>
<span id="cb2-61">        subprocess.call([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'git'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add'</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>])</span>
<span id="cb2-62"></span>
<span id="cb2-63">    subprocess.call([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'git'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'README.md'</span>])</span>
<span id="cb2-64">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Commit the changes with a message</span></span>
<span id="cb2-65">    subprocess.call([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'git'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'commit'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-m'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Automatic commit'</span>])</span>
<span id="cb2-66"></span>
<span id="cb2-67">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Push the changes to the remote repository</span></span>
<span id="cb2-68">    subprocess.call([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'git'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'push'</span>])</span></code></pre></div>
</div>
</section>
<section id="샘플코드패키지-및-함수-1" class="level2">
<h2 class="anchored" data-anchor-id="샘플코드패키지-및-함수-1">샘플코드(패키지 및 함수)</h2>
<div id="fea59f9f" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># json load</span></span>
<span id="cb3-2">serviceKey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json_load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'option.json'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'serviceKey'</span>]</span>
<span id="cb3-3">db_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json_load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'db_list.json'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cp949'</span>)</span></code></pre></div>
</div>
<div id="1fc24083" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># main</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 작업하기</span></span>
<span id="cb4-4">txt_for_readme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>]</span>
<span id="cb4-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> each <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> db_list:</span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 다운로드</span></span>
<span id="cb4-7">    url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'base_url'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>each[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'address_get'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">?page=1&amp;perPage=1&amp;serviceKey=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>serviceKey<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-8">    json_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> download_from_data_go_kr_with_json(url)</span>
<span id="cb4-9">    result_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chk_json_status_of_data_go_kr(json_data)</span>
<span id="cb4-10">    </span>
<span id="cb4-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 저장</span></span>
<span id="cb4-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> result_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'currentCount'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> result_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'totalCount'</span>]:</span>
<span id="cb4-13">        pd.json_normalize(json_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>]).to_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file_name_to'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.csv"</span>,encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cp949'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb4-14"></span>
<span id="cb4-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 파일주소 및 이름, 업데이트시간 저장</span></span>
<span id="cb4-16">    owner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KR9268'</span></span>
<span id="cb4-17">    repo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'db_datagokr'</span></span>
<span id="cb4-18">    branch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'main'</span></span>
<span id="cb4-19">    file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file_name_to'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.csv"</span></span>
<span id="cb4-20"></span>
<span id="cb4-21">    url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://raw.githubusercontent.com/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>owner<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>repo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>branch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-22"></span>
<span id="cb4-23">    txt_for_readme.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  *  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>datetime<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>strftime(datetime.now(),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">업데이트 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-24">    time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-25"></span>
<span id="cb4-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 업데이트 내역과 파일 git push</span></span>
<span id="cb4-27">update_readme(txt_for_readme)</span>
<span id="cb4-28">git_push()</span></code></pre></div>
</div>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>requests</category>
  <category>json</category>
  <category>subprocess</category>
  <category>pandas</category>
  <guid>https://kr9268.github.io/posts_miniprojects/dtcontest-ore-py-datagokr/</guid>
  <pubDate>Mon, 10 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[Python] ERP(SAP) 특정 메뉴의 주요정보 크롤링 &amp; 정리 Tool</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts_miniprojects/sel-py-crawl_sr-20240306/</link>
  <description><![CDATA[ 





<section id="추진배경" class="level2">
<h2 class="anchored" data-anchor-id="추진배경">추진배경</h2>
<ul>
<li>각 주문서에 나뉘어있는 사용빈도가 높은 정보가 여러 탭에 나뉘어 있음
<ul>
<li>탭 내에서도 많은 정보를 보여주기 위해 좁은 프레임(4행만 보임)에 많은 정보를 넣어 복사 등을 하기엔 불편함</li>
<li>4행만 보이는 물품내역 프레임에 50여건의 물품이 있는 경우 많은 시간 소요
<ul>
<li>크게 조회가능한 모드로 보는 경우에는 제품/모델명/HSCODE의 형식으로 문단형식으로 혼재되어있어 중복제거 등 가공 필수</li>
</ul></li>
<li>출발/도착지/품명 등을 전체 주문에 대해 확인하고자 하는 경우 건별로 메뉴진입 필요 (일괄로 조회하는 메뉴는 일부 정보 제외되어있음)</li>
</ul></li>
<li>아래의 방안으로 해결하고자 함
<ul>
<li>조회속도가 빠르므로 필요한 정보를 필요할때마다 일괄 크롤링하도록 설계</li>
<li>유저의 복사/가공/중복제거의 작업이 패턴화되어있어 미리 진행하여 결과물만 제공
<ul>
<li>대상정보 : Sales Org, Plant(Code,Name), POL(출발지), POD(도착지), HSCODE, Description(물품명세)</li>
</ul></li>
</ul></li>
</ul>
<blockquote class="blockquote">
<p><strong>[용어설명]</strong><br> <strong>SR</strong> : 하나의 기본 선적 단위, Shipping request<br> <strong>HSCODE</strong> : 해외로 물건을 보내기 위해 수출신고할 때, (의약품, 전자기기 등)물품 종류를 알 수 있는 제품 코드<br></p>
</blockquote>
</section>
<section id="효과" class="level2">
<h2 class="anchored" data-anchor-id="효과">효과</h2>
<ul>
<li>단건 또는 여러건의 주문(SR)에 대해 건당 1~2초 이내로 필요한 정보 수집</li>
<li>클립보드 복사가 가능한 텍스트, 엑셀형태로 제공하여 요구사항에 대해 즉시대응 가능</li>
</ul>
</section>
<section id="github-repository" class="level2">
<h2 class="anchored" data-anchor-id="github-repository">github repository</h2>
<p><a href="https://github.com/KR9268/-P-Crawl_data_from_SRDisplay">관련 github레포</a></p>
</section>
<section id="세부내용-구현내용-사용한-언어패키지-등" class="level2">
<h2 class="anchored" data-anchor-id="세부내용-구현내용-사용한-언어패키지-등">[세부내용] 구현내용 &amp; 사용한 언어/패키지 등</h2>
<ol type="1">
<li>단건 확인시, 코드셀에 붙여넣기 후 실행, 텍스트로 출력하며 <code>pandas</code> dataframe으로도 저장하여 필요시 엑셀도 제공</li>
<li>여러건 확인시, 엑셀 등에서 복사한 표를 코드셀에 바로 붙여넣도록 설계(자동 분할, <strong>편의성 고려</strong>함) 이후 작업은 단건 확인과 동일</li>
<li>필요시 엑셀로 저장 (<strong>기존 업무유형상 출력텍스트가 더 많이 활용될 것으로 보여 별도 기능으로 추가함</strong>)</li>
</ol>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>SAP Scripting</category>
  <guid>https://kr9268.github.io/posts_miniprojects/sel-py-crawl_sr-20240306/</guid>
  <pubDate>Wed, 06 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[Python] COO발급관리용 Tool</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts_miniprojects/sel-py-monitoringCOO-20240220/</link>
  <description><![CDATA[ 





<section id="추진배경" class="level2">
<h2 class="anchored" data-anchor-id="추진배경">추진배경</h2>
<ul>
<li>부서원 모두의 공통 업무이며, 여러가지 불편사항이 존재하나 자동화방안에 대한 기존 고민X
<ul>
<li>필요에 의해 ID가 3개로 나뉘어있으며, 공동인증서 활용으로 타이핑작업 및 ID/PW/공동인증서PW의 관리 및 입력 불편함</li>
<li>여러 건의 COO를 발급하고 대응하지만, 각 업무는 COO 1건별로 메뉴에 진입하여 수행해야함
<ul>
<li>심사완료여부, 발급거절시 사유확인, 출력 및 사본 저장 등</li>
</ul></li>
</ul></li>
<li>발급실적 담당자는 월마다 부서 전체의 발급실적을 관리하기위해 별도의 작업을 수행
<ul>
<li>3개의 ID에 접속하여 20여개 페이지의 표를 복사하고, 중복/심사거절건 제거 등 수작업 가공 진행</li>
</ul></li>
<li>위 2가지 문제를 해결할 방법에 대한 고민 및 해결방안 도출 : 데이터의 통합db화 및 편의기능 추가
<ul>
<li>공용PC를 운영중인 부서로 주기적으로 활동하는 크롤러를 운영하여 db로 저장가능</li>
<li>streamlit을 활용해 db에 대한 검색과 확인 가능한 대시보드형 사이트 제작하여 일반유저도 손쉽게 사용</li>
<li>희망시 심사번호를 streamlit사이트에 등록하여 대응상황 발생시 toast알림이 가도록 제작</li>
<li>축적된 db에서 월 데이터를 추출할 수 있도록 버튼을 누르면 SQL쿼리 후 Excel저장기능 추가</li>
<li>3개의 ID에 대한 접속버튼으로 자동로그인 기능 추가
<ul>
<li>streamlit사이트의 정보관리메뉴에서 접속ID/PW등을 수정하면 공용PC의 json파일을 수정하여 모든유저에게 반영</li>
</ul></li>
</ul></li>
</ul>
<blockquote class="blockquote">
<p><strong>[용어설명]</strong><br> <strong>COO</strong> : 원산지증명서, Country of Origin<br></p>
</blockquote>
</section>
<section id="효과" class="level2">
<h2 class="anchored" data-anchor-id="효과">효과</h2>
<ul>
<li>크롤러, db구축, 관리 및 편의기능을 포함한 대시보드형 사이트 구축으로 기존의 불편사항들을 해결
<ul>
<li>자동로그인, 대응사항 toast알림으로 지속적인 새로고침 등 불필요한 작업제거</li>
<li>월마다 진행되던 불필요한 데이터 가공작업 제거(SQL쿼리 월 조건등은 사용자가 strealit사이트에서 수정 가능)</li>
</ul></li>
<li>기존 발급거절 사유의 db화로 주요 케이스에 대한 분석 및 사전대응계획 수립가능
<ul>
<li>주요 케이스는 사전에 신고한 제품의 단위와 신청시스템 단위의 차이로, 관련 담당자에 개선제언 예정</li>
</ul></li>
</ul>
</section>
<section id="github-repository" class="level2">
<h2 class="anchored" data-anchor-id="github-repository">github repository</h2>
<p><a href="https://github.com/KR9268/-P-MonitoringCOO">관련 github레포</a></p>
</section>
<section id="세부내용-구현내용-사용한-언어패키지-등" class="level2">
<h2 class="anchored" data-anchor-id="세부내용-구현내용-사용한-언어패키지-등">[세부내용] 구현내용 &amp; 사용한 언어/패키지 등</h2>
<ol type="1">
<li>저장할 db는 <code>sqlite3</code>으로 테이블 생성, 컬럼지정 등을 수행함 (컬럼별 조건은 하단 참조)</li>
</ol>
<ul>
<li>접수번호 varchar PRIMARY KEY ,<br> → <strong>대표Invoice와 고민했는데, 100% 유일값이라 Primary로 지정</strong> 증명서종류 varchar, <br> 대표Invoice varchar(10),<br> 접수일시 datetime, <br> 처리상태 varchar, <br> Remark varchar</li>
</ul>
<ol start="2" type="1">
<li>각 기능은 아래의 파일로 나누어 개인/공용PC에서 실행</li>
</ol>
<ul>
<li><strong>MonitoringCOO(기본파일)</strong> : <code>streamlit</code>활용한 UI, json/pickle파일 읽기, 유저의 자동로그인, 월추출 데이터 저장 등
<ul>
<li>마지막 스크레핑 시점을 표기하여 얼마나 최신화된 데이터인지 유저에게 공유</li>
</ul></li>
<li><strong>MonitoringCOO_crawler</strong> : <code>selenium</code>으로 스크레핑, 스크레핑작업에 필요한 로그인 기능(<code>pyautogui</code>, <code>pywin32</code>로 이미지/키/윈도우 인식)
<ul>
<li>유저가 <strong>기본파일</strong>에서 로그인기능을 사용하는 경우, 이 파일에서 import해서 사용하고 <strong>코드는 여기서 통합관리</strong></li>
<li>스크레핑작업은 기본적으로 <strong>Scheduler</strong>파일에서 실행되지만, 필요시 이 파일을 실행하여 수동 스크레핑 (<strong>코드는 여기서 통합관리</strong>)</li>
</ul></li>
<li><strong>MonitoringCOO_push</strong> : <strong>기본파일</strong>에서 유저가 등록해둔 대표Invoice번호를 db에서 조회하여, <code>win11toast</code>로 알림 (처음에는 파이썬과 호환성/속도가 좋은 pickle/list로 관리하고자 했으나, 사용자ID등 추가정보 관리가 필요하여 json/dict로 관리)</li>
<li><strong>Scheduler</strong> : 스크레핑 주기/시간을 관리하는 파일. 주로 공용PC에서 작업 (9~17시 이후엔 데이터변경이 없으므로 이 시간대에만 작동하도록 설정, 서버설정 등을 고려하여 작업주기 반영 예정)</li>
</ul>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>win11toast</category>
  <category>sqlite3</category>
  <category>streamlit</category>
  <category>pandas</category>
  <category>selenium</category>
  <guid>https://kr9268.github.io/posts_miniprojects/sel-py-monitoringCOO-20240220/</guid>
  <pubDate>Tue, 20 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[Python] LocalL/C 관리용 Tool</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts_miniprojects/sel-py-local-20240122/</link>
  <description><![CDATA[ 





<section id="추진배경" class="level2">
<h2 class="anchored" data-anchor-id="추진배경">추진배경</h2>
<ul>
<li>Local L/C 업무에 대해 아래의 문제점을 인식함
<ul>
<li>정보와 기능이 각기 다른 ERP메뉴에 산재되어 <strong>비효율/불편함</strong> 발생
<ul>
<li>주요기능 : L/C수신, L/C등록, 세금계산서 조회, 물품수령증 조회, 은행 네고(제출)</li>
</ul></li>
<li>전자화된 정보임에도 각 서류간에 동일한 항목이 일치되게 기입되어있는지 <strong>눈으로 확인중</strong>
<ul>
<li>예를 들어, 4개의 서류에 24자리의 세금계산서번호가 모두 똑같게 들어있는지 확인 필요</li>
<li>이러한 공통정보 중 하나라도 틀리면 <strong>물품의 대금의 전부를 지급받지 못하므로 중요함</strong></li>
</ul></li>
<li>각 서류와 행위에 대한 <strong>법 조항이 있어 준수해야하나, 모두 인지하고있기 어려움</strong>
<ul>
<li>예를 들어, A서류가 발행되면 몇일 이내에 B서류를 제출해야 함</li>
</ul></li>
</ul></li>
<li>문제점을 해결하기 위해 아래의 방안을 도출함
<ul>
<li>DB활용
<ul>
<li>각 항목을 테이블로 Primary, 공통키를 지정하여 하나의 DB로 통합</li>
<li>DB의 날짜조건과 서류존재여부를 활용해 준수사항에 대해 유저에게 지시</li>
<li>DB의 정보를 대조하여 유저에게 결과를 공유</li>
<li>대시보드용으로 많이 사용하는 streamlit으로 UI제공</li>
</ul></li>
<li>업무자동화
<ul>
<li>DB내용을 기반으로 유저가 직접하던 등록이나 은행제출 자동화기능 수행</li>
</ul></li>
</ul></li>
</ul>
<blockquote class="blockquote">
<p><strong>[용어설명]</strong><br> <strong>L/C</strong> : <strong>물품주문서</strong>이자 <strong>대금청구시 사용될 은행계좌</strong>와 비슷한 역할<br> (Letter of Credit, 신용장)<br> <strong>물품수령증</strong> : 고객이 물건을 정상수령하였다는 서류, 대금청구에 사용할 수 있다<br> <strong>은행네고</strong> : 정상수령했다는 서류 등을 제출하여, 은행에 준비되어있는 물품대금을 받을 수 있다</p>
</blockquote>
</section>
<section id="효과" class="level2">
<h2 class="anchored" data-anchor-id="효과">효과</h2>
<ul>
<li>DB화 및 정보대조를 통한 Human error제거 및 물품대금 전부에 대한 정상 입수</li>
<li>법적 준수사항에 대한 미준수로 인한 여러 Risk제거</li>
<li>유저가 기능별 메뉴를 이동할 필요없이 하나의 통합UI에서 업무를 해결
<ul>
<li>편의기능 추가 : 조치대상 내역을 클립보드로 일괄복사해주는 기능 등</li>
</ul></li>
</ul>
</section>
<section id="github-repository" class="level2">
<h2 class="anchored" data-anchor-id="github-repository">github repository</h2>
<p><a href="https://github.com/KR9268/LocalLC_GUI">관련 github레포</a></p>
</section>
<section id="세부내용-구현내용-사용한-언어패키지-등" class="level2">
<h2 class="anchored" data-anchor-id="세부내용-구현내용-사용한-언어패키지-등">[세부내용] 구현내용 &amp; 사용한 언어/패키지 등</h2>
<ol type="1">
<li>정보가 파편화되어있어 하나의 Tool로써 확인하고 관리하기 위해서 <code>Streamlit</code> 기반으로 만듦</li>
</ol>
<ul>
<li>정보 저장 및 조회
<ul>
<li>내부정보는 ERP에서 가져와서 db에 적재(SAP Scripting활용을 위한 <code>win32com</code> 사용)</li>
<li>외부정보는 xml을 읽어서 Tag로 필요한 정보를 찾아 db에 적재(<code>Beautifulsoup</code>, <code>sqlite3</code> 사용) (외부정보라고는 하나, ERP에 저장되어있는 xml을 불러들여서 사용함)</li>
<li>데이터 저장 및 최초 쿼리는 SQL문으로 가져오나, join등 필요한 사후처리는 <code>pandas</code>를 활용</li>
</ul></li>
</ul>
<ol start="2" type="1">
<li>ERP에 직접 입력하는 등의 수작업을 자동으로 수행</li>
</ol>
<ul>
<li>자동화 기능
<ul>
<li>ERP 수주내역 등록(고정정보는 Master화, 변동정보는 Streamlit 텍스트박스 활용)</li>
<li>준수사항(법령 등)의 자동체크
<ul>
<li>특정 날짜 내에 완료해야한다던가, 일치해야하는 내용 등을 자동으로 검수</li>
<li>Streamlit의 table내 체크박스표기(True,False)를 활용하여 이상여부를 직관적으로 확인 가능</li>
<li>사용자가 어떤 행동을 해야하는지 참고사항란을 통해 지시(연장요청, 수령증발행요청 등)</li>
</ul></li>
<li>보유내역 및 관리대상(작업이 완료되지 않은 건)의 Filter 기능 제공(드롭박스로 선택)</li>
<li>ERP의 ID, PW를 입력해두어 작업 자동화 수행
<ul>
<li>개인PC에서만 사용하는 Tool이며, 표기는 ***과 같이 암호화 표기되어 관리</li>
</ul></li>
</ul></li>
</ul>
<ol start="3" type="1">
<li>설계시 고려사항, 특이사항, 참고사항</li>
</ol>
<ul>
<li>추가/삭제/변경 등 변동될 수 있는 정보는 Hardcoding이 아닌 db형태로 저장
<ul>
<li>오류 등 상황에 대비하여 실행시 기존 db를 복사해두는 로직 구현해두었으나, 자주 실행시 과생성되어 향후 수정 예정</li>
</ul></li>
<li>ERP관련 기능은 SAP메뉴(T-code)기준으로 함수화하여 관리</li>
<li>정보조회 관련 기능은 기능별 dataframe 생성/변환하는 방향으로 함수화하여 관리</li>
<li>ERP제어(SAP Scripting) <strong>주요기능을 구현한 ’NERP_PI_LC’는 자체제작한 것</strong>으로 정리하여 업로드 예정<strong>(pip 미등록)</strong></li>
<li>수익자기준 주요 EDI코드(참고용 기록) : 내국신용장(LOCADV), 물품수령증(LOCRCT)
<ul>
<li>BeautifulSoup를 위해 정리해둔 딕셔너리(locrct_id, locadv_id)는 표준규격일 것으로 예상하여 재사용가능할 것으로 예상</li>
</ul></li>
</ul>
<ol start="4" type="1">
<li>Local L/C에 대한 세부정보 참고가능한 사이트</li>
</ol>
<p><a href="https://ulocallc.utradehub.or.kr/LocalCredit/index.jsp?sso=ok">KTNET - 이용안내 - 상세업무절차</a></p>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>SAP Scripting</category>
  <category>Streamlit</category>
  <category>sqlite3</category>
  <category>BeautifulSoup</category>
  <guid>https://kr9268.github.io/posts_miniprojects/sel-py-local-20240122/</guid>
  <pubDate>Mon, 22 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[Python] 아웃룩 메일열람 &amp; pdf regex리딩 &amp; 시스템 자동등록</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts_miniprojects/sel-py-autoPIforl001-20231215/</link>
  <description><![CDATA[ 





<section id="추진배경" class="level2">
<h2 class="anchored" data-anchor-id="추진배경">추진배경</h2>
<ul>
<li>아래의 문제점/현황에 대해 인식
<ul>
<li>pdf서류(PI)에 시스템 등록에 필요한 주소 등 정보가 늘 빠져있어 별도 테이블을 참고하여 등록</li>
<li>드래그 가능한 pdf를 제공받아 마우스로 일일히 드래그하여 복사/붙여넣기 반복</li>
<li>제공자의 내부규정 문제로 1서류:1메일로 건별 메일로 수령, 많아지면 작업량 증가</li>
<li>향후 분쟁대비를 위해, 주문번호를 파일명으로 하여 별도의 공용폴더에 저장</li>
<li>여러 서류를 등록하다가 교차하여 잘못넣을시, 고객의 수입절차문제나 오배송 등 발생</li>
</ul></li>
<li>위의 문제점/현황으로 수입문제로 인해 고객이 물품을 받지 못할수 있는 상황을 방지하고자 해결방안 마련
<ul>
<li>pdf서류의 regex를 활용한 추출 및 별도 테이블의 정보를 매칭하여 정확도/속도 증가
<ul>
<li>정확도 상승으로 인한 고객의 수입문제, 오배송 문제 등을 미연에 방지</li>
<li>추출된 정보에 대해 검증조건을 부여하여 문제있을시 작업을 멈추고 유저에게 공유
<ul>
<li>한국에서 홍콩으로 수출하지만, 책임 및 보험가입구간이 한국에서 미국으로 작성된 경우 등 논리오류</li>
</ul></li>
</ul></li>
<li>win32로 아웃룩에서 조건부 추출하여 여러 건에도 바로 서류를 추출하도록 설계</li>
<li>추출한 주문번호로 파일명 지정 및 아카이브 자동 저장</li>
</ul></li>
</ul>
<blockquote class="blockquote">
<p><strong>[용어설명]</strong><br> <strong>PI</strong> : 수출납품계약서로 발주자의 양식 등을 사용함, Proforma Invoice<br> <strong>regex</strong> : 정규표현식, 특정한 규칙을 통해 문자를 검색/편집하는데 사용</p>
</blockquote>
</section>
<section id="효과" class="level2">
<h2 class="anchored" data-anchor-id="효과">효과</h2>
<ul>
<li>정확도 향상으로 고객의 수입절차문제나 오배송을 미연에 방지하여 추가비용위험 제거 및 고객만족 제고</li>
<li><code>건별 메일열람 - 논리오류 검증 - 시스템 등록(복사/붙여넣기, 별도테이블 참고) - 파일명 변경 및 저장</code> 등 프로세스 제거 및 유저편의성 증대
<ul>
<li>백그라운드에서 실행되며, 작업이 완료되면 윈도우 toast메시지로 알려 특이사항 발생시 인지 가능</li>
</ul></li>
</ul>
</section>
<section id="github-repository" class="level2">
<h2 class="anchored" data-anchor-id="github-repository">github repository</h2>
<p><a href="https://github.com/KR9268/-P-AutoPIforL001">관련 github레포</a></p>
</section>
<section id="세부내용-구현내용-사용한-언어패키지-등" class="level2">
<h2 class="anchored" data-anchor-id="세부내용-구현내용-사용한-언어패키지-등">[세부내용] 구현내용 &amp; 사용한 언어/패키지 등</h2>
<ol type="1">
<li><code>pywin32</code>로 아웃룩을 제어하여 조건에 맞는 pdf첨부 열람 등 진행<br>
<ul>
<li><code>selenium</code>은 chrome버전변경 등 영향이 커서 구현했다가 미사용</li>
</ul></li>
<li><code>xlwings</code>로 Excel로 저장해둔 별도 참고용 테이블을 열람
<ul>
<li>DRM암호화와 관계없이 파일을 읽을 수 있기 때문에 <code>xlwings</code>를 채택</li>
</ul></li>
<li><code>re</code>로 pdf의 문자열을 검색하여 필요한 내용을 저장</li>
<li><code>NERP_PI_LC</code>(주요 ERP관련 기능에 대해 제작한 파이썬 패키지)으로 시스템 등록 등을 진행</li>
<li><code>win11toast</code>로 모든 작업이 완료되면 알림</li>
<li>[삭제기능] <code>selenium</code>으로 PI제공자에게 자동회신도 했었으나, chrome업데이트 등 안정성 문제로 제외
<ul>
<li>아웃룩 등 smtp발송은 내부규정상 막혀있어 사용하지 않음</li>
</ul></li>
</ol>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>re</category>
  <category>xlwings</category>
  <category>pandas</category>
  <category>pdfminer</category>
  <guid>https://kr9268.github.io/posts_miniprojects/sel-py-autoPIforl001-20231215/</guid>
  <pubDate>Fri, 15 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[Python] Peak타임 대응용 수출계약서pdf tabula리딩</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts_miniprojects/sel-py-readPIAR-20231102/</link>
  <description><![CDATA[ 





<section id="추진배경" class="level2">
<h2 class="anchored" data-anchor-id="추진배경">추진배경</h2>
<ul>
<li>50~120건의 pdf서류를 아침제공 후 오전 내 입력하도록 요청받아 다른 업무가 불가능할 정도의 피크타임 발생
<ul>
<li>서류제공은 해외의 시차, 고객의 주문시점으로 인해 아침에 제공</li>
<li>생산을 하기위한 공장또한 다른 국가에 있고, 생산계획 마감시간 문제</li>
<li>각자의 이유(고객이 다양해 시점을 조정하기 어려움, 생산투입자원 조정을 위한 마감시간의 존재)로 조정 어려움</li>
</ul></li>
<li>문제 개선을 위해 아래의 포인트를 확인하였음
<ul>
<li>제공되는 pdf서류는 모두 1장의 동일한 양식이며, 드래그가 가능한 형태
<ul>
<li>드래그가 가능하다면 컴퓨터가 인식하는데도 무리가 없을테니 자동화 도입이 가능할 것이라는 판단</li>
</ul></li>
<li>입력작업은 엑셀VBA를 활용한 자동화Tool이 개발되어있음</li>
<li>시스템 글자수 제한으로 주문번호를 축약하는 별도작업 수행</li>
<li>주문번호별로 지불조건 등이 내부시스템의 코드로 매칭되어있는 별도의 관리시스템이 있음</li>
</ul></li>
<li>확인한 사항을 바탕으로 아래의 개선을 수행
<ul>
<li>관리시스템에 이미 있는 정확도가 높은 정보를 main으로 가져옴</li>
<li>시스템에서 확인할 수 없는 pdf의 정보들을 크롤링하여 필요한 정보만 식별</li>
<li>이미 개발되어있는 자동화입력Tool(엑셀VBA)에 연계가능한 형태로 데이터 가공</li>
</ul></li>
</ul>
</section>
<section id="효과" class="level2">
<h2 class="anchored" data-anchor-id="효과">효과</h2>
<ul>
<li>고객의 주문을 당기거나, 생산계획마감이 지연되거나, 담당자의 과도한 업무가중이 발생하지 않고 문제해결</li>
<li>이미 개발된 자원(엑셀VBA)에 연동하여 큰 시간을 들이지 않고 개발했으며 업무 투입시간 또한 감소
<ul>
<li>기존에는 4시간 이내의 투입시간이 있었지만, 이번 도입으로 5~10분 정도로 작업이 완료됨</li>
<li>기존대비 빠른 완수로 생산담당자 만족, 생산계획이 미뤄지지 않아 납기 등 제품수령 고객도 만족</li>
</ul></li>
</ul>
</section>
<section id="github-repository" class="level2">
<h2 class="anchored" data-anchor-id="github-repository">github repository</h2>
<p><a href="https://github.com/KR9268/-P-Read_PI_AR_only">관련 github레포</a></p>
</section>
<section id="세부내용-구현내용-사용한-언어패키지-등" class="level2">
<h2 class="anchored" data-anchor-id="세부내용-구현내용-사용한-언어패키지-등">[세부내용] 구현내용 &amp; 사용한 언어/패키지 등</h2>
<ol type="1">
<li><code>json</code>으로 파일을 저장할 경로정보 및 변환할 코드정보를 관리</li>
<li><code>xlwings</code>로 Excel로 저장해둔 기본정보를 열람
<ul>
<li>DRM암호화와 관계없이 파일을 읽을 수 있기 때문에 <code>xlwings</code>를 채택</li>
</ul></li>
<li><code>tabula</code>로 pdf를 표 형태로 읽어, 지정된 자리의 정보를 읽고 json형태로 저장</li>
<li>json형태로 저장된 정보를 <code>pandas</code> DataFrame으로 concat처리 후 저장</li>
<li>시스템 등록을 위해 사용중인 별도의 VBA Tool에 저장된 Excel을 넘기면 업무 완료</li>
</ol>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>tabula</category>
  <category>xlwings</category>
  <category>pathlib</category>
  <category>pandas</category>
  <guid>https://kr9268.github.io/posts_miniprojects/sel-py-readPIAR-20231102/</guid>
  <pubDate>Thu, 02 Nov 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
