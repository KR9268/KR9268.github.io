<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Blog</title>
<link>https://kr9268.github.io/index_miniprojects.html</link>
<atom:link href="https://kr9268.github.io/index_miniprojects.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.555</generator>
<lastBuildDate>Mon, 10 Jun 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>[Python] Github, API활용한 공공데이터 저장소 만들기</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts_miniprojects/dtcontest-ore-py-datagokr/</link>
  <description><![CDATA[ 





<section id="추진배경" class="level2">
<h2 class="anchored" data-anchor-id="추진배경">추진배경</h2>
<ul>
<li>본격적으로 모델 학습을 하기 전, 데이터 이용 편의를 증진하고자 함</li>
<li>팀원들이 R이나 통계분석에는 익숙하나 파이썬 코딩에는 익숙하지않아, 최대한 모델링에 집중하도록 지원
<ul>
<li>하나의 repository에서 원하는 데이터를 한번에 확인 가능</li>
<li>repository에서 바로 복사해서 사용가능한 샘플을 제공하여 쉽게 데이터로딩 가능</li>
</ul></li>
<li>데이터를 하나의 페이지에서 통합관리(공공데이터 홈페이지 접속 등 불필요)
<ul>
<li>업데이트 일자를 표기하여 얼마나 최신 데이터인지 확인 가능</li>
<li>추가하고자 하는 데이터가 공공데이터포털의 데이터라면 쉽게 작업내역에 추가가능 (리스트 추가권한을 주거나, discord봇 접수 등 생각해보았으나 구현시간대비 효용이 작아 직접 추가진행)</li>
</ul></li>
<li>개인서버(NAS)에서 매일 특정시간 구동하여, github서버로 자동 push(업로드)하여 별도의 수작업없이 db 최신화</li>
</ul>
</section>
<section id="효과" class="level2">
<h2 class="anchored" data-anchor-id="효과">효과</h2>
<ul>
<li>특정 공공데이터 포털의 데이터를 사용하기 위해 했던 아래의 작업이 제거됨
<ul>
<li>공공데이터포털에 접속하여 csv파일 저장</li>
<li>저장해둔 csv파일 찾기</li>
<li>해당 파일을 분석했던 jupyter파일로 찾아가 API호출주소나 키를 찾기</li>
<li>csv파일을 저장한 뒤 추가 업데이트가 되었는지 확인하고 재다운로드</li>
<li>한국어 데이터 로딩을 위한 encoding규격 등의 숙지가 필요없음 (저장시 규격을 지정하고, 로딩을 위한 샘플코드에 규격을 지정해둠)</li>
</ul></li>
<li>위의 사항을 달성하기 위한 부가작업이 제거됨
<ul>
<li>csv파일 저장 및 업데이트 시기 기록, 서버에 업로드 및 파일주소 저장</li>
</ul></li>
</ul>
</section>
<section id="github-repository" class="level2">
<h2 class="anchored" data-anchor-id="github-repository">github repository</h2>
<p><a href="https://github.com/KR9268/db_datagokr">관련 github레포</a></p>
<ul>
<li>API개인키 등 정보가 있어 레포에는 csv파일과 현황만 저장함<br> (구현을 위해 필요한 db_list나 개인키 등의 json파일은 모두 ignore리스트로 관리)</li>
<li>git clone해둔 개인서버 디렉토리에서 자동 실행</li>
</ul>
</section>
<section id="세부내용-구현내용-사용한-언어패키지-등" class="level2">
<h2 class="anchored" data-anchor-id="세부내용-구현내용-사용한-언어패키지-등">[세부내용] 구현내용 &amp; 사용한 언어/패키지 등</h2>
<ol type="1">
<li>json_load(<code>json</code>) : 개인키와 db_list 로딩을 위한 함수. 어려운 기능은 아니지만 여러번 쓰여 함수화 <br></li>
<li>download_from_data_go_kr_with_json(<code>requests</code>, <code>json</code>) : 공공데이터포털 API호출용 (실제 자료 + 전체/다운 현황 등 수신)<br></li>
<li>chk_json_status_of_data_go_kr : 전체/실제 건수 등 별도 처리용(대조하여 누락없이 전체자료 저장하기 위함)<br></li>
<li>update_readme : README파일에 파일 현황(데이터명/주소/링크 등) 업데이트용<br></li>
<li>git_push(<code>subprocess</code>) : 새롭게 추가된 모든사항(ignore대상 제외)을 자동으로 업로드(auto commit)하기 위한 용도<br></li>
<li>위의 함수들을 기반으로 아래의 내용을 구현<br></li>
</ol>
<ul>
<li>json으로 민감정보 등을 코드에 표기하지 않고 별도관리 (+ gitignore로 이중보안)<br></li>
<li>1건만 먼저 호출하여 전체건수를 확인 후, 한번에 전체 건을 호출 (10000건 지정 등 과도한 세팅값의 하드코딩 지양)<br></li>
<li><code>pandas</code>로 encoding cp949 지정하여 csv로 저장<br></li>
<li>github raw링크형식을 활용하여 바로 파일로딩할 수 있도록 주소 생성(db에서 아래 형식으로 지정해둔 파일명 사용)<br></li>
</ul>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb1-1"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb1-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"공공데이터포털의 데이터명"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"base_url"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"API Base Url"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"address_get"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"해당 데이터의 API주소(API목록 란에서 확인)"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-6">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"file_name_to"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CSV로 저장할 파일명(.csv제외)"</span></span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"공공데이터포털의 데이터명2"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-10">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"base_url"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"API Base Url"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-11">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"address_get"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"해당 데이터의 API주소(API목록 란에서 확인)"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb1-12">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"file_name_to"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CSV로 저장할 파일명(.csv제외)"</span></span>
<span id="cb1-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-14"><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<ul>
<li>time.sleep()으로 너무 자주 호출하여 서버에 무리가지 않도록 세팅</li>
</ul>
</section>
<section id="샘플코드패키지-및-함수" class="level2">
<h2 class="anchored" data-anchor-id="샘플코드패키지-및-함수">샘플코드(패키지 및 함수)</h2>
<div id="4fe3ff16" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> subprocess</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> json_load(json_path, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>):</span>
<span id="cb2-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(json_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>encoding) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb2-11">        json_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.load(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb2-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> json_data</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> request_and_to_json(url):</span>
<span id="cb2-15">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url)</span>
<span id="cb2-16">    json_ob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.loads(response.text)</span>
<span id="cb2-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> json_ob</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> chk_json_status_of_data_go_kr(json_obj):</span>
<span id="cb2-20">    other_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'currentCount'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'matchCount'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'page'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'perPage'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'totalCount'</span>]</span>
<span id="cb2-21">    result_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb2-22">    </span>
<span id="cb2-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> each_column <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> other_data:</span>
<span id="cb2-24">        result_dict[each_column] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json_obj[each_column]  </span>
<span id="cb2-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result_dict </span>
<span id="cb2-26"></span>
<span id="cb2-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> download_from_data_go_kr_with_json(url):</span>
<span id="cb2-28">    json_ob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request_and_to_json(url)</span>
<span id="cb2-29"></span>
<span id="cb2-30">    json_status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chk_json_status_of_data_go_kr(json_ob)</span>
<span id="cb2-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> json_status[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'currentCount'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> json_status[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'totalCount'</span>]:</span>
<span id="cb2-32">        url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> url.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'perPage=1'</span>,<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'perPage=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>json_status[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"totalCount"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-33">        json_ob <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> request_and_to_json(url)</span>
<span id="cb2-34"></span>
<span id="cb2-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> json_ob</span>
<span id="cb2-36"></span>
<span id="cb2-37"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update_readme(new_content_list):</span>
<span id="cb2-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the README.md file in read mode</span></span>
<span id="cb2-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'README.md'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb2-40">        lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.readlines()</span>
<span id="cb2-41"></span>
<span id="cb2-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find the index of the line that starts with '* 데이터 현황'</span></span>
<span id="cb2-43">    index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>((i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(lines) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> line.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'* 데이터 현황'</span>)), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb2-44"></span>
<span id="cb2-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the line is found, remove the following lines and insert new content</span></span>
<span id="cb2-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> index <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-47">        lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lines[:index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the following lines</span></span>
<span id="cb2-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#lines.extend(new_content) # Insert new content</span></span>
<span id="cb2-49">        lines.extend(new_content_list) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Insert new content</span></span>
<span id="cb2-50"></span>
<span id="cb2-51">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the README.md file in write mode and write the updated content</span></span>
<span id="cb2-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'README.md'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>, encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb2-53">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.writelines(lines)</span>
<span id="cb2-54"></span>
<span id="cb2-55"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> git_push():</span>
<span id="cb2-56">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of all .csv files in the current directory</span></span>
<span id="cb2-57">    csv_files <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [f <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> os.listdir(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> f.endswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.csv'</span>)]</span>
<span id="cb2-58"></span>
<span id="cb2-59">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stage all .csv files</span></span>
<span id="cb2-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> csv_files:</span>
<span id="cb2-61">        subprocess.call([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'git'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add'</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>])</span>
<span id="cb2-62"></span>
<span id="cb2-63">    subprocess.call([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'git'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'add'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'README.md'</span>])</span>
<span id="cb2-64">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Commit the changes with a message</span></span>
<span id="cb2-65">    subprocess.call([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'git'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'commit'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-m'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Automatic commit'</span>])</span>
<span id="cb2-66"></span>
<span id="cb2-67">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Push the changes to the remote repository</span></span>
<span id="cb2-68">    subprocess.call([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'git'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'push'</span>])</span></code></pre></div>
</div>
</section>
<section id="샘플코드패키지-및-함수-1" class="level2">
<h2 class="anchored" data-anchor-id="샘플코드패키지-및-함수-1">샘플코드(패키지 및 함수)</h2>
<div id="fea59f9f" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># json load</span></span>
<span id="cb3-2">serviceKey <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json_load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'option.json'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'serviceKey'</span>]</span>
<span id="cb3-3">db_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json_load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'db_list.json'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cp949'</span>)</span></code></pre></div>
</div>
<div id="1fc24083" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># main</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 작업하기</span></span>
<span id="cb4-4">txt_for_readme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>]</span>
<span id="cb4-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> each <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> db_list:</span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 다운로드</span></span>
<span id="cb4-7">    url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'base_url'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}{</span>each[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'address_get'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">?page=1&amp;perPage=1&amp;serviceKey=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>serviceKey<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-8">    json_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> download_from_data_go_kr_with_json(url)</span>
<span id="cb4-9">    result_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chk_json_status_of_data_go_kr(json_data)</span>
<span id="cb4-10">    </span>
<span id="cb4-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 저장</span></span>
<span id="cb4-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> result_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'currentCount'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> result_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'totalCount'</span>]:</span>
<span id="cb4-13">        pd.json_normalize(json_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>]).to_csv(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file_name_to'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.csv"</span>,encoding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cp949'</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb4-14"></span>
<span id="cb4-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 파일주소 및 이름, 업데이트시간 저장</span></span>
<span id="cb4-16">    owner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KR9268'</span></span>
<span id="cb4-17">    repo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'db_datagokr'</span></span>
<span id="cb4-18">    branch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'main'</span></span>
<span id="cb4-19">    file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'file_name_to'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.csv"</span></span>
<span id="cb4-20"></span>
<span id="cb4-21">    url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"https://raw.githubusercontent.com/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>owner<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>repo<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>branch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>file_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-22"></span>
<span id="cb4-23">    txt_for_readme.append(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"  *  </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>datetime<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>strftime(datetime.now(),<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">업데이트 : </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>each[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>url<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-24">    time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-25"></span>
<span id="cb4-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 업데이트 내역과 파일 git push</span></span>
<span id="cb4-27">update_readme(txt_for_readme)</span>
<span id="cb4-28">git_push()</span></code></pre></div>
</div>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>requests</category>
  <category>json</category>
  <category>subprocess</category>
  <category>pandas</category>
  <guid>https://kr9268.github.io/posts_miniprojects/dtcontest-ore-py-datagokr/</guid>
  <pubDate>Mon, 10 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[Python] ERP(SAP) 특정 메뉴의 주요정보 크롤링 &amp; 정리 Tool</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts_miniprojects/sel-py-crawl_sr-20240306/</link>
  <description><![CDATA[ 





<section id="추진배경" class="level2">
<h2 class="anchored" data-anchor-id="추진배경">추진배경</h2>
<ul>
<li>사용빈도가 높은 정보가 여러 탭에 나뉘어 있고, 이러한 정보들을 주문(SR)별로 각각 조회하는 불편함이 있음</li>
<li>유저 화면에서 보여줄 수 있는 행(row)이 4줄로 적고, 필요한 정보를 각각 복사하여 정리하는 불편함이 있음
<ul>
<li>한번에 많은 물품이 포함된 경우, 수십건의 같거나 다른 HSCODE들을 하나의 줄 글로 정리함</li>
<li>출발지와 도착지, 제품의 품명 등을 요약하여 요구받는 경우 작업시간이 소요됨</li>
</ul></li>
<li>각 탭 정보를 일괄 크롤링하고, 필요할 때 별도의 가공/복사작업 없이 바로 사용가능한 정보로 제공하도록 함
<ul>
<li>확인가능한 정보 : Sales Org, Plant(Code,Name), POL(출발지), POD(도착지), HSCODE, Description(물품명세)</li>
</ul></li>
</ul>
<blockquote class="blockquote">
<p><strong>[용어설명]</strong><br> <strong>SR</strong> : 하나의 기본 선적 단위, Shipping request<br> <strong>HSCODE</strong> : 해외로 물건을 보내기 위해 수출신고할 때, (의약품, 전자기기 등)물품 종류를 알 수 있는 제품 코드<br></p>
</blockquote>
</section>
<section id="효과" class="level2">
<h2 class="anchored" data-anchor-id="효과">효과</h2>
<ul>
<li>단건 또는 여러건의 주문(SR)에 대해 건당 1~2초 이내로 필요한 정보 수집</li>
<li>클립보드 복사가 가능한 텍스트, 엑셀형태로 제공하여 요구사항에 대해 즉시대응 가능</li>
</ul>
</section>
<section id="github-repository" class="level2">
<h2 class="anchored" data-anchor-id="github-repository">github repository</h2>
<p><a href="https://github.com/KR9268/-P-Crawl_data_from_SRDisplay">관련 github레포</a></p>
</section>
<section id="세부내용-구현내용-사용한-언어패키지-등" class="level2">
<h2 class="anchored" data-anchor-id="세부내용-구현내용-사용한-언어패키지-등">[세부내용] 구현내용 &amp; 사용한 언어/패키지 등</h2>
<ol type="1">
<li>단건 확인시, 코드셀에 붙여넣기 후 실행, 텍스트로 출력하며 <code>pandas</code> dataframe으로도 저장하여 필요시 엑셀도 제공</li>
<li>여러건 확인시, 엑셀 등에서 복사한 표를 코드셀에 바로 붙여넣도록 설계(자동 분할, <strong>편의성 고려</strong>함) 이후 작업은 단건 확인과 동일</li>
<li>필요시 엑셀로 저장 (<strong>기존 업무유형상 출력텍스트가 더 많이 활용될 것으로 보여 별도 기능으로 추가함</strong>)</li>
</ol>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>SAP Scripting</category>
  <guid>https://kr9268.github.io/posts_miniprojects/sel-py-crawl_sr-20240306/</guid>
  <pubDate>Wed, 06 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[Python] COO발급관리용 Tool</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts_miniprojects/sel-py-monitoringCOO-20240220/</link>
  <description><![CDATA[ 





<section id="추진배경" class="level2">
<h2 class="anchored" data-anchor-id="추진배경">추진배경</h2>
<ul>
<li>부서원 모두의 공통 업무이며, 여러가지 불편사항이 존재하나 자동화방안에 대한 기존 고민X
<ul>
<li>필요에 의해 ID가 3개로 나뉘어있으며, 공동인증서 활용으로 타이핑작업 및 ID/PW/공동인증서PW의 관리 및 입력 불편함</li>
<li>여러 건의 COO를 발급하고 대응하지만, 각 업무는 COO 1건별로 메뉴에 진입하여 수행해야함
<ul>
<li>심사완료여부, 발급거절시 사유확인, 출력 및 사본 저장 등</li>
</ul></li>
</ul></li>
<li>발급실적 담당자는 월마다 부서 전체의 발급실적을 관리하기위해 별도의 작업을 수행
<ul>
<li>3개의 ID에 접속하여 20여개 페이지의 표를 복사하고, 중복/심사거절건 제거 등 수작업 가공 진행</li>
</ul></li>
<li>위 2가지 문제를 해결할 방법에 대한 고민 및 해결방안 도출 : 데이터의 통합db화 및 편의기능 추가
<ul>
<li>공용PC를 운영중인 부서로 주기적으로 활동하는 크롤러를 운영하여 db로 저장가능</li>
<li>streamlit을 활용해 db에 대한 검색과 확인 가능한 대시보드형 사이트 제작하여 일반유저도 손쉽게 사용</li>
<li>희망시 심사번호를 streamlit사이트에 등록하여 대응상황 발생시 toast알림이 가도록 제작</li>
<li>축적된 db에서 월 데이터를 추출할 수 있도록 버튼을 누르면 SQL쿼리 후 Excel저장기능 추가</li>
<li>3개의 ID에 대한 접속버튼으로 자동로그인 기능 추가
<ul>
<li>streamlit사이트의 정보관리메뉴에서 접속ID/PW등을 수정하면 공용PC의 json파일을 수정하여 모든유저에게 반영</li>
</ul></li>
</ul></li>
</ul>
<blockquote class="blockquote">
<p><strong>[용어설명]</strong><br> <strong>COO</strong> : 원산지증명서, Country of Origin<br></p>
</blockquote>
</section>
<section id="효과" class="level2">
<h2 class="anchored" data-anchor-id="효과">효과</h2>
<ul>
<li>크롤러, db구축, 관리 및 편의기능을 포함한 대시보드형 사이트 구축으로 기존의 불편사항들을 해결
<ul>
<li>자동로그인, 대응사항 toast알림으로 지속적인 새로고침 등 불필요한 작업제거</li>
<li>월마다 진행되던 불필요한 데이터 가공작업 제거(SQL쿼리 월 조건등은 사용자가 strealit사이트에서 수정 가능)</li>
</ul></li>
<li>기존 발급거절 사유의 db화로 주요 케이스에 대한 분석 및 사전대응계획 수립가능
<ul>
<li>주요 케이스는 사전에 신고한 제품의 단위와 신청시스템 단위의 차이로, 관련 담당자에 개선제언 예정</li>
</ul></li>
</ul>
</section>
<section id="github-repository" class="level2">
<h2 class="anchored" data-anchor-id="github-repository">github repository</h2>
<p><a href="https://github.com/KR9268/-P-MonitoringCOO">관련 github레포</a></p>
</section>
<section id="세부내용-구현내용-사용한-언어패키지-등" class="level2">
<h2 class="anchored" data-anchor-id="세부내용-구현내용-사용한-언어패키지-등">[세부내용] 구현내용 &amp; 사용한 언어/패키지 등</h2>
<ol type="1">
<li>저장할 db는 <code>sqlite3</code>으로 테이블 생성, 컬럼지정 등을 수행함 (컬럼별 조건은 하단 참조)</li>
</ol>
<ul>
<li>접수번호 varchar PRIMARY KEY ,<br> → <strong>대표Invoice와 고민했는데, 100% 유일값이라 Primary로 지정</strong> 증명서종류 varchar, <br> 대표Invoice varchar(10),<br> 접수일시 datetime, <br> 처리상태 varchar, <br> Remark varchar</li>
</ul>
<ol start="2" type="1">
<li>각 기능은 아래의 파일로 나누어 개인/공용PC에서 실행</li>
</ol>
<ul>
<li><strong>MonitoringCOO(기본파일)</strong> : <code>streamlit</code>활용한 UI, json/pickle파일 읽기, 유저의 자동로그인, 월추출 데이터 저장 등
<ul>
<li>마지막 스크레핑 시점을 표기하여 얼마나 최신화된 데이터인지 유저에게 공유</li>
</ul></li>
<li><strong>MonitoringCOO_crawler</strong> : <code>selenium</code>으로 스크레핑, 스크레핑작업에 필요한 로그인 기능(<code>pyautogui</code>, <code>pywin32</code>로 이미지/키/윈도우 인식)
<ul>
<li>유저가 <strong>기본파일</strong>에서 로그인기능을 사용하는 경우, 이 파일에서 import해서 사용하고 <strong>코드는 여기서 통합관리</strong></li>
<li>스크레핑작업은 기본적으로 <strong>Scheduler</strong>파일에서 실행되지만, 필요시 이 파일을 실행하여 수동 스크레핑 (<strong>코드는 여기서 통합관리</strong>)</li>
</ul></li>
<li><strong>MonitoringCOO_push</strong> : <strong>기본파일</strong>에서 유저가 등록해둔 대표Invoice번호를 db에서 조회하여, <code>win11toast</code>로 알림 (처음에는 파이썬과 호환성/속도가 좋은 pickle/list로 관리하고자 했으나, 사용자ID등 추가정보 관리가 필요하여 json/dict로 관리)</li>
<li><strong>Scheduler</strong> : 스크레핑 주기/시간을 관리하는 파일. 주로 공용PC에서 작업 (9~17시 이후엔 데이터변경이 없으므로 이 시간대에만 작동하도록 설정, 서버설정 등을 고려하여 작업주기 반영 예정)</li>
</ul>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>win11toast</category>
  <category>sqlite3</category>
  <category>streamlit</category>
  <category>pandas</category>
  <category>selenium</category>
  <guid>https://kr9268.github.io/posts_miniprojects/sel-py-monitoringCOO-20240220/</guid>
  <pubDate>Tue, 20 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[Python] LocalL/C 관리용 Tool</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts_miniprojects/sel-py-local-20240122/</link>
  <description><![CDATA[ 





<section id="추진배경" class="level2">
<h2 class="anchored" data-anchor-id="추진배경">추진배경</h2>
<ul>
<li>Local L/C 업무에 대해 아래의 문제점을 인식함
<ul>
<li>정보와 기능이 각기 다른 ERP메뉴에 산재되어 <strong>비효율/불편함</strong> 발생
<ul>
<li>주요기능 : L/C수신, L/C등록, 세금계산서 조회, 물품수령증 조회, 은행 네고(제출)</li>
</ul></li>
<li>전자화된 정보임에도 각 서류간에 동일한 항목이 일치되게 기입되어있는지 <strong>눈으로 확인중</strong>
<ul>
<li>예를 들어, 4개의 서류에 24자리의 세금계산서번호가 모두 똑같게 들어있는지 확인 필요</li>
<li>이러한 공통정보 중 하나라도 틀리면 <strong>물품의 대금의 전부를 지급받지 못하므로 중요함</strong></li>
</ul></li>
<li>각 서류와 행위에 대한 <strong>법 조항이 있어 준수해야하나, 모두 인지하고있기 어려움</strong>
<ul>
<li>예를 들어, A서류가 발행되면 몇일 이내에 B서류를 제출해야 함</li>
</ul></li>
</ul></li>
<li>문제점을 해결하기 위해 아래의 방안을 도출함
<ul>
<li>DB활용
<ul>
<li>각 항목을 테이블로 Primary, 공통키를 지정하여 하나의 DB로 통합</li>
<li>DB의 날짜조건과 서류존재여부를 활용해 준수사항에 대해 유저에게 지시</li>
<li>DB의 정보를 대조하여 유저에게 결과를 공유</li>
<li>대시보드용으로 많이 사용하는 streamlit으로 UI제공</li>
</ul></li>
<li>업무자동화
<ul>
<li>DB내용을 기반으로 유저가 직접하던 등록이나 은행제출 자동화기능 수행</li>
</ul></li>
</ul></li>
</ul>
<blockquote class="blockquote">
<p><strong>[용어설명]</strong><br> <strong>L/C</strong> : <strong>물품주문서</strong>이자 <strong>대금청구시 사용될 은행계좌</strong>와 비슷한 역할<br> (Letter of Credit, 신용장)<br> <strong>물품수령증</strong> : 고객이 물건을 정상수령하였다는 서류, 대금청구에 사용할 수 있다<br> <strong>은행네고</strong> : 정상수령했다는 서류 등을 제출하여, 은행에 준비되어있는 물품대금을 받을 수 있다</p>
</blockquote>
</section>
<section id="효과" class="level2">
<h2 class="anchored" data-anchor-id="효과">효과</h2>
<ul>
<li>DB화 및 정보대조를 통한 Human error제거 및 물품대금 전부에 대한 정상 입수</li>
<li>법적 준수사항에 대한 미준수로 인한 여러 Risk제거</li>
<li>유저가 기능별 메뉴를 이동할 필요없이 하나의 통합UI에서 업무를 해결
<ul>
<li>편의기능 추가 : 조치대상 내역을 클립보드로 일괄복사해주는 기능 등</li>
</ul></li>
</ul>
</section>
<section id="github-repository" class="level2">
<h2 class="anchored" data-anchor-id="github-repository">github repository</h2>
<p><a href="https://github.com/KR9268/LocalLC_GUI">관련 github레포</a></p>
</section>
<section id="세부내용-구현내용-사용한-언어패키지-등" class="level2">
<h2 class="anchored" data-anchor-id="세부내용-구현내용-사용한-언어패키지-등">[세부내용] 구현내용 &amp; 사용한 언어/패키지 등</h2>
<ol type="1">
<li>정보가 파편화되어있어 하나의 Tool로써 확인하고 관리하기 위해서 <code>Streamlit</code> 기반으로 만듦</li>
</ol>
<ul>
<li>정보 저장 및 조회
<ul>
<li>내부정보는 ERP에서 가져와서 db에 적재(SAP Scripting활용을 위한 <code>win32com</code> 사용)</li>
<li>외부정보는 xml을 읽어서 Tag로 필요한 정보를 찾아 db에 적재(<code>Beautifulsoup</code>, <code>sqlite3</code> 사용) (외부정보라고는 하나, ERP에 저장되어있는 xml을 불러들여서 사용함)</li>
<li>데이터 저장 및 최초 쿼리는 SQL문으로 가져오나, join등 필요한 사후처리는 <code>pandas</code>를 활용</li>
</ul></li>
</ul>
<ol start="2" type="1">
<li>ERP에 직접 입력하는 등의 수작업을 자동으로 수행</li>
</ol>
<ul>
<li>자동화 기능
<ul>
<li>ERP 수주내역 등록(고정정보는 Master화, 변동정보는 Streamlit 텍스트박스 활용)</li>
<li>준수사항(법령 등)의 자동체크
<ul>
<li>특정 날짜 내에 완료해야한다던가, 일치해야하는 내용 등을 자동으로 검수</li>
<li>Streamlit의 table내 체크박스표기(True,False)를 활용하여 이상여부를 직관적으로 확인 가능</li>
<li>사용자가 어떤 행동을 해야하는지 참고사항란을 통해 지시(연장요청, 수령증발행요청 등)</li>
</ul></li>
<li>보유내역 및 관리대상(작업이 완료되지 않은 건)의 Filter 기능 제공(드롭박스로 선택)</li>
<li>ERP의 ID, PW를 입력해두어 작업 자동화 수행
<ul>
<li>개인PC에서만 사용하는 Tool이며, 표기는 ***과 같이 암호화 표기되어 관리</li>
</ul></li>
</ul></li>
</ul>
<ol start="3" type="1">
<li>설계시 고려사항, 특이사항, 참고사항</li>
</ol>
<ul>
<li>추가/삭제/변경 등 변동될 수 있는 정보는 Hardcoding이 아닌 db형태로 저장
<ul>
<li>오류 등 상황에 대비하여 실행시 기존 db를 복사해두는 로직 구현해두었으나, 자주 실행시 과생성되어 향후 수정 예정</li>
</ul></li>
<li>ERP관련 기능은 SAP메뉴(T-code)기준으로 함수화하여 관리</li>
<li>정보조회 관련 기능은 기능별 dataframe 생성/변환하는 방향으로 함수화하여 관리</li>
<li>ERP제어(SAP Scripting) <strong>주요기능을 구현한 ’NERP_PI_LC’는 자체제작한 것</strong>으로 정리하여 업로드 예정<strong>(pip 미등록)</strong></li>
<li>수익자기준 주요 EDI코드(참고용 기록) : 내국신용장(LOCADV), 물품수령증(LOCRCT)
<ul>
<li>BeautifulSoup를 위해 정리해둔 딕셔너리(locrct_id, locadv_id)는 표준규격일 것으로 예상하여 재사용가능할 것으로 예상</li>
</ul></li>
</ul>
<ol start="4" type="1">
<li>Local L/C에 대한 세부정보 참고가능한 사이트</li>
</ol>
<p><a href="https://ulocallc.utradehub.or.kr/LocalCredit/index.jsp?sso=ok">KTNET - 이용안내 - 상세업무절차</a></p>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>SAP Scripting</category>
  <category>Streamlit</category>
  <category>sqlite3</category>
  <category>BeautifulSoup</category>
  <guid>https://kr9268.github.io/posts_miniprojects/sel-py-local-20240122/</guid>
  <pubDate>Mon, 22 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[Python] 아웃룩 메일열람 &amp; pdf regex리딩 &amp; 시스템 자동등록</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts_miniprojects/sel-py-autoPIforl001-20231215/</link>
  <description><![CDATA[ 





<section id="추진배경" class="level2">
<h2 class="anchored" data-anchor-id="추진배경">추진배경</h2>
<ul>
<li>제공받는 PI서류에, 시스템 등록에 필요한 일부가 늘 빠져있으며 별도 테이블을 참고하여 대응중</li>
<li>기계가 인식할 수 있는 pdf로 제공되고 있으나, 마우스로 드래그하여 복사/붙여넣기를 반복</li>
<li>제공하는 담당자의 내부규정때문에, 1메일:1파일로 나누어 여러 건을 별도메일로 제공중</li>
<li>향후 분쟁대비, 또는 법적인 사유로 pdf의 이름을 변경하여 별도로 저장하는 작업중</li>
<li>납품(수출)시 사용될 중요한 정보로 사용되며, 오류발생시 다른 국가로의 오배송, 수입절차 문제 등 발생</li>
<li><strong>각 포인트에 대응할 수 있도록 아래의 형태로 개발 추진</strong>
<ul>
<li>아웃룩으로 수신된 메일의 첨부를 열어 필요한 각 항목을 regex로 리딩</li>
<li>리딩된 정보 중 최소 확인사항을 코드가 검증 ex) 한국 수출인데 홍콩물품에 대해 보험을 드는 등 논리오류 검증</li>
<li>시스템 등록 후 파일명 변경 및 아카이브에 자동 저장</li>
<li>백그라운드에서 실행되며, 작업이 완료되면 윈도우 toast메시지로 알림</li>
</ul></li>
</ul>
<blockquote class="blockquote">
<p><strong>[용어설명]</strong><br> <strong>PI</strong> : 수출납품계약서로 발주자의 양식 등을 사용함, Proforma Invoice<br> <strong>regex</strong> : 정규표현식, 특정한 규칙을 통해 문자를 검색/편집하는데 사용</p>
</blockquote>
</section>
<section id="효과" class="level2">
<h2 class="anchored" data-anchor-id="효과">효과</h2>
<ul>
<li><code>건별 메일열람 - 논리오류 검증 - 시스템 등록(복사/붙여넣기, 별도테이블 참고) - 파일명 변경 및 저장</code> 등 프로세스 제거</li>
<li>Human error 제거로 인한 다른 국가로의 오배송(재운송에 필요한 각종 비용), 수입절차(법적이슈) 등 문제예방</li>
</ul>
</section>
<section id="github-repository" class="level2">
<h2 class="anchored" data-anchor-id="github-repository">github repository</h2>
<p><a href="https://github.com/KR9268/-P-AutoPIforL001">관련 github레포</a></p>
</section>
<section id="세부내용-구현내용-사용한-언어패키지-등" class="level2">
<h2 class="anchored" data-anchor-id="세부내용-구현내용-사용한-언어패키지-등">[세부내용] 구현내용 &amp; 사용한 언어/패키지 등</h2>
<ol type="1">
<li><code>pywin32</code>로 아웃룩을 제어하여 조건에 맞는 pdf첨부 열람 등 진행<br>
<ul>
<li><code>selenium</code>은 chrome버전변경 등 영향이 커서 구현했다가 미사용</li>
</ul></li>
<li><code>xlwings</code>로 Excel로 저장해둔 별도 참고용 테이블을 열람
<ul>
<li>DRM암호화와 관계없이 파일을 읽을 수 있기 때문에 <code>xlwings</code>를 채택</li>
</ul></li>
<li><code>re</code>로 pdf의 문자열을 검색하여 필요한 내용을 저장</li>
<li><code>NERP_PI_LC</code>(주요 ERP관련 기능에 대해 제작한 파이썬 패키지)으로 시스템 등록 등을 진행</li>
<li><code>win11toast</code>로 모든 작업이 완료되면 알림</li>
<li>[삭제기능] <code>selenium</code>으로 PI제공자에게 자동회신도 했었으나, chrome업데이트 등 안정성 문제로 제외
<ul>
<li>아웃룩 등 smtp발송은 내부규정상 막혀있어 사용하지 않음</li>
</ul></li>
</ol>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>re</category>
  <category>xlwings</category>
  <category>pandas</category>
  <category>pdfminer</category>
  <guid>https://kr9268.github.io/posts_miniprojects/sel-py-autoPIforl001-20231215/</guid>
  <pubDate>Fri, 15 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[Python] Peak타임 대응용 수출계약서pdf tabula리딩</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts_miniprojects/sel-py-readPIAR-20231102/</link>
  <description><![CDATA[ 





<section id="추진배경" class="level2">
<h2 class="anchored" data-anchor-id="추진배경">추진배경</h2>
<ul>
<li>50~120건의 pdf서류를 아침제공 후 오전 내 입력하도록 요청받아 다른 업무가 불가능할 정도의 피크타임 발생
<ul>
<li>서류제공은 해외의 시차, 고객의 주문시점으로 인해 아침에 제공</li>
<li>생산을 하기위한 공장또한 다른 국가에 있고, 생산계획 마감시간 문제</li>
<li>각자의 이유(고객이 다양해 시점을 조정하기 어려움, 생산투입자원 조정을 위한 마감시간의 존재)로 조정 어려움</li>
</ul></li>
<li>문제 개선을 위해 아래의 포인트를 확인하였음
<ul>
<li>제공되는 pdf서류는 모두 1장의 동일한 양식이며, 드래그가 가능한 형태
<ul>
<li>드래그가 가능하다면 컴퓨터가 인식하는데도 무리가 없을테니 자동화 도입이 가능할 것이라는 판단</li>
</ul></li>
<li>입력작업은 엑셀VBA를 활용한 자동화Tool이 개발되어있음</li>
<li>시스템 글자수 제한으로 주문번호를 축약하는 별도작업 수행</li>
<li>주문번호별로 지불조건 등이 내부시스템의 코드로 매칭되어있는 별도의 관리시스템이 있음</li>
</ul></li>
<li>확인한 사항을 바탕으로 아래의 개선을 수행
<ul>
<li>관리시스템에 이미 있는 정확도가 높은 정보를 main으로 가져옴</li>
<li>시스템에서 확인할 수 없는 pdf의 정보들을 크롤링하여 필요한 정보만 식별</li>
<li>이미 개발되어있는 자동화입력Tool(엑셀VBA)에 연계가능한 형태로 데이터 가공</li>
</ul></li>
</ul>
</section>
<section id="효과" class="level2">
<h2 class="anchored" data-anchor-id="효과">효과</h2>
<ul>
<li>고객의 주문을 당기거나, 생산계획마감이 지연되거나, 담당자의 과도한 업무가중이 발생하지 않고 문제해결</li>
<li>이미 개발된 자원(엑셀VBA)에 연동하여 큰 시간을 들이지 않고 개발했으며 업무 투입시간 또한 감소
<ul>
<li>기존에는 4시간 이내의 투입시간이 있었지만, 이번 도입으로 5~10분 정도로 작업이 완료됨</li>
<li>기존대비 빠른 완수로 생산담당자 만족, 생산계획이 미뤄지지 않아 납기 등 제품수령 고객도 만족</li>
</ul></li>
</ul>
</section>
<section id="github-repository" class="level2">
<h2 class="anchored" data-anchor-id="github-repository">github repository</h2>
<p><a href="https://github.com/KR9268/-P-Read_PI_AR_only">관련 github레포</a></p>
</section>
<section id="세부내용-구현내용-사용한-언어패키지-등" class="level2">
<h2 class="anchored" data-anchor-id="세부내용-구현내용-사용한-언어패키지-등">[세부내용] 구현내용 &amp; 사용한 언어/패키지 등</h2>
<ol type="1">
<li><code>json</code>으로 파일을 저장할 경로정보 및 변환할 코드정보를 관리</li>
<li><code>xlwings</code>로 Excel로 저장해둔 기본정보를 열람
<ul>
<li>DRM암호화와 관계없이 파일을 읽을 수 있기 때문에 <code>xlwings</code>를 채택</li>
</ul></li>
<li><code>tabula</code>로 pdf를 표 형태로 읽어, 지정된 자리의 정보를 읽고 json형태로 저장</li>
<li>json형태로 저장된 정보를 <code>pandas</code> DataFrame으로 concat처리 후 저장</li>
<li>시스템 등록을 위해 사용중인 별도의 VBA Tool에 저장된 Excel을 넘기면 업무 완료</li>
</ol>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>tabula</category>
  <category>xlwings</category>
  <category>pathlib</category>
  <category>pandas</category>
  <guid>https://kr9268.github.io/posts_miniprojects/sel-py-readPIAR-20231102/</guid>
  <pubDate>Thu, 02 Nov 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
