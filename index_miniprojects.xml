<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Blog</title>
<link>https://kr9268.github.io/index_miniprojects.html</link>
<atom:link href="https://kr9268.github.io/index_miniprojects.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.4.554</generator>
<lastBuildDate>Wed, 06 Mar 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>[Python] ERP(SAP) 특정 메뉴의 주요정보 크롤링 &amp; 정리 Tool</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts_miniprojects/sel-py-crawl_sr-20240306/</link>
  <description><![CDATA[ 





<section id="추진배경" class="level2">
<h2 class="anchored" data-anchor-id="추진배경">추진배경</h2>
<ul>
<li>사용빈도가 높은 정보가 여러 탭에 나뉘어 있고, 이러한 정보들을 주문(SR)별로 각각 조회하는 불편함이 있음</li>
<li>유저 화면에서 보여줄 수 있는 행(row)이 4줄로 적고, 필요한 정보를 각각 복사하여 정리하는 불편함이 있음
<ul>
<li>한번에 많은 물품이 포함된 경우, 수십건의 같거나 다른 HSCODE들을 하나의 줄 글로 정리함</li>
<li>출발지와 도착지, 제품의 품명 등을 요약하여 요구받는 경우 작업시간이 소요됨</li>
</ul></li>
<li>각 탭 정보를 일괄 크롤링하고, 필요할 때 별도의 가공/복사작업 없이 바로 사용가능한 정보로 제공하도록 함
<ul>
<li>확인가능한 정보 : Sales Org, Plant(Code,Name), POL(출발지), POD(도착지), HSCODE, Description(물품명세)</li>
</ul></li>
</ul>
<blockquote class="blockquote">
<p><strong>[용어설명]</strong><br> <strong>SR</strong> : 하나의 기본 선적 단위, Shipping request<br> <strong>HSCODE</strong> : 해외로 물건을 보내기 위해 수출신고할 때, (의약품, 전자기기 등)물품 종류를 알 수 있는 제품 코드<br></p>
</blockquote>
</section>
<section id="효과" class="level2">
<h2 class="anchored" data-anchor-id="효과">효과</h2>
<ul>
<li>단건 또는 여러건의 주문(SR)에 대해 건당 1~2초 이내로 필요한 정보 수집</li>
<li>클립보드 복사가 가능한 텍스트, 엑셀형태로 제공하여 요구사항에 대해 즉시대응 가능</li>
</ul>
</section>
<section id="github-repository" class="level2">
<h2 class="anchored" data-anchor-id="github-repository">github repository</h2>
<p><a href="https://github.com/KR9268/-P-Crawl_data_from_SRDisplay">관련 github레포</a></p>
</section>
<section id="세부내용-구현내용-사용한-언어패키지-등" class="level2">
<h2 class="anchored" data-anchor-id="세부내용-구현내용-사용한-언어패키지-등">[세부내용] 구현내용 &amp; 사용한 언어/패키지 등</h2>
<ol type="1">
<li>단건 확인시, 코드셀에 붙여넣기 후 실행, 텍스트로 출력하며 <code>pandas</code> dataframe으로도 저장하여 필요시 엑셀도 제공</li>
<li>여러건 확인시, 엑셀 등에서 복사한 표를 코드셀에 바로 붙여넣도록 설계(자동 분할, <strong>편의성 고려</strong>함) 이후 작업은 단건 확인과 동일</li>
<li>필요시 엑셀로 저장 (<strong>기존 업무유형상 출력텍스트가 더 많이 활용될 것으로 보여 별도 기능으로 추가함</strong>)</li>
</ol>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>SAP Scripting</category>
  <guid>https://kr9268.github.io/posts_miniprojects/sel-py-crawl_sr-20240306/</guid>
  <pubDate>Wed, 06 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[Python] COO발급관리용 Tool</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts_miniprojects/sel-py-monitoringCOO-20240220/</link>
  <description><![CDATA[ 





<section id="추진배경" class="level2">
<h2 class="anchored" data-anchor-id="추진배경">추진배경</h2>
<ul>
<li>업무상 공용ID가 3개로 나뉘어있으나, 모두 공동인증서 로그인으로 접속에 불편함이 있음 (ID, PW, 공동인증서PW)
<ul>
<li>발급현황확인, 발급거절시 사유확인 후 보완 등 진행</li>
</ul></li>
<li>발급거절(오류통보) 사유확인시, 건별로 클릭하여 메뉴진입 필요</li>
<li>월마다 20여개 페이지의 표를 복사해서 가공하는 작업 수행중(데이터 Merge, 필터링 등)</li>
<li>각 포인트에 대해 대응할 수 있는 여러 기능을 탑재한 통합관리 Tool 제작
<ul>
<li>주기적으로 3개 ID로 접속하여, 주요정보를, ID에 대응되는 테이블에 db형태로 저장(공용PC)</li>
<li>유저는 streamlit으로 제작한 사이트에 접속해서 필요한 내용 확인/검색</li>
<li>희망하는 경우, 대표Invoice번호를 등록해두면 발급완료/발급거절(보완) 상황발생시 toast알림</li>
<li>월마다 가공하는 데이터에 대해서는, 별도버튼으로 db추출 후 가공완료한 데이터 제공</li>
<li>ID에 대응하는 로그인 버튼을 누르면 자동로그인 후 작업창을 띄워주는 기능 제공</li>
</ul></li>
</ul>
<blockquote class="blockquote">
<p><strong>[용어설명]</strong><br> <strong>COO</strong> : 원산지증명서, Country of Origin<br></p>
</blockquote>
</section>
<section id="효과" class="level2">
<h2 class="anchored" data-anchor-id="효과">효과</h2>
<ul>
<li>불편했던 로그인 작업 수요감소(필요 데이터의 streamlit 대시보드 제공, toast알림 제공), 로그인 편의성 증가</li>
<li>월 가공작업 삭제(sql query로 추출시 원하는 형태로 저장, streamlit에서 query문 조건변경 가능[날짜조건, 파일경로 등])</li>
</ul>
</section>
<section id="github-repository" class="level2">
<h2 class="anchored" data-anchor-id="github-repository">github repository</h2>
<p><a href="https://github.com/KR9268/-P-MonitoringCOO">관련 github레포</a></p>
</section>
<section id="세부내용-구현내용-사용한-언어패키지-등" class="level2">
<h2 class="anchored" data-anchor-id="세부내용-구현내용-사용한-언어패키지-등">[세부내용] 구현내용 &amp; 사용한 언어/패키지 등</h2>
<ol type="1">
<li>저장할 db는 <code>sqlite3</code>으로 테이블 생성, 컬럼지정 등을 수행함 (컬럼별 조건은 하단 참조)</li>
</ol>
<ul>
<li>접수번호 varchar PRIMARY KEY ,<br> → <strong>대표Invoice와 고민했는데, 100% 유일값이라 Primary로 지정</strong> 증명서종류 varchar, <br> 대표Invoice varchar(10),<br> 접수일시 datetime, <br> 처리상태 varchar, <br> Remark varchar</li>
</ul>
<ol start="2" type="1">
<li>각 기능은 아래의 파일로 나누어 개인/공용PC에서 실행</li>
</ol>
<ul>
<li><strong>MonitoringCOO(기본파일)</strong> : <code>streamlit</code>활용한 UI, json/pickle파일 읽기, 유저의 자동로그인, 월추출 데이터 저장 등
<ul>
<li>마지막 스크레핑 시점을 표기하여 얼마나 최신화된 데이터인지 유저에게 공유</li>
</ul></li>
<li><strong>MonitoringCOO_crawler</strong> : <code>selenium</code>으로 스크레핑, 스크레핑작업에 필요한 로그인 기능(<code>pyautogui</code>, <code>pywin32</code>로 이미지/키/윈도우 인식)
<ul>
<li>유저가 <strong>기본파일</strong>에서 로그인기능을 사용하는 경우, 이 파일에서 import해서 사용하고 <strong>코드는 여기서 통합관리</strong></li>
<li>스크레핑작업은 기본적으로 <strong>Scheduler</strong>파일에서 실행되지만, 필요시 이 파일을 실행하여 수동 스크레핑 (<strong>코드는 여기서 통합관리</strong>)</li>
</ul></li>
<li><strong>MonitoringCOO_push</strong> : <strong>기본파일</strong>에서 유저가 등록해둔 대표Invoice번호를 db에서 조회하여, <code>win11toast</code>로 알림 (처음에는 파이썬과 호환성/속도가 좋은 pickle/list로 관리하고자 했으나, 사용자ID등 추가정보 관리가 필요하여 json/dict로 관리)</li>
<li><strong>Scheduler</strong> : 스크레핑 주기/시간을 관리하는 파일. 주로 공용PC에서 작업 (9~17시 이후엔 데이터변경이 없으므로 이 시간대에만 작동하도록 설정, 서버설정 등을 고려하여 작업주기 반영 예정)</li>
</ul>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>win11toast</category>
  <category>sqlite3</category>
  <category>streamlit</category>
  <category>pandas</category>
  <category>selenium</category>
  <guid>https://kr9268.github.io/posts_miniprojects/sel-py-monitoringCOO-20240220/</guid>
  <pubDate>Tue, 20 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[Python] LocalL/C 관리용 Tool</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts_miniprojects/sel-py-local-20240122/</link>
  <description><![CDATA[ 





<section id="추진배경" class="level2">
<h2 class="anchored" data-anchor-id="추진배경">추진배경</h2>
<ul>
<li>모든 정보가 하나의 ERP에 있음에도, 기능 별로 메뉴가 구분되어 있어 <strong>비효율/불편함</strong>
<ul>
<li>주요기능 : L/C수신, L/C등록, 세금계산서 조회, 물품수령증 조회, 은행네고</li>
</ul></li>
<li>모든 정보가 전자화되어있으나, 각 서류의 내용(주문번호 등)이 일치하는지 <strong>눈으로 확인중</strong>
<ul>
<li>24자리 영문/숫자 혼합 등이 있으며, 틀리면 <strong>물품대금을 받지 못하므로 확인이 매우 중요함</strong></li>
</ul></li>
<li>각 서류, 행위마다 관련된 <strong>법 조항이 있어 준수해야 함</strong>
<ul>
<li>ex) XX서류가 발행되고 N일 내에 YY서류 제출</li>
</ul></li>
<li><strong>Dashboard</strong>형태로 구성하여 한번에 정보조회를 하고, 주요정보 일치여부 확인을 자동화</li>
</ul>
<blockquote class="blockquote">
<p><strong>[용어설명]</strong><br> <strong>L/C</strong> : <strong>물품주문서</strong>이자 <strong>대금청구시 사용될 은행계좌</strong>와 비슷한 역할<br> (Letter of Credit, 신용장)<br> <strong>물품수령증</strong> : 고객이 물건을 정상수령하였다는 서류, 대금청구에 사용할 수 있다<br> <strong>은행네고</strong> : 정상수령했다는 서류 등을 제출하여, 은행에 준비되어있는 물품대금을 받을 수 있다</p>
</blockquote>
</section>
<section id="효과" class="level2">
<h2 class="anchored" data-anchor-id="효과">효과</h2>
<ul>
<li>유저가 각 메뉴코드를 기억/저장할 필요없이 한번에 정보를 확인하여 소요시간 및 불편사항 제거</li>
<li>시스템 검증을 통한 Human error제거, 육안확인시간 감소 &amp; 물품대금 정상입수</li>
</ul>
</section>
<section id="github-repository" class="level2">
<h2 class="anchored" data-anchor-id="github-repository">github repository</h2>
<p><a href="https://github.com/KR9268/LocalLC_GUI">관련 github레포</a></p>
</section>
<section id="세부내용-구현내용-사용한-언어패키지-등" class="level2">
<h2 class="anchored" data-anchor-id="세부내용-구현내용-사용한-언어패키지-등">[세부내용] 구현내용 &amp; 사용한 언어/패키지 등</h2>
<ol type="1">
<li>정보가 파편화되어있어 하나의 Tool로써 확인하고 관리하기 위해서 <code>Streamlit</code> 기반으로 만듦</li>
</ol>
<ul>
<li>정보 저장 및 조회
<ul>
<li>내부정보는 ERP에서 가져와서 db에 적재(SAP Scripting활용을 위한 <code>win32com</code> 사용)</li>
<li>외부정보는 xml을 읽어서 Tag로 필요한 정보를 찾아 db에 적재(<code>Beautifulsoup</code>, <code>sqlite3</code> 사용) (외부정보라고는 하나, ERP에 저장되어있는 xml을 불러들여서 사용함)</li>
<li>데이터 저장 및 최초 쿼리는 SQL문으로 가져오나, join등 필요한 사후처리는 <code>pandas</code>를 활용</li>
</ul></li>
</ul>
<ol start="2" type="1">
<li>ERP에 직접 입력하는 등의 수작업을 자동으로 수행</li>
</ol>
<ul>
<li>자동화 기능
<ul>
<li>ERP 수주내역 등록(고정정보는 Master화, 변동정보는 Streamlit 텍스트박스 활용)</li>
<li>준수사항(법령 등)의 자동체크
<ul>
<li>특정 날짜 내에 완료해야한다던가, 일치해야하는 내용 등을 자동으로 검수</li>
<li>Streamlit의 table내 체크박스표기(True,False)를 활용하여 이상여부를 직관적으로 확인 가능</li>
<li>사용자가 어떤 행동을 해야하는지 참고사항란을 통해 지시(연장요청, 수령증발행요청 등)</li>
</ul></li>
<li>보유내역 및 관리대상(작업이 완료되지 않은 건)의 Filter 기능 제공(드롭박스로 선택)</li>
<li>ERP의 ID, PW를 입력해두어 작업 자동화 수행
<ul>
<li>개인PC에서만 사용하는 Tool이며, 표기는 ***과 같이 암호화 표기되어 관리</li>
</ul></li>
</ul></li>
</ul>
<ol start="3" type="1">
<li>설계시 고려사항, 특이사항, 참고사항</li>
</ol>
<ul>
<li>추가/삭제/변경 등 변동될 수 있는 정보는 Hardcoding이 아닌 db형태로 저장
<ul>
<li>오류 등 상황에 대비하여 실행시 기존 db를 복사해두는 로직 구현해두었으나, 자주 실행시 과생성되어 향후 수정 예정</li>
</ul></li>
<li>ERP관련 기능은 SAP메뉴(T-code)기준으로 함수화하여 관리</li>
<li>정보조회 관련 기능은 기능별 dataframe 생성/변환하는 방향으로 함수화하여 관리</li>
<li>ERP제어(SAP Scripting) <strong>주요기능을 구현한 ’NERP_PI_LC’는 자체제작한 것</strong>으로 정리하여 업로드 예정<strong>(pip 미등록)</strong></li>
<li>수익자기준 주요 EDI코드(참고용 기록) : 내국신용장(LOCADV), 물품수령증(LOCRCT)
<ul>
<li>BeautifulSoup를 위해 정리해둔 딕셔너리(locrct_id, locadv_id)는 표준규격일 것으로 예상하여 재사용가능할 것으로 예상</li>
</ul></li>
</ul>
<ol start="4" type="1">
<li>Local L/C에 대한 세부정보 참고가능한 사이트</li>
</ol>
<p><a href="https://ulocallc.utradehub.or.kr/LocalCredit/index.jsp?sso=ok">KTNET - 이용안내 - 상세업무절차</a></p>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>SAP Scripting</category>
  <category>Streamlit</category>
  <category>sqlite3</category>
  <category>BeautifulSoup</category>
  <guid>https://kr9268.github.io/posts_miniprojects/sel-py-local-20240122/</guid>
  <pubDate>Mon, 22 Jan 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[Python] 아웃룩 메일열람 &amp; pdf regex리딩 &amp; 시스템 자동등록</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts_miniprojects/sel-py-autoPIforl001-20231215/</link>
  <description><![CDATA[ 





<section id="추진배경" class="level2">
<h2 class="anchored" data-anchor-id="추진배경">추진배경</h2>
<ul>
<li>제공받는 PI서류에, 시스템 등록에 필요한 일부가 늘 빠져있으며 별도 테이블을 참고하여 대응중</li>
<li>기계가 인식할 수 있는 pdf로 제공되고 있으나, 마우스로 드래그하여 복사/붙여넣기를 반복</li>
<li>제공하는 담당자의 내부규정때문에, 1메일:1파일로 나누어 여러 건을 별도메일로 제공중</li>
<li>향후 분쟁대비, 또는 법적인 사유로 pdf의 이름을 변경하여 별도로 저장하는 작업중</li>
<li>납품(수출)시 사용될 중요한 정보로 사용되며, 오류발생시 다른 국가로의 오배송, 수입절차 문제 등 발생</li>
<li><strong>각 포인트에 대응할 수 있도록 아래의 형태로 개발 추진</strong>
<ul>
<li>아웃룩으로 수신된 메일의 첨부를 열어 필요한 각 항목을 regex로 리딩</li>
<li>리딩된 정보 중 최소 확인사항을 코드가 검증 ex) 한국 수출인데 홍콩물품에 대해 보험을 드는 등 논리오류 검증</li>
<li>시스템 등록 후 파일명 변경 및 아카이브에 자동 저장</li>
<li>백그라운드에서 실행되며, 작업이 완료되면 윈도우 toast메시지로 알림</li>
</ul></li>
</ul>
<blockquote class="blockquote">
<p><strong>[용어설명]</strong><br> <strong>PI</strong> : 수출납품계약서로 발주자의 양식 등을 사용함, Proforma Invoice<br> <strong>regex</strong> : 정규표현식, 특정한 규칙을 통해 문자를 검색/편집하는데 사용</p>
</blockquote>
</section>
<section id="효과" class="level2">
<h2 class="anchored" data-anchor-id="효과">효과</h2>
<ul>
<li><code>건별 메일열람 - 논리오류 검증 - 시스템 등록(복사/붙여넣기, 별도테이블 참고) - 파일명 변경 및 저장</code> 등 프로세스 제거</li>
<li>Human error 제거로 인한 다른 국가로의 오배송(재운송에 필요한 각종 비용), 수입절차(법적이슈) 등 문제예방</li>
</ul>
</section>
<section id="github-repository" class="level2">
<h2 class="anchored" data-anchor-id="github-repository">github repository</h2>
<p><a href="https://github.com/KR9268/-P-AutoPIforL001">관련 github레포</a></p>
</section>
<section id="세부내용-구현내용-사용한-언어패키지-등" class="level2">
<h2 class="anchored" data-anchor-id="세부내용-구현내용-사용한-언어패키지-등">[세부내용] 구현내용 &amp; 사용한 언어/패키지 등</h2>
<ol type="1">
<li><code>pywin32</code>로 아웃룩을 제어하여 조건에 맞는 pdf첨부 열람 등 진행<br>
<ul>
<li><code>selenium</code>은 chrome버전변경 등 영향이 커서 구현했다가 미사용</li>
</ul></li>
<li><code>xlwings</code>로 Excel로 저장해둔 별도 참고용 테이블을 열람
<ul>
<li>DRM암호화와 관계없이 파일을 읽을 수 있기 때문에 <code>xlwings</code>를 채택</li>
</ul></li>
<li><code>re</code>로 pdf의 문자열을 검색하여 필요한 내용을 저장</li>
<li><code>NERP_PI_LC</code>(주요 ERP관련 기능에 대해 제작한 파이썬 패키지)으로 시스템 등록 등을 진행</li>
<li><code>win11toast</code>로 모든 작업이 완료되면 알림</li>
<li>[삭제기능] <code>selenium</code>으로 PI제공자에게 자동회신도 했었으나, chrome업데이트 등 안정성 문제로 제외
<ul>
<li>아웃룩 등 smtp발송은 내부규정상 막혀있어 사용하지 않음</li>
</ul></li>
</ol>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>re</category>
  <category>xlwings</category>
  <category>pandas</category>
  <category>pdfminer</category>
  <guid>https://kr9268.github.io/posts_miniprojects/sel-py-autoPIforl001-20231215/</guid>
  <pubDate>Fri, 15 Dec 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>[Python] Peak타임 대응용 수출계약서pdf tabula리딩</title>
  <dc:creator>Kibok Park</dc:creator>
  <link>https://kr9268.github.io/posts_miniprojects/sel-py-readPIAR-20231102/</link>
  <description><![CDATA[ 





<section id="추진배경" class="level2">
<h2 class="anchored" data-anchor-id="추진배경">추진배경</h2>
<ul>
<li>50~120건의 서류를 아침제공 후 오전 내 입력하도록 요청받아 다른 업무가 불가능할 정도의 피크타임 발생
<ul>
<li>시차, 주문접수, 생산계획 등이 맞물려 조정이 불가능한 상황</li>
</ul></li>
<li>동일 양식의 내용이 다른 서류 50~120건이며, 일부 내용은 별도의 수주시스템에 시스템화되어 올려져 있음</li>
<li>시스템 제약으로 글자수 제한이 있어, 주문번호를 줄이는 등 별도의 작업 수행</li>
<li>정확도가 높은 수주시스템의 내용(엑셀로 저장)을 기반으로, pdf로 보완하여 자동화 추진</li>
</ul>
</section>
<section id="효과" class="level2">
<h2 class="anchored" data-anchor-id="효과">효과</h2>
<ul>
<li>Tool활용을 위한 기초작업(엑셀 다운로드, pdf저장)에 5~10분 정도 소요되어, 기존 작업시간(~4시간)대비 투입시간 감소</li>
<li>피크타임 감소 및 생산계획 마감시간 단축</li>
</ul>
</section>
<section id="github-repository" class="level2">
<h2 class="anchored" data-anchor-id="github-repository">github repository</h2>
<p><a href="https://github.com/KR9268/-P-Read_PI_AR_only">관련 github레포</a></p>
</section>
<section id="세부내용-구현내용-사용한-언어패키지-등" class="level2">
<h2 class="anchored" data-anchor-id="세부내용-구현내용-사용한-언어패키지-등">[세부내용] 구현내용 &amp; 사용한 언어/패키지 등</h2>
<ol type="1">
<li><code>json</code>으로 파일을 저장할 경로정보 및 변환할 코드정보를 관리</li>
<li><code>xlwings</code>로 Excel로 저장해둔 기본정보를 열람
<ul>
<li>DRM암호화와 관계없이 파일을 읽을 수 있기 때문에 <code>xlwings</code>를 채택</li>
</ul></li>
<li><code>tabula</code>로 pdf를 표 형태로 읽어, 지정된 자리의 정보를 읽고 json형태로 저장</li>
<li>json형태로 저장된 정보를 <code>pandas</code> DataFrame으로 concat처리 후 저장</li>
<li>시스템 등록을 위해 사용중인 별도의 VBA Tool에 저장된 Excel을 넘기면 업무 완료</li>
</ol>


</section>

<p><br><strong>Copyright © 2024 Kibok Park All rights reserved.</strong><br></p> ]]></description>
  <category>Python</category>
  <category>tabula</category>
  <category>xlwings</category>
  <category>pathlib</category>
  <category>pandas</category>
  <guid>https://kr9268.github.io/posts_miniprojects/sel-py-readPIAR-20231102/</guid>
  <pubDate>Thu, 02 Nov 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
